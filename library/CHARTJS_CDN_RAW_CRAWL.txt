# Installation # npm  (opens new window)  (opens new window) npm install chart.js
# CDN # CDNJS  (opens new window) Chart.js built files are available on CDNJS (opens new window): https://cdnjs.com/libraries/Chart.js (opens new window) # jsDelivr  (opens new window)  (opens new window) Chart.js built files are also available through jsDelivr (opens new window): https://www.jsdelivr.com/package/npm/chart.js?path=dist (opens new window) # GitHub  (opens new window) You can download the latest version of Chart.js on GitHub (opens new window). If you download or clone the repository, you must build Chart.js to generate the dist files. Chart.js no longer comes with prebuilt release versions, so an alternative option to downloading the repo is strongly advised.  Last Updated: 4/15/2025, 1:19:05 PM 
      ←
      
        Getting Started
       
        Integration
      
      →\n\n\n\n# Chart.js Welcome to Chart.js! Get started with Chart.js — best if you're new to Chart.js Migrate from Chart.js v3 or Chart.js v2 Join the community on Discord (opens new window) and Twitter (opens new window) Post a question tagged with chart.js on Stack Overflow (opens new window) Contribute to Chart.js # Why Chart.js Among many charting libraries (opens new window) for JavaScript application developers, Chart.js is currently the most popular one according to GitHub stars (opens new window) (~60,000) and npm downloads (opens new window) (~2,400,000 weekly). Chart.js was created and announced (opens new window) in 2013 but has come a long way since then. It’s open-source, licensed under the very permissive MIT license (opens new window), and maintained by an active community. # Features Chart.js provides a set of frequently used chart types, plugins, and customization options. In addition to a reasonable set of built-in chart types, you can use additional community-maintained chart types (opens new window). On top of that, it’s possible to combine several chart types into a mixed chart (essentially, blending multiple chart types into one on the same canvas). Chart.js is highly customizable with custom plugins (opens new window) to create annotations, zoom, or drag-and-drop functionalities to name a few things. # Defaults Chart.js comes with a sound default configuration, making it very easy to start with and get an app that is ready for production. Chances are you will get a very appealing chart even if you don’t specify any options at all. For instance, Chart.js has animations turned on by default, so you can instantly bring attention to the story you’re telling with the data. # Integrations Chart.js comes with built-in TypeScript typings and is compatible with all popular JavaScript frameworks (opens new window) including React (opens new window), Vue (opens new window), Svelte (opens new window), and Angular (opens new window). You can use Chart.js directly or leverage well-maintained wrapper packages that allow for a more native integration with your frameworks of choice. # Developer experience Chart.js has very thorough documentation (yes, you're reading it), API reference, and examples. Maintainers and community members eagerly engage in conversations on Discord (opens new window), GitHub Discussions (opens new window), and Stack Overflow (opens new window) where more than 11,000 questions are tagged with chart.js. # Canvas rendering Chart.js renders chart elements on an HTML5 canvas unlike several others, mostly D3.js-based, charting libraries that render as SVG. Canvas rendering makes Chart.js very performant, especially for large datasets and complex visualizations that would otherwise require thousands of SVG nodes in the DOM tree. At the same time, canvas rendering disallows CSS styling, so you will have to use built-in options for that, or create a custom plugin or chart type to render everything to your liking. # Performance Chart.js is very well suited for large datasets. Such datasets can be efficiently ingested using the internal format, so you can skip data parsing and normalization. Alternatively, data decimation can be configured to sample the dataset and reduce its size before rendering. In the end, the canvas rendering that Chart.js uses reduces the toll on your DOM tree in comparison to SVG rendering. Also, tree-shaking support allows you to include minimal parts of Chart.js code in your bundle, reducing bundle size and page load time. # Community Chart.js is actively developed (opens new window) and maintained by the community. With minor releases (opens new window) on an approximately bi-monthly basis and major releases with breaking changes every couple of years, Chart.js keeps the balance between adding new features and making it a hassle to keep up with them.  Last Updated: 4/15/2025, 1:19:05 PM  
        Getting Started
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n\n\n# Getting Started Let's get started with Chart.js! Follow a step-by-step guide to get up to speed with Chart.js Install Chart.js from npm or a CDN Integrate Chart.js with bundlers, loaders, and front-end frameworks Use Chart.js from Node.js Alternatively, see the example below or check samples. # Create a Chart In this example, we create a bar chart for a single dataset and render it on an HTML page. Add this code snippet to your page: <div>
  <canvas id="myChart"></canvas>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  const ctx = document.getElementById('myChart');
  new Chart(ctx, {
    type: 'bar',
    data: {
      labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
      datasets: [{
        label: '# of Votes',
        data: [12, 19, 3, 5, 2, 3],
        borderWidth: 1
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });
</script>
You should get a chart like this:  Let's break this code down. First, we need to have a canvas in our page. It's recommended to give the chart its own container for responsiveness. <div>
  <canvas id="myChart"></canvas>
</div>
Now that we have a canvas, we can include Chart.js from a CDN. <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
Finally, we can create a chart. We add a script that acquires the myChart canvas element and instantiates new Chart with desired configuration: bar chart type, labels, data points, and options. <script>
  const ctx = document.getElementById('myChart');
  new Chart(ctx, {
    type: 'bar',
    data: {
      labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
      datasets: [{
        label: '# of Votes',
        data: [12, 19, 3, 5, 2, 3],
        borderWidth: 1
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });
</script>
You can see all the ways to use Chart.js in the step-by-step guide.  Last Updated: 4/15/2025, 1:19:05 PM 
      ←
      
        Chart.js
       
        Installation
      
      →\n\n\n\n# Installation # npm  (opens new window)  (opens new window) npm install chart.js
# CDN # CDNJS  (opens new window) Chart.js built files are available on CDNJS (opens new window): https://cdnjs.com/libraries/Chart.js (opens new window) # jsDelivr  (opens new window)  (opens new window) Chart.js built files are also available through jsDelivr (opens new window): https://www.jsdelivr.com/package/npm/chart.js?path=dist (opens new window) # GitHub  (opens new window) You can download the latest version of Chart.js on GitHub (opens new window). If you download or clone the repository, you must build Chart.js to generate the dist files. Chart.js no longer comes with prebuilt release versions, so an alternative option to downloading the repo is strongly advised.  Last Updated: 4/15/2025, 1:19:05 PM 
      ←
      
        Getting Started
       
        Integration
      
      →\n\n\n\n# Integration Chart.js can be integrated with plain JavaScript or with different module loaders. The examples below show how to load Chart.js in different systems. If you're using a front-end framework (e.g., React, Angular, or Vue), please see available integrations (opens new window). # Script Tag <script src="path/to/chartjs/dist/chart.umd.js"></script>
<script>
    const myChart = new Chart(ctx, {...});
</script>
# Bundlers (Webpack, Rollup, etc.) Chart.js is tree-shakeable, so it is necessary to import and register the controllers, elements, scales and plugins you are going to use. # Quick start If you don't care about the bundle size, you can use the auto package ensuring all features are available: import Chart from 'chart.js/auto';
# Bundle optimization When optimizing the bundle, you need to import and register the components that are needed in your application. The options are categorized into controllers, elements, plugins, scales. You can pick and choose many of these, e.g. if you are not going to use tooltips, don't import and register the Tooltip plugin. But each type of chart has its own bare-minimum requirements (typically the type's controller, element(s) used by that controller and scale(s)): Bar chart
BarController BarElement Default scales: CategoryScale (x), LinearScale (y) Bubble chart
BubbleController PointElement Default scales: LinearScale (x/y) Doughnut chart
DoughnutController ArcElement Not using scales Line chart
LineController LineElement PointElement Default scales: CategoryScale (x), LinearScale (y) Pie chart
PieController ArcElement Not using scales PolarArea chart
PolarAreaController ArcElement Default scale: RadialLinearScale (r) Radar chart
RadarController LineElement PointElement Default scale: RadialLinearScale (r) Scatter chart
ScatterController PointElement Default scales: LinearScale (x/y) Available plugins: Decimation Filler - used to fill area described by LineElement, see Area charts Legend SubTitle Title Tooltip Available scales: Cartesian scales (x/y) CategoryScale LinearScale LogarithmicScale TimeScale TimeSeriesScale Radial scales (r) RadialLinearScale # Helper functions If you want to use the helper functions, you will need to import these separately from the helpers package and use them as stand-alone functions. Example of Converting Events to Data Values using bundlers. import Chart from 'chart.js/auto';
import { getRelativePosition } from 'chart.js/helpers';
const chart = new Chart(ctx, {
  type: 'line',
  data: data,
  options: {
    onClick: (e) => {
      const canvasPosition = getRelativePosition(e, chart);
      // Substitute the appropriate scale IDs
      const dataX = chart.scales.x.getValueForPixel(canvasPosition.x);
      const dataY = chart.scales.y.getValueForPixel(canvasPosition.y);
    }
  }
});
# CommonJS Because Chart.js is an ESM library, in CommonJS modules you should use a dynamic import: const { Chart } = await import('chart.js');
# RequireJS Important: RequireJS can load only AMD modules (opens new window), so be sure to require one of the UMD builds instead (i.e. dist/chart.umd.js). require(['path/to/chartjs/dist/chart.umd.js'], function(Chart){
    const myChart = new Chart(ctx, {...});
});
Note In order to use the time scale, you need to make sure one of the available date adapters (opens new window) and corresponding date library are fully loaded after requiring Chart.js. For this you can use nested requires: require(['chartjs'], function(Chart) {
    require(['moment'], function() {
        require(['chartjs-adapter-moment'], function() {
            new Chart(ctx, {...});
        });
    });
});
  Last Updated: 4/15/2025, 1:19:05 PM 
      ←
      
        Installation
       
        Step-by-step guide
      
      →\n\n\n\n# Step-by-step guide Follow this guide to get familiar with all major concepts of Chart.js: chart types and elements, datasets, customization, plugins, components, and tree-shaking. Don't hesitate to follow the links in the text. We'll build a Chart.js data visualization with a couple of charts from scratch:  # Build a new application with Chart.js In a new folder, create the package.json file with the following contents: {
  "name": "chartjs-example",
  "version": "1.0.0",
  "license": "MIT",
  "scripts": {
    "dev": "parcel src/index.html",
    "build": "parcel build src/index.html"
  },
  "devDependencies": {
    "parcel": "^2.6.2"
  },
  "dependencies": {
    "@cubejs-client/core": "^0.31.0",
    "chart.js": "^4.0.0"
  }
}
Modern front-end applications often use JavaScript module bundlers, so we’ve picked Parcel (opens new window) as a nice zero-configuration build tool. We’re also installing Chart.js v4 and a JavaScript client for Cube (opens new window), an open-source API for data apps we’ll use to fetch real-world data (more on that later). Run npm install, yarn install, or pnpm install to install the dependencies, then create the src folder. Inside that folder, we’ll need a very simple index.html file: <!doctype html>
<html lang="en">
  <head>
    <title>Chart.js example</title>
  </head>
  <body>
    <!-- <div style="width: 500px;"><canvas id="dimensions"></canvas></div><br/> -->
    <div style="width: 800px;"><canvas id="acquisitions"></canvas></div>
    <!-- <script type="module" src="dimensions.js"></script> -->
    <script type="module" src="acquisitions.js"></script>
  </body>
</html>
As you can see, Chart.js requires minimal markup: a canvas tag with an id by which we’ll reference the chart later. By default, Chart.js charts are responsive and take the whole enclosing container. So, we set the width of the div to control chart width. Lastly, let’s create the src/acquisitions.js file with the following contents: import Chart from 'chart.js/auto'
(async function() {
  const data = [
    { year: 2010, count: 10 },
    { year: 2011, count: 20 },
    { year: 2012, count: 15 },
    { year: 2013, count: 25 },
    { year: 2014, count: 22 },
    { year: 2015, count: 30 },
    { year: 2016, count: 28 },
  ];
  new Chart(
    document.getElementById('acquisitions'),
    {
      type: 'bar',
      data: {
        labels: data.map(row => row.year),
        datasets: [
          {
            label: 'Acquisitions by year',
            data: data.map(row => row.count)
          }
        ]
      }
    }
  );
})();
Let’s walk through this code: We import Chart, the main Chart.js class, from the special chart.js/auto path. It loads all available Chart.js components (which is very convenient) but disallows tree-shaking. We’ll address that later. We instantiate a new Chart instance and provide two arguments: the canvas element where the chart would be rendered and the options object. We just need to provide a chart type (bar) and provide data which consists of labels (often, numeric or textual descriptions of data points) and an array of datasets (Chart.js supports multiple datasets for most chart types). Each dataset is designated with a label and contains an array of data points. For now, we only have a few entries of dummy data. So, we extract year and count properties to produce the arrays of labels and data points within the only dataset. Time to run the example with npm run dev, yarn dev, or pnpm dev and navigate to localhost:1234 (opens new window) in your web browser:  With just a few lines of code, we’ve got a chart with a lot of features: a legend, grid lines, ticks, and tooltips shown on hover. Refresh the web page a few times to see that the chart is also animated. Try clicking on the “Acquisitions by year” label to see that you’re also able to toggle datasets visibility (especially useful when you have multiple datasets). # Simple customizations Let’s see how Chart.js charts can be customized. First, let’s turn off the animations so the chart appears instantly. Second, let’s hide the legend and tooltips since we have only one dataset and pretty trivial data. Replace the new Chart(...); invocation in src/acquisitions.js with the following snippet:   new Chart(
    document.getElementById('acquisitions'),
    {
      type: 'bar',
      options: {
        animation: false,
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            enabled: false
          }
        }
      },
      data: {
        labels: data.map(row => row.year),
        datasets: [
          {
            label: 'Acquisitions by year',
            data: data.map(row => row.count)
          }
        ]
      }
    }
  );
As you can see, we’ve added the options property to the second argument—that’s how you can specify all kinds of customization options for Chart.js. The animation is disabled with a boolean flag provided via animation. Most chart-wide options (e.g., responsiveness or device pixel ratio) are configured like this. The legend and tooltips are hidden with boolean flags provided under the respective sections in plugins. Note that some of Chart.js features are extracted into plugins: self-contained, separate pieces of code. A few of them are available as a part of Chart.js distribution (opens new window), other plugins are maintained independently and can be located in the awesome list (opens new window) of plugins, framework integrations, and additional chart types. You should be able to see the updated minimalistic chart in your browser. # Real-world data With hardcoded, limited-size, unrealistic data, it’s hard to show the full potential of Chart.js. Let’s quickly connect to a data API to make our example application closer to a production use case. Let’s create the src/api.js file with the following contents: import { CubejsApi } from '@cubejs-client/core';
const apiUrl = 'https://heavy-lansford.gcp-us-central1.cubecloudapp.dev/cubejs-api/v1';
const cubeToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjEwMDAwMDAwMDAsImV4cCI6NTAwMDAwMDAwMH0.OHZOpOBVKr-sCwn8sbZ5UFsqI3uCs6e4omT7P6WVMFw';
const cubeApi = new CubejsApi(cubeToken, { apiUrl });
export async function getAquisitionsByYear() {
  const acquisitionsByYearQuery = {
    dimensions: [
      'Artworks.yearAcquired',
    ],
    measures: [
      'Artworks.count'
    ],
    filters: [ {
      member: 'Artworks.yearAcquired',
      operator: 'set'
    } ],
    order: {
      'Artworks.yearAcquired': 'asc'
    }
  };
  const resultSet = await cubeApi.load(acquisitionsByYearQuery);
  return resultSet.tablePivot().map(row => ({
    year: parseInt(row['Artworks.yearAcquired']),
    count: parseInt(row['Artworks.count'])
  }));
}
export async function getDimensions() {
  const dimensionsQuery = {
    dimensions: [
      'Artworks.widthCm',
      'Artworks.heightCm'
    ],
    measures: [
      'Artworks.count'
    ],
    filters: [
      {
        member: 'Artworks.classification',
        operator: 'equals',
        values: [ 'Painting' ]
      },
      {
        member: 'Artworks.widthCm',
        operator: 'set'
      },
      {
        member: 'Artworks.widthCm',
        operator: 'lt',
        values: [ '500' ]
      },
      {
        member: 'Artworks.heightCm',
        operator: 'set'
      },
      {
        member: 'Artworks.heightCm',
        operator: 'lt',
        values: [ '500' ]
      }
    ]
  };
  const resultSet = await cubeApi.load(dimensionsQuery);
  return resultSet.tablePivot().map(row => ({
    width: parseInt(row['Artworks.widthCm']),
    height: parseInt(row['Artworks.heightCm']),
    count: parseInt(row['Artworks.count'])
  }));
}
Let’s see what’s happening there: We import the JavaScript client library for Cube (opens new window), an open-source API for data apps, configure it with the API URL (apiUrl) and the authentication token (cubeToken), and finally instantiate the client (cubeApi). Cube API is hosted in Cube Cloud (opens new window) and connected to a database with a public dataset (opens new window) of ~140,000 records representing all of the artworks in the collection of the Museum of Modern Art (opens new window) in New York, USA. Certainly, a more real-world dataset than what we’ve got now. We define a couple of asynchronous functions to fetch data from the API: getAquisitionsByYear and getDimensions. The first one returns the number of artworks by the year of acquisition, the other returns the number of artworks for every width-height pair (we’ll need it for another chart). Let’s take a look at getAquisitionsByYear. First, we create a declarative, JSON-based query in the acquisitionsByYearQuery variable. As you can see, we specify that for every yearAcquired we’d like to get the count of artworks; yearAcquired has to be set (i.e., not undefined); the result set would be sorted by yearAcquired in the ascending order. Second, we fetch the resultSet by calling cubeApi.load and map it to an array of objects with desired year and count properties. Now, let’s deliver the real-world data to our chart. Please apply a couple of changes to src/acquisitions.js: add an import and replace the definition of the data variable. import { getAquisitionsByYear } from './api'
// ...
const data = await getAquisitionsByYear();
Done! Now, our chart with real-world data looks like this. Looks like something interesting happened in 1964, 1968, and 2008!  We’re done with the bar chart. Let’s try another Chart.js chart type. # Further customizations Chart.js supports many common chart types. For instance, Bubble chart allows to display three dimensions of data at the same time: locations on x and y axes represent two dimensions, and the third dimension is represented by the size of the individual bubbles. To create the chart, stop the already running application, then go to src/index.html, and uncomment the following two lines: <div style="width: 500px;"><canvas id="dimensions"></canvas></div><br/>
<script type="module" src="dimensions.js"></script>
Then, create the src/dimensions.js file with the following contents: import Chart from 'chart.js/auto'
import { getDimensions } from './api'
(async function() {
  const data = await getDimensions();
  new Chart(
    document.getElementById('dimensions'),
    {
      type: 'bubble',
      data: {
        labels: data.map(x => x.year),
        datasets: [
          {
            label: 'Dimensions',
            data: data.map(row => ({
              x: row.width,
              y: row.height,
              r: row.count
            }))
          }
        ]
      }
    }
  );
})();
Probably, everything is pretty straightforward there: we get data from the API and render a new chart with the bubble type, passing three dimensions of data as x, y, and r (radius) properties. Now, reset caches with rm -rf .parcel-cache and start the application again with npm run dev, yarn dev, or pnpm dev. We can review the new chart now:  Well, it doesn’t look pretty. First of all, the chart is not square. Artworks’ width and height are equally important so we’d like to make the chart width equal to its height as well. By default, Chart.js charts have the aspect ratio of either 1 (for all radial charts, e.g., a doughnut chart) or 2 (for all the rest). Let’s modify the aspect ratio for our chart: // ...
	new Chart(
    document.getElementById('dimensions'),
    {
      type: 'bubble',
      options: {
        aspectRatio: 1,
      },
// ...
Looks much better now:  However, it’s still not ideal. The horizontal axis spans from 0 to 500 while the vertical axis spans from 0 to 450. By default, Chart.js automatically adjusts the range (minimum and maximum values) of the axes to the values provided in the dataset, so the chart “fits” your data. Apparently, MoMa collection doesn’t have artworks in the range of 450 to 500 cm in height. Let’s modify the axes configuration for our chart to account for that: // ...
  new Chart(
    document.getElementById('dimensions'),
    {
      type: 'bubble',
      options: {
        aspectRatio: 1,
        scales: {
          x: {
            max: 500
          },
          y: {
            max: 500
          }
        }
      },
// ...
Great! Behold the updated chart:  However, there’s one more nitpick: what are these numbers? It’s not very obvious that the units are centimetres. Let’s apply a custom tick format to both axes to make things clear. We’ll provide a callback function that would be called to format each tick value. Here’s the updated axes configuration: // ...
  new Chart(
    document.getElementById('dimensions'),
    {
      type: 'bubble',
      options: {
        aspectRatio: 1,
        scales: {
          x: {
            max: 500,
            ticks: {
              callback: value => `${value / 100} m`
            }
          },
          y: {
            max: 500,
            ticks: {
              callback: value => `${value / 100} m`
            }
          }
        }
      },
// ...
Perfect, now we have proper units on both axes:  # Multiple datasets Chart.js plots each dataset independently and allows to apply custom styles to them. Take a look at the chart: there’s a visible “line” of bubbles with equal x and y coordinates representing square artworks. It would be cool to put these bubbles in their own dataset and paint them differently. Also, we can separate “taller” artworks from “wider” ones and paint them differently, too. Here’s how we can do that. Replace the datasets with the following code: // ...
        datasets: [
          {
            label: 'width = height',
            data: data
              .filter(row => row.width === row.height)
              .map(row => ({
                x: row.width,
                y: row.height,
                r: row.count
              }))
          },
          {
            label: 'width > height',
            data: data
              .filter(row => row.width > row.height)
              .map(row => ({
                x: row.width,
                y: row.height,
                r: row.count
              }))
          },
          {
            label: 'width < height',
            data: data
              .filter(row => row.width < row.height)
              .map(row => ({
                x: row.width,
                y: row.height,
                r: row.count
              }))
          }
        ]
// ..
As you can see, we define three datasets with different labels. Each dataset gets its own slice of data extracted with filter. Now they are visually distinct and, as you already know, you can toggle their visibility independently.  Here we rely on the default color palette. However, keep in mind every chart type supports a lot of dataset options that you can feel free to customize. # Plugins Another—and very powerful!—way to customize Chart.js charts is to use plugins. You can find some in the plugin directory (opens new window) or create your own, ad-hoc ones. In Chart.js ecosystem, it’s idiomatic and expected to fine tune charts with plugins. For example, you can customize canvas background or add a border to it with simple ad-hoc plugins. Let’s try the latter. Plugins have an extensive API but, in a nutshell, a plugin is defined as an object with a name and one or more callback functions defined in the extension points. Insert the following snippet before and in place of the new Chart(...); invocation in src/dimensions.js: // ...
  const chartAreaBorder = {
    id: 'chartAreaBorder',
    beforeDraw(chart, args, options) {
      const { ctx, chartArea: { left, top, width, height } } = chart;
      ctx.save();
      ctx.strokeStyle = options.borderColor;
      ctx.lineWidth = options.borderWidth;
      ctx.setLineDash(options.borderDash || []);
      ctx.lineDashOffset = options.borderDashOffset;
      ctx.strokeRect(left, top, width, height);
      ctx.restore();
    }
  };
  new Chart(
    document.getElementById('dimensions'),
    {
      type: 'bubble',
      plugins: [ chartAreaBorder ],
      options: {
        plugins: {
          chartAreaBorder: {
            borderColor: 'red',
            borderWidth: 2,
            borderDash: [ 5, 5 ],
            borderDashOffset: 2,
          }
        },
        aspectRatio: 1,
// ...
As you can see, in this chartAreaBorder plugin, we acquire the canvas context, save its current state, apply styles, draw a rectangular shape around the chart area, and restore the canvas state. We’re also passing the plugin in plugins so it’s only applied to this particular chart. We also pass the plugin options in options.plugins.chartAreaBorder; we could surely hardcode them in the plugin source code but it’s much more reusable this way. Our bubble chart looks fancier now:  # Tree-shaking In production, we strive to ship as little code as possible, so the end users can load our data applications faster and have better experience. For that, we’ll need to apply tree-shaking (opens new window) which is fancy term for removing unused code from the JavaScript bundle. Chart.js fully supports tree-shaking with its component design. You can register all Chart.js components at once (which is convenient when you’re prototyping) and get them bundled with your application. Or, you can register only necessary components and get a minimal bundle, much less in size. Let’s inspect our example application. What’s the bundle size? You can stop the application and run npm run build, or yarn build, or pnpm build. In a few moments, you’ll get something like this: % yarn build
yarn run v1.22.17
$ parcel build src/index.html
✨ Built in 88ms
dist/index.html              381 B   164ms
dist/index.74a47636.js   265.48 KB   1.25s
dist/index.ba0c2e17.js       881 B    63ms
✨ Done in 0.51s.
We can see that Chart.js and other dependencies were bundled together in a single 265 KB file. To reduce the bundle size, we’ll need to apply a couple of changes to src/acquisitions.js and src/dimensions.js. First, we’ll need to remove the following import statement from both files: import Chart from 'chart.js/auto'. Instead, let’s load only necessary components and “register” them with Chart.js using Chart.register(...). Here’s what we need in src/acquisitions.js: import {
  Chart,
  Colors,
  BarController,
  CategoryScale,
  LinearScale,
  BarElement,
  Legend
} from 'chart.js'
Chart.register(
  Colors,
  BarController,
  BarElement,
  CategoryScale,
  LinearScale,
  Legend
);
And here’s the snippet for src/dimensions.js: import {
  Chart,
  Colors,
  BubbleController,
  CategoryScale,
  LinearScale,
  PointElement,
  Legend
} from 'chart.js'
Chart.register(
  Colors,
  BubbleController,
  PointElement,
  CategoryScale,
  LinearScale,
  Legend
);
You can see that, in addition to the Chart class, we’re also loading a controller for the chart type, scales, and other chart elements (e.g., bars or points). You can look all available components up in the documentation. Alternatively, you can follow Chart.js advice in the console. For example, if you forget to import BarController for your bar chart, you’ll see the following message in the browser console: Unhandled Promise Rejection: Error: "bar" is not a registered controller.
Remember to carefully check for imports from chart.js/auto when preparing your application for production. It takes only one import like this to effectively disable tree-shaking. Now, let’s inspect our application once again. Run yarn build and you’ll get something like this: % yarn build
yarn run v1.22.17
$ parcel build src/index.html
✨ Built in 88ms
dist/index.html              381 B   176ms
dist/index.5888047.js    208.66 KB   1.23s
dist/index.dcb2e865.js       932 B    58ms
✨ Done in 0.51s.
By importing and registering only select components, we’ve removed more than 56 KB of unnecessary code. Given that other dependencies take ~50 KB in the bundle, tree-shaking helps remove ~25% of Chart.js code from the bundle for our example application. # Next steps Now you’re familiar with all major concepts of Chart.js: chart types and elements, datasets, customization, plugins, components, and tree-shaking. Feel free to review many examples of charts in the documentation and check the awesome list (opens new window) of Chart.js plugins and additional chart types as well as framework integrations (opens new window) (e.g., React, Vue, Svelte, etc.). Also, don’t hesitate to join Chart.js Discord (opens new window) and follow Chart.js on Twitter (opens new window). Have fun and good luck building with Chart.js!  Last Updated: 4/15/2025, 1:19:05 PM 
      ←
      
        Integration
       
        Using from Node.js
      
      →\n\n\n\n# Using from Node.js You can use Chart.js in Node.js for server-side generation of plots with help from an NPM package such as node-canvas (opens new window) or skia-canvas (opens new window). Sample usage: import {CategoryScale, Chart, LinearScale, LineController, LineElement, PointElement} from 'chart.js';
import {Canvas} from 'skia-canvas';
import fsp from 'node:fs/promises';
Chart.register([
  CategoryScale,
  LineController,
  LineElement,
  LinearScale,
  PointElement
]);
const canvas = new Canvas(400, 300);
const chart = new Chart(
  canvas, // TypeScript needs "as any" here
  {
    type: 'line',
    data: {
      labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
      datasets: [{
        label: '# of Votes',
        data: [12, 19, 3, 5, 2, 3],
        borderColor: 'red'
      }]
    }
  }
);
const pngBuffer = await canvas.toBuffer('png', {matte: 'white'});
await fsp.writeFile('output.png', pngBuffer);
chart.destroy();
  Last Updated: 4/15/2025, 1:19:05 PM 
      ←
      
        Step-by-step guide
       
        Accessibility
      
      →\n\n\n\n# Installation # npm  (opens new window)  (opens new window) npm install chart.js
# CDN # CDNJS  (opens new window) Chart.js built files are available on CDNJS (opens new window): https://cdnjs.com/libraries/Chart.js (opens new window) # jsDelivr  (opens new window)  (opens new window) Chart.js built files are also available through jsDelivr (opens new window): https://www.jsdelivr.com/package/npm/chart.js?path=dist (opens new window) # GitHub  (opens new window) You can download the latest version of Chart.js on GitHub (opens new window). If you download or clone the repository, you must build Chart.js to generate the dist files. Chart.js no longer comes with prebuilt release versions, so an alternative option to downloading the repo is strongly advised.  Last Updated: 4/15/2025, 1:19:05 PM 
      ←
      
        Getting Started
       
        Integration
      
      →\n\n\n\n# Installation # npm  (opens new window)  (opens new window) npm install chart.js
# CDN # CDNJS  (opens new window) Chart.js built files are available on CDNJS (opens new window): https://cdnjs.com/libraries/Chart.js (opens new window) # jsDelivr  (opens new window)  (opens new window) Chart.js built files are also available through jsDelivr (opens new window): https://www.jsdelivr.com/package/npm/chart.js?path=dist (opens new window) # GitHub  (opens new window) You can download the latest version of Chart.js on GitHub (opens new window). If you download or clone the repository, you must build Chart.js to generate the dist files. Chart.js no longer comes with prebuilt release versions, so an alternative option to downloading the repo is strongly advised.  Last Updated: 4/15/2025, 1:19:05 PM 
      ←
      
        Getting Started
       
        Integration
      
      →\n\n\n\n# Installation # npm  (opens new window)  (opens new window) npm install chart.js
# CDN # CDNJS  (opens new window) Chart.js built files are available on CDNJS (opens new window): https://cdnjs.com/libraries/Chart.js (opens new window) # jsDelivr  (opens new window)  (opens new window) Chart.js built files are also available through jsDelivr (opens new window): https://www.jsdelivr.com/package/npm/chart.js?path=dist (opens new window) # GitHub  (opens new window) You can download the latest version of Chart.js on GitHub (opens new window). If you download or clone the repository, you must build Chart.js to generate the dist files. Chart.js no longer comes with prebuilt release versions, so an alternative option to downloading the repo is strongly advised.  Last Updated: 4/15/2025, 1:19:05 PM 
      ←
      
        Getting Started
       
        Integration
      
      →\n\n\n\n# Installation # npm  (opens new window)  (opens new window) npm install chart.js
# CDN # CDNJS  (opens new window) Chart.js built files are available on CDNJS (opens new window): https://cdnjs.com/libraries/Chart.js (opens new window) # jsDelivr  (opens new window)  (opens new window) Chart.js built files are also available through jsDelivr (opens new window): https://www.jsdelivr.com/package/npm/chart.js?path=dist (opens new window) # GitHub  (opens new window) You can download the latest version of Chart.js on GitHub (opens new window). If you download or clone the repository, you must build Chart.js to generate the dist files. Chart.js no longer comes with prebuilt release versions, so an alternative option to downloading the repo is strongly advised.  Last Updated: 4/15/2025, 1:19:05 PM 
      ←
      
        Getting Started
       
        Integration
      
      →\n\n\n\n# Installation # npm  (opens new window)  (opens new window) npm install chart.js
# CDN # CDNJS  (opens new window) Chart.js built files are available on CDNJS (opens new window): https://cdnjs.com/libraries/Chart.js (opens new window) # jsDelivr  (opens new window)  (opens new window) Chart.js built files are also available through jsDelivr (opens new window): https://www.jsdelivr.com/package/npm/chart.js?path=dist (opens new window) # GitHub  (opens new window) You can download the latest version of Chart.js on GitHub (opens new window). If you download or clone the repository, you must build Chart.js to generate the dist files. Chart.js no longer comes with prebuilt release versions, so an alternative option to downloading the repo is strongly advised.  Last Updated: 4/15/2025, 1:19:05 PM 
      ←
      
        Getting Started
       
        Integration
      
      →\n\n\n\n# Contributing New contributions to the library are welcome, but we ask that you please follow these guidelines: Before opening a PR for major additions or changes, please discuss the expected API and/or implementation by filing an issue (opens new window) or asking about it in the Chart.js Discord (opens new window) #dev channel. This will save you development time by getting feedback upfront and make reviews faster by giving the maintainers more context and details. Consider whether your changes are useful for all users, or if creating a Chart.js plugin would be more appropriate. Check that your code will pass tests and eslint code standards. pnpm test will run both the linter and tests for you. Add unit tests and document new functionality (in the test/ and docs/ directories respectively). Avoid breaking changes unless there is an upcoming major release, which is infrequent. We encourage people to write plugins for the most new advanced features, and care a lot about backward compatibility. We strongly prefer new methods to be added as private whenever possible. A method can be made private either by making a top-level function outside of a class or by prefixing it with _ and adding @private JSDoc if inside a class. Public APIs take considerable time to review and become locked once implemented as we have limited ability to change them without breaking backward compatibility. Private APIs allow the flexibility to address unforeseen cases. # Joining the project Active committers and contributors are invited to introduce themselves and request commit access to this project. We have a very active Discord community that you can join here (opens new window). If you think you can help, we'd love to have you! # Building and Testing Firstly, we need to ensure development dependencies are installed. With node and pnpm installed, after cloning the Chart.js repo to a local directory, and navigating to that directory in the command line, we can run the following: > pnpm install
This will install the local development dependencies for Chart.js. The following commands are now available from the repository root: > pnpm run build             // build dist files in ./dist
> pnpm run autobuild         // build and watch for source changes
> pnpm run dev               // run tests and watch for source and test changes
> pnpm run lint              // perform code linting (ESLint, tsc)
> pnpm test                  // perform code linting and run unit tests with coverage
pnpm run dev and pnpm test can be appended with a string that is used to match the spec filenames. For example: pnpm run dev plugins will start karma in watch mode for test/specs/**/*plugin*.js. # Documentation We use Vuepress (opens new window) to manage the docs which are contained as Markdown files in the docs directory. You can run the doc server locally using these commands: > pnpm run docs:dev
# Image-Based Tests Some display-related functionality is difficult to test via typical Jasmine units. For this reason, we introduced image-based tests (#3988 (opens new window) and #5777 (opens new window)) to assert that a chart is drawn pixel-for-pixel matching an expected image. Generated charts in image-based tests should be as minimal as possible and focus only on the tested feature to prevent failure if another feature breaks (e.g. disable the title and legend when testing scales). You can create a new image-based test by following the steps below: Create a JS file (example (opens new window)) or JSON file (example (opens new window)) that defines chart config and generation options. Add this file in test/fixtures/{spec.name}/{feature-name}.json. Add a describe line (opens new window) to the beginning of test/specs/{spec.name}.tests.js if it doesn't exist yet. Run pnpm run dev. Click the "Debug" button (top/right): a test should fail with the associated canvas visible. Right-click on the chart and "Save image as..." test/fixtures/{spec.name}/{feature-name}.png making sure not to activate the tooltip or any hover functionality Refresh the browser page (CTRL+R): test should now pass Verify test relevancy by changing the feature values slightly in the JSON file. Tests should pass in both browsers. In general, we've hidden all text in image tests since it's quite difficult to get them to pass between different browsers. As a result, it is recommended to hide all scales in image-based tests. It is also recommended to disable animations. If tests still do not pass, adjust tolerance and/or threshold (opens new window) at the beginning of the JSON file keeping them as low as possible. When a test fails, the expected and actual images are shown. If you'd like to see the images even when the tests pass, set "debug": true in the JSON file. # Bugs and Issues Please report these on the GitHub page - at github.com/chartjs/Chart.js. Please do not use issues for support requests. For help using Chart.js, please take a look at the chart.js (opens new window) tag on Stack Overflow. Well-structured, detailed bug reports are hugely valuable for the project. Guidelines for reporting bugs: Check the issue search to see if it has already been reported Isolate the problem to a simple test case Please include a demonstration of the bug on a website such as JS Bin (opens new window), JS Fiddle (opens new window), or Codepen (opens new window). (Template (opens new window)). If filing a bug against master, you may reference the latest code via https://www.chartjs.org/dist/master/chart.umd.js (opens new window) (changing the filename to point at the file you need as appropriate). Do not rely on these files for production purposes as they may be removed at any time. Please provide any additional details associated with the bug, if it's browser or screen density specific, or only happens with a certain configuration or data.  Last Updated: 4/15/2025, 1:19:05 PM 
      ←
      
        New Charts
       
        Plugins
      
      →\n\n\n\n# Chart.js Welcome to Chart.js! Get started with Chart.js — best if you're new to Chart.js Migrate from Chart.js v3 or Chart.js v2 Join the community on Discord (opens new window) and Twitter (opens new window) Post a question tagged with chart.js on Stack Overflow (opens new window) Contribute to Chart.js # Why Chart.js Among many charting libraries (opens new window) for JavaScript application developers, Chart.js is currently the most popular one according to GitHub stars (opens new window) (~60,000) and npm downloads (opens new window) (~2,400,000 weekly). Chart.js was created and announced (opens new window) in 2013 but has come a long way since then. It’s open-source, licensed under the very permissive MIT license (opens new window), and maintained by an active community. # Features Chart.js provides a set of frequently used chart types, plugins, and customization options. In addition to a reasonable set of built-in chart types, you can use additional community-maintained chart types (opens new window). On top of that, it’s possible to combine several chart types into a mixed chart (essentially, blending multiple chart types into one on the same canvas). Chart.js is highly customizable with custom plugins (opens new window) to create annotations, zoom, or drag-and-drop functionalities to name a few things. # Defaults Chart.js comes with a sound default configuration, making it very easy to start with and get an app that is ready for production. Chances are you will get a very appealing chart even if you don’t specify any options at all. For instance, Chart.js has animations turned on by default, so you can instantly bring attention to the story you’re telling with the data. # Integrations Chart.js comes with built-in TypeScript typings and is compatible with all popular JavaScript frameworks (opens new window) including React (opens new window), Vue (opens new window), Svelte (opens new window), and Angular (opens new window). You can use Chart.js directly or leverage well-maintained wrapper packages that allow for a more native integration with your frameworks of choice. # Developer experience Chart.js has very thorough documentation (yes, you're reading it), API reference, and examples. Maintainers and community members eagerly engage in conversations on Discord (opens new window), GitHub Discussions (opens new window), and Stack Overflow (opens new window) where more than 11,000 questions are tagged with chart.js. # Canvas rendering Chart.js renders chart elements on an HTML5 canvas unlike several others, mostly D3.js-based, charting libraries that render as SVG. Canvas rendering makes Chart.js very performant, especially for large datasets and complex visualizations that would otherwise require thousands of SVG nodes in the DOM tree. At the same time, canvas rendering disallows CSS styling, so you will have to use built-in options for that, or create a custom plugin or chart type to render everything to your liking. # Performance Chart.js is very well suited for large datasets. Such datasets can be efficiently ingested using the internal format, so you can skip data parsing and normalization. Alternatively, data decimation can be configured to sample the dataset and reduce its size before rendering. In the end, the canvas rendering that Chart.js uses reduces the toll on your DOM tree in comparison to SVG rendering. Also, tree-shaking support allows you to include minimal parts of Chart.js code in your bundle, reducing bundle size and page load time. # Community Chart.js is actively developed (opens new window) and maintained by the community. With minor releases (opens new window) on an approximately bi-monthly basis and major releases with breaking changes every couple of years, Chart.js keeps the balance between adding new features and making it a hassle to keep up with them.  Last Updated: 4/15/2025, 1:19:05 PM  
        Getting Started
      
      →\n\n\n\n# 4.x Migration Guide Chart.js 4.0 introduces a number of breaking changes. We tried keeping the amount of breaking changes to a minimum. For some features and bug fixes it was necessary to break backwards compatibility, but we aimed to do so only when worth the benefit. # End user migration # Charts Charts don't override the default tooltip callbacks, so all chart types have the same-looking tooltips. Default scale override has been removed if the configured scale starts with x/y. Defining xAxes in your config will now create a second scale instead of overriding the default x axis. # Options A number of changes were made to the configuration options passed to the Chart constructor. Those changes are documented below. # Specific changes The radialLinear grid indexable and scriptable options don't decrease the index of the specified grid line anymore. The destroy plugin hook has been removed and replaced with afterDestroy. Ticks callback on time scale now receives timestamp instead of a formatted label. scales[id].grid.drawBorder has been renamed to scales[id].border.display. scales[id].grid.borderWidth has been renamed to scales[id].border.width. scales[id].grid.borderColor has been renamed to scales[id].border.color. scales[id].grid.borderDash has been renamed to scales[id].border.dash. scales[id].grid.borderDashOffset has been renamed to scales[id].border.dashOffset. The z index for the border of a scale is now configurable instead of being 1 higher as the grid z index. Linear scales now add and subtracts 5% of the max value to the range if the min and max are the same instead of 1. If the tooltip callback returns undefined, then the default callback will be used. maintainAspectRatio respects container height. Time and timeseries scales use ticks.stepSize instead of time.stepSize, which has been removed. maxTickslimit won't be used for the ticks in autoSkip if the determined max ticks is less then the maxTicksLimit. dist/chart.js has been removed. dist/chart.min.js has been renamed to dist/chart.umd.js. dist/chart.esm.js has been renamed to dist/chart.js. # Type changes The order of the ChartMeta parameters have been changed from <Element, DatasetElement, Type> to <Type, Element, DatasetElement>. # General Chart.js becomes an ESM-only package (opens new window) (the UMD bundle is still available). To use Chart.js, your project should also be an ES module. Make sure to have this in your package.json:{
  "type": "module"
}
If you are experiencing problems with Jest (opens new window), follow its documentation (opens new window) to enable the ESM support. Or, we can recommend you migrating to Vitest (opens new window). Vitest has the ESM support out of the box and almost the same API as Jest (opens new window). See an example of migration (opens new window). Removed fallback to fontColor for the legend text and strikethrough color. Removed config._chart fallback for this.chart in the filler plugin. Removed this._chart in the filler plugin.  Last Updated: 4/15/2025, 1:19:05 PM 
      ←
      
        Updating Charts
       
        3.x Migration Guide
      
      →\n\n\n\n# 3.x Migration Guide Chart.js 3.0 introduces a number of breaking changes. Chart.js 2.0 was released in April 2016. In the years since then, as Chart.js has grown in popularity and feature set, we've learned some lessons about how to better create a charting library. In order to improve performance, offer new features, and improve maintainability, it was necessary to break backwards compatibility, but we aimed to do so only when worth the benefit. Some major highlights of v3 include: Large performance improvements including the ability to skip data parsing and render charts in parallel via webworkers Additional configurability and scriptable options with better defaults Completely rewritten animation system Rewritten filler plugin with numerous bug fixes Documentation migrated from GitBook to Vuepress API documentation generated and verified by TypeDoc No more CSS injection Tons of bug fixes Tree shaking # End user migration # Setup and installation Distributed files are now in lower case. For example: dist/chart.js. Chart.js is no longer providing the Chart.bundle.js and Chart.bundle.min.js. Please see the installation and integration docs for details on the recommended way to setup Chart.js if you were using these builds. moment is no longer specified as an npm dependency. If you are using the time or timeseries scales, you must include one of the available adapters (opens new window) and corresponding date library. You no longer need to exclude moment from your build. The Chart constructor will throw an error if the canvas/context provided is already in use Chart.js 3 is tree-shakeable. So if you are using it as an npm module in a project and want to make use of this feature, you need to import and register the controllers, elements, scales and plugins you want to use, for a list of all the available items to import see integration. You will not have to call register if importing Chart.js via a script tag or from the auto register path as an npm module, in this case you will not get the tree shaking benefits. Here is an example of registering components: import { Chart, LineController, LineElement, PointElement, LinearScale, Title } from `chart.js`
Chart.register(LineController, LineElement, PointElement, LinearScale, Title);
const chart = new Chart(ctx, {
    type: 'line',
    // data: ...
    options: {
        plugins: {
            title: {
                display: true,
                text: 'Chart Title'
            }
        },
        scales: {
            x: {
                type: 'linear'
            },
            y: {
                type: 'linear'
            }
        }
    }
})
# Chart types horizontalBar chart type was removed. Horizontal bar charts can be configured using the new indexAxis option # Options A number of changes were made to the configuration options passed to the Chart constructor. Those changes are documented below. # Generic changes Indexable options are now looping. backgroundColor: ['red', 'green'] will result in alternating 'red' / 'green' if there are more than 2 data points. The input properties of object data can now be freely specified, see data structures for details. Most options are resolved utilizing proxies, instead of merging with defaults. In addition to easily enabling different resolution routes for different contexts, it allows using other resolved options in scriptable options.
Options are by default scriptable and indexable, unless disabled for some reason. Scriptable options receive a option resolver as second parameter for accessing other options in same context. Resolution falls to upper scopes, if no match is found earlier. See options for details. # Specific changes elements.rectangle is now elements.bar hover.animationDuration is now configured in animation.active.duration responsiveAnimationDuration is now configured in animation.resize.duration Polar area elements.arc.angle is now configured in degrees instead of radians. Polar area startAngle option is now consistent with Radar, 0 is at top and value is in degrees. Default is changed from -½π to  0. Doughnut rotation option is now in degrees and 0 is at top. Default is changed from -½π to  0. Doughnut circumference option is now in degrees. Default is changed from 2π to 360. Doughnut cutoutPercentage was renamed to cutoutand accepts pixels as number and percent as string ending with %. scale option was removed in favor of options.scales.r (or any other scale id, with axis: 'r') scales.[x/y]Axes arrays were removed. Scales are now configured directly to options.scales object with the object key being the scale Id. scales.[x/y]Axes.barPercentage was moved to dataset option barPercentage scales.[x/y]Axes.barThickness was moved to dataset option barThickness scales.[x/y]Axes.categoryPercentage was moved to dataset option categoryPercentage scales.[x/y]Axes.maxBarThickness was moved to dataset option maxBarThickness scales.[x/y]Axes.minBarLength was moved to dataset option minBarLength scales.[x/y]Axes.scaleLabel was renamed to scales[id].title scales.[x/y]Axes.scaleLabel.labelString was renamed to scales[id].title.text scales.[x/y]Axes.ticks.beginAtZero was renamed to scales[id].beginAtZero scales.[x/y]Axes.ticks.max was renamed to scales[id].max scales.[x/y]Axes.ticks.min was renamed to scales[id].min scales.[x/y]Axes.ticks.reverse was renamed to scales[id].reverse scales.[x/y]Axes.ticks.suggestedMax was renamed to scales[id].suggestedMax scales.[x/y]Axes.ticks.suggestedMin was renamed to scales[id].suggestedMin scales.[x/y]Axes.ticks.unitStepSize was removed. Use scales[id].ticks.stepSize scales.[x/y]Axes.ticks.userCallback was renamed to scales[id].ticks.callback scales.[x/y]Axes.time.format was renamed to scales[id].time.parser scales.[x/y]Axes.time.max was renamed to scales[id].max scales.[x/y]Axes.time.min was renamed to scales[id].min scales.[x/y]Axes.zeroLine* options of axes were removed. Use scriptable scale options instead. The dataset option steppedLine was removed. Use stepped The chart option showLines was renamed to showLine to match the dataset option. The chart option startAngle was moved to radial scale options. To override the platform class used in a chart instance, pass platform: PlatformClass in the config object. Note that the class should be passed, not an instance of the class. aspectRatio defaults to 1 for doughnut, pie, polarArea, and radar charts TimeScale does not read t from object data by default anymore. The default property is x or y, depending on the orientation. See data structures for details on how to change the default. tooltips namespace was renamed to tooltip to match the plugin name legend, title and tooltip namespaces were moved from options to options.plugins. tooltips.custom was renamed to plugins.tooltip.external # Defaults global namespace was removed from defaults. So Chart.defaults.global is now Chart.defaults Dataset controller defaults were relocate to overrides. For example Chart.defaults.line is now Chart.overrides.line default prefix was removed from defaults. For example Chart.defaults.global.defaultColor is now Chart.defaults.color defaultColor was split to color, borderColor and backgroundColor defaultFontColor was renamed to color defaultFontFamily was renamed to font.family defaultFontSize was renamed to font.size defaultFontStyle was renamed to font.style defaultLineHeight was renamed to font.lineHeight Horizontal Bar default tooltip mode was changed from 'index' to 'nearest' to match vertical bar charts legend, title and tooltip namespaces were moved from Chart.defaults to Chart.defaults.plugins. elements.line.fill default changed from true to false. Line charts no longer override the default interaction mode. Default is changed from 'index' to 'nearest'. # Scales The configuration options for scales is the largest change in v3. The xAxes and yAxes arrays were removed and axis options are individual scales now keyed by scale ID. The v2 configuration below is shown with it's new v3 configuration options: {
  scales: {
    xAxes: [{
      id: 'x',
      type: 'time',
      display: true,
      title: {
        display: true,
        text: 'Date'
      },
      ticks: {
        major: {
          enabled: true
        },
        font: function(context) {
          if (context.tick && context.tick.major) {
            return {
              weight: 'bold',
              color: '#FF0000'
            };
          }
        }
      }
    }],
    yAxes: [{
      id: 'y',
      display: true,
      title: {
        display: true,
        text: 'value'
      }
    }]
  }
}
And now, in v3: options: {
  scales: {
    x: {
      type: 'time',
      display: true,
      title: {
        display: true,
        text: 'Date'
      },
      ticks: {
        major: {
          enabled: true
        },
        color: (context) => context.tick && context.tick.major && '#FF0000',
        font: function(context) {
          if (context.tick && context.tick.major) {
            return {
              weight: 'bold'
            };
          }
        }
      }
    },
    y: {
      display: true,
      title: {
        display: true,
        text: 'value'
      }
    }
  }
}
The time scale option distribution: 'series' was removed and a new scale type timeseries was introduced in its place In the time scale, autoSkip is now enabled by default for consistency with the other scales # Animations Animation system was completely rewritten in Chart.js v3. Each property can now be animated separately. Please see animations docs for details. # Customizability custom attribute of elements was removed. Please use scriptable options The hover property of scriptable options context object was renamed to active to align it with the datalabels plugin. # Interactions To allow DRY configuration, a root options scope for common interaction options was added. options.hover and options.plugins.tooltip now both extend from options.interaction. Defaults are defined at defaults.interaction level, so by default hover and tooltip interactions share the same mode etc. interactions are now limited to the chart area + allowed overflow {mode: 'label'} was replaced with {mode: 'index'} {mode: 'single'} was replaced with {mode: 'nearest', intersect: true} modes['X-axis'] was replaced with {mode: 'index', intersect: false} options.onClick is now limited to the chart area options.onClick and options.onHover now receive the chart instance as a 3rd argument options.onHover now receives a wrapped event as the first parameter. The previous first parameter value is accessible via event.native. options.hover.onHover was removed, use options.onHover. # Ticks options.gridLines was renamed to options.grid options.gridLines.offsetGridLines was renamed to options.grid.offset. options.gridLines.tickMarkLength was renamed to options.grid.tickLength. options.ticks.fixedStepSize is no longer used. Use options.ticks.stepSize. options.ticks.major and options.ticks.minor were replaced with scriptable options for tick fonts. Chart.Ticks.formatters.linear was renamed to Chart.Ticks.formatters.numeric. options.ticks.backdropPaddingX and options.ticks.backdropPaddingY were replaced with options.ticks.backdropPadding in the radial linear scale. # Tooltip xLabel and yLabel were removed. Please use label and formattedValue The filter option will now be passed additional parameters when called and should have the method signature function(tooltipItem, index, tooltipItems, data) The custom callback now takes a context object that has tooltip and chart properties All properties of tooltip model related to the tooltip options have been moved to reside within the options property. The callbacks no longer are given a data parameter. The tooltip item parameter contains the chart and dataset instead The tooltip item's index parameter was renamed to dataIndex and value was renamed to formattedValue The xPadding and yPadding options were merged into a single padding object # Developer migration While the end-user migration for Chart.js 3 is fairly straight-forward, the developer migration can be more complicated. Please reach out for help in the #dev Discord (opens new window) channel if tips on migrating would be helpful. Some of the biggest things that have changed: There is a completely rewritten and more performant animation system.
Element._model and Element._view are no longer used and properties are now set directly on the elements. You will have to use the method getProps to access these properties inside most methods such as inXRange/inYRange and getCenterPoint. Please take a look at the Chart.js-provided elements (opens new window) for examples. When building the elements in a controller, it's now suggested to call updateElement to provide the element properties. There are also methods such as getSharedOptions and includeOptions that have been added to skip redundant computation. Please take a look at the Chart.js-provided controllers (opens new window) for examples. Scales introduced a new parsing API. This API takes user data and converts it into a more standard format. E.g. it allows users to provide numeric data as a string and converts it to a number where necessary. Previously this was done on the fly as charts were rendered. Now it's done up front with the ability to skip it for better performance if users provide data in the correct format. If you're using standard data format like x/y you may not need to do anything. If you're using a custom data format you will have to override some of the parse methods in core.datasetController.js. An example can be found in chartjs-chart-financial (opens new window), which uses an {o, h, l, c} data format. A few changes were made to controllers that are more straight-forward, but will affect all controllers: Options:
global was removed from the defaults namespace as it was unnecessary and sometimes inconsistent Dataset defaults are now under the chart type options instead of vice-versa. This was not able to be done when introduced in 2.x for backwards compatibility. Fixing it removes the biggest stumbling block that new chart developers encountered Scale default options need to be updated as described in the end user migration section (e.g. x instead of xAxes and y instead of yAxes) updateElement was changed to updateElements and has a new method signature as described below. This provides performance enhancements such as allowing easier reuse of computations that are common to all elements and reducing the number of function calls # Removed The following properties and methods were removed: # Removed from Chart Chart.animationService Chart.active Chart.borderWidth Chart.chart.chart Chart.Bar. New charts are created via new Chart and providing the appropriate type parameter Chart.Bubble. New charts are created via new Chart and providing the appropriate type parameter Chart.Chart Chart.Controller Chart.Doughnut. New charts are created via new Chart and providing the appropriate type parameter Chart.innerRadius now lives on doughnut, pie, and polarArea controllers Chart.lastActive Chart.Legend was moved to Chart.plugins.legend._element and made private Chart.Line. New charts are created via new Chart and providing the appropriate type parameter Chart.LinearScaleBase now must be imported and cannot be accessed off the Chart object Chart.offsetX Chart.offsetY Chart.outerRadius now lives on doughnut, pie, and polarArea controllers Chart.plugins was replaced with Chart.registry. Plugin defaults are now in Chart.defaults.plugins[id]. Chart.plugins.register was replaced by Chart.register. Chart.PolarArea. New charts are created via new Chart and providing the appropriate type parameter Chart.prototype.generateLegend Chart.platform. It only contained disableCSSInjection. CSS is never injected in v3. Chart.PluginBase Chart.Radar. New charts are created via new Chart and providing the appropriate type parameter Chart.radiusLength Chart.scaleService was replaced with Chart.registry. Scale defaults are now in Chart.defaults.scales[type]. Chart.Scatter. New charts are created via new Chart and providing the appropriate type parameter Chart.types Chart.Title was moved to Chart.plugins.title._element and made private Chart.Tooltip is now provided by the tooltip plugin. The positioners can be accessed from tooltipPlugin.positioners ILayoutItem.minSize # Removed from Dataset Controllers BarController.getDatasetMeta().bar DatasetController.addElementAndReset DatasetController.createMetaData DatasetController.createMetaDataset DoughnutController.getRingIndex # Removed from Elements Element.getArea Element.height Element.hidden was replaced by chart level status, usable with getDataVisibility(index) / toggleDataVisibility(index) Element.initialize Element.inLabelRange Line.calculatePointY # Removed from Helpers helpers.addEvent helpers.aliasPixel helpers.arrayEquals helpers.configMerge helpers.findIndex helpers.findNextWhere helpers.findPreviousWhere helpers.extend. Use Object.assign instead helpers.getValueAtIndexOrDefault. Use helpers.resolve instead. helpers.indexOf helpers.lineTo helpers.longestText was made private helpers.max helpers.measureText was made private helpers.min helpers.nextItem helpers.niceNum helpers.numberOfLabelLines helpers.previousItem helpers.removeEvent helpers.roundedRect helpers.scaleMerge helpers.where # Removed from Layout Layout.defaults # Removed from Scales LinearScaleBase.handleDirectionalChanges LogarithmicScale.minNotZero Scale.getRightValue Scale.longestLabelWidth Scale.longestTextCache is now private Scale.margins is now private Scale.mergeTicksOptions Scale.ticksAsNumbers Scale.tickValues is now private TimeScale.getLabelCapacity is now private TimeScale.tickFormatFunction is now private # Removed from Plugins (Legend, Title, and Tooltip) IPlugin.afterScaleUpdate. Use afterLayout instead Legend.margins is now private Legend onClick, onHover, and onLeave options now receive the legend as the 3rd argument in addition to implicitly via this Legend onClick, onHover, and onLeave options now receive a wrapped event as the first parameter. The previous first parameter value is accessible via event.native. Title.margins is now private The tooltip item's x and y attributes were replaced by element. You can use element.x and element.y or element.tooltipPosition() instead. # Removal of Public APIs The following public APIs were removed. getElementAtEvent is replaced with chart.getElementsAtEventForMode(e, 'nearest', { intersect: true }, false) getElementsAtEvent is replaced with chart.getElementsAtEventForMode(e, 'index', { intersect: true }, false) getElementsAtXAxis is replaced with chart.getElementsAtEventForMode(e, 'index', { intersect: false }, false) getDatasetAtEvent is replaced with chart.getElementsAtEventForMode(e, 'dataset', { intersect: true }, false) # Removal of private APIs The following private APIs were removed. Chart._bufferedRender Chart._updating Chart.data.datasets[datasetIndex]._meta DatasetController._getIndexScaleId DatasetController._getIndexScale DatasetController._getValueScaleId DatasetController._getValueScale Element._ctx Element._model Element._view LogarithmicScale._valueOffset TimeScale.getPixelForOffset TimeScale.getLabelWidth Tooltip._lastActive # Renamed The following properties were renamed during v3 development: Chart.Animation.animationObject was renamed to Chart.Animation Chart.Animation.chartInstance was renamed to Chart.Animation.chart Chart.canvasHelpers was merged with Chart.helpers Chart.elements.Arc was renamed to Chart.elements.ArcElement Chart.elements.Line was renamed to Chart.elements.LineElement Chart.elements.Point was renamed to Chart.elements.PointElement Chart.elements.Rectangle was renamed to Chart.elements.BarElement Chart.layoutService was renamed to Chart.layouts Chart.pluginService was renamed to Chart.plugins helpers.callCallback was renamed to helpers.callback helpers.drawRoundedRectangle was renamed to helpers.roundedRect helpers.getValueOrDefault was renamed to helpers.valueOrDefault LayoutItem.fullWidth was renamed to LayoutItem.fullSize Point.controlPointPreviousX was renamed to Point.cp1x Point.controlPointPreviousY was renamed to Point.cp1y Point.controlPointNextX was renamed to Point.cp2x Point.controlPointNextY was renamed to Point.cp2y Scale.calculateTickRotation was renamed to Scale.calculateLabelRotation Tooltip.options.legendColorBackgroupd was renamed to Tooltip.options.multiKeyBackground # Renamed private APIs The private APIs listed below were renamed: BarController.calculateBarIndexPixels was renamed to BarController._calculateBarIndexPixels BarController.calculateBarValuePixels was renamed to BarController._calculateBarValuePixels BarController.getStackCount was renamed to BarController._getStackCount BarController.getStackIndex was renamed to BarController._getStackIndex BarController.getRuler was renamed to BarController._getRuler Chart.destroyDatasetMeta was renamed to Chart._destroyDatasetMeta Chart.drawDataset was renamed to Chart._drawDataset Chart.drawDatasets was renamed to Chart._drawDatasets Chart.eventHandler was renamed to Chart._eventHandler Chart.handleEvent was renamed to Chart._handleEvent Chart.initialize was renamed to Chart._initialize Chart.resetElements was renamed to Chart._resetElements Chart.unbindEvents was renamed to Chart._unbindEvents Chart.updateDataset was renamed to Chart._updateDataset Chart.updateDatasets was renamed to Chart._updateDatasets Chart.updateLayout was renamed to Chart._updateLayout DatasetController.destroy was renamed to DatasetController._destroy DatasetController.insertElements was renamed to DatasetController._insertElements DatasetController.onDataPop was renamed to DatasetController._onDataPop DatasetController.onDataPush was renamed to DatasetController._onDataPush DatasetController.onDataShift was renamed to DatasetController._onDataShift DatasetController.onDataSplice was renamed to DatasetController._onDataSplice DatasetController.onDataUnshift was renamed to DatasetController._onDataUnshift DatasetController.removeElements was renamed to DatasetController._removeElements DatasetController.resyncElements was renamed to DatasetController._resyncElements LayoutItem.isFullWidth was renamed to LayoutItem.isFullSize RadialLinearScale.setReductions was renamed to RadialLinearScale._setReductions RadialLinearScale.pointLabels was renamed to RadialLinearScale._pointLabels Scale.handleMargins was renamed to Scale._handleMargins # Changed The APIs listed in this section have changed in signature or behaviour from version 2. # Changed in Scales Scale.getLabelForIndex was replaced by scale.getLabelForValue Scale.getPixelForValue now only requires one parameter. For the TimeScale that parameter must be millis since the epoch. As a performance optimization, it may take an optional second parameter, giving the index of the data point. # Changed in Ticks Scale.afterBuildTicks now has no parameters like the other callbacks Scale.buildTicks is now expected to return tick objects Scale.convertTicksToLabels was renamed to generateTickLabels. It is now expected to set the label property on the ticks given as input Scale.ticks now contains objects instead of strings When the autoSkip option is enabled, Scale.ticks now contains only the non-skipped ticks instead of all ticks. Ticks are now always generated in monotonically increasing order # Changed in Time Scale getValueForPixel now returns milliseconds since the epoch # Changed in Controllers # Core Controller The first parameter to updateHoverStyle is now an array of objects containing the element, datasetIndex, and index The signature or resize changed, the first silent parameter was removed. # Dataset Controllers updateElement was replaced with updateElements now taking the elements to update, the start index, count, and mode setHoverStyle and removeHoverStyle now additionally take the datasetIndex and index # Changed in Interactions Interaction mode methods now return an array of objects containing the element, datasetIndex, and index # Changed in Layout ILayoutItem.update no longer has a return value # Changed in Helpers All helpers are now exposed in a flat hierarchy, e.g., Chart.helpers.canvas.clipArea -> Chart.helpers.clipArea # Canvas Helper The second parameter to drawPoint is now the full options object, so style, rotation, and radius are no longer passed explicitly helpers.getMaximumHeight was replaced by helpers.dom.getMaximumSize helpers.getMaximumWidth was replaced by helpers.dom.getMaximumSize helpers.clear was renamed to helpers.clearCanvas and now takes canvas and optionally ctx as parameter(s). helpers.retinaScale accepts optional third parameter forceStyle, which forces overriding current canvas style. forceRatio no longer falls back to window.devicePixelRatio, instead it defaults to 1. # Changed in Platform Chart.platform is no longer the platform object used by charts. Every chart instance now has a separate platform instance. Chart.platforms is an object that contains two usable platform classes, BasicPlatform and DomPlatform. It also contains BasePlatform, a class that all platforms must extend from. If the canvas passed in is an instance of OffscreenCanvas, the BasicPlatform is automatically used. isAttached method was added to platform. # Changed in IPlugin interface All plugin hooks have unified signature with 3 arguments: chart, args and options. This means change in signature for these hooks: beforeInit, afterInit, reset, beforeLayout, afterLayout, beforeRender, afterRender, beforeDraw, afterDraw, beforeDatasetsDraw, afterDatasetsDraw, beforeEvent, afterEvent, resize, destroy. afterDatasetsUpdate, afterUpdate, beforeDatasetsUpdate, and beforeUpdate now receive args object as second argument. options argument is always the last and thus was moved from 2nd to 3rd place. afterEvent and beforeEvent now receive a wrapped event as the event property of the second argument. The native event is available via args.event.native. Initial resize is no longer silent. Meaning that resize event can fire between beforeInit and afterInit New hooks: install, start, stop, and uninstall afterEvent should notify about changes that need a render by setting args.changed to true. Because the args are shared with all plugins, it should only be set to true and not false.  Last Updated: 4/15/2025, 1:19:05 PM 
      ←
      
        4.x Migration Guide\n\n\n\n# Contributing New contributions to the library are welcome, but we ask that you please follow these guidelines: Before opening a PR for major additions or changes, please discuss the expected API and/or implementation by filing an issue (opens new window) or asking about it in the Chart.js Discord (opens new window) #dev channel. This will save you development time by getting feedback upfront and make reviews faster by giving the maintainers more context and details. Consider whether your changes are useful for all users, or if creating a Chart.js plugin would be more appropriate. Check that your code will pass tests and eslint code standards. pnpm test will run both the linter and tests for you. Add unit tests and document new functionality (in the test/ and docs/ directories respectively). Avoid breaking changes unless there is an upcoming major release, which is infrequent. We encourage people to write plugins for the most new advanced features, and care a lot about backward compatibility. We strongly prefer new methods to be added as private whenever possible. A method can be made private either by making a top-level function outside of a class or by prefixing it with _ and adding @private JSDoc if inside a class. Public APIs take considerable time to review and become locked once implemented as we have limited ability to change them without breaking backward compatibility. Private APIs allow the flexibility to address unforeseen cases. # Joining the project Active committers and contributors are invited to introduce themselves and request commit access to this project. We have a very active Discord community that you can join here (opens new window). If you think you can help, we'd love to have you! # Building and Testing Firstly, we need to ensure development dependencies are installed. With node and pnpm installed, after cloning the Chart.js repo to a local directory, and navigating to that directory in the command line, we can run the following: > pnpm install
This will install the local development dependencies for Chart.js. The following commands are now available from the repository root: > pnpm run build             // build dist files in ./dist
> pnpm run autobuild         // build and watch for source changes
> pnpm run dev               // run tests and watch for source and test changes
> pnpm run lint              // perform code linting (ESLint, tsc)
> pnpm test                  // perform code linting and run unit tests with coverage
pnpm run dev and pnpm test can be appended with a string that is used to match the spec filenames. For example: pnpm run dev plugins will start karma in watch mode for test/specs/**/*plugin*.js. # Documentation We use Vuepress (opens new window) to manage the docs which are contained as Markdown files in the docs directory. You can run the doc server locally using these commands: > pnpm run docs:dev
# Image-Based Tests Some display-related functionality is difficult to test via typical Jasmine units. For this reason, we introduced image-based tests (#3988 (opens new window) and #5777 (opens new window)) to assert that a chart is drawn pixel-for-pixel matching an expected image. Generated charts in image-based tests should be as minimal as possible and focus only on the tested feature to prevent failure if another feature breaks (e.g. disable the title and legend when testing scales). You can create a new image-based test by following the steps below: Create a JS file (example (opens new window)) or JSON file (example (opens new window)) that defines chart config and generation options. Add this file in test/fixtures/{spec.name}/{feature-name}.json. Add a describe line (opens new window) to the beginning of test/specs/{spec.name}.tests.js if it doesn't exist yet. Run pnpm run dev. Click the "Debug" button (top/right): a test should fail with the associated canvas visible. Right-click on the chart and "Save image as..." test/fixtures/{spec.name}/{feature-name}.png making sure not to activate the tooltip or any hover functionality Refresh the browser page (CTRL+R): test should now pass Verify test relevancy by changing the feature values slightly in the JSON file. Tests should pass in both browsers. In general, we've hidden all text in image tests since it's quite difficult to get them to pass between different browsers. As a result, it is recommended to hide all scales in image-based tests. It is also recommended to disable animations. If tests still do not pass, adjust tolerance and/or threshold (opens new window) at the beginning of the JSON file keeping them as low as possible. When a test fails, the expected and actual images are shown. If you'd like to see the images even when the tests pass, set "debug": true in the JSON file. # Bugs and Issues Please report these on the GitHub page - at github.com/chartjs/Chart.js. Please do not use issues for support requests. For help using Chart.js, please take a look at the chart.js (opens new window) tag on Stack Overflow. Well-structured, detailed bug reports are hugely valuable for the project. Guidelines for reporting bugs: Check the issue search to see if it has already been reported Isolate the problem to a simple test case Please include a demonstration of the bug on a website such as JS Bin (opens new window), JS Fiddle (opens new window), or Codepen (opens new window). (Template (opens new window)). If filing a bug against master, you may reference the latest code via https://www.chartjs.org/dist/master/chart.umd.js (opens new window) (changing the filename to point at the file you need as appropriate). Do not rely on these files for production purposes as they may be removed at any time. Please provide any additional details associated with the bug, if it's browser or screen density specific, or only happens with a certain configuration or data.  Last Updated: 4/15/2025, 1:19:05 PM 
      ←
      
        New Charts
       
        Plugins
      
      →\n\n\n\n# Chart.js Welcome to Chart.js! Get started with Chart.js — best if you're new to Chart.js Migrate from Chart.js v3 or Chart.js v2 Join the community on Discord (opens new window) and Twitter (opens new window) Post a question tagged with chart.js on Stack Overflow (opens new window) Contribute to Chart.js # Why Chart.js Among many charting libraries (opens new window) for JavaScript application developers, Chart.js is currently the most popular one according to GitHub stars (opens new window) (~60,000) and npm downloads (opens new window) (~2,400,000 weekly). Chart.js was created and announced (opens new window) in 2013 but has come a long way since then. It’s open-source, licensed under the very permissive MIT license (opens new window), and maintained by an active community. # Features Chart.js provides a set of frequently used chart types, plugins, and customization options. In addition to a reasonable set of built-in chart types, you can use additional community-maintained chart types (opens new window). On top of that, it’s possible to combine several chart types into a mixed chart (essentially, blending multiple chart types into one on the same canvas). Chart.js is highly customizable with custom plugins (opens new window) to create annotations, zoom, or drag-and-drop functionalities to name a few things. # Defaults Chart.js comes with a sound default configuration, making it very easy to start with and get an app that is ready for production. Chances are you will get a very appealing chart even if you don’t specify any options at all. For instance, Chart.js has animations turned on by default, so you can instantly bring attention to the story you’re telling with the data. # Integrations Chart.js comes with built-in TypeScript typings and is compatible with all popular JavaScript frameworks (opens new window) including React (opens new window), Vue (opens new window), Svelte (opens new window), and Angular (opens new window). You can use Chart.js directly or leverage well-maintained wrapper packages that allow for a more native integration with your frameworks of choice. # Developer experience Chart.js has very thorough documentation (yes, you're reading it), API reference, and examples. Maintainers and community members eagerly engage in conversations on Discord (opens new window), GitHub Discussions (opens new window), and Stack Overflow (opens new window) where more than 11,000 questions are tagged with chart.js. # Canvas rendering Chart.js renders chart elements on an HTML5 canvas unlike several others, mostly D3.js-based, charting libraries that render as SVG. Canvas rendering makes Chart.js very performant, especially for large datasets and complex visualizations that would otherwise require thousands of SVG nodes in the DOM tree. At the same time, canvas rendering disallows CSS styling, so you will have to use built-in options for that, or create a custom plugin or chart type to render everything to your liking. # Performance Chart.js is very well suited for large datasets. Such datasets can be efficiently ingested using the internal format, so you can skip data parsing and normalization. Alternatively, data decimation can be configured to sample the dataset and reduce its size before rendering. In the end, the canvas rendering that Chart.js uses reduces the toll on your DOM tree in comparison to SVG rendering. Also, tree-shaking support allows you to include minimal parts of Chart.js code in your bundle, reducing bundle size and page load time. # Community Chart.js is actively developed (opens new window) and maintained by the community. With minor releases (opens new window) on an approximately bi-monthly basis and major releases with breaking changes every couple of years, Chart.js keeps the balance between adding new features and making it a hassle to keep up with them.  Last Updated: 4/15/2025, 1:19:05 PM  
        Getting Started
      
      →\n\n\n\n# Chart.js Welcome to Chart.js! Get started with Chart.js — best if you're new to Chart.js Migrate from Chart.js v3 or Chart.js v2 Join the community on Discord (opens new window) and Twitter (opens new window) Post a question tagged with chart.js on Stack Overflow (opens new window) Contribute to Chart.js # Why Chart.js Among many charting libraries (opens new window) for JavaScript application developers, Chart.js is currently the most popular one according to GitHub stars (opens new window) (~60,000) and npm downloads (opens new window) (~2,400,000 weekly). Chart.js was created and announced (opens new window) in 2013 but has come a long way since then. It’s open-source, licensed under the very permissive MIT license (opens new window), and maintained by an active community. # Features Chart.js provides a set of frequently used chart types, plugins, and customization options. In addition to a reasonable set of built-in chart types, you can use additional community-maintained chart types (opens new window). On top of that, it’s possible to combine several chart types into a mixed chart (essentially, blending multiple chart types into one on the same canvas). Chart.js is highly customizable with custom plugins (opens new window) to create annotations, zoom, or drag-and-drop functionalities to name a few things. # Defaults Chart.js comes with a sound default configuration, making it very easy to start with and get an app that is ready for production. Chances are you will get a very appealing chart even if you don’t specify any options at all. For instance, Chart.js has animations turned on by default, so you can instantly bring attention to the story you’re telling with the data. # Integrations Chart.js comes with built-in TypeScript typings and is compatible with all popular JavaScript frameworks (opens new window) including React (opens new window), Vue (opens new window), Svelte (opens new window), and Angular (opens new window). You can use Chart.js directly or leverage well-maintained wrapper packages that allow for a more native integration with your frameworks of choice. # Developer experience Chart.js has very thorough documentation (yes, you're reading it), API reference, and examples. Maintainers and community members eagerly engage in conversations on Discord (opens new window), GitHub Discussions (opens new window), and Stack Overflow (opens new window) where more than 11,000 questions are tagged with chart.js. # Canvas rendering Chart.js renders chart elements on an HTML5 canvas unlike several others, mostly D3.js-based, charting libraries that render as SVG. Canvas rendering makes Chart.js very performant, especially for large datasets and complex visualizations that would otherwise require thousands of SVG nodes in the DOM tree. At the same time, canvas rendering disallows CSS styling, so you will have to use built-in options for that, or create a custom plugin or chart type to render everything to your liking. # Performance Chart.js is very well suited for large datasets. Such datasets can be efficiently ingested using the internal format, so you can skip data parsing and normalization. Alternatively, data decimation can be configured to sample the dataset and reduce its size before rendering. In the end, the canvas rendering that Chart.js uses reduces the toll on your DOM tree in comparison to SVG rendering. Also, tree-shaking support allows you to include minimal parts of Chart.js code in your bundle, reducing bundle size and page load time. # Community Chart.js is actively developed (opens new window) and maintained by the community. With minor releases (opens new window) on an approximately bi-monthly basis and major releases with breaking changes every couple of years, Chart.js keeps the balance between adding new features and making it a hassle to keep up with them.  Last Updated: 4/15/2025, 1:19:05 PM  
        Getting Started
      
      →\n\n\n\n# Area Chart Both line and radar charts support a fill option on the dataset object which can be used to create space between two datasets or a dataset and a boundary, i.e. the scale origin, start, or end (see filling modes). Note This feature is implemented by the filler plugin (opens new window). # Filling modes Mode Type Values Absolute dataset index number 1, 2, 3, ... Relative dataset index string '-1', '-2', '+1', ... Boundary string 'start', 'end', 'origin' Disabled 1 boolean false Stacked value below string 'stack' Axis value object { value: number; } Shape (fill inside line) string 'shape' 1 for backward compatibility, fill: true is equivalent to fill: 'origin' # Example new Chart(ctx, {
    data: {
        datasets: [
            {fill: 'origin'},      // 0: fill to 'origin'
            {fill: '+2'},          // 1: fill to dataset 3
            {fill: 1},             // 2: fill to dataset 1
            {fill: false},         // 3: no fill
            {fill: '-2'},          // 4: fill to dataset 2
            {fill: {value: 25}}    // 5: fill to axis value 25
        ]
    }
});
If you need to support multiple colors when filling from one dataset to another, you may specify an object with the following option : Param Type Description target number, string, boolean, object The accepted values are the same as the filling mode values, so you may use absolute and relative dataset indexes and/or boundaries. above Color If no color is set, the default color will be the background color of the chart. below Color Same as the above. # Example with multiple colors new Chart(ctx, {
    data: {
        datasets: [
            {
              fill: {
                target: 'origin',
                above: 'rgb(255, 0, 0)',   // Area will be red above the origin
                below: 'rgb(0, 0, 255)'    // And blue below the origin
              }
            }
        ]
    }
});
# Configuration Namespace: options.plugins.filler Option Type Default Description drawTime string beforeDatasetDraw Filler draw time. Supported values: 'beforeDraw', 'beforeDatasetDraw', 'beforeDatasetsDraw' propagate boolean true Fill propagation when target is hidden. # propagate propagate takes a boolean value (default: true). If true, the fill area will be recursively extended to the visible target defined by the fill value of hidden dataset targets: # Example using propagate new Chart(ctx, {
    data: {
        datasets: [
            {fill: 'origin'},   // 0: fill to 'origin'
            {fill: '-1'},       // 1: fill to dataset 0
            {fill: 1},          // 2: fill to dataset 1
            {fill: false},      // 3: no fill
            {fill: '-2'}        // 4: fill to dataset 2
        ]
    },
    options: {
        plugins: {
            filler: {
                propagate: true
            }
        }
    }
});
propagate: true:
-if dataset 2 is hidden, dataset 4 will fill to dataset 1
-if dataset 2 and 1 are hidden, dataset 4 will fill to 'origin' propagate: false:
-if dataset 2 and/or 4 are hidden, dataset 4 will not be filled  Last Updated: 4/15/2025, 1:19:05 PM 
      ←
      
        Tooltip
       
        Bar Chart
      
      →\n\n\n\n# Mixed Chart Types With Chart.js, it is possible to create mixed charts that are a combination of two or more different chart types. A common example is a bar chart that also includes a line dataset. When creating a mixed chart, we specify the chart type on each dataset. const mixedChart = new Chart(ctx, {
    data: {
        datasets: [{
            type: 'bar',
            label: 'Bar Dataset',
            data: [10, 20, 30, 40]
        }, {
            type: 'line',
            label: 'Line Dataset',
            data: [50, 50, 50, 50],
        }],
        labels: ['January', 'February', 'March', 'April']
    },
    options: options
});
At this point, we have a chart rendering how we'd like. It's important to note that the default options for the charts are only considered at the dataset level and are not merged at the chart level in this case.   
        config
      
        setup
         const config = {
  type: 'scatter',
  data: data,
  options: {
    scales: {
      y: {
        beginAtZero: true
      }
    }
  }
};const config = {
  type: 'scatter',
  data: data,
  options: {
    scales: {
      y: {
        beginAtZero: true
      }
    }
  }
};const data = {
  labels: [
    'January',
    'February',
    'March',
    'April'
  ],
  datasets: [{
    type: 'bar',
    label: 'Bar Dataset',
    data: [10, 20, 30, 40],
    borderColor: 'rgb(255, 99, 132)',
    backgroundColor: 'rgba(255, 99, 132, 0.2)'
  }, {
    type: 'line',
    label: 'Line Dataset',
    data: [50, 50, 50, 50],
    fill: false,
    borderColor: 'rgb(54, 162, 235)'
  }]
};const data = {
  labels: [
    'January',
    'February',
    'March',
    'April'
  ],
  datasets: [{
    type: 'bar',
    label: 'Bar Dataset',
    data: [10, 20, 30, 40],
    borderColor: 'rgb(255, 99, 132)',
    backgroundColor: 'rgba(255, 99, 132, 0.2)'
  }, {
    type: 'line',
    label: 'Line Dataset',
    data: [50, 50, 50, 50],
    fill: false,
    borderColor: 'rgb(54, 162, 235)'
  }]
};# Drawing order By default, datasets are drawn such that the first one is top-most. This can be altered by specifying order option to datasets. order defaults to 0. Note that this also affects stacking, legend, and tooltip. So it's essentially the same as reordering the datasets. The order property behaves like a weight instead of a specific order, so the higher the number, the sooner that dataset is drawn on the canvas and thus other datasets with a lower order number will get drawn over it. const mixedChart = new Chart(ctx, {
   type: 'bar',
   data: {
       datasets: [{
           label: 'Bar Dataset',
           data: [10, 20, 30, 40],
           // this dataset is drawn below
           order: 2
       }, {
           label: 'Line Dataset',
           data: [10, 10, 10, 10],
           type: 'line',
           // this dataset is drawn on top
           order: 1
       }],
       labels: ['January', 'February', 'March', 'April']
   },
   options: options
});
  Last Updated: 4/15/2025, 1:19:05 PM 
      ←
      
        Line Chart
       
        Polar Area Chart
      
      →\n\n\n\n# Chart.js Welcome to Chart.js! Get started with Chart.js — best if you're new to Chart.js Migrate from Chart.js v3 or Chart.js v2 Join the community on Discord (opens new window) and Twitter (opens new window) Post a question tagged with chart.js on Stack Overflow (opens new window) Contribute to Chart.js # Why Chart.js Among many charting libraries (opens new window) for JavaScript application developers, Chart.js is currently the most popular one according to GitHub stars (opens new window) (~60,000) and npm downloads (opens new window) (~2,400,000 weekly). Chart.js was created and announced (opens new window) in 2013 but has come a long way since then. It’s open-source, licensed under the very permissive MIT license (opens new window), and maintained by an active community. # Features Chart.js provides a set of frequently used chart types, plugins, and customization options. In addition to a reasonable set of built-in chart types, you can use additional community-maintained chart types (opens new window). On top of that, it’s possible to combine several chart types into a mixed chart (essentially, blending multiple chart types into one on the same canvas). Chart.js is highly customizable with custom plugins (opens new window) to create annotations, zoom, or drag-and-drop functionalities to name a few things. # Defaults Chart.js comes with a sound default configuration, making it very easy to start with and get an app that is ready for production. Chances are you will get a very appealing chart even if you don’t specify any options at all. For instance, Chart.js has animations turned on by default, so you can instantly bring attention to the story you’re telling with the data. # Integrations Chart.js comes with built-in TypeScript typings and is compatible with all popular JavaScript frameworks (opens new window) including React (opens new window), Vue (opens new window), Svelte (opens new window), and Angular (opens new window). You can use Chart.js directly or leverage well-maintained wrapper packages that allow for a more native integration with your frameworks of choice. # Developer experience Chart.js has very thorough documentation (yes, you're reading it), API reference, and examples. Maintainers and community members eagerly engage in conversations on Discord (opens new window), GitHub Discussions (opens new window), and Stack Overflow (opens new window) where more than 11,000 questions are tagged with chart.js. # Canvas rendering Chart.js renders chart elements on an HTML5 canvas unlike several others, mostly D3.js-based, charting libraries that render as SVG. Canvas rendering makes Chart.js very performant, especially for large datasets and complex visualizations that would otherwise require thousands of SVG nodes in the DOM tree. At the same time, canvas rendering disallows CSS styling, so you will have to use built-in options for that, or create a custom plugin or chart type to render everything to your liking. # Performance Chart.js is very well suited for large datasets. Such datasets can be efficiently ingested using the internal format, so you can skip data parsing and normalization. Alternatively, data decimation can be configured to sample the dataset and reduce its size before rendering. In the end, the canvas rendering that Chart.js uses reduces the toll on your DOM tree in comparison to SVG rendering. Also, tree-shaking support allows you to include minimal parts of Chart.js code in your bundle, reducing bundle size and page load time. # Community Chart.js is actively developed (opens new window) and maintained by the community. With minor releases (opens new window) on an approximately bi-monthly basis and major releases with breaking changes every couple of years, Chart.js keeps the balance between adding new features and making it a hassle to keep up with them.  Last Updated: 4/15/2025, 1:19:05 PM  
        Getting Started
      
      →\n\n\n\n# Chart.js Welcome to Chart.js! Get started with Chart.js — best if you're new to Chart.js Migrate from Chart.js v3 or Chart.js v2 Join the community on Discord (opens new window) and Twitter (opens new window) Post a question tagged with chart.js on Stack Overflow (opens new window) Contribute to Chart.js # Why Chart.js Among many charting libraries (opens new window) for JavaScript application developers, Chart.js is currently the most popular one according to GitHub stars (opens new window) (~60,000) and npm downloads (opens new window) (~2,400,000 weekly). Chart.js was created and announced (opens new window) in 2013 but has come a long way since then. It’s open-source, licensed under the very permissive MIT license (opens new window), and maintained by an active community. # Features Chart.js provides a set of frequently used chart types, plugins, and customization options. In addition to a reasonable set of built-in chart types, you can use additional community-maintained chart types (opens new window). On top of that, it’s possible to combine several chart types into a mixed chart (essentially, blending multiple chart types into one on the same canvas). Chart.js is highly customizable with custom plugins (opens new window) to create annotations, zoom, or drag-and-drop functionalities to name a few things. # Defaults Chart.js comes with a sound default configuration, making it very easy to start with and get an app that is ready for production. Chances are you will get a very appealing chart even if you don’t specify any options at all. For instance, Chart.js has animations turned on by default, so you can instantly bring attention to the story you’re telling with the data. # Integrations Chart.js comes with built-in TypeScript typings and is compatible with all popular JavaScript frameworks (opens new window) including React (opens new window), Vue (opens new window), Svelte (opens new window), and Angular (opens new window). You can use Chart.js directly or leverage well-maintained wrapper packages that allow for a more native integration with your frameworks of choice. # Developer experience Chart.js has very thorough documentation (yes, you're reading it), API reference, and examples. Maintainers and community members eagerly engage in conversations on Discord (opens new window), GitHub Discussions (opens new window), and Stack Overflow (opens new window) where more than 11,000 questions are tagged with chart.js. # Canvas rendering Chart.js renders chart elements on an HTML5 canvas unlike several others, mostly D3.js-based, charting libraries that render as SVG. Canvas rendering makes Chart.js very performant, especially for large datasets and complex visualizations that would otherwise require thousands of SVG nodes in the DOM tree. At the same time, canvas rendering disallows CSS styling, so you will have to use built-in options for that, or create a custom plugin or chart type to render everything to your liking. # Performance Chart.js is very well suited for large datasets. Such datasets can be efficiently ingested using the internal format, so you can skip data parsing and normalization. Alternatively, data decimation can be configured to sample the dataset and reduce its size before rendering. In the end, the canvas rendering that Chart.js uses reduces the toll on your DOM tree in comparison to SVG rendering. Also, tree-shaking support allows you to include minimal parts of Chart.js code in your bundle, reducing bundle size and page load time. # Community Chart.js is actively developed (opens new window) and maintained by the community. With minor releases (opens new window) on an approximately bi-monthly basis and major releases with breaking changes every couple of years, Chart.js keeps the balance between adding new features and making it a hassle to keep up with them.  Last Updated: 4/15/2025, 1:19:05 PM  
        Getting Started
      
      →\n\n\n\n# Chart.js Welcome to Chart.js! Get started with Chart.js — best if you're new to Chart.js Migrate from Chart.js v3 or Chart.js v2 Join the community on Discord (opens new window) and Twitter (opens new window) Post a question tagged with chart.js on Stack Overflow (opens new window) Contribute to Chart.js # Why Chart.js Among many charting libraries (opens new window) for JavaScript application developers, Chart.js is currently the most popular one according to GitHub stars (opens new window) (~60,000) and npm downloads (opens new window) (~2,400,000 weekly). Chart.js was created and announced (opens new window) in 2013 but has come a long way since then. It’s open-source, licensed under the very permissive MIT license (opens new window), and maintained by an active community. # Features Chart.js provides a set of frequently used chart types, plugins, and customization options. In addition to a reasonable set of built-in chart types, you can use additional community-maintained chart types (opens new window). On top of that, it’s possible to combine several chart types into a mixed chart (essentially, blending multiple chart types into one on the same canvas). Chart.js is highly customizable with custom plugins (opens new window) to create annotations, zoom, or drag-and-drop functionalities to name a few things. # Defaults Chart.js comes with a sound default configuration, making it very easy to start with and get an app that is ready for production. Chances are you will get a very appealing chart even if you don’t specify any options at all. For instance, Chart.js has animations turned on by default, so you can instantly bring attention to the story you’re telling with the data. # Integrations Chart.js comes with built-in TypeScript typings and is compatible with all popular JavaScript frameworks (opens new window) including React (opens new window), Vue (opens new window), Svelte (opens new window), and Angular (opens new window). You can use Chart.js directly or leverage well-maintained wrapper packages that allow for a more native integration with your frameworks of choice. # Developer experience Chart.js has very thorough documentation (yes, you're reading it), API reference, and examples. Maintainers and community members eagerly engage in conversations on Discord (opens new window), GitHub Discussions (opens new window), and Stack Overflow (opens new window) where more than 11,000 questions are tagged with chart.js. # Canvas rendering Chart.js renders chart elements on an HTML5 canvas unlike several others, mostly D3.js-based, charting libraries that render as SVG. Canvas rendering makes Chart.js very performant, especially for large datasets and complex visualizations that would otherwise require thousands of SVG nodes in the DOM tree. At the same time, canvas rendering disallows CSS styling, so you will have to use built-in options for that, or create a custom plugin or chart type to render everything to your liking. # Performance Chart.js is very well suited for large datasets. Such datasets can be efficiently ingested using the internal format, so you can skip data parsing and normalization. Alternatively, data decimation can be configured to sample the dataset and reduce its size before rendering. In the end, the canvas rendering that Chart.js uses reduces the toll on your DOM tree in comparison to SVG rendering. Also, tree-shaking support allows you to include minimal parts of Chart.js code in your bundle, reducing bundle size and page load time. # Community Chart.js is actively developed (opens new window) and maintained by the community. With minor releases (opens new window) on an approximately bi-monthly basis and major releases with breaking changes every couple of years, Chart.js keeps the balance between adding new features and making it a hassle to keep up with them.  Last Updated: 4/15/2025, 1:19:05 PM  
        Getting Started
      
      →\n\n\n\n# Chart.js Samples You can navigate through the samples via the sidebar. Alternatively, you can run them locally. To do so, clone the Chart.js repository (opens new window) from GitHub, run pnpm ci to install all packages, then run pnpm run docs:dev to build the documentation. As soon as the build is done, you can go to localhost:8080/samples (opens new window) to see the samples. # Out of the box working samples These samples are made for demonstration purposes only. They won't work out of the box if you copy paste them into your own website. This is because of how the docs are getting built. Some boilerplate code gets hidden.
For a sample that can be copied and pasted and used directly you can check the usage page. # Autogenerated data The data used in the samples is autogenerated using custom functions. These functions do not ship with the library, for more information about this you can check the utils page. # Actions block The samples have an actions code block. These actions are not part of Chart.js. They are internally transformed to separate buttons together with onClick listeners by a plugin we use in the documentation. To implement such actions yourself you can make some buttons and add onClick event listeners to them. Then in these event listeners you can call your variable in which you made the chart and do the logic that the button is supposed to do.  Last Updated: 4/15/2025, 1:19:05 PM  
        Bar Chart Border Radius
      
      →\n\n\n\n# Chart.js Welcome to Chart.js! Get started with Chart.js — best if you're new to Chart.js Migrate from Chart.js v3 or Chart.js v2 Join the community on Discord (opens new window) and Twitter (opens new window) Post a question tagged with chart.js on Stack Overflow (opens new window) Contribute to Chart.js # Why Chart.js Among many charting libraries (opens new window) for JavaScript application developers, Chart.js is currently the most popular one according to GitHub stars (opens new window) (~60,000) and npm downloads (opens new window) (~2,400,000 weekly). Chart.js was created and announced (opens new window) in 2013 but has come a long way since then. It’s open-source, licensed under the very permissive MIT license (opens new window), and maintained by an active community. # Features Chart.js provides a set of frequently used chart types, plugins, and customization options. In addition to a reasonable set of built-in chart types, you can use additional community-maintained chart types (opens new window). On top of that, it’s possible to combine several chart types into a mixed chart (essentially, blending multiple chart types into one on the same canvas). Chart.js is highly customizable with custom plugins (opens new window) to create annotations, zoom, or drag-and-drop functionalities to name a few things. # Defaults Chart.js comes with a sound default configuration, making it very easy to start with and get an app that is ready for production. Chances are you will get a very appealing chart even if you don’t specify any options at all. For instance, Chart.js has animations turned on by default, so you can instantly bring attention to the story you’re telling with the data. # Integrations Chart.js comes with built-in TypeScript typings and is compatible with all popular JavaScript frameworks (opens new window) including React (opens new window), Vue (opens new window), Svelte (opens new window), and Angular (opens new window). You can use Chart.js directly or leverage well-maintained wrapper packages that allow for a more native integration with your frameworks of choice. # Developer experience Chart.js has very thorough documentation (yes, you're reading it), API reference, and examples. Maintainers and community members eagerly engage in conversations on Discord (opens new window), GitHub Discussions (opens new window), and Stack Overflow (opens new window) where more than 11,000 questions are tagged with chart.js. # Canvas rendering Chart.js renders chart elements on an HTML5 canvas unlike several others, mostly D3.js-based, charting libraries that render as SVG. Canvas rendering makes Chart.js very performant, especially for large datasets and complex visualizations that would otherwise require thousands of SVG nodes in the DOM tree. At the same time, canvas rendering disallows CSS styling, so you will have to use built-in options for that, or create a custom plugin or chart type to render everything to your liking. # Performance Chart.js is very well suited for large datasets. Such datasets can be efficiently ingested using the internal format, so you can skip data parsing and normalization. Alternatively, data decimation can be configured to sample the dataset and reduce its size before rendering. In the end, the canvas rendering that Chart.js uses reduces the toll on your DOM tree in comparison to SVG rendering. Also, tree-shaking support allows you to include minimal parts of Chart.js code in your bundle, reducing bundle size and page load time. # Community Chart.js is actively developed (opens new window) and maintained by the community. With minor releases (opens new window) on an approximately bi-monthly basis and major releases with breaking changes every couple of years, Chart.js keeps the balance between adding new features and making it a hassle to keep up with them.  Last Updated: 4/15/2025, 1:19:05 PM  
        Getting Started
      
      →\n\n\n\n# Chart.js Welcome to Chart.js! Get started with Chart.js — best if you're new to Chart.js Migrate from Chart.js v3 or Chart.js v2 Join the community on Discord (opens new window) and Twitter (opens new window) Post a question tagged with chart.js on Stack Overflow (opens new window) Contribute to Chart.js # Why Chart.js Among many charting libraries (opens new window) for JavaScript application developers, Chart.js is currently the most popular one according to GitHub stars (opens new window) (~60,000) and npm downloads (opens new window) (~2,400,000 weekly). Chart.js was created and announced (opens new window) in 2013 but has come a long way since then. It’s open-source, licensed under the very permissive MIT license (opens new window), and maintained by an active community. # Features Chart.js provides a set of frequently used chart types, plugins, and customization options. In addition to a reasonable set of built-in chart types, you can use additional community-maintained chart types (opens new window). On top of that, it’s possible to combine several chart types into a mixed chart (essentially, blending multiple chart types into one on the same canvas). Chart.js is highly customizable with custom plugins (opens new window) to create annotations, zoom, or drag-and-drop functionalities to name a few things. # Defaults Chart.js comes with a sound default configuration, making it very easy to start with and get an app that is ready for production. Chances are you will get a very appealing chart even if you don’t specify any options at all. For instance, Chart.js has animations turned on by default, so you can instantly bring attention to the story you’re telling with the data. # Integrations Chart.js comes with built-in TypeScript typings and is compatible with all popular JavaScript frameworks (opens new window) including React (opens new window), Vue (opens new window), Svelte (opens new window), and Angular (opens new window). You can use Chart.js directly or leverage well-maintained wrapper packages that allow for a more native integration with your frameworks of choice. # Developer experience Chart.js has very thorough documentation (yes, you're reading it), API reference, and examples. Maintainers and community members eagerly engage in conversations on Discord (opens new window), GitHub Discussions (opens new window), and Stack Overflow (opens new window) where more than 11,000 questions are tagged with chart.js. # Canvas rendering Chart.js renders chart elements on an HTML5 canvas unlike several others, mostly D3.js-based, charting libraries that render as SVG. Canvas rendering makes Chart.js very performant, especially for large datasets and complex visualizations that would otherwise require thousands of SVG nodes in the DOM tree. At the same time, canvas rendering disallows CSS styling, so you will have to use built-in options for that, or create a custom plugin or chart type to render everything to your liking. # Performance Chart.js is very well suited for large datasets. Such datasets can be efficiently ingested using the internal format, so you can skip data parsing and normalization. Alternatively, data decimation can be configured to sample the dataset and reduce its size before rendering. In the end, the canvas rendering that Chart.js uses reduces the toll on your DOM tree in comparison to SVG rendering. Also, tree-shaking support allows you to include minimal parts of Chart.js code in your bundle, reducing bundle size and page load time. # Community Chart.js is actively developed (opens new window) and maintained by the community. With minor releases (opens new window) on an approximately bi-monthly basis and major releases with breaking changes every couple of years, Chart.js keeps the balance between adding new features and making it a hassle to keep up with them.  Last Updated: 4/15/2025, 1:19:05 PM  
        Getting Started
      
      →\n\n\n\n# Performance Chart.js charts are rendered on canvas elements, which makes rendering quite fast. For large datasets or performance sensitive applications, you may wish to consider the tips below. # Data structure and format # Parsing Provide prepared data in the internal format accepted by the dataset and scales, and set parsing: false. See Data structures for more information. # Data normalization Chart.js is fastest if you provide data with indices that are unique, sorted, and consistent across datasets and provide the normalized: true option to let Chart.js know that you have done so. Even without this option, it can sometimes still be faster to provide sorted data. # Decimation Decimating your data will achieve the best results. When there is a lot of data to display on the graph, it doesn't make sense to show tens of thousands of data points on a graph that is only a few hundred pixels wide. The decimation plugin can be used with line charts to decimate data before the chart is rendered. This will provide the best performance since it will reduce the memory needed to render the chart. Line charts are able to do automatic data decimation during draw, when certain conditions are met. You should still consider decimating data yourself before passing it in for maximum performance since the automatic decimation occurs late in the chart life cycle. # Tick Calculation # Rotation Specify a rotation value by setting minRotation and maxRotation to the same value, which avoids the chart from having to automatically determine a value to use. # Sampling Set the ticks.sampleSize option. This will determine how large your labels are by looking at only a subset of them in order to render axes more quickly. This works best if there is not a large variance in the size of your labels. # Disable Animations If your charts have long render times, it is a good idea to disable animations. Doing so will mean that the chart needs to only be rendered once during an update instead of multiple times. This will have the effect of reducing CPU usage and improving general page performance.
Line charts use Path2D caching when animations are disabled and Path2D is available. To disable animations new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        animation: false
    }
});
# Specify min and max for scales If you specify the min and max, the scale does not have to compute the range from the data. new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        scales: {
            x: {
                type: 'time',
                min: new Date('2019-01-01').valueOf(),
                max: new Date('2019-12-31').valueOf()
            },
            y: {
                type: 'linear',
                min: 0,
                max: 100
            }
        }
    }
});
# Parallel rendering with web workers As of 2023, modern browser have the ability to transfer rendering control of a canvas (opens new window) to a web worker. Web workers can use the OffscreenCanvas API (opens new window) to render from a web worker onto canvases in the DOM. Chart.js is a canvas-based library and supports rendering in a web worker - just pass an OffscreenCanvas into the Chart constructor instead of a Canvas element. By moving all Chart.js calculations onto a separate thread, the main thread can be freed up for other uses. Some tips and tricks when using Chart.js in a web worker: Transferring data between threads can be expensive, so ensure that your config and data objects are as small as possible. Try generating them on the worker side if you can (workers can make HTTP requests!) or passing them to your worker as ArrayBuffers, which can be transferred quickly from one thread to another. You can't transfer functions between threads, so if your config object includes functions you'll have to strip them out before transferring and then add them back later. You can't access the DOM from worker threads, so Chart.js plugins that use the DOM (including any mouse interactions) will likely not work. Ensure that you have a fallback if you support older browsers. Resizing the chart must be done manually. See an example in the worker code below. Example main thread code: const config = {};
const canvas = new HTMLCanvasElement();
const offscreenCanvas = canvas.transferControlToOffscreen();
const worker = new Worker('worker.js');
worker.postMessage({canvas: offscreenCanvas, config}, [offscreenCanvas]);
Example worker code, in worker.js: onmessage = function(event) {
    const {canvas, config} = event.data;
    const chart = new Chart(canvas, config);
    // Resizing the chart must be done manually, since OffscreenCanvas does not include event listeners.
    canvas.width = 100;
    canvas.height = 100;
    chart.resize();
};
# Line Charts # Leave Bézier curves disabled If you are drawing lines on your chart, disabling Bézier curves will improve render times since drawing a straight line is more performant than a Bézier curve. Bézier curves are disabled by default. # Automatic data decimation during draw Line element will automatically decimate data, when tension, stepped, and borderDash are left set to their default values (false, 0, and [] respectively). This improves rendering speed by skipping drawing of invisible line segments. # Enable spanGaps If you have a lot of data points, it can be more performant to enable spanGaps. This disables segmentation of the line, which can be an unneeded step. To enable spanGaps: new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            spanGaps: true // enable for a single dataset
        }]
    },
    options: {
        spanGaps: true // enable for all datasets
    }
});
# Disable Line Drawing If you have a lot of data points, it can be more performant to disable rendering of the line for a dataset and only draw points. Doing this means that there is less to draw on the canvas which will improve render performance. To disable lines: new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            showLine: false // disable for a single dataset
        }]
    },
    options: {
        showLine: false // disable for all datasets
    }
});
# Disable Point Drawing If you have a lot of data points, it can be more performant to disable rendering of the points for a dataset and only draw line. Doing this means that there is less to draw on the canvas which will improve render performance. To disable point drawing: new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            pointRadius: 0 // disable for a single dataset
        }]
    },
    options: {
        datasets: {
            line: {
                pointRadius: 0 // disable for all `'line'` datasets
            }
        },
        elements: {
            point: {
                radius: 0 // default to disabled in all datasets
            }
        }
    }
});
# When transpiling with Babel, consider using loose mode Babel 7.9 changed the way classes are constructed. It is slow, unless used with loose mode.
More information (opens new window)  Last Updated: 4/15/2025, 1:19:05 PM 
      ←
      
        Padding
       
        Configuration
      
      →\n\n\n\n# Performance Chart.js charts are rendered on canvas elements, which makes rendering quite fast. For large datasets or performance sensitive applications, you may wish to consider the tips below. # Data structure and format # Parsing Provide prepared data in the internal format accepted by the dataset and scales, and set parsing: false. See Data structures for more information. # Data normalization Chart.js is fastest if you provide data with indices that are unique, sorted, and consistent across datasets and provide the normalized: true option to let Chart.js know that you have done so. Even without this option, it can sometimes still be faster to provide sorted data. # Decimation Decimating your data will achieve the best results. When there is a lot of data to display on the graph, it doesn't make sense to show tens of thousands of data points on a graph that is only a few hundred pixels wide. The decimation plugin can be used with line charts to decimate data before the chart is rendered. This will provide the best performance since it will reduce the memory needed to render the chart. Line charts are able to do automatic data decimation during draw, when certain conditions are met. You should still consider decimating data yourself before passing it in for maximum performance since the automatic decimation occurs late in the chart life cycle. # Tick Calculation # Rotation Specify a rotation value by setting minRotation and maxRotation to the same value, which avoids the chart from having to automatically determine a value to use. # Sampling Set the ticks.sampleSize option. This will determine how large your labels are by looking at only a subset of them in order to render axes more quickly. This works best if there is not a large variance in the size of your labels. # Disable Animations If your charts have long render times, it is a good idea to disable animations. Doing so will mean that the chart needs to only be rendered once during an update instead of multiple times. This will have the effect of reducing CPU usage and improving general page performance.
Line charts use Path2D caching when animations are disabled and Path2D is available. To disable animations new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        animation: false
    }
});
# Specify min and max for scales If you specify the min and max, the scale does not have to compute the range from the data. new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
        scales: {
            x: {
                type: 'time',
                min: new Date('2019-01-01').valueOf(),
                max: new Date('2019-12-31').valueOf()
            },
            y: {
                type: 'linear',
                min: 0,
                max: 100
            }
        }
    }
});
# Parallel rendering with web workers As of 2023, modern browser have the ability to transfer rendering control of a canvas (opens new window) to a web worker. Web workers can use the OffscreenCanvas API (opens new window) to render from a web worker onto canvases in the DOM. Chart.js is a canvas-based library and supports rendering in a web worker - just pass an OffscreenCanvas into the Chart constructor instead of a Canvas element. By moving all Chart.js calculations onto a separate thread, the main thread can be freed up for other uses. Some tips and tricks when using Chart.js in a web worker: Transferring data between threads can be expensive, so ensure that your config and data objects are as small as possible. Try generating them on the worker side if you can (workers can make HTTP requests!) or passing them to your worker as ArrayBuffers, which can be transferred quickly from one thread to another. You can't transfer functions between threads, so if your config object includes functions you'll have to strip them out before transferring and then add them back later. You can't access the DOM from worker threads, so Chart.js plugins that use the DOM (including any mouse interactions) will likely not work. Ensure that you have a fallback if you support older browsers. Resizing the chart must be done manually. See an example in the worker code below. Example main thread code: const config = {};
const canvas = new HTMLCanvasElement();
const offscreenCanvas = canvas.transferControlToOffscreen();
const worker = new Worker('worker.js');
worker.postMessage({canvas: offscreenCanvas, config}, [offscreenCanvas]);
Example worker code, in worker.js: onmessage = function(event) {
    const {canvas, config} = event.data;
    const chart = new Chart(canvas, config);
    // Resizing the chart must be done manually, since OffscreenCanvas does not include event listeners.
    canvas.width = 100;
    canvas.height = 100;
    chart.resize();
};
# Line Charts # Leave Bézier curves disabled If you are drawing lines on your chart, disabling Bézier curves will improve render times since drawing a straight line is more performant than a Bézier curve. Bézier curves are disabled by default. # Automatic data decimation during draw Line element will automatically decimate data, when tension, stepped, and borderDash are left set to their default values (false, 0, and [] respectively). This improves rendering speed by skipping drawing of invisible line segments. # Enable spanGaps If you have a lot of data points, it can be more performant to enable spanGaps. This disables segmentation of the line, which can be an unneeded step. To enable spanGaps: new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            spanGaps: true // enable for a single dataset
        }]
    },
    options: {
        spanGaps: true // enable for all datasets
    }
});
# Disable Line Drawing If you have a lot of data points, it can be more performant to disable rendering of the line for a dataset and only draw points. Doing this means that there is less to draw on the canvas which will improve render performance. To disable lines: new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            showLine: false // disable for a single dataset
        }]
    },
    options: {
        showLine: false // disable for all datasets
    }
});
# Disable Point Drawing If you have a lot of data points, it can be more performant to disable rendering of the points for a dataset and only draw line. Doing this means that there is less to draw on the canvas which will improve render performance. To disable point drawing: new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            pointRadius: 0 // disable for a single dataset
        }]
    },
    options: {
        datasets: {
            line: {
                pointRadius: 0 // disable for all `'line'` datasets
            }
        },
        elements: {
            point: {
                radius: 0 // default to disabled in all datasets
            }
        }
    }
});
# When transpiling with Babel, consider using loose mode Babel 7.9 changed the way classes are constructed. It is slow, unless used with loose mode.
More information (opens new window)  Last Updated: 4/15/2025, 1:19:05 PM 
      ←
      
        Padding
       
        Configuration
      
      →\n\n\n\n# Data Decimation The decimation plugin can be used with line charts to automatically decimate data at the start of the chart lifecycle. Before enabling this plugin, review the requirements to ensure that it will work with the chart you want to create. # Configuration Options Namespace: options.plugins.decimation, the global options for the plugin are defined in Chart.defaults.plugins.decimation. Name Type Default Description enabled boolean false Is decimation enabled? algorithm string 'min-max' Decimation algorithm to use. See the more... samples number  If the 'lttb' algorithm is used, this is the number of samples in the output dataset. Defaults to the canvas width to pick 1 sample per pixel. threshold number  If the number of samples in the current axis range is above this value, the decimation will be triggered. Defaults to 4 times the canvas width.The number of point after decimation can be higher than the threshold value. # Decimation Algorithms Decimation algorithm to use for data. Options are: 'lttb' 'min-max' # Largest Triangle Three Bucket (LTTB) Decimation LTTB (opens new window) decimation reduces the number of data points significantly. This is most useful for showing trends in data using only a few data points. # Min/Max Decimation Min/max (opens new window) decimation will preserve peaks in your data but could require up to 4 points for each pixel. This type of decimation would work well for a very noisy signal where you need to see data peaks. # Requirements To use the decimation plugin, the following requirements must be met: The dataset must have an indexAxis of 'x' The dataset must be a line The X axis for the dataset must be either a 'linear' or 'time' type axis Data must not need parsing, i.e. parsing must be false The dataset object must be mutable. The plugin stores the original data as dataset._data and then defines a new data property on the dataset. There must be more points on the chart than the threshold value. Take a look at the Configuration Options for more information. # Related Samples Data Decimation Sample  Last Updated: 4/15/2025, 1:19:05 PM 
      ←
      
        Canvas background
       
        Device Pixel Ratio
      
      →\n\n\n\n# Chart.js Welcome to Chart.js! Get started with Chart.js — best if you're new to Chart.js Migrate from Chart.js v3 or Chart.js v2 Join the community on Discord (opens new window) and Twitter (opens new window) Post a question tagged with chart.js on Stack Overflow (opens new window) Contribute to Chart.js # Why Chart.js Among many charting libraries (opens new window) for JavaScript application developers, Chart.js is currently the most popular one according to GitHub stars (opens new window) (~60,000) and npm downloads (opens new window) (~2,400,000 weekly). Chart.js was created and announced (opens new window) in 2013 but has come a long way since then. It’s open-source, licensed under the very permissive MIT license (opens new window), and maintained by an active community. # Features Chart.js provides a set of frequently used chart types, plugins, and customization options. In addition to a reasonable set of built-in chart types, you can use additional community-maintained chart types (opens new window). On top of that, it’s possible to combine several chart types into a mixed chart (essentially, blending multiple chart types into one on the same canvas). Chart.js is highly customizable with custom plugins (opens new window) to create annotations, zoom, or drag-and-drop functionalities to name a few things. # Defaults Chart.js comes with a sound default configuration, making it very easy to start with and get an app that is ready for production. Chances are you will get a very appealing chart even if you don’t specify any options at all. For instance, Chart.js has animations turned on by default, so you can instantly bring attention to the story you’re telling with the data. # Integrations Chart.js comes with built-in TypeScript typings and is compatible with all popular JavaScript frameworks (opens new window) including React (opens new window), Vue (opens new window), Svelte (opens new window), and Angular (opens new window). You can use Chart.js directly or leverage well-maintained wrapper packages that allow for a more native integration with your frameworks of choice. # Developer experience Chart.js has very thorough documentation (yes, you're reading it), API reference, and examples. Maintainers and community members eagerly engage in conversations on Discord (opens new window), GitHub Discussions (opens new window), and Stack Overflow (opens new window) where more than 11,000 questions are tagged with chart.js. # Canvas rendering Chart.js renders chart elements on an HTML5 canvas unlike several others, mostly D3.js-based, charting libraries that render as SVG. Canvas rendering makes Chart.js very performant, especially for large datasets and complex visualizations that would otherwise require thousands of SVG nodes in the DOM tree. At the same time, canvas rendering disallows CSS styling, so you will have to use built-in options for that, or create a custom plugin or chart type to render everything to your liking. # Performance Chart.js is very well suited for large datasets. Such datasets can be efficiently ingested using the internal format, so you can skip data parsing and normalization. Alternatively, data decimation can be configured to sample the dataset and reduce its size before rendering. In the end, the canvas rendering that Chart.js uses reduces the toll on your DOM tree in comparison to SVG rendering. Also, tree-shaking support allows you to include minimal parts of Chart.js code in your bundle, reducing bundle size and page load time. # Community Chart.js is actively developed (opens new window) and maintained by the community. With minor releases (opens new window) on an approximately bi-monthly basis and major releases with breaking changes every couple of years, Chart.js keeps the balance between adding new features and making it a hassle to keep up with them.  Last Updated: 4/15/2025, 1:19:05 PM  
        Getting Started
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Enumeration: DecimationAlgorithm # Enumeration Members # lttb • lttb = "lttb" # Defined in types/index.d.ts:2223 (opens new window)  # minmax • minmax = "min-max" # Defined in types/index.d.ts:2224 (opens new window)   
      ←
      
        Exports
       
        UpdateModeEnum
      
      →\n\n\n\n# Enumeration: UpdateModeEnum # Enumeration Members # active • active = "active" # Defined in types/index.d.ts:587 (opens new window)  # default • default = "default" # Defined in types/index.d.ts:586 (opens new window)  # hide • hide = "hide" # Defined in types/index.d.ts:584 (opens new window)  # none • none = "none" # Defined in types/index.d.ts:583 (opens new window)  # reset • reset = "reset" # Defined in types/index.d.ts:582 (opens new window)  # resize • resize = "resize" # Defined in types/index.d.ts:581 (opens new window)  # show • show = "show" # Defined in types/index.d.ts:585 (opens new window)   
      ←
      
        DecimationAlgorithm
       
        Animation
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Class: Animation # Constructors # constructor • new Animation(cfg, target, prop, to?) # Parameters Name Type cfg AnyObject target AnyObject prop string to? unknown # Defined in types/animation.d.ts:5 (opens new window) # Properties # _to • Readonly _to: unknown # Defined in types/animation.d.ts:10 (opens new window) # Methods # active ▸ active(): boolean # Returns boolean # Defined in types/animation.d.ts:6 (opens new window)  # cancel ▸ cancel(): void # Returns void # Defined in types/animation.d.ts:8 (opens new window)  # tick ▸ tick(date): void # Parameters Name Type date number # Returns void # Defined in types/animation.d.ts:9 (opens new window)  # update ▸ update(cfg, to, date): void # Parameters Name Type cfg AnyObject to unknown date number # Returns void # Defined in types/animation.d.ts:7 (opens new window)   
      ←
      
        UpdateModeEnum
       
        Animations
      
      →\n\n\n\n# Class: Animations # Constructors # constructor • new Animations(chart, animations) # Parameters Name Type chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> animations AnyObject # Defined in types/animation.d.ts:31 (opens new window) # Methods # configure ▸ configure(animations): void # Parameters Name Type animations AnyObject # Returns void # Defined in types/animation.d.ts:32 (opens new window)  # update ▸ update(target, values): boolean # Parameters Name Type target AnyObject values AnyObject # Returns boolean # Defined in types/animation.d.ts:33 (opens new window)   
      ←
      
        Animation
       
        Animator
      
      →\n\n\n\n# Class: Animator # Constructors # constructor • new Animator() # Methods # add ▸ add(chart, items): void # Parameters Name Type chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> items readonly Animation[] # Returns void # Defined in types/animation.d.ts:22 (opens new window)  # has ▸ has(chart): boolean # Parameters Name Type chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Returns boolean # Defined in types/animation.d.ts:23 (opens new window)  # listen ▸ listen(chart, event, cb): void # Parameters Name Type chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> event "progress" | "complete" cb (event: AnimationEvent) => void # Returns void # Defined in types/animation.d.ts:21 (opens new window)  # remove ▸ remove(chart): boolean # Parameters Name Type chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Returns boolean # Defined in types/animation.d.ts:27 (opens new window)  # running ▸ running(chart): boolean # Parameters Name Type chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Returns boolean # Defined in types/animation.d.ts:25 (opens new window)  # start ▸ start(chart): void # Parameters Name Type chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Returns void # Defined in types/animation.d.ts:24 (opens new window)  # stop ▸ stop(chart): void # Parameters Name Type chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Returns void # Defined in types/animation.d.ts:26 (opens new window)   
      ←
      
        Animations
       
        ArcElement
      
      →\n\n\n\n# Class: ArcElement # Hierarchy default<ArcProps, ArcOptions> ↳ ArcElement # Constructors # constructor • new ArcElement(cfg) # Parameters Name Type cfg any # Overrides Element<ArcProps, ArcOptions&gt;.constructor # Defined in elements/element.arc.ts:298 (opens new window) # Properties # $animations • $animations: Record<keyof ArcProps, Animation> # Inherited from Element.$animations # Defined in core/core.element.ts:15 (opens new window)  # active • active: boolean = false # Inherited from Element.active # Defined in core/core.element.ts:13 (opens new window)  # circumference • circumference: number # Defined in elements/element.arc.ts:290 (opens new window)  # endAngle • endAngle: number # Defined in elements/element.arc.ts:291 (opens new window)  # fullCircles • fullCircles: number # Defined in elements/element.arc.ts:292 (opens new window)  # innerRadius • innerRadius: number # Defined in elements/element.arc.ts:293 (opens new window)  # options • options: ArcOptions # Inherited from Element.options # Defined in core/core.element.ts:14 (opens new window)  # outerRadius • outerRadius: number # Defined in elements/element.arc.ts:294 (opens new window)  # pixelMargin • pixelMargin: number # Defined in elements/element.arc.ts:295 (opens new window)  # startAngle • startAngle: number # Defined in elements/element.arc.ts:296 (opens new window)  # x • x: number # Inherited from Element.x # Defined in core/core.element.ts:11 (opens new window)  # y • y: number # Inherited from Element.y # Defined in core/core.element.ts:12 (opens new window)  # defaultRoutes ▪ Static defaultRoutes: Object # Type declaration Name Type backgroundColor string # Overrides Element.defaultRoutes # Defined in elements/element.arc.ts:281 (opens new window)  # defaults ▪ Static defaults: Object # Type declaration Name Type angle any borderAlign string borderColor string borderDash any[] borderDashOffset number borderJoinStyle any borderRadius number borderWidth number circular boolean offset number spacing number # Overrides Element.defaults # Defined in elements/element.arc.ts:267 (opens new window)  # descriptors ▪ Static descriptors: Object # Type declaration Name Type _indexable (name: any) => boolean _scriptable boolean # Defined in elements/element.arc.ts:285 (opens new window)  # id ▪ Static id: string = 'arc' # Defined in elements/element.arc.ts:265 (opens new window) # Methods # draw ▸ draw(ctx): void # Parameters Name Type ctx CanvasRenderingContext2D # Returns void # Defined in elements/element.arc.ts:356 (opens new window)  # getCenterPoint ▸ getCenterPoint(useFinalPosition): Object # Parameters Name Type useFinalPosition boolean # Returns Object Name Type x number y number # Defined in elements/element.arc.ts:334 (opens new window)  # getProps ▸ getProps<P>(props, final?): Pick<ArcProps, P[number]> Gets the current or final value of each prop. Can return extra properties (whole object). # Type parameters Name Type P extends keyof ArcProps[] # Parameters Name Type Description props P properties to get final? boolean get the final value (animation target) # Returns Pick<ArcProps, P[number]> # Inherited from Element.getProps # Defined in core/core.element.ts:31 (opens new window) ▸ getProps<P>(props, final?): Partial<Record<P, unknown>> # Type parameters Name Type P extends string # Parameters Name Type props P[] final? boolean # Returns Partial<Record<P, unknown>> # Inherited from Element.getProps # Defined in core/core.element.ts:32 (opens new window)  # hasValue ▸ hasValue(): boolean # Returns boolean # Inherited from Element.hasValue # Defined in core/core.element.ts:22 (opens new window)  # inRange ▸ inRange(chartX, chartY, useFinalPosition): boolean # Parameters Name Type chartX number chartY number useFinalPosition boolean # Returns boolean # Defined in elements/element.arc.ts:315 (opens new window)  # tooltipPosition ▸ tooltipPosition(useFinalPosition): Object # Parameters Name Type useFinalPosition boolean # Returns Object Name Type x number y number # Overrides Element.tooltipPosition # Defined in elements/element.arc.ts:352 (opens new window)   
      ←
      
        Animator
       
        BasePlatform
      
      →\n\n\n\n# Class: BasePlatform # Hierarchy BasePlatform ↳ BasicPlatform ↳ DomPlatform # Constructors # constructor • new BasePlatform() # Methods # acquireContext ▸ acquireContext(canvas, options?): CanvasRenderingContext2D Called at chart construction time, returns a context2d instance implementing
the [W3C Canvas 2D Context API standard]https://www.w3.org/TR/2dcontext/ (opens new window). # Parameters Name Type Description canvas HTMLCanvasElement The canvas from which to acquire context (platform specific) options? CanvasRenderingContext2DSettings The chart options # Returns CanvasRenderingContext2D # Defined in types/index.d.ts:2167 (opens new window)  # addEventListener ▸ addEventListener(chart, type, listener): void Registers the specified listener on the given chart. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> Chart from which to listen for event type string The (ChartEvent) type to listen for listener (e: ChartEvent) => void Receives a notification (an object that implements the ChartEvent interface) when an event of the specified type occurs. # Returns void # Defined in types/index.d.ts:2185 (opens new window)  # getDevicePixelRatio ▸ getDevicePixelRatio(): number # Returns number the current devicePixelRatio of the device this platform is connected to. # Defined in types/index.d.ts:2196 (opens new window)  # getMaximumSize ▸ getMaximumSize(canvas, width?, height?, aspectRatio?): Object # Parameters Name Type Description canvas HTMLCanvasElement The canvas for which to calculate the maximum size width? number Parent element's content width height? number Parent element's content height aspectRatio? number The aspect ratio to maintain # Returns Object the maximum size available. Name Type height number width number # Defined in types/index.d.ts:2204 (opens new window)  # isAttached ▸ isAttached(canvas): boolean # Parameters Name Type canvas HTMLCanvasElement # Returns boolean true if the canvas is attached to the platform, false if not. # Defined in types/index.d.ts:2209 (opens new window)  # releaseContext ▸ releaseContext(context): boolean Called at chart destruction time, releases any resources associated to the context
previously returned by the acquireContext() method. # Parameters Name Type Description context CanvasRenderingContext2D The context2d instance # Returns boolean true if the method succeeded, else false # Defined in types/index.d.ts:2177 (opens new window)  # removeEventListener ▸ removeEventListener(chart, type, listener): void Removes the specified listener previously registered with addEventListener. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> Chart from which to remove the listener type string The (ChartEvent) type to remove listener (e: ChartEvent) => void The listener function to remove from the event target. # Returns void # Defined in types/index.d.ts:2192 (opens new window)  # updateConfig ▸ updateConfig(config): void Updates config with platform specific requirements # Parameters Name Type config ChartConfiguration<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> | ChartConfigurationCustomTypesPerDataset<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Returns void # Defined in types/index.d.ts:2214 (opens new window)   
      ←
      
        ArcElement
       
        BasicPlatform
      
      →\n\n\n\n# Class: BasicPlatform # Hierarchy BasePlatform ↳ BasicPlatform # Constructors # constructor • new BasicPlatform() # Inherited from BasePlatform.constructor # Methods # acquireContext ▸ acquireContext(canvas, options?): CanvasRenderingContext2D Called at chart construction time, returns a context2d instance implementing
the [W3C Canvas 2D Context API standard]https://www.w3.org/TR/2dcontext/ (opens new window). # Parameters Name Type Description canvas HTMLCanvasElement The canvas from which to acquire context (platform specific) options? CanvasRenderingContext2DSettings The chart options # Returns CanvasRenderingContext2D # Inherited from BasePlatform.acquireContext # Defined in types/index.d.ts:2167 (opens new window)  # addEventListener ▸ addEventListener(chart, type, listener): void Registers the specified listener on the given chart. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> Chart from which to listen for event type string The (ChartEvent) type to listen for listener (e: ChartEvent) => void Receives a notification (an object that implements the ChartEvent interface) when an event of the specified type occurs. # Returns void # Inherited from BasePlatform.addEventListener # Defined in types/index.d.ts:2185 (opens new window)  # getDevicePixelRatio ▸ getDevicePixelRatio(): number # Returns number the current devicePixelRatio of the device this platform is connected to. # Inherited from BasePlatform.getDevicePixelRatio # Defined in types/index.d.ts:2196 (opens new window)  # getMaximumSize ▸ getMaximumSize(canvas, width?, height?, aspectRatio?): Object # Parameters Name Type Description canvas HTMLCanvasElement The canvas for which to calculate the maximum size width? number Parent element's content width height? number Parent element's content height aspectRatio? number The aspect ratio to maintain # Returns Object the maximum size available. Name Type height number width number # Inherited from BasePlatform.getMaximumSize # Defined in types/index.d.ts:2204 (opens new window)  # isAttached ▸ isAttached(canvas): boolean # Parameters Name Type canvas HTMLCanvasElement # Returns boolean true if the canvas is attached to the platform, false if not. # Inherited from BasePlatform.isAttached # Defined in types/index.d.ts:2209 (opens new window)  # releaseContext ▸ releaseContext(context): boolean Called at chart destruction time, releases any resources associated to the context
previously returned by the acquireContext() method. # Parameters Name Type Description context CanvasRenderingContext2D The context2d instance # Returns boolean true if the method succeeded, else false # Inherited from BasePlatform.releaseContext # Defined in types/index.d.ts:2177 (opens new window)  # removeEventListener ▸ removeEventListener(chart, type, listener): void Removes the specified listener previously registered with addEventListener. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> Chart from which to remove the listener type string The (ChartEvent) type to remove listener (e: ChartEvent) => void The listener function to remove from the event target. # Returns void # Inherited from BasePlatform.removeEventListener # Defined in types/index.d.ts:2192 (opens new window)  # updateConfig ▸ updateConfig(config): void Updates config with platform specific requirements # Parameters Name Type config ChartConfiguration<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> | ChartConfigurationCustomTypesPerDataset<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Returns void # Inherited from BasePlatform.updateConfig # Defined in types/index.d.ts:2214 (opens new window)   
      ←
      
        BasePlatform
       
        Chart
      
      →\n\n\n\n# Class: Chart<TType, TData, TLabel> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> TLabel unknown # Constructors # constructor • new Chart<TType, TData, TLabel>(item, config) # Type parameters Name Type TType extends keyof ChartTypeRegistry = keyof ChartTypeRegistry TData DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> TLabel unknown # Parameters Name Type item ChartItem config ChartConfiguration<TType, TData, TLabel> | ChartConfigurationCustomTypesPerDataset<TType, TData, TLabel> # Defined in types/index.d.ts:519 (opens new window) # Properties # aspectRatio • Readonly aspectRatio: number # Defined in types/index.d.ts:506 (opens new window)  # attached • Readonly attached: boolean # Defined in types/index.d.ts:511 (opens new window)  # boxes • Readonly boxes: LayoutItem[] # Defined in types/index.d.ts:507 (opens new window)  # canvas • Readonly canvas: HTMLCanvasElement # Defined in types/index.d.ts:501 (opens new window)  # chartArea • Readonly chartArea: ChartArea # Defined in types/index.d.ts:509 (opens new window)  # config • Readonly config: ChartConfiguration<TType, TData, TLabel> | ChartConfigurationCustomTypesPerDataset<TType, TData, TLabel> # Defined in types/index.d.ts:503 (opens new window)  # ctx • Readonly ctx: CanvasRenderingContext2D # Defined in types/index.d.ts:502 (opens new window)  # currentDevicePixelRatio • Readonly currentDevicePixelRatio: number # Defined in types/index.d.ts:508 (opens new window)  # data • data: ChartData<TType, TData, TLabel> # Defined in types/index.d.ts:516 (opens new window)  # height • Readonly height: number # Defined in types/index.d.ts:505 (opens new window)  # id • Readonly id: string # Defined in types/index.d.ts:500 (opens new window)  # legend • Optional Readonly legend: LegendElement<TType> # Defined in types/index.d.ts:513 (opens new window)  # options • options: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, _DeepPartialArray<unknown>> # Defined in types/index.d.ts:517 (opens new window)  # platform • Readonly platform: BasePlatform # Defined in types/index.d.ts:499 (opens new window)  # scales • Readonly scales: Object # Index signature ▪ [key: string]: Scale # Defined in types/index.d.ts:510 (opens new window)  # tooltip • Optional Readonly tooltip: TooltipModel<TType> # Defined in types/index.d.ts:514 (opens new window)  # width • Readonly width: number # Defined in types/index.d.ts:504 (opens new window)  # defaults ▪ Static Readonly defaults: Defaults # Defined in types/index.d.ts:561 (opens new window)  # instances ▪ Static Readonly instances: Object # Index signature ▪ [key: string]: Chart # Defined in types/index.d.ts:564 (opens new window)  # overrides ▪ Static Readonly overrides: Overrides # Defined in types/index.d.ts:562 (opens new window)  # registry ▪ Static Readonly registry: Registry # Defined in types/index.d.ts:565 (opens new window)  # version ▪ Static Readonly version: string # Defined in types/index.d.ts:563 (opens new window) # Methods # bindEvents ▸ bindEvents(): void # Returns void # Defined in types/index.d.ts:551 (opens new window)  # buildOrUpdateControllers ▸ buildOrUpdateControllers(): void # Returns void # Defined in types/index.d.ts:527 (opens new window)  # buildOrUpdateScales ▸ buildOrUpdateScales(): void # Returns void # Defined in types/index.d.ts:526 (opens new window)  # clear ▸ clear(): Chart<TType, TData, TLabel> # Returns Chart<TType, TData, TLabel> # Defined in types/index.d.ts:521 (opens new window)  # destroy ▸ destroy(): void # Returns void # Defined in types/index.d.ts:549 (opens new window)  # draw ▸ draw(): void # Returns void # Defined in types/index.d.ts:531 (opens new window)  # ensureScalesHaveIDs ▸ ensureScalesHaveIDs(): void # Returns void # Defined in types/index.d.ts:525 (opens new window)  # getActiveElements ▸ getActiveElements(): ActiveElement[] # Returns ActiveElement[] # Defined in types/index.d.ts:546 (opens new window)  # getContext ▸ getContext(): Object # Returns Object Name Type chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> type string # Defined in types/index.d.ts:559 (opens new window)  # getDataVisibility ▸ getDataVisibility(index): boolean # Parameters Name Type index number # Returns boolean # Defined in types/index.d.ts:542 (opens new window)  # getDatasetMeta ▸ getDatasetMeta(datasetIndex): ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> # Parameters Name Type datasetIndex number # Returns ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> # Defined in types/index.d.ts:537 (opens new window)  # getElementsAtEventForMode ▸ getElementsAtEventForMode(e, mode, options, useFinalPosition): InteractionItem[] # Parameters Name Type e Event mode string options InteractionOptions useFinalPosition boolean # Returns InteractionItem[] # Defined in types/index.d.ts:534 (opens new window)  # getSortedVisibleDatasetMetas ▸ getSortedVisibleDatasetMetas(): ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>>[] # Returns ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>>[] # Defined in types/index.d.ts:536 (opens new window)  # getVisibleDatasetCount ▸ getVisibleDatasetCount(): number # Returns number # Defined in types/index.d.ts:538 (opens new window)  # hide ▸ hide(datasetIndex, dataIndex?): void # Parameters Name Type datasetIndex number dataIndex? number # Returns void # Defined in types/index.d.ts:543 (opens new window)  # isDatasetVisible ▸ isDatasetVisible(datasetIndex): boolean # Parameters Name Type datasetIndex number # Returns boolean # Defined in types/index.d.ts:539 (opens new window)  # isPluginEnabled ▸ isPluginEnabled(pluginId): boolean # Parameters Name Type pluginId string # Returns boolean # Defined in types/index.d.ts:557 (opens new window)  # isPointInArea ▸ isPointInArea(point): boolean # Parameters Name Type point Point # Returns boolean # Defined in types/index.d.ts:533 (opens new window)  # notifyPlugins ▸ notifyPlugins(hook, args?): boolean | void # Parameters Name Type hook string args? AnyObject # Returns boolean | void # Defined in types/index.d.ts:555 (opens new window)  # render ▸ render(): void # Returns void # Defined in types/index.d.ts:530 (opens new window)  # reset ▸ reset(): void # Returns void # Defined in types/index.d.ts:528 (opens new window)  # resize ▸ resize(width?, height?): void # Parameters Name Type width? number height? number # Returns void # Defined in types/index.d.ts:524 (opens new window)  # setActiveElements ▸ setActiveElements(active): void # Parameters Name Type active ActiveDataPoint[] # Returns void # Defined in types/index.d.ts:547 (opens new window)  # setDatasetVisibility ▸ setDatasetVisibility(datasetIndex, visible): void # Parameters Name Type datasetIndex number visible boolean # Returns void # Defined in types/index.d.ts:540 (opens new window)  # show ▸ show(datasetIndex, dataIndex?): void # Parameters Name Type datasetIndex number dataIndex? number # Returns void # Defined in types/index.d.ts:544 (opens new window)  # stop ▸ stop(): Chart<TType, TData, TLabel> # Returns Chart<TType, TData, TLabel> # Defined in types/index.d.ts:522 (opens new window)  # toBase64Image ▸ toBase64Image(type?, quality?): string # Parameters Name Type type? string quality? unknown # Returns string # Defined in types/index.d.ts:550 (opens new window)  # toggleDataVisibility ▸ toggleDataVisibility(index): void # Parameters Name Type index number # Returns void # Defined in types/index.d.ts:541 (opens new window)  # unbindEvents ▸ unbindEvents(): void # Returns void # Defined in types/index.d.ts:552 (opens new window)  # update ▸ update(mode?): void # Parameters Name Type mode? "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" | (ctx: { datasetIndex: number  }) => "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" # Returns void # Defined in types/index.d.ts:529 (opens new window)  # updateHoverStyle ▸ updateHoverStyle(items, mode, enabled): void # Parameters Name Type items InteractionItem[] mode "dataset" enabled boolean # Returns void # Defined in types/index.d.ts:553 (opens new window)  # getChart ▸ Static getChart(key): Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Parameters Name Type key string | HTMLCanvasElement | CanvasRenderingContext2D # Returns Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Defined in types/index.d.ts:566 (opens new window)  # register ▸ Static register(...items): void # Parameters Name Type ...items ChartComponentLike[] # Returns void # Defined in types/index.d.ts:567 (opens new window)  # unregister ▸ Static unregister(...items): void # Parameters Name Type ...items ChartComponentLike[] # Returns void # Defined in types/index.d.ts:568 (opens new window)   
      ←
      
        BasicPlatform
       
        DatasetController
      
      →\n\n\n\n# Class: DatasetController<TType, TElement, TDatasetElement, TParsedData> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element TParsedData ParsedDataType<TType> # Hierarchy DatasetController ↳ DoughnutController # Constructors # constructor • new DatasetController<TType, TElement, TDatasetElement, TParsedData>(chart, datasetIndex) # Type parameters Name Type TType extends keyof ChartTypeRegistry = keyof ChartTypeRegistry TElement extends default<AnyObject, AnyObject, TElement> = default<AnyObject, AnyObject> TDatasetElement extends default<AnyObject, AnyObject, TDatasetElement> = default<AnyObject, AnyObject> TParsedData ParsedDataType<TType> # Parameters Name Type chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> datasetIndex number # Defined in types/index.d.ts:598 (opens new window) # Properties # _cachedMeta • Readonly _cachedMeta: ChartMeta<TType, TElement, TDatasetElement> # Defined in types/index.d.ts:602 (opens new window)  # chart • Readonly chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Defined in types/index.d.ts:600 (opens new window)  # enableOptionSharing • enableOptionSharing: boolean # Defined in types/index.d.ts:603 (opens new window)  # index • Readonly index: number # Defined in types/index.d.ts:601 (opens new window)  # supportsDecimation • supportsDecimation: boolean # Defined in types/index.d.ts:607 (opens new window) # Methods # addElements ▸ addElements(): void # Returns void # Defined in types/index.d.ts:623 (opens new window)  # applyStack ▸ Protected applyStack(scale, parsed): number # Parameters Name Type scale Scale<CoreScaleOptions> parsed unknown[] # Returns number # Defined in types/index.d.ts:659 (opens new window)  # buildOrUpdateElements ▸ buildOrUpdateElements(resetNewElements?): void # Parameters Name Type resetNewElements? boolean # Returns void # Defined in types/index.d.ts:624 (opens new window)  # configure ▸ configure(): void # Returns void # Defined in types/index.d.ts:621 (opens new window)  # draw ▸ draw(): void # Returns void # Defined in types/index.d.ts:616 (opens new window)  # getAllParsedValues ▸ getAllParsedValues(scale): number[] # Parameters Name Type scale Scale<CoreScaleOptions> # Returns number[] # Defined in types/index.d.ts:610 (opens new window)  # getDataset ▸ getDataset(): ChartDataset<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[]> # Returns ChartDataset<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[]> # Defined in types/index.d.ts:618 (opens new window)  # getLabelAndValue ▸ Protected getLabelAndValue(index): Object # Parameters Name Type index number # Returns Object Name Type label string value string # Defined in types/index.d.ts:611 (opens new window)  # getMaxOverflow ▸ Protected getMaxOverflow(): number | boolean # Returns number | boolean # Defined in types/index.d.ts:615 (opens new window)  # getMeta ▸ getMeta(): ChartMeta<TType, TElement, TDatasetElement> # Returns ChartMeta<TType, TElement, TDatasetElement> # Defined in types/index.d.ts:619 (opens new window)  # getMinMax ▸ Protected getMinMax(scale, canStack?): Object # Parameters Name Type scale Scale<CoreScaleOptions> canStack? boolean # Returns Object Name Type max number min number # Defined in types/index.d.ts:666 (opens new window)  # getParsed ▸ Protected getParsed(index): TParsedData # Parameters Name Type index number # Returns TParsedData # Defined in types/index.d.ts:658 (opens new window)  # getScaleForId ▸ getScaleForId(scaleID): Scale<CoreScaleOptions> # Parameters Name Type scaleID string # Returns Scale<CoreScaleOptions> # Defined in types/index.d.ts:620 (opens new window)  # getSharedOptions ▸ Protected getSharedOptions(options): AnyObject Utility for checking if the options are shared and should be animated separately. # Parameters Name Type options AnyObject # Returns AnyObject # Defined in types/index.d.ts:633 (opens new window)  # getStyle ▸ getStyle(index, active): AnyObject # Parameters Name Type index number active boolean # Returns AnyObject # Defined in types/index.d.ts:626 (opens new window)  # includeOptions ▸ Protected includeOptions(mode, sharedOptions): boolean Utility for determining if options should be included in the updated properties # Parameters Name Type mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" sharedOptions AnyObject # Returns boolean # Defined in types/index.d.ts:638 (opens new window)  # initialize ▸ initialize(): void # Returns void # Defined in types/index.d.ts:622 (opens new window)  # linkScales ▸ linkScales(): void # Returns void # Defined in types/index.d.ts:609 (opens new window)  # parse ▸ parse(start, count): void # Parameters Name Type start number count number # Returns void # Defined in types/index.d.ts:654 (opens new window)  # parseArrayData ▸ Protected parseArrayData(meta, data, start, count): AnyObject[] # Parameters Name Type meta ChartMeta<TType, TElement, TDatasetElement> data AnyObject[] start number count number # Returns AnyObject[] # Defined in types/index.d.ts:656 (opens new window)  # parseObjectData ▸ Protected parseObjectData(meta, data, start, count): AnyObject[] # Parameters Name Type meta ChartMeta<TType, TElement, TDatasetElement> data AnyObject[] start number count number # Returns AnyObject[] # Defined in types/index.d.ts:657 (opens new window)  # parsePrimitiveData ▸ Protected parsePrimitiveData(meta, data, start, count): AnyObject[] # Parameters Name Type meta ChartMeta<TType, TElement, TDatasetElement> data AnyObject[] start number count number # Returns AnyObject[] # Defined in types/index.d.ts:655 (opens new window)  # removeHoverStyle ▸ removeHoverStyle(element, datasetIndex, index): void # Parameters Name Type element TElement datasetIndex number index number # Returns void # Defined in types/index.d.ts:651 (opens new window)  # reset ▸ reset(): void # Returns void # Defined in types/index.d.ts:617 (opens new window)  # resolveDataElementOptions ▸ Protected resolveDataElementOptions(index, mode): AnyObject # Parameters Name Type index number mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" # Returns AnyObject # Defined in types/index.d.ts:628 (opens new window)  # resolveDatasetElementOptions ▸ Protected resolveDatasetElementOptions(mode): AnyObject # Parameters Name Type mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" # Returns AnyObject # Defined in types/index.d.ts:627 (opens new window)  # setHoverStyle ▸ setHoverStyle(element, datasetIndex, index): void # Parameters Name Type element TElement datasetIndex number index number # Returns void # Defined in types/index.d.ts:652 (opens new window)  # update ▸ update(mode): void # Parameters Name Type mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" # Returns void # Defined in types/index.d.ts:613 (opens new window)  # updateElement ▸ Protected updateElement(element, index, properties, mode): void Utility for updating an element with new properties, using animations when appropriate. # Parameters Name Type element TElement | TDatasetElement index number properties AnyObject mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" # Returns void # Defined in types/index.d.ts:644 (opens new window)  # updateElements ▸ updateElements(elements, start, count, mode): void # Parameters Name Type elements TElement[] start number count number mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" # Returns void # Defined in types/index.d.ts:612 (opens new window)  # updateIndex ▸ updateIndex(datasetIndex): void # Parameters Name Type datasetIndex number # Returns void # Defined in types/index.d.ts:614 (opens new window)  # updateRangeFromParsed ▸ Protected updateRangeFromParsed(range, scale, parsed, stack): void # Parameters Name Type range Object range.max number range.min number scale Scale<CoreScaleOptions> parsed unknown[] stack string | boolean # Returns void # Defined in types/index.d.ts:660 (opens new window)  # updateSharedOptions ▸ Protected updateSharedOptions(sharedOptions, mode, newOptions): void Utility to animate the shared options, that are potentially affecting multiple elements. # Parameters Name Type sharedOptions AnyObject mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" newOptions AnyObject # Returns void # Defined in types/index.d.ts:650 (opens new window)   
      ←
      
        Chart
       
        DomPlatform
      
      →\n\n\n\n# Class: DomPlatform # Hierarchy BasePlatform ↳ DomPlatform # Constructors # constructor • new DomPlatform() # Inherited from BasePlatform.constructor # Methods # acquireContext ▸ acquireContext(canvas, options?): CanvasRenderingContext2D Called at chart construction time, returns a context2d instance implementing
the [W3C Canvas 2D Context API standard]https://www.w3.org/TR/2dcontext/ (opens new window). # Parameters Name Type Description canvas HTMLCanvasElement The canvas from which to acquire context (platform specific) options? CanvasRenderingContext2DSettings The chart options # Returns CanvasRenderingContext2D # Inherited from BasePlatform.acquireContext # Defined in types/index.d.ts:2167 (opens new window)  # addEventListener ▸ addEventListener(chart, type, listener): void Registers the specified listener on the given chart. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> Chart from which to listen for event type string The (ChartEvent) type to listen for listener (e: ChartEvent) => void Receives a notification (an object that implements the ChartEvent interface) when an event of the specified type occurs. # Returns void # Inherited from BasePlatform.addEventListener # Defined in types/index.d.ts:2185 (opens new window)  # getDevicePixelRatio ▸ getDevicePixelRatio(): number # Returns number the current devicePixelRatio of the device this platform is connected to. # Inherited from BasePlatform.getDevicePixelRatio # Defined in types/index.d.ts:2196 (opens new window)  # getMaximumSize ▸ getMaximumSize(canvas, width?, height?, aspectRatio?): Object # Parameters Name Type Description canvas HTMLCanvasElement The canvas for which to calculate the maximum size width? number Parent element's content width height? number Parent element's content height aspectRatio? number The aspect ratio to maintain # Returns Object the maximum size available. Name Type height number width number # Inherited from BasePlatform.getMaximumSize # Defined in types/index.d.ts:2204 (opens new window)  # isAttached ▸ isAttached(canvas): boolean # Parameters Name Type canvas HTMLCanvasElement # Returns boolean true if the canvas is attached to the platform, false if not. # Inherited from BasePlatform.isAttached # Defined in types/index.d.ts:2209 (opens new window)  # releaseContext ▸ releaseContext(context): boolean Called at chart destruction time, releases any resources associated to the context
previously returned by the acquireContext() method. # Parameters Name Type Description context CanvasRenderingContext2D The context2d instance # Returns boolean true if the method succeeded, else false # Inherited from BasePlatform.releaseContext # Defined in types/index.d.ts:2177 (opens new window)  # removeEventListener ▸ removeEventListener(chart, type, listener): void Removes the specified listener previously registered with addEventListener. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> Chart from which to remove the listener type string The (ChartEvent) type to remove listener (e: ChartEvent) => void The listener function to remove from the event target. # Returns void # Inherited from BasePlatform.removeEventListener # Defined in types/index.d.ts:2192 (opens new window)  # updateConfig ▸ updateConfig(config): void Updates config with platform specific requirements # Parameters Name Type config ChartConfiguration<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> | ChartConfigurationCustomTypesPerDataset<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Returns void # Inherited from BasePlatform.updateConfig # Defined in types/index.d.ts:2214 (opens new window)   
      ←
      
        DatasetController
       
        PointElement
      
      →\n\n\n\n# Class: PointElement # Hierarchy default<PointProps, PointOptions & PointHoverOptions> ↳ PointElement # Constructors # constructor • new PointElement(cfg) # Parameters Name Type cfg any # Overrides Element<PointProps, PointOptions & PointHoverOptions&gt;.constructor # Defined in elements/element.point.ts:49 (opens new window) # Properties # $animations • $animations: Record<keyof Point, Animation> # Inherited from Element.$animations # Defined in core/core.element.ts:15 (opens new window)  # active • active: boolean = false # Inherited from Element.active # Defined in core/core.element.ts:13 (opens new window)  # options • options: PointOptions & PointHoverOptions # Inherited from Element.options # Defined in core/core.element.ts:14 (opens new window)  # parsed • parsed: CartesianParsedData # Defined in elements/element.point.ts:24 (opens new window)  # skip • Optional skip: boolean # Defined in elements/element.point.ts:25 (opens new window)  # stop • Optional stop: boolean # Defined in elements/element.point.ts:26 (opens new window)  # x • x: number # Inherited from Element.x # Defined in core/core.element.ts:11 (opens new window)  # y • y: number # Inherited from Element.y # Defined in core/core.element.ts:12 (opens new window)  # defaultRoutes ▪ Static defaultRoutes: Object # Type declaration Name Type backgroundColor string borderColor string # Overrides Element.defaultRoutes # Defined in elements/element.point.ts:44 (opens new window)  # defaults ▪ Static defaults: Object # Type declaration Name Type borderWidth number hitRadius number hoverBorderWidth number hoverRadius number pointStyle string radius number rotation number # Overrides Element.defaults # Defined in elements/element.point.ts:31 (opens new window)  # id ▪ Static id: string = 'point' # Defined in elements/element.point.ts:22 (opens new window) # Methods # draw ▸ draw(ctx, area): void # Parameters Name Type ctx CanvasRenderingContext2D area ChartArea # Returns void # Defined in elements/element.point.ts:89 (opens new window)  # getCenterPoint ▸ getCenterPoint(useFinalPosition?): Object # Parameters Name Type useFinalPosition? boolean # Returns Object Name Type x number y number # Defined in elements/element.point.ts:76 (opens new window)  # getProps ▸ getProps<P>(props, final?): Pick<Point, P[number]> Gets the current or final value of each prop. Can return extra properties (whole object). # Type parameters Name Type P extends keyof Point[] # Parameters Name Type Description props P properties to get final? boolean get the final value (animation target) # Returns Pick<Point, P[number]> # Inherited from Element.getProps # Defined in core/core.element.ts:31 (opens new window) ▸ getProps<P>(props, final?): Partial<Record<P, unknown>> # Type parameters Name Type P extends string # Parameters Name Type props P[] final? boolean # Returns Partial<Record<P, unknown>> # Inherited from Element.getProps # Defined in core/core.element.ts:32 (opens new window)  # getRange ▸ getRange(): any # Returns any # Defined in elements/element.point.ts:102 (opens new window)  # hasValue ▸ hasValue(): boolean # Returns boolean # Inherited from Element.hasValue # Defined in core/core.element.ts:22 (opens new window)  # inRange ▸ inRange(mouseX, mouseY, useFinalPosition?): boolean # Parameters Name Type mouseX number mouseY number useFinalPosition? boolean # Returns boolean # Defined in elements/element.point.ts:62 (opens new window)  # inXRange ▸ inXRange(mouseX, useFinalPosition?): boolean # Parameters Name Type mouseX number useFinalPosition? boolean # Returns boolean # Defined in elements/element.point.ts:68 (opens new window)  # inYRange ▸ inYRange(mouseY, useFinalPosition?): boolean # Parameters Name Type mouseY number useFinalPosition? boolean # Returns boolean # Defined in elements/element.point.ts:72 (opens new window)  # size ▸ size(options?): number # Parameters Name Type options? Partial<PointOptions & PointHoverOptions> # Returns number # Defined in elements/element.point.ts:81 (opens new window)  # tooltipPosition ▸ tooltipPosition(useFinalPosition): Point # Parameters Name Type useFinalPosition boolean # Returns Point # Inherited from Element.tooltipPosition # Defined in core/core.element.ts:17 (opens new window)   
      ←
      
        DomPlatform
       
        Scale
      
      →\n\n\n\n# Class: Scale<O> # Type parameters Name Type O extends CoreScaleOptions = CoreScaleOptions # Hierarchy default<unknown, O> LayoutItem ↳ Scale ↳↳ TimeScale ↳↳ RadialLinearScale # Constructors # constructor • new Scale<O>(cfg) # Type parameters Name Type O extends CoreScaleOptions = CoreScaleOptions # Parameters Name Type cfg Object cfg.chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> cfg.ctx CanvasRenderingContext2D cfg.id string cfg.type string # Inherited from Element<unknown, O>.constructor # Defined in types/index.d.ts:1385 (opens new window) # Properties # $animations • $animations: Record<never, Animation> # Inherited from Element.$animations # Defined in core/core.element.ts:15 (opens new window)  # active • active: boolean = false # Inherited from Element.active # Defined in core/core.element.ts:13 (opens new window)  # axis • axis: string # Defined in types/index.d.ts:1286 (opens new window)  # bottom • bottom: number Bottom edge of the item. Set by layout system and cannot be used in update # Inherited from LayoutItem.bottom # Defined in types/layout.d.ts:41 (opens new window)  # chart • Readonly chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Defined in types/index.d.ts:1276 (opens new window)  # ctx • Readonly ctx: CanvasRenderingContext2D # Defined in types/index.d.ts:1275 (opens new window)  # fullSize • fullSize: boolean if true, and the item is horizontal, then push vertical boxes down # Inherited from LayoutItem.fullSize # Defined in types/layout.d.ts:17 (opens new window)  # height • height: number Height of item. Must be valid after update() # Inherited from LayoutItem.height # Defined in types/layout.d.ts:25 (opens new window)  # id • Readonly id: string # Defined in types/index.d.ts:1273 (opens new window)  # labelRotation • labelRotation: number # Defined in types/index.d.ts:1287 (opens new window)  # left • left: number Left edge of the item. Set by layout system and cannot be used in update # Inherited from LayoutItem.left # Defined in types/layout.d.ts:29 (opens new window)  # max • max: number # Defined in types/index.d.ts:1289 (opens new window)  # maxHeight • maxHeight: number # Defined in types/index.d.ts:1279 (opens new window)  # maxWidth • maxWidth: number # Defined in types/index.d.ts:1278 (opens new window)  # min • min: number # Defined in types/index.d.ts:1288 (opens new window)  # options • options: O # Inherited from Element.options # Defined in core/core.element.ts:14 (opens new window)  # paddingBottom • paddingBottom: number # Defined in types/index.d.ts:1282 (opens new window)  # paddingLeft • paddingLeft: number # Defined in types/index.d.ts:1283 (opens new window)  # paddingRight • paddingRight: number # Defined in types/index.d.ts:1284 (opens new window)  # paddingTop • paddingTop: number # Defined in types/index.d.ts:1281 (opens new window)  # position • position: LayoutPosition The position of the item in the chart layout. Possible values are # Inherited from LayoutItem.position # Defined in types/layout.d.ts:9 (opens new window)  # right • right: number Right edge of the item. Set by layout system and cannot be used in update # Inherited from LayoutItem.right # Defined in types/layout.d.ts:37 (opens new window)  # ticks • ticks: Tick[] # Defined in types/index.d.ts:1290 (opens new window)  # top • top: number Top edge of the item. Set by layout system and cannot be used in update # Inherited from LayoutItem.top # Defined in types/layout.d.ts:33 (opens new window)  # type • Readonly type: string # Defined in types/index.d.ts:1274 (opens new window)  # weight • weight: number The weight used to sort the item. Higher weights are further away from the chart area # Inherited from LayoutItem.weight # Defined in types/layout.d.ts:13 (opens new window)  # width • width: number Width of item. Must be valid after update() # Inherited from LayoutItem.width # Defined in types/layout.d.ts:21 (opens new window)  # x • x: number # Inherited from Element.x # Defined in core/core.element.ts:11 (opens new window)  # y • y: number # Inherited from Element.y # Defined in core/core.element.ts:12 (opens new window) # Methods # afterBuildTicks ▸ afterBuildTicks(): void # Returns void # Defined in types/index.d.ts:1371 (opens new window)  # afterCalculateLabelRotation ▸ afterCalculateLabelRotation(): void # Returns void # Defined in types/index.d.ts:1377 (opens new window)  # afterDataLimits ▸ afterDataLimits(): void # Returns void # Defined in types/index.d.ts:1368 (opens new window)  # afterFit ▸ afterFit(): void # Returns void # Defined in types/index.d.ts:1380 (opens new window)  # afterSetDimensions ▸ afterSetDimensions(): void # Returns void # Defined in types/index.d.ts:1365 (opens new window)  # afterTickToLabelConversion ▸ afterTickToLabelConversion(): void # Returns void # Defined in types/index.d.ts:1374 (opens new window)  # afterUpdate ▸ afterUpdate(): void # Returns void # Defined in types/index.d.ts:1362 (opens new window)  # beforeBuildTicks ▸ beforeBuildTicks(): void # Returns void # Defined in types/index.d.ts:1369 (opens new window)  # beforeCalculateLabelRotation ▸ beforeCalculateLabelRotation(): void # Returns void # Defined in types/index.d.ts:1375 (opens new window)  # beforeDataLimits ▸ beforeDataLimits(): void # Returns void # Defined in types/index.d.ts:1366 (opens new window)  # beforeFit ▸ beforeFit(): void # Returns void # Defined in types/index.d.ts:1378 (opens new window)  # beforeLayout ▸ Optional beforeLayout(): void Called before the layout process starts # Returns void # Inherited from LayoutItem.beforeLayout # Defined in types/layout.d.ts:46 (opens new window)  # beforeSetDimensions ▸ beforeSetDimensions(): void # Returns void # Defined in types/index.d.ts:1363 (opens new window)  # beforeTickToLabelConversion ▸ beforeTickToLabelConversion(): void # Returns void # Defined in types/index.d.ts:1372 (opens new window)  # beforeUpdate ▸ beforeUpdate(): void # Returns void # Defined in types/index.d.ts:1360 (opens new window)  # buildTicks ▸ buildTicks(): Tick[] # Returns Tick[] # Defined in types/index.d.ts:1370 (opens new window)  # calculateLabelRotation ▸ calculateLabelRotation(): void # Returns void # Defined in types/index.d.ts:1376 (opens new window)  # configure ▸ configure(): void # Returns void # Defined in types/index.d.ts:1361 (opens new window)  # determineDataLimits ▸ determineDataLimits(): void # Returns void # Defined in types/index.d.ts:1367 (opens new window)  # draw ▸ draw(chartArea): void Draws the element # Parameters Name Type chartArea ChartArea # Returns void # Inherited from LayoutItem.draw # Defined in types/layout.d.ts:50 (opens new window)  # drawGrid ▸ drawGrid(chartArea): void # Parameters Name Type chartArea ChartArea # Returns void # Defined in types/index.d.ts:1295 (opens new window)  # drawLabels ▸ drawLabels(chartArea): void # Parameters Name Type chartArea ChartArea # Returns void # Defined in types/index.d.ts:1294 (opens new window)  # drawTitle ▸ drawTitle(chartArea): void # Parameters Name Type chartArea ChartArea # Returns void # Defined in types/index.d.ts:1293 (opens new window)  # fit ▸ fit(): void # Returns void # Defined in types/index.d.ts:1379 (opens new window)  # generateTickLabels ▸ generateTickLabels(ticks): void # Parameters Name Type ticks Tick[] # Returns void # Defined in types/index.d.ts:1373 (opens new window)  # getBasePixel ▸ getBasePixel(): number Returns the pixel for the minimum chart value
The coordinate (0, 0) is at the upper-left corner of the canvas # Returns number # Defined in types/index.d.ts:1351 (opens new window)  # getBaseValue ▸ getBaseValue(): number # Returns number # Defined in types/index.d.ts:1345 (opens new window)  # getDecimalForPixel ▸ getDecimalForPixel(pixel): number # Parameters Name Type pixel number # Returns number # Defined in types/index.d.ts:1301 (opens new window)  # getLabelForValue ▸ getLabelForValue(value): string Used to get the label to display in the tooltip for the given value # Parameters Name Type value number # Returns string # Defined in types/index.d.ts:1321 (opens new window)  # getLabelItems ▸ getLabelItems(chartArea?): LabelItem[] # Parameters Name Type chartArea? ChartArea # Returns LabelItem[] # Defined in types/index.d.ts:1359 (opens new window)  # getLabels ▸ getLabels(): string[] # Returns string[] # Defined in types/index.d.ts:1358 (opens new window)  # getLineWidthForValue ▸ getLineWidthForValue(value): number Returns the grid line width at given value # Parameters Name Type value number # Returns number # Defined in types/index.d.ts:1326 (opens new window)  # getMatchingVisibleMetas ▸ getMatchingVisibleMetas(type?): ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>>[] # Parameters Name Type type? string # Returns ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>>[] # Defined in types/index.d.ts:1291 (opens new window)  # getMinMax ▸ getMinMax(canStack): Object # Parameters Name Type canStack boolean # Returns Object Name Type max number min number # Defined in types/index.d.ts:1356 (opens new window)  # getPadding ▸ Optional getPadding(): ChartArea Returns an object with padding on the edges # Returns ChartArea # Inherited from LayoutItem.getPadding # Defined in types/layout.d.ts:54 (opens new window)  # getPixelForDecimal ▸ getPixelForDecimal(decimal): number Utility for getting the pixel location of a percentage of scale
The coordinate (0, 0) is at the upper-left corner of the canvas # Parameters Name Type decimal number # Returns number # Defined in types/index.d.ts:1308 (opens new window)  # getPixelForTick ▸ getPixelForTick(index): number Returns the location of the tick at the given index
The coordinate (0, 0) is at the upper-left corner of the canvas # Parameters Name Type index number # Returns number # Defined in types/index.d.ts:1315 (opens new window)  # getPixelForValue ▸ getPixelForValue(value, index?): number Returns the location of the given data point. Value can either be an index or a numerical value
The coordinate (0, 0) is at the upper-left corner of the canvas # Parameters Name Type value number index? number # Returns number # Defined in types/index.d.ts:1335 (opens new window)  # getProps ▸ getProps<P>(props, final?): Pick<unknown, P[number]> Gets the current or final value of each prop. Can return extra properties (whole object). # Type parameters Name Type P extends never[] # Parameters Name Type Description props P properties to get final? boolean get the final value (animation target) # Returns Pick<unknown, P[number]> # Inherited from Element.getProps # Defined in core/core.element.ts:31 (opens new window) ▸ getProps<P>(props, final?): Partial<Record<P, unknown>> # Type parameters Name Type P extends string # Parameters Name Type props P[] final? boolean # Returns Partial<Record<P, unknown>> # Inherited from Element.getProps # Defined in core/core.element.ts:32 (opens new window)  # getTicks ▸ getTicks(): Tick[] # Returns Tick[] # Defined in types/index.d.ts:1357 (opens new window)  # getUserBounds ▸ getUserBounds(): Object # Returns Object Name Type max number maxDefined boolean min number minDefined boolean # Defined in types/index.d.ts:1355 (opens new window)  # getValueForPixel ▸ getValueForPixel(pixel): number Used to get the data value from a given pixel. This is the inverse of getPixelForValue
The coordinate (0, 0) is at the upper-left corner of the canvas # Parameters Name Type pixel number # Returns number # Defined in types/index.d.ts:1343 (opens new window)  # hasValue ▸ hasValue(): boolean # Returns boolean # Inherited from Element.hasValue # Defined in core/core.element.ts:22 (opens new window)  # init ▸ init(options): void # Parameters Name Type options O # Returns void # Defined in types/index.d.ts:1353 (opens new window)  # isFullSize ▸ isFullSize(): boolean # Returns boolean # Defined in types/index.d.ts:1382 (opens new window)  # isHorizontal ▸ isHorizontal(): boolean returns true if the layout item is horizontal (ie. top or bottom) # Returns boolean # Inherited from LayoutItem.isHorizontal # Defined in types/layout.d.ts:58 (opens new window)  # parse ▸ parse(raw, index?): unknown # Parameters Name Type raw unknown index? number # Returns unknown # Defined in types/index.d.ts:1354 (opens new window)  # setDimensions ▸ setDimensions(): void # Returns void # Defined in types/index.d.ts:1364 (opens new window)  # tooltipPosition ▸ tooltipPosition(useFinalPosition): Point # Parameters Name Type useFinalPosition boolean # Returns Point # Inherited from Element.tooltipPosition # Defined in core/core.element.ts:17 (opens new window)  # update ▸ update(width, height, margins?): void Takes two parameters: width and height. # Parameters Name Type width number height number margins? ChartArea # Returns void # Inherited from LayoutItem.update # Defined in types/layout.d.ts:64 (opens new window)   
      ←
      
        PointElement
       
        ActiveDataPoint
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Interface: ActiveDataPoint # Hierarchy ActiveDataPoint ↳ ActiveElement # Properties # datasetIndex • datasetIndex: number # Defined in types/index.d.ts:486 (opens new window)  # index • index: number # Defined in types/index.d.ts:487 (opens new window)   
      ←
      
        Scale
       
        ActiveElement
      
      →\n\n\n\n# Interface: ActiveElement # Hierarchy ActiveDataPoint ↳ ActiveElement # Properties # datasetIndex • datasetIndex: number # Inherited from ActiveDataPoint.datasetIndex # Defined in types/index.d.ts:486 (opens new window)  # element • element: default<AnyObject, AnyObject> # Defined in types/index.d.ts:491 (opens new window)  # index • index: number # Inherited from ActiveDataPoint.index # Defined in types/index.d.ts:487 (opens new window)   
      ←
      
        ActiveDataPoint
       
        AnimationEvent
      
      →\n\n\n\n# Interface: AnimationEvent # Properties # chart • chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Defined in types/animation.d.ts:14 (opens new window)  # currentStep • currentStep: number # Defined in types/animation.d.ts:17 (opens new window)  # initial • initial: boolean # Defined in types/animation.d.ts:16 (opens new window)  # numSteps • numSteps: number # Defined in types/animation.d.ts:15 (opens new window)   
      ←
      
        ActiveElement
       
        ArcBorderRadius
      
      →\n\n\n\n# Interface: ArcBorderRadius # Properties # innerEnd • innerEnd: number # Defined in types/index.d.ts:1846 (opens new window)  # innerStart • innerStart: number # Defined in types/index.d.ts:1845 (opens new window)  # outerEnd • outerEnd: number # Defined in types/index.d.ts:1844 (opens new window)  # outerStart • outerStart: number # Defined in types/index.d.ts:1843 (opens new window)   
      ←
      
        AnimationEvent
       
        ArcHoverOptions
      
      →\n\n\n\n# Interface: ArcHoverOptions # Hierarchy CommonHoverOptions ↳ ArcHoverOptions # Properties # hoverBackgroundColor • hoverBackgroundColor: Color # Inherited from CommonHoverOptions.hoverBackgroundColor # Defined in types/index.d.ts:1833 (opens new window)  # hoverBorderColor • hoverBorderColor: Color # Inherited from CommonHoverOptions.hoverBorderColor # Defined in types/index.d.ts:1832 (opens new window)  # hoverBorderDash • hoverBorderDash: number[] # Defined in types/index.d.ts:1893 (opens new window)  # hoverBorderDashOffset • hoverBorderDashOffset: number # Defined in types/index.d.ts:1894 (opens new window)  # hoverBorderWidth • hoverBorderWidth: number # Inherited from CommonHoverOptions.hoverBorderWidth # Defined in types/index.d.ts:1831 (opens new window)  # hoverOffset • hoverOffset: number # Defined in types/index.d.ts:1895 (opens new window)   
      ←
      
        ArcBorderRadius
       
        ArcOptions
      
      →\n\n\n\n# Interface: ArcOptions # Hierarchy CommonElementOptions ↳ ArcOptions # Properties # backgroundColor • backgroundColor: Color # Inherited from CommonElementOptions.backgroundColor # Defined in types/index.d.ts:1827 (opens new window)  # borderAlign • borderAlign: "center" | "inner" Arc stroke alignment. # Defined in types/index.d.ts:1853 (opens new window)  # borderColor • borderColor: Color # Inherited from CommonElementOptions.borderColor # Defined in types/index.d.ts:1826 (opens new window)  # borderDash • borderDash: number[] Line dash. See MDN. Default [] # Defined in types/index.d.ts:1858 (opens new window)  # borderDashOffset • borderDashOffset: number Line dash offset. See MDN. Default 0.0 # Defined in types/index.d.ts:1863 (opens new window)  # borderJoinStyle • borderJoinStyle: CanvasLineJoin Line join style. See MDN. Default is 'round' when borderAlign is 'inner', else 'bevel'. # Defined in types/index.d.ts:1867 (opens new window)  # borderRadius • borderRadius: number | ArcBorderRadius Sets the border radius for arcs Default 0 # Defined in types/index.d.ts:1873 (opens new window)  # borderWidth • borderWidth: number # Inherited from CommonElementOptions.borderWidth # Defined in types/index.d.ts:1825 (opens new window)  # circular • circular: boolean If false, Arc will be flat. Default true # Defined in types/index.d.ts:1884 (opens new window)  # offset • offset: number Arc offset (in pixels). # Defined in types/index.d.ts:1878 (opens new window)  # spacing • spacing: number Spacing between arcs # Defined in types/index.d.ts:1889 (opens new window)   
      ←
      
        ArcHoverOptions
       
        ArcProps
      
      →\n\n\n\n# Interface: ArcProps # Hierarchy Point ↳ ArcProps # Properties # circumference • circumference: number # Defined in elements/element.arc.ts:260 (opens new window)  # endAngle • endAngle: number # Defined in elements/element.arc.ts:257 (opens new window)  # innerRadius • innerRadius: number # Defined in elements/element.arc.ts:258 (opens new window)  # outerRadius • outerRadius: number # Defined in elements/element.arc.ts:259 (opens new window)  # startAngle • startAngle: number # Defined in elements/element.arc.ts:256 (opens new window)  # x • x: number # Inherited from Point.x # Defined in types/geometric.d.ts:11 (opens new window)  # y • y: number # Inherited from Point.y # Defined in types/geometric.d.ts:12 (opens new window)   
      ←
      
        ArcOptions
       
        BackdropOptions
      
      →\n\n\n\n# Interface: BackdropOptions # Properties # color • color: Scriptable<Color, ScriptableScaleContext> Color of label backdrops. # Defined in types/index.d.ts:1496 (opens new window)  # height • height: number Height of backdrop in pixels # Defined in types/index.d.ts:1491 (opens new window)  # left • left: number Left position of backdrop as pixel # Defined in types/index.d.ts:1476 (opens new window)  # top • top: number Top position of backdrop as pixel # Defined in types/index.d.ts:1481 (opens new window)  # width • width: number Width of backdrop in pixels # Defined in types/index.d.ts:1486 (opens new window)   
      ←
      
        ArcProps
       
        BarControllerChartOptions
      
      →\n\n\n\n# Interface: BarControllerChartOptions # Properties # skipNull • Optional skipNull: boolean Should null or undefined values be omitted from drawing # Defined in types/index.d.ts:153 (opens new window)   
      ←
      
        BackdropOptions
       
        BarControllerDatasetOptions
      
      →\n\n\n\n# Interface: BarControllerDatasetOptions # Hierarchy ControllerDatasetOptions ScriptableAndArrayOptions<BarOptions, ScriptableContext<"bar">> ScriptableAndArrayOptions<CommonHoverOptions, ScriptableContext<"bar">> AnimationOptions<"bar"> ↳ BarControllerDatasetOptions # Properties # animation • animation: false | AnimationSpec<"bar"> & { onComplete?: (this: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, event: AnimationEvent) => void ; onProgress?: (this: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, event: AnimationEvent) => void  } # Inherited from AnimationOptions.animation # Defined in types/index.d.ts:1767 (opens new window)  # animations • animations: AnimationsSpec<"bar"> # Inherited from AnimationOptions.animations # Defined in types/index.d.ts:1777 (opens new window)  # backgroundColor • backgroundColor: ScriptableAndArray<Color, ScriptableContext<"bar">> # Inherited from ScriptableAndArrayOptions.backgroundColor # Defined in types/index.d.ts:1827 (opens new window)  # barPercentage • barPercentage: number Percent (0-1) of the available width each bar should be within the category width. 1.0 will take the whole category width and put the bars right next to each other. Default 0.9 # Defined in types/index.d.ts:114 (opens new window)  # barThickness • barThickness: number | "flex" Manually set width of each bar in pixels. If set to 'flex', it computes "optimal" sample widths that globally arrange bars side by side. If not set (default), bars are equally sized based on the smallest interval. # Defined in types/index.d.ts:124 (opens new window)  # base • base: ScriptableAndArray<number, ScriptableContext<"bar">> The base value for the bar in data units along the value axis. # Inherited from ScriptableAndArrayOptions.base # Defined in types/index.d.ts:2100 (opens new window)  # borderColor • borderColor: ScriptableAndArray<Color, ScriptableContext<"bar">> # Inherited from ScriptableAndArrayOptions.borderColor # Defined in types/index.d.ts:1826 (opens new window)  # borderRadius • borderRadius: ScriptableAndArray<number | BorderRadius, ScriptableContext<"bar">> Border radius Default 0 # Inherited from ScriptableAndArrayOptions.borderRadius # Defined in types/index.d.ts:2112 (opens new window)  # borderSkipped • borderSkipped: ScriptableAndArray<boolean | "end" | "start" | "left" | "top" | "bottom" | "right" | "middle", ScriptableContext<"bar">> Skipped (excluded) border: 'start', 'end', 'left',  'right', 'bottom', 'top', 'middle', false (none) or true (all). Default 'start' # Inherited from ScriptableAndArrayOptions.borderSkipped # Defined in types/index.d.ts:2106 (opens new window)  # borderWidth • borderWidth: ScriptableAndArray<number | { bottom?: number ; left?: number ; right?: number ; top?: number  }, ScriptableContext<"bar">> Width of the border, number for all sides, object to specify width for each side specifically Default 0 # Inherited from ScriptableAndArrayOptions.borderWidth # Defined in types/index.d.ts:2125 (opens new window)  # categoryPercentage • categoryPercentage: number Percent (0-1) of the available width each category should be within the sample width. Default 0.8 # Defined in types/index.d.ts:119 (opens new window)  # clip • clip: number | false | ChartArea How to clip relative to chartArea. Positive value allows overflow, negative value clips that many pixels inside chartArea. 0 = clip at chartArea. Clipping can also be configured per side: clip: {left: 5, top: false, right: -2, bottom: 0} # Inherited from ControllerDatasetOptions.clip # Defined in types/index.d.ts:75 (opens new window)  # grouped • grouped: boolean Should the bars be grouped on index axis Default true # Defined in types/index.d.ts:146 (opens new window)  # hidden • hidden: boolean Configures the visibility state of the dataset. Set it to true, to hide the dataset from the chart. Default false # Inherited from ControllerDatasetOptions.hidden # Defined in types/index.d.ts:93 (opens new window)  # hoverBackgroundColor • hoverBackgroundColor: ScriptableAndArray<Color, ScriptableContext<"bar">> # Inherited from ScriptableAndArrayOptions.hoverBackgroundColor # Defined in types/index.d.ts:1833 (opens new window)  # hoverBorderColor • hoverBorderColor: ScriptableAndArray<Color, ScriptableContext<"bar">> # Inherited from ScriptableAndArrayOptions.hoverBorderColor # Defined in types/index.d.ts:1832 (opens new window)  # hoverBorderWidth • hoverBorderWidth: ScriptableAndArray<number, ScriptableContext<"bar">> # Inherited from ScriptableAndArrayOptions.hoverBorderWidth # Defined in types/index.d.ts:1831 (opens new window)  # indexAxis • indexAxis: "x" | "y" The base axis of the chart. 'x' for vertical charts and 'y' for horizontal charts. Default 'x' # Inherited from ControllerDatasetOptions.indexAxis # Defined in types/index.d.ts:71 (opens new window)  # inflateAmount • inflateAmount: ScriptableAndArray<number | "auto", ScriptableContext<"bar">> Amount to inflate the rectangle(s). This can be used to hide artifacts between bars.
Unit is pixels. 'auto' translates to 0.33 pixels when barPercentage * categoryPercentage is 1, else 0. Default 'auto' # Inherited from ScriptableAndArrayOptions.inflateAmount # Defined in types/index.d.ts:2119 (opens new window)  # label • label: string The label for the dataset which appears in the legend and tooltips. # Inherited from ControllerDatasetOptions.label # Defined in types/index.d.ts:79 (opens new window)  # maxBarThickness • maxBarThickness: number Set this to ensure that bars are not sized thicker than this. # Defined in types/index.d.ts:129 (opens new window)  # minBarLength • minBarLength: number Set this to ensure that bars have a minimum length in pixels. # Defined in types/index.d.ts:134 (opens new window)  # normalized • normalized: boolean Chart.js is fastest if you provide data with indices that are unique, sorted, and consistent across datasets and provide the normalized: true option to let Chart.js know that you have done so. # Inherited from ControllerDatasetOptions.normalized # Defined in types/index.d.ts:63 (opens new window)  # order • order: number The drawing order of dataset. Also affects order for stacking, tooltip and legend. # Inherited from ControllerDatasetOptions.order # Defined in types/index.d.ts:83 (opens new window)  # parsing • parsing: false | { [key: string]: string;  } How to parse the dataset. The parsing can be disabled by specifying parsing: false at chart options or dataset. If parsing is disabled, data must be sorted and in the formats the associated chart type and scales use internally. # Inherited from ControllerDatasetOptions.parsing # Defined in types/index.d.ts:54 (opens new window)  # pointStyle • pointStyle: PointStyle Point style for the legend Default 'circle; # Defined in types/index.d.ts:140 (opens new window)  # stack • stack: string The ID of the group to which this dataset belongs to (when stacked, each group will be a separate stack). # Inherited from ControllerDatasetOptions.stack # Defined in types/index.d.ts:88 (opens new window)  # transitions • transitions: TransitionsSpec<"bar"> # Inherited from AnimationOptions.transitions # Defined in types/index.d.ts:1778 (opens new window)  # xAxisID • xAxisID: string The ID of the x axis to plot this dataset on. # Defined in types/index.d.ts:104 (opens new window)  # yAxisID • yAxisID: string The ID of the y axis to plot this dataset on. # Defined in types/index.d.ts:108 (opens new window)   
      ←
      
        BarControllerChartOptions
       
        BarElement
      
      →\n\n\n\n# Interface: BarElement<T, O> # Type parameters Name Type T extends BarProps = BarProps O extends BarOptions = BarOptions # Hierarchy default<T, O> VisualElement ↳ BarElement # Properties # $animations • $animations: Record<keyof T, Animation> # Inherited from Element.$animations # Defined in core/core.element.ts:15 (opens new window)  # active • active: boolean = false # Inherited from Element.active # Defined in core/core.element.ts:13 (opens new window)  # options • options: O # Inherited from Element.options # Defined in core/core.element.ts:14 (opens new window)  # x • x: number # Inherited from Element.x # Defined in core/core.element.ts:11 (opens new window)  # y • y: number # Inherited from Element.y # Defined in core/core.element.ts:12 (opens new window) # Methods # draw ▸ draw(ctx, area?): void # Parameters Name Type ctx CanvasRenderingContext2D area? ChartArea # Returns void # Inherited from VisualElement.draw # Defined in types/index.d.ts:1816 (opens new window)  # getCenterPoint ▸ getCenterPoint(useFinalPosition?): Point # Parameters Name Type useFinalPosition? boolean # Returns Point # Inherited from VisualElement.getCenterPoint # Defined in types/index.d.ts:1820 (opens new window)  # getProps ▸ getProps<P>(props, final?): Pick<T, P[number]> Gets the current or final value of each prop. Can return extra properties (whole object). # Type parameters Name Type P extends keyof T[] # Parameters Name Type Description props P properties to get final? boolean get the final value (animation target) # Returns Pick<T, P[number]> # Inherited from Element.getProps # Defined in core/core.element.ts:31 (opens new window) ▸ getProps<P>(props, final?): Partial<Record<P, unknown>> # Type parameters Name Type P extends string # Parameters Name Type props P[] final? boolean # Returns Partial<Record<P, unknown>> # Inherited from Element.getProps # Defined in core/core.element.ts:32 (opens new window)  # getRange ▸ Optional getRange(axis): number # Parameters Name Type axis "x" | "y" # Returns number # Inherited from VisualElement.getRange # Defined in types/index.d.ts:1821 (opens new window)  # hasValue ▸ hasValue(): boolean # Returns boolean # Inherited from Element.hasValue # Defined in core/core.element.ts:22 (opens new window)  # inRange ▸ inRange(mouseX, mouseY, useFinalPosition?): boolean # Parameters Name Type mouseX number mouseY number useFinalPosition? boolean # Returns boolean # Inherited from VisualElement.inRange # Defined in types/index.d.ts:1817 (opens new window)  # inXRange ▸ inXRange(mouseX, useFinalPosition?): boolean # Parameters Name Type mouseX number useFinalPosition? boolean # Returns boolean # Inherited from VisualElement.inXRange # Defined in types/index.d.ts:1818 (opens new window)  # inYRange ▸ inYRange(mouseY, useFinalPosition?): boolean # Parameters Name Type mouseY number useFinalPosition? boolean # Returns boolean # Inherited from VisualElement.inYRange # Defined in types/index.d.ts:1819 (opens new window)  # tooltipPosition ▸ tooltipPosition(useFinalPosition): Point # Parameters Name Type useFinalPosition boolean # Returns Point # Inherited from Element.tooltipPosition # Defined in core/core.element.ts:17 (opens new window)   
      ←
      
        BarControllerDatasetOptions
       
        BarHoverOptions
      
      →\n\n\n\n# Interface: BarHoverOptions # Hierarchy CommonHoverOptions ↳ BarHoverOptions # Properties # hoverBackgroundColor • hoverBackgroundColor: Color # Inherited from CommonHoverOptions.hoverBackgroundColor # Defined in types/index.d.ts:1833 (opens new window)  # hoverBorderColor • hoverBorderColor: Color # Inherited from CommonHoverOptions.hoverBorderColor # Defined in types/index.d.ts:1832 (opens new window)  # hoverBorderRadius • hoverBorderRadius: number | BorderRadius # Defined in types/index.d.ts:2136 (opens new window)  # hoverBorderWidth • hoverBorderWidth: number # Inherited from CommonHoverOptions.hoverBorderWidth # Defined in types/index.d.ts:1831 (opens new window)   
      ←
      
        BarElement
       
        BarOptions
      
      →\n\n\n\n# Interface: BarOptions # Hierarchy Omit<CommonElementOptions, "borderWidth"> ↳ BarOptions # Properties # backgroundColor • backgroundColor: Color # Inherited from Omit.backgroundColor # Defined in types/index.d.ts:1827 (opens new window)  # base • base: number The base value for the bar in data units along the value axis. # Defined in types/index.d.ts:2100 (opens new window)  # borderColor • borderColor: Color # Inherited from Omit.borderColor # Defined in types/index.d.ts:1826 (opens new window)  # borderRadius • borderRadius: number | BorderRadius Border radius Default 0 # Defined in types/index.d.ts:2112 (opens new window)  # borderSkipped • borderSkipped: boolean | "end" | "start" | "left" | "top" | "bottom" | "right" | "middle" Skipped (excluded) border: 'start', 'end', 'left',  'right', 'bottom', 'top', 'middle', false (none) or true (all). Default 'start' # Defined in types/index.d.ts:2106 (opens new window)  # borderWidth • borderWidth: number | { bottom?: number ; left?: number ; right?: number ; top?: number  } Width of the border, number for all sides, object to specify width for each side specifically Default 0 # Defined in types/index.d.ts:2125 (opens new window)  # inflateAmount • inflateAmount: number | "auto" Amount to inflate the rectangle(s). This can be used to hide artifacts between bars.
Unit is pixels. 'auto' translates to 0.33 pixels when barPercentage * categoryPercentage is 1, else 0. Default 'auto' # Defined in types/index.d.ts:2119 (opens new window)   
      ←
      
        BarHoverOptions
       
        BarParsedData
      
      →\n\n\n\n# Interface: BarParsedData # Hierarchy CartesianParsedData ↳ BarParsedData # Properties # _custom • Optional _custom: Object # Type declaration Name Type barEnd number barStart number end number max number min number start number # Defined in types/index.d.ts:3658 (opens new window)  # _stacks • Optional _stacks: Object # Index signature ▪ [key: string]: { [key: number]: number;  } # Inherited from CartesianParsedData._stacks # Defined in types/index.d.ts:3647 (opens new window)  # x • x: number # Inherited from CartesianParsedData.x # Defined in types/geometric.d.ts:11 (opens new window)  # y • y: number # Inherited from CartesianParsedData.y # Defined in types/geometric.d.ts:12 (opens new window)   
      ←
      
        BarOptions
       
        BarProps
      
      →\n\n\n\n# Interface: BarProps # Hierarchy Point ↳ BarProps # Properties # base • base: number # Defined in types/index.d.ts:2090 (opens new window)  # height • height: number # Defined in types/index.d.ts:2093 (opens new window)  # horizontal • horizontal: boolean # Defined in types/index.d.ts:2091 (opens new window)  # width • width: number # Defined in types/index.d.ts:2092 (opens new window)  # x • x: number # Inherited from Point.x # Defined in types/geometric.d.ts:11 (opens new window)  # y • y: number # Inherited from Point.y # Defined in types/geometric.d.ts:12 (opens new window)   
      ←
      
        BarParsedData
       
        BorderOptions
      
      →\n\n\n\n# Interface: BorderOptions # Properties # color • color: Color # Defined in types/index.d.ts:2982 (opens new window)  # dash • dash: Scriptable<number[], ScriptableScaleContext> Default [] # Defined in types/index.d.ts:2977 (opens new window)  # dashOffset • dashOffset: Scriptable<number, ScriptableScaleContext> Default 0 # Defined in types/index.d.ts:2981 (opens new window)  # display • display: boolean Default true # Defined in types/index.d.ts:2973 (opens new window)  # width • width: number # Defined in types/index.d.ts:2983 (opens new window)  # z • z: number # Defined in types/index.d.ts:2984 (opens new window)   
      ←
      
        BarProps
       
        BorderRadius
      
      →\n\n\n\n# Interface: BorderRadius # Properties # bottomLeft • bottomLeft: number # Defined in types/index.d.ts:2131 (opens new window)  # bottomRight • bottomRight: number # Defined in types/index.d.ts:2132 (opens new window)  # topLeft • topLeft: number # Defined in types/index.d.ts:2129 (opens new window)  # topRight • topRight: number # Defined in types/index.d.ts:2130 (opens new window)   
      ←
      
        BorderOptions
       
        BubbleControllerDatasetOptions
      
      →\n\n\n\n# Interface: BubbleControllerDatasetOptions # Hierarchy ControllerDatasetOptions ScriptableAndArrayOptions<PointOptions, ScriptableContext<"bubble">> ScriptableAndArrayOptions<PointHoverOptions, ScriptableContext<"bubble">> ↳ BubbleControllerDatasetOptions # Properties # backgroundColor • backgroundColor: ScriptableAndArray<Color, ScriptableContext<"bubble">> # Inherited from ScriptableAndArrayOptions.backgroundColor # Defined in types/index.d.ts:1827 (opens new window)  # borderColor • borderColor: ScriptableAndArray<Color, ScriptableContext<"bubble">> # Inherited from ScriptableAndArrayOptions.borderColor # Defined in types/index.d.ts:1826 (opens new window)  # borderWidth • borderWidth: ScriptableAndArray<number, ScriptableContext<"bubble">> # Inherited from ScriptableAndArrayOptions.borderWidth # Defined in types/index.d.ts:1825 (opens new window)  # clip • clip: number | false | ChartArea How to clip relative to chartArea. Positive value allows overflow, negative value clips that many pixels inside chartArea. 0 = clip at chartArea. Clipping can also be configured per side: clip: {left: 5, top: false, right: -2, bottom: 0} # Inherited from ControllerDatasetOptions.clip # Defined in types/index.d.ts:75 (opens new window)  # drawActiveElementsOnTop • drawActiveElementsOnTop: ScriptableAndArray<boolean, ScriptableContext<"bubble">> Draw the active elements over the other elements of the dataset, Default true # Inherited from ScriptableAndArrayOptions.drawActiveElementsOnTop # Defined in types/index.d.ts:2028 (opens new window)  # hidden • hidden: boolean Configures the visibility state of the dataset. Set it to true, to hide the dataset from the chart. Default false # Inherited from ControllerDatasetOptions.hidden # Defined in types/index.d.ts:93 (opens new window)  # hitRadius • hitRadius: ScriptableAndArray<number, ScriptableContext<"bubble">> Extra radius added to point radius for hit detection. Default 1 # Inherited from ScriptableAndArrayOptions.hitRadius # Defined in types/index.d.ts:2013 (opens new window)  # hoverBackgroundColor • hoverBackgroundColor: ScriptableAndArray<Color, ScriptableContext<"bubble">> # Inherited from ScriptableAndArrayOptions.hoverBackgroundColor # Defined in types/index.d.ts:1833 (opens new window)  # hoverBorderColor • hoverBorderColor: ScriptableAndArray<Color, ScriptableContext<"bubble">> # Inherited from ScriptableAndArrayOptions.hoverBorderColor # Defined in types/index.d.ts:1832 (opens new window)  # hoverBorderWidth • hoverBorderWidth: ScriptableAndArray<number, ScriptableContext<"bubble">> # Inherited from ScriptableAndArrayOptions.hoverBorderWidth # Defined in types/index.d.ts:1831 (opens new window)  # hoverRadius • hoverRadius: ScriptableAndArray<number, ScriptableContext<"bubble">> Point radius when hovered. Default 4 # Inherited from ScriptableAndArrayOptions.hoverRadius # Defined in types/index.d.ts:2036 (opens new window)  # indexAxis • indexAxis: "x" | "y" The base axis of the chart. 'x' for vertical charts and 'y' for horizontal charts. Default 'x' # Inherited from ControllerDatasetOptions.indexAxis # Defined in types/index.d.ts:71 (opens new window)  # label • label: string The label for the dataset which appears in the legend and tooltips. # Inherited from ControllerDatasetOptions.label # Defined in types/index.d.ts:79 (opens new window)  # normalized • normalized: boolean Chart.js is fastest if you provide data with indices that are unique, sorted, and consistent across datasets and provide the normalized: true option to let Chart.js know that you have done so. # Inherited from ControllerDatasetOptions.normalized # Defined in types/index.d.ts:63 (opens new window)  # order • order: number The drawing order of dataset. Also affects order for stacking, tooltip and legend. # Inherited from ControllerDatasetOptions.order # Defined in types/index.d.ts:83 (opens new window)  # parsing • parsing: false | { [key: string]: string;  } How to parse the dataset. The parsing can be disabled by specifying parsing: false at chart options or dataset. If parsing is disabled, data must be sorted and in the formats the associated chart type and scales use internally. # Inherited from ControllerDatasetOptions.parsing # Defined in types/index.d.ts:54 (opens new window)  # pointStyle • pointStyle: ScriptableAndArray<PointStyle, ScriptableContext<"bubble">> Point style Default 'circle; # Inherited from ScriptableAndArrayOptions.pointStyle # Defined in types/index.d.ts:2018 (opens new window)  # radius • radius: ScriptableAndArray<number, ScriptableContext<"bubble">> Point radius Default 3 # Inherited from ScriptableAndArrayOptions.radius # Defined in types/index.d.ts:2008 (opens new window)  # rotation • rotation: ScriptableAndArray<number, ScriptableContext<"bubble">> Point rotation (in degrees). Default 0 # Inherited from ScriptableAndArrayOptions.rotation # Defined in types/index.d.ts:2023 (opens new window)  # stack • stack: string The ID of the group to which this dataset belongs to (when stacked, each group will be a separate stack). # Inherited from ControllerDatasetOptions.stack # Defined in types/index.d.ts:88 (opens new window)  # xAxisID • xAxisID: string The ID of the x axis to plot this dataset on. # Defined in types/index.d.ts:169 (opens new window)  # yAxisID • yAxisID: string The ID of the y axis to plot this dataset on. # Defined in types/index.d.ts:173 (opens new window)   
      ←
      
        BorderRadius
       
        BubbleDataPoint
      
      →\n\n\n\n# Interface: BubbleDataPoint # Hierarchy Point ↳ BubbleDataPoint # Properties # r • Optional r: number Bubble radius in pixels (not scaled). # Defined in types/index.d.ts:180 (opens new window)  # x • x: number # Inherited from Point.x # Defined in types/geometric.d.ts:11 (opens new window)  # y • y: number # Inherited from Point.y # Defined in types/geometric.d.ts:12 (opens new window)   
      ←
      
        BubbleControllerDatasetOptions
       
        BubbleParsedData
      
      →\n\n\n\n# Interface: BubbleParsedData # Hierarchy CartesianParsedData ↳ BubbleParsedData # Properties # _custom • _custom: number # Defined in types/index.d.ts:3670 (opens new window)  # _stacks • Optional _stacks: Object # Index signature ▪ [key: string]: { [key: number]: number;  } # Inherited from CartesianParsedData._stacks # Defined in types/index.d.ts:3647 (opens new window)  # x • x: number # Inherited from CartesianParsedData.x # Defined in types/geometric.d.ts:11 (opens new window)  # y • y: number # Inherited from CartesianParsedData.y # Defined in types/geometric.d.ts:12 (opens new window)   
      ←
      
        BubbleDataPoint
       
        CanvasFontSpec
      
      →\n\n\n\n# Interface: CanvasFontSpec # Hierarchy FontSpec ↳ CanvasFontSpec # Properties # family • family: string Default font family for all text, follows CSS font-family options. Default "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif" # Inherited from FontSpec.family # Defined in types/index.d.ts:1786 (opens new window)  # lineHeight • lineHeight: string | number Height of an individual line of text (see MDN). Default 1.2 # Inherited from FontSpec.lineHeight # Defined in types/index.d.ts:1805 (opens new window)  # size • size: number Default font size (in px) for text. Does not apply to radialLinear scale point labels. Default 12 # Inherited from FontSpec.size # Defined in types/index.d.ts:1791 (opens new window)  # string • string: string # Defined in types/index.d.ts:1809 (opens new window)  # style • style: "normal" | "inherit" | "italic" | "oblique" | "initial" Default font style. Does not apply to tooltip title or footer. Does not apply to chart title. Follows CSS font-style options (i.e. normal, italic, oblique, initial, inherit) Default 'normal' # Inherited from FontSpec.style # Defined in types/index.d.ts:1796 (opens new window)  # weight • weight: number | "bold" | "normal" | "lighter" | "bolder" Default font weight (boldness). (see MDN). # Inherited from FontSpec.weight # Defined in types/index.d.ts:1800 (opens new window)   
      ←
      
        BubbleParsedData
       
        CartesianParsedData
      
      →\n\n\n\n# Interface: CartesianParsedData # Hierarchy Point ↳ CartesianParsedData ↳↳ BarParsedData ↳↳ BubbleParsedData # Properties # _stacks • Optional _stacks: Object # Index signature ▪ [key: string]: { [key: number]: number;  } # Defined in types/index.d.ts:3647 (opens new window)  # x • x: number # Inherited from Point.x # Defined in types/geometric.d.ts:11 (opens new window)  # y • y: number # Inherited from Point.y # Defined in types/geometric.d.ts:12 (opens new window)   
      ←
      
        CanvasFontSpec
       
        CartesianScaleOptions
      
      →\n\n\n\n# Interface: CartesianScaleOptions # Hierarchy CoreScaleOptions ↳ CartesianScaleOptions # Properties # alignToPixels • alignToPixels: boolean Align pixel values to device pixels # Inherited from CoreScaleOptions.alignToPixels # Defined in types/index.d.ts:1178 (opens new window)  # axis • axis: "x" | "y" | "r" Which type of axis this is. Possible values are: 'x', 'y', 'r'. If not set, this is inferred from the first character of the ID which should be 'x', 'y' or 'r'. # Defined in types/index.d.ts:3213 (opens new window)  # backgroundColor • backgroundColor: Color Background color of the scale area. # Inherited from CoreScaleOptions.backgroundColor # Defined in types/index.d.ts:1182 (opens new window)  # border • border: BorderOptions # Defined in types/index.d.ts:3233 (opens new window)  # bounds • bounds: "data" | "ticks" Scale boundary strategy (bypassed by min/max time options) data: make sure data are fully visible, ticks outside are removed ticks: make sure ticks are fully visible, data outside are truncated Since 2.7.0 Default 'ticks' # Defined in types/index.d.ts:3192 (opens new window)  # clip • clip: boolean Clip the dataset drawing against the size of the scale instead of chart area. Default true # Inherited from CoreScaleOptions.clip # Defined in types/index.d.ts:1192 (opens new window)  # display • display: boolean | "auto" Controls the axis global visibility (visible when true, hidden when false). When display: 'auto', the axis is visible only if at least one associated dataset is visible. Default true # Inherited from CoreScaleOptions.display # Defined in types/index.d.ts:1174 (opens new window)  # grid • grid: Partial<GridLineOptions> # Defined in types/index.d.ts:3231 (opens new window)  # max • max: number User defined maximum value for the scale, overrides maximum value from data. # Overrides CoreScaleOptions.max # Defined in types/index.d.ts:3223 (opens new window)  # min • min: number User defined minimum value for the scale, overrides minimum value from data. # Overrides CoreScaleOptions.min # Defined in types/index.d.ts:3218 (opens new window)  # offset • offset: boolean If true, extra space is added to the both edges and the axis is scaled to fit into the chart area. This is set to true for a bar chart by default. Default false # Defined in types/index.d.ts:3229 (opens new window)  # position • position: "center" | "left" | "top" | "bottom" | "right" | { [scale: string]: number;  } Position of the axis. # Defined in types/index.d.ts:3197 (opens new window)  # reverse • reverse: boolean Reverse the scale. Default false # Inherited from CoreScaleOptions.reverse # Defined in types/index.d.ts:1187 (opens new window)  # stack • Optional stack: string Stack group. Axes at the same position with same stack are stacked. # Defined in types/index.d.ts:3202 (opens new window)  # stackWeight • Optional stackWeight: number Weight of the scale in stack group. Used to determine the amount of allocated space for the scale within the group. Default 1 # Defined in types/index.d.ts:3208 (opens new window)  # stacked • Optional stacked: boolean | "single" If true, data will be comprised between datasets of data Default false # Defined in types/index.d.ts:3262 (opens new window)  # suggestedMax • suggestedMax: unknown Adjustment used when calculating the minimum data value. # Inherited from CoreScaleOptions.suggestedMax # Defined in types/index.d.ts:1213 (opens new window)  # suggestedMin • suggestedMin: unknown Adjustment used when calculating the maximum data value. # Inherited from CoreScaleOptions.suggestedMin # Defined in types/index.d.ts:1209 (opens new window)  # ticks • ticks: CartesianTickOptions # Defined in types/index.d.ts:3264 (opens new window)  # title • title: Object Options for the scale title. # Type declaration Name Type Description align Align Alignment of the axis title. color Color Color of the axis label. display boolean If true, displays the axis title. font ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableCartesianScaleContext> Information about the axis title font. padding number | { bottom: number ; top: number ; y: number  } Padding to apply around scale labels. text string | string[] The text for the title, e.g. "# of People" or "Response Choices". # Defined in types/index.d.ts:3236 (opens new window)  # weight • weight: number The weight used to sort the axis. Higher weights are further away from the chart area. Default true # Inherited from CoreScaleOptions.weight # Defined in types/index.d.ts:1197 (opens new window) # Methods # afterBuildTicks ▸ afterBuildTicks(axis): void Callback that runs after ticks are created. Useful for filtering ticks. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Inherited from CoreScaleOptions.afterBuildTicks # Defined in types/index.d.ts:1241 (opens new window)  # afterCalculateLabelRotation ▸ afterCalculateLabelRotation(axis): void Callback that runs after tick rotation is determined. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Inherited from CoreScaleOptions.afterCalculateLabelRotation # Defined in types/index.d.ts:1257 (opens new window)  # afterDataLimits ▸ afterDataLimits(axis): void Callback that runs after data limits are determined. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Inherited from CoreScaleOptions.afterDataLimits # Defined in types/index.d.ts:1233 (opens new window)  # afterFit ▸ afterFit(axis): void Callback that runs after the scale fits to the canvas. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Inherited from CoreScaleOptions.afterFit # Defined in types/index.d.ts:1265 (opens new window)  # afterSetDimensions ▸ afterSetDimensions(axis): void Callback that runs after dimensions are set. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Inherited from CoreScaleOptions.afterSetDimensions # Defined in types/index.d.ts:1225 (opens new window)  # afterTickToLabelConversion ▸ afterTickToLabelConversion(axis): void Callback that runs after ticks are converted into strings. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Inherited from CoreScaleOptions.afterTickToLabelConversion # Defined in types/index.d.ts:1249 (opens new window)  # afterUpdate ▸ afterUpdate(axis): void Callback that runs at the end of the update process. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Inherited from CoreScaleOptions.afterUpdate # Defined in types/index.d.ts:1269 (opens new window)  # beforeBuildTicks ▸ beforeBuildTicks(axis): void Callback that runs before ticks are created. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Inherited from CoreScaleOptions.beforeBuildTicks # Defined in types/index.d.ts:1237 (opens new window)  # beforeCalculateLabelRotation ▸ beforeCalculateLabelRotation(axis): void Callback that runs before tick rotation is determined. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Inherited from CoreScaleOptions.beforeCalculateLabelRotation # Defined in types/index.d.ts:1253 (opens new window)  # beforeDataLimits ▸ beforeDataLimits(axis): void Callback that runs before data limits are determined. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Inherited from CoreScaleOptions.beforeDataLimits # Defined in types/index.d.ts:1229 (opens new window)  # beforeFit ▸ beforeFit(axis): void Callback that runs before the scale fits to the canvas. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Inherited from CoreScaleOptions.beforeFit # Defined in types/index.d.ts:1261 (opens new window)  # beforeSetDimensions ▸ beforeSetDimensions(axis): void Callback that runs before dimensions are set. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Inherited from CoreScaleOptions.beforeSetDimensions # Defined in types/index.d.ts:1221 (opens new window)  # beforeTickToLabelConversion ▸ beforeTickToLabelConversion(axis): void Callback that runs before ticks are converted into strings. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Inherited from CoreScaleOptions.beforeTickToLabelConversion # Defined in types/index.d.ts:1245 (opens new window)  # beforeUpdate ▸ beforeUpdate(axis): void Callback called before the update process starts. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Inherited from CoreScaleOptions.beforeUpdate # Defined in types/index.d.ts:1217 (opens new window)   
      ←
      
        CartesianParsedData
       
        CartesianScaleTypeRegistry
      
      →\n\n\n\n# Interface: CartesianScaleTypeRegistry # Hierarchy CartesianScaleTypeRegistry ↳ ScaleTypeRegistry # Properties # category • category: Object # Type declaration Name Type options CategoryScaleOptions # Defined in types/index.d.ts:3623 (opens new window)  # linear • linear: Object # Type declaration Name Type options LinearScaleOptions # Defined in types/index.d.ts:3617 (opens new window)  # logarithmic • logarithmic: Object # Type declaration Name Type options LogarithmicScaleOptions # Defined in types/index.d.ts:3620 (opens new window)  # time • time: Object # Type declaration Name Type options TimeScaleOptions # Defined in types/index.d.ts:3626 (opens new window)  # timeseries • timeseries: Object # Type declaration Name Type options TimeScaleOptions # Defined in types/index.d.ts:3629 (opens new window)   
      ←
      
        CartesianScaleOptions
       
        ChartArea
      
      →\n\n\n\n# Interface: ChartArea # Properties # bottom • bottom: number # Defined in types/geometric.d.ts:5 (opens new window)  # height • height: number # Defined in types/geometric.d.ts:7 (opens new window)  # left • left: number # Defined in types/geometric.d.ts:3 (opens new window)  # right • right: number # Defined in types/geometric.d.ts:4 (opens new window)  # top • top: number # Defined in types/geometric.d.ts:2 (opens new window)  # width • width: number # Defined in types/geometric.d.ts:6 (opens new window)   
      ←
      
        CartesianScaleTypeRegistry
       
        ChartComponent
      
      →\n\n\n\n# Interface: ChartComponent # Hierarchy ChartComponent ↳ DatasetControllerChartComponent # Properties # defaultRoutes • Optional defaultRoutes: Object # Index signature ▪ [property: string]: string # Defined in types/index.d.ts:1564 (opens new window)  # defaults • Optional defaults: AnyObject # Defined in types/index.d.ts:1563 (opens new window)  # id • id: string # Defined in types/index.d.ts:1562 (opens new window) # Methods # afterRegister ▸ Optional afterRegister(): void # Returns void # Defined in types/index.d.ts:1567 (opens new window)  # afterUnregister ▸ Optional afterUnregister(): void # Returns void # Defined in types/index.d.ts:1569 (opens new window)  # beforeRegister ▸ Optional beforeRegister(): void # Returns void # Defined in types/index.d.ts:1566 (opens new window)  # beforeUnregister ▸ Optional beforeUnregister(): void # Returns void # Defined in types/index.d.ts:1568 (opens new window)   
      ←
      
        ChartArea
       
        ChartConfiguration
      
      →\n\n\n\n# Interface: ChartConfiguration<TType, TData, TLabel> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> TLabel unknown # Properties # data • data: ChartData<TType, TData, TLabel> # Defined in types/index.d.ts:3838 (opens new window)  # options • Optional options: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, _DeepPartialArray<unknown>> # Defined in types/index.d.ts:3839 (opens new window)  # platform • Optional platform: typeof BasePlatform # Defined in types/index.d.ts:3841 (opens new window)  # plugins • Optional plugins: Plugin<TType, AnyObject>[] # Defined in types/index.d.ts:3840 (opens new window)  # type • type: TType # Defined in types/index.d.ts:3837 (opens new window)   
      ←
      
        ChartComponent
       
        ChartConfigurationCustomTypesPerDataset
      
      →\n\n\n\n# Interface: ChartConfigurationCustomTypesPerDataset<TType, TData, TLabel> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> TLabel unknown # Properties # data • data: ChartDataCustomTypesPerDataset<TType, TData, TLabel> # Defined in types/index.d.ts:3849 (opens new window)  # options • Optional options: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, _DeepPartialArray<unknown>> # Defined in types/index.d.ts:3850 (opens new window)  # plugins • Optional plugins: Plugin<TType, AnyObject>[] # Defined in types/index.d.ts:3851 (opens new window)   
      ←
      
        ChartConfiguration
       
        ChartData
      
      →\n\n\n\n# Interface: ChartData<TType, TData, TLabel> TData represents the data point type. If unspecified, a default is provided
based on the chart type.
TLabel represents the label type # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> TLabel unknown # Properties # datasets • datasets: ChartDataset<TType, TData>[] # Defined in types/index.d.ts:3818 (opens new window)  # labels • Optional labels: TLabel[] # Defined in types/index.d.ts:3815 (opens new window)  # xLabels • Optional xLabels: TLabel[] # Defined in types/index.d.ts:3816 (opens new window)  # yLabels • Optional yLabels: TLabel[] # Defined in types/index.d.ts:3817 (opens new window)   
      ←
      
        ChartConfigurationCustomTypesPerDataset
       
        ChartDataCustomTypesPerDataset
      
      →\n\n\n\n# Interface: ChartDataCustomTypesPerDataset<TType, TData, TLabel> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> TLabel unknown # Properties # datasets • datasets: ChartDatasetCustomTypesPerDataset<TType, TData>[] # Defined in types/index.d.ts:3829 (opens new window)  # labels • Optional labels: TLabel[] # Defined in types/index.d.ts:3826 (opens new window)  # xLabels • Optional xLabels: TLabel[] # Defined in types/index.d.ts:3827 (opens new window)  # yLabels • Optional yLabels: TLabel[] # Defined in types/index.d.ts:3828 (opens new window)   
      ←
      
        ChartData
       
        ChartDatasetProperties
      
      →\n\n\n\n# Interface: ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType TData TData # Properties # data • data: TData # Defined in types/index.d.ts:3783 (opens new window)  # type • Optional type: TType # Defined in types/index.d.ts:3782 (opens new window)   
      ←
      
        ChartDataCustomTypesPerDataset
       
        ChartDatasetPropertiesCustomTypesPerDataset
      
      →\n\n\n\n# Interface: ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType TData TData # Properties # data • data: TData # Defined in types/index.d.ts:3788 (opens new window)  # type • type: TType # Defined in types/index.d.ts:3787 (opens new window)   
      ←
      
        ChartDatasetProperties
       
        ChartEvent
      
      →\n\n\n\n# Interface: ChartEvent # Properties # native • native: Event # Defined in types/index.d.ts:1557 (opens new window)  # type • type: "resize" | "click" | "contextmenu" | "dblclick" | "keydown" | "keypress" | "keyup" | "mousedown" | "mouseenter" | "mousemove" | "mouseout" | "mouseup" # Defined in types/index.d.ts:1544 (opens new window)  # x • x: number # Defined in types/index.d.ts:1558 (opens new window)  # y • y: number # Defined in types/index.d.ts:1559 (opens new window)   
      ←
      
        ChartDatasetPropertiesCustomTypesPerDataset
       
        ChartTypeRegistry
      
      →\n\n\n\n# Interface: ChartTypeRegistry # Properties # bar • bar: Object # Type declaration Name Type chartOptions BarControllerChartOptions datasetOptions BarControllerDatasetOptions defaultDataPoint number | [number, number] metaExtensions {} parsedDataType BarParsedData scales keyof CartesianScaleTypeRegistry # Defined in types/index.d.ts:3678 (opens new window)  # bubble • bubble: Object # Type declaration Name Type chartOptions unknown datasetOptions BubbleControllerDatasetOptions defaultDataPoint BubbleDataPoint metaExtensions {} parsedDataType BubbleParsedData scales keyof CartesianScaleTypeRegistry # Defined in types/index.d.ts:3702 (opens new window)  # doughnut • doughnut: Object # Type declaration Name Type chartOptions DoughnutControllerChartOptions datasetOptions DoughnutControllerDatasetOptions defaultDataPoint number metaExtensions DoughnutMetaExtensions parsedDataType number scales keyof CartesianScaleTypeRegistry # Defined in types/index.d.ts:3718 (opens new window)  # line • line: Object # Type declaration Name Type chartOptions LineControllerChartOptions datasetOptions LineControllerDatasetOptions & FillerControllerDatasetOptions defaultDataPoint number | Point metaExtensions {} parsedDataType CartesianParsedData scales keyof CartesianScaleTypeRegistry # Defined in types/index.d.ts:3686 (opens new window)  # pie • pie: Object # Type declaration Name Type chartOptions DoughnutControllerChartOptions datasetOptions DoughnutControllerDatasetOptions defaultDataPoint number metaExtensions DoughnutMetaExtensions parsedDataType number scales keyof CartesianScaleTypeRegistry # Defined in types/index.d.ts:3710 (opens new window)  # polarArea • polarArea: Object # Type declaration Name Type chartOptions PolarAreaControllerChartOptions datasetOptions PolarAreaControllerDatasetOptions defaultDataPoint number metaExtensions {} parsedDataType RadialParsedData scales "radialLinear" # Defined in types/index.d.ts:3726 (opens new window)  # radar • radar: Object # Type declaration Name Type chartOptions LineControllerChartOptions datasetOptions RadarControllerDatasetOptions & FillerControllerDatasetOptions defaultDataPoint number metaExtensions {} parsedDataType RadialParsedData scales "radialLinear" # Defined in types/index.d.ts:3734 (opens new window)  # scatter • scatter: Object # Type declaration Name Type chartOptions LineControllerChartOptions datasetOptions LineControllerDatasetOptions defaultDataPoint number | Point metaExtensions {} parsedDataType CartesianParsedData scales keyof CartesianScaleTypeRegistry # Defined in types/index.d.ts:3694 (opens new window)   
      ←
      
        ChartEvent
       
        CommonElementOptions
      
      →\n\n\n\n# Interface: CommonElementOptions # Hierarchy CommonElementOptions ↳ ArcOptions ↳ LineOptions ↳ PointOptions # Properties # backgroundColor • backgroundColor: Color # Defined in types/index.d.ts:1827 (opens new window)  # borderColor • borderColor: Color # Defined in types/index.d.ts:1826 (opens new window)  # borderWidth • borderWidth: number # Defined in types/index.d.ts:1825 (opens new window)   
      ←
      
        ChartTypeRegistry
       
        CommonHoverOptions
      
      →\n\n\n\n# Interface: CommonHoverOptions # Hierarchy CommonHoverOptions ↳ ArcHoverOptions ↳ LineHoverOptions ↳ PointHoverOptions ↳ BarHoverOptions # Properties # hoverBackgroundColor • hoverBackgroundColor: Color # Defined in types/index.d.ts:1833 (opens new window)  # hoverBorderColor • hoverBorderColor: Color # Defined in types/index.d.ts:1832 (opens new window)  # hoverBorderWidth • hoverBorderWidth: number # Defined in types/index.d.ts:1831 (opens new window)   
      ←
      
        CommonElementOptions
       
        ComplexFillTarget
      
      →\n\n\n\n# Interface: ComplexFillTarget # Properties # above • above: Color If no color is set, the default color will be the background color of the chart. # Defined in types/index.d.ts:2258 (opens new window)  # below • below: Color Same as the above. # Defined in types/index.d.ts:2262 (opens new window)  # target • target: FillTarget The accepted values are the same as the filling mode values, so you may use absolute and relative dataset indexes and/or boundaries. # Defined in types/index.d.ts:2254 (opens new window)   
      ←
      
        CommonHoverOptions
       
        ControllerDatasetOptions
      
      →\n\n\n\n# Interface: ControllerDatasetOptions # Hierarchy ParsingOptions ↳ ControllerDatasetOptions ↳↳ BarControllerDatasetOptions ↳↳ BubbleControllerDatasetOptions ↳↳ LineControllerDatasetOptions ↳↳ DoughnutControllerDatasetOptions ↳↳ RadarControllerDatasetOptions # Properties # clip • clip: number | false | ChartArea How to clip relative to chartArea. Positive value allows overflow, negative value clips that many pixels inside chartArea. 0 = clip at chartArea. Clipping can also be configured per side: clip: {left: 5, top: false, right: -2, bottom: 0} # Defined in types/index.d.ts:75 (opens new window)  # hidden • hidden: boolean Configures the visibility state of the dataset. Set it to true, to hide the dataset from the chart. Default false # Defined in types/index.d.ts:93 (opens new window)  # indexAxis • indexAxis: "x" | "y" The base axis of the chart. 'x' for vertical charts and 'y' for horizontal charts. Default 'x' # Defined in types/index.d.ts:71 (opens new window)  # label • label: string The label for the dataset which appears in the legend and tooltips. # Defined in types/index.d.ts:79 (opens new window)  # normalized • normalized: boolean Chart.js is fastest if you provide data with indices that are unique, sorted, and consistent across datasets and provide the normalized: true option to let Chart.js know that you have done so. # Inherited from ParsingOptions.normalized # Defined in types/index.d.ts:63 (opens new window)  # order • order: number The drawing order of dataset. Also affects order for stacking, tooltip and legend. # Defined in types/index.d.ts:83 (opens new window)  # parsing • parsing: false | { [key: string]: string;  } How to parse the dataset. The parsing can be disabled by specifying parsing: false at chart options or dataset. If parsing is disabled, data must be sorted and in the formats the associated chart type and scales use internally. # Inherited from ParsingOptions.parsing # Defined in types/index.d.ts:54 (opens new window)  # stack • stack: string The ID of the group to which this dataset belongs to (when stacked, each group will be a separate stack). # Defined in types/index.d.ts:88 (opens new window)   
      ←
      
        ComplexFillTarget
       
        CoreChartOptions
      
      →\n\n\n\n# Interface: CoreChartOptions<TType> # Type parameters Name Type TType extends ChartType # Hierarchy ParsingOptions AnimationOptions<TType> ↳ CoreChartOptions ↳↳ Defaults # Properties # animation • animation: false | AnimationSpec<TType> & { onComplete?: (this: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, event: AnimationEvent) => void ; onProgress?: (this: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, event: AnimationEvent) => void  } # Inherited from AnimationOptions.animation # Defined in types/index.d.ts:1767 (opens new window)  # animations • animations: AnimationsSpec<TType> # Inherited from AnimationOptions.animations # Defined in types/index.d.ts:1777 (opens new window)  # aspectRatio • aspectRatio: number Canvas aspect ratio (i.e. width / height, a value of 1 representing a square canvas). Note that this option is ignored if the height is explicitly defined either as attribute or via the style. Default 2 # Defined in types/index.d.ts:1665 (opens new window)  # backgroundColor • backgroundColor: ScriptableAndArray<Color, ScriptableContext<TType>> base background color See Defaults.backgroundColor # Defined in types/index.d.ts:1624 (opens new window)  # borderColor • borderColor: ScriptableAndArray<Color, ScriptableContext<TType>> base border color See Defaults.borderColor # Defined in types/index.d.ts:1634 (opens new window)  # clip • clip: number | false | ChartArea How to clip relative to chartArea. Positive value allows overflow, negative value clips that many pixels inside chartArea. 0 = clip at chartArea. Clipping can also be configured per side: clip: {left: 5, top: false, right: -2, bottom: 0} # Defined in types/index.d.ts:1613 (opens new window)  # color • color: Scriptable<Color, ScriptableContext<TType>> base color See Defaults.color # Defined in types/index.d.ts:1619 (opens new window)  # datasets • datasets: Object # Type declaration Name Type bar BarControllerDatasetOptions bubble BubbleControllerDatasetOptions doughnut DoughnutControllerDatasetOptions line LineControllerDatasetOptions & FillerControllerDatasetOptions pie DoughnutControllerDatasetOptions polarArea PolarAreaControllerDatasetOptions radar RadarControllerDatasetOptions & FillerControllerDatasetOptions scatter LineControllerDatasetOptions # Defined in types/index.d.ts:1600 (opens new window)  # devicePixelRatio • devicePixelRatio: number Override the window's default devicePixelRatio. Default window.devicePixelRatio # Defined in types/index.d.ts:1682 (opens new window)  # events • events: keyof HTMLElementEventMap[] The events option defines the browser events that the chart should listen to for tooltips and hovering. Default ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'] # Defined in types/index.d.ts:1692 (opens new window)  # font • font: Partial<FontSpec> base font See Defaults.font # Defined in types/index.d.ts:1644 (opens new window)  # hover • hover: CoreInteractionOptions # Defined in types/index.d.ts:1686 (opens new window)  # hoverBackgroundColor • hoverBackgroundColor: ScriptableAndArray<Color, ScriptableContext<TType>> base hover background color See Defaults.hoverBackgroundColor # Defined in types/index.d.ts:1629 (opens new window)  # hoverBorderColor • hoverBorderColor: ScriptableAndArray<Color, ScriptableContext<TType>> base hover border color See Defaults.hoverBorderColor # Defined in types/index.d.ts:1639 (opens new window)  # indexAxis • indexAxis: "x" | "y" The base axis of the chart. 'x' for vertical charts and 'y' for horizontal charts. Default 'x' # Defined in types/index.d.ts:1608 (opens new window)  # interaction • interaction: CoreInteractionOptions # Defined in types/index.d.ts:1684 (opens new window)  # layout • layout: Partial<{ autoPadding: boolean ; padding: Scriptable<Padding, ScriptableContext<TType>>  }> # Defined in types/index.d.ts:1704 (opens new window)  # locale • locale: string Locale used for number formatting (using Intl.NumberFormat). Default user's browser setting # Defined in types/index.d.ts:1671 (opens new window)  # maintainAspectRatio • maintainAspectRatio: boolean Maintain the original canvas aspect ratio (width / height) when resizing. For this option to work properly the chart must be in its own dedicated container. Default true # Defined in types/index.d.ts:1654 (opens new window)  # normalized • normalized: boolean Chart.js is fastest if you provide data with indices that are unique, sorted, and consistent across datasets and provide the normalized: true option to let Chart.js know that you have done so. # Inherited from ParsingOptions.normalized # Defined in types/index.d.ts:63 (opens new window)  # parsing • parsing: false | { [key: string]: string;  } How to parse the dataset. The parsing can be disabled by specifying parsing: false at chart options or dataset. If parsing is disabled, data must be sorted and in the formats the associated chart type and scales use internally. # Inherited from ParsingOptions.parsing # Defined in types/index.d.ts:54 (opens new window)  # resizeDelay • resizeDelay: number Delay the resize update by give amount of milliseconds. This can ease the resize process by debouncing update of the elements. Default 0 # Defined in types/index.d.ts:1659 (opens new window)  # responsive • responsive: boolean Resizes the chart canvas when its container does (important note...). Default true # Defined in types/index.d.ts:1649 (opens new window)  # transitions • transitions: TransitionsSpec<TType> # Inherited from AnimationOptions.transitions # Defined in types/index.d.ts:1778 (opens new window) # Methods # onClick ▸ onClick(event, elements, chart): void Called if the event is of type 'mouseup' or 'click'. Passed the event, an array of active elements, and the chart. # Parameters Name Type event ChartEvent elements ActiveElement[] chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Returns void # Defined in types/index.d.ts:1702 (opens new window)  # onHover ▸ onHover(event, elements, chart): void Called when any of the events fire. Passed the event, an array of active elements (bars, points, etc), and the chart. # Parameters Name Type event ChartEvent elements ActiveElement[] chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Returns void # Defined in types/index.d.ts:1697 (opens new window)  # onResize ▸ onResize(chart, size): void Called when a resize occurs. Gets passed two arguments: the chart instance and the new size. # Parameters Name Type chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> size Object size.height number size.width number # Returns void # Defined in types/index.d.ts:1676 (opens new window)   
      ←
      
        ControllerDatasetOptions
       
        CoreInteractionOptions
      
      →\n\n\n\n# Interface: CoreInteractionOptions # Hierarchy CoreInteractionOptions ↳ TooltipOptions # Properties # axis • axis: InteractionAxis Defines which directions are used in calculating distances. Defaults to 'x' for 'index' mode and 'xy' in dataset and 'nearest' modes. # Defined in types/index.d.ts:1589 (opens new window)  # includeInvisible • includeInvisible: boolean if true, the invisible points that are outside of the chart area will also be included when evaluating interactions. Default false # Defined in types/index.d.ts:1595 (opens new window)  # intersect • intersect: boolean if true, the hover mode only applies when the mouse position intersects an item on the chart. Default true # Defined in types/index.d.ts:1584 (opens new window)  # mode • mode: keyof InteractionModeMap Sets which elements appear in the tooltip. See Interaction Modes for details. Default 'nearest' # Defined in types/index.d.ts:1579 (opens new window)   
      ←
      
        CoreChartOptions
       
        CoreScaleOptions
      
      →\n\n\n\n# Interface: CoreScaleOptions # Hierarchy CoreScaleOptions ↳ CartesianScaleOptions # Properties # alignToPixels • alignToPixels: boolean Align pixel values to device pixels # Defined in types/index.d.ts:1178 (opens new window)  # backgroundColor • backgroundColor: Color Background color of the scale area. # Defined in types/index.d.ts:1182 (opens new window)  # clip • clip: boolean Clip the dataset drawing against the size of the scale instead of chart area. Default true # Defined in types/index.d.ts:1192 (opens new window)  # display • display: boolean | "auto" Controls the axis global visibility (visible when true, hidden when false). When display: 'auto', the axis is visible only if at least one associated dataset is visible. Default true # Defined in types/index.d.ts:1174 (opens new window)  # max • max: unknown User defined maximum value for the scale, overrides maximum value from data. # Defined in types/index.d.ts:1205 (opens new window)  # min • min: unknown User defined minimum value for the scale, overrides minimum value from data. # Defined in types/index.d.ts:1201 (opens new window)  # reverse • reverse: boolean Reverse the scale. Default false # Defined in types/index.d.ts:1187 (opens new window)  # suggestedMax • suggestedMax: unknown Adjustment used when calculating the minimum data value. # Defined in types/index.d.ts:1213 (opens new window)  # suggestedMin • suggestedMin: unknown Adjustment used when calculating the maximum data value. # Defined in types/index.d.ts:1209 (opens new window)  # weight • weight: number The weight used to sort the axis. Higher weights are further away from the chart area. Default true # Defined in types/index.d.ts:1197 (opens new window) # Methods # afterBuildTicks ▸ afterBuildTicks(axis): void Callback that runs after ticks are created. Useful for filtering ticks. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Defined in types/index.d.ts:1241 (opens new window)  # afterCalculateLabelRotation ▸ afterCalculateLabelRotation(axis): void Callback that runs after tick rotation is determined. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Defined in types/index.d.ts:1257 (opens new window)  # afterDataLimits ▸ afterDataLimits(axis): void Callback that runs after data limits are determined. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Defined in types/index.d.ts:1233 (opens new window)  # afterFit ▸ afterFit(axis): void Callback that runs after the scale fits to the canvas. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Defined in types/index.d.ts:1265 (opens new window)  # afterSetDimensions ▸ afterSetDimensions(axis): void Callback that runs after dimensions are set. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Defined in types/index.d.ts:1225 (opens new window)  # afterTickToLabelConversion ▸ afterTickToLabelConversion(axis): void Callback that runs after ticks are converted into strings. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Defined in types/index.d.ts:1249 (opens new window)  # afterUpdate ▸ afterUpdate(axis): void Callback that runs at the end of the update process. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Defined in types/index.d.ts:1269 (opens new window)  # beforeBuildTicks ▸ beforeBuildTicks(axis): void Callback that runs before ticks are created. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Defined in types/index.d.ts:1237 (opens new window)  # beforeCalculateLabelRotation ▸ beforeCalculateLabelRotation(axis): void Callback that runs before tick rotation is determined. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Defined in types/index.d.ts:1253 (opens new window)  # beforeDataLimits ▸ beforeDataLimits(axis): void Callback that runs before data limits are determined. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Defined in types/index.d.ts:1229 (opens new window)  # beforeFit ▸ beforeFit(axis): void Callback that runs before the scale fits to the canvas. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Defined in types/index.d.ts:1261 (opens new window)  # beforeSetDimensions ▸ beforeSetDimensions(axis): void Callback that runs before dimensions are set. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Defined in types/index.d.ts:1221 (opens new window)  # beforeTickToLabelConversion ▸ beforeTickToLabelConversion(axis): void Callback that runs before ticks are converted into strings. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Defined in types/index.d.ts:1245 (opens new window)  # beforeUpdate ▸ beforeUpdate(axis): void Callback called before the update process starts. # Parameters Name Type axis Scale<CoreScaleOptions> # Returns void # Defined in types/index.d.ts:1217 (opens new window)   
      ←
      
        CoreInteractionOptions
       
        DatasetControllerChartComponent
      
      →\n\n\n\n# Interface: DatasetControllerChartComponent # Hierarchy ChartComponent ↳ DatasetControllerChartComponent # Properties # defaultRoutes • Optional defaultRoutes: Object # Index signature ▪ [property: string]: string # Inherited from ChartComponent.defaultRoutes # Defined in types/index.d.ts:1564 (opens new window)  # defaults • defaults: Object # Type declaration Name Type dataElementType? string | false datasetElementType? string | false # Overrides ChartComponent.defaults # Defined in types/index.d.ts:670 (opens new window)  # id • id: string # Inherited from ChartComponent.id # Defined in types/index.d.ts:1562 (opens new window) # Methods # afterRegister ▸ Optional afterRegister(): void # Returns void # Inherited from ChartComponent.afterRegister # Defined in types/index.d.ts:1567 (opens new window)  # afterUnregister ▸ Optional afterUnregister(): void # Returns void # Inherited from ChartComponent.afterUnregister # Defined in types/index.d.ts:1569 (opens new window)  # beforeRegister ▸ Optional beforeRegister(): void # Returns void # Inherited from ChartComponent.beforeRegister # Defined in types/index.d.ts:1566 (opens new window)  # beforeUnregister ▸ Optional beforeUnregister(): void # Returns void # Inherited from ChartComponent.beforeUnregister # Defined in types/index.d.ts:1568 (opens new window)   
      ←
      
        CoreScaleOptions
       
        Defaults
      
      →\n\n\n\n# Interface: Defaults # Hierarchy CoreChartOptions<ChartType> ElementChartOptions<ChartType> PluginChartOptions<ChartType> ↳ Defaults # Properties # animation • animation: false | AnimationSpec<keyof ChartTypeRegistry> & { onComplete?: (this: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, event: AnimationEvent) => void ; onProgress?: (this: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, event: AnimationEvent) => void  } # Inherited from CoreChartOptions.animation # Defined in types/index.d.ts:1767 (opens new window)  # animations • animations: AnimationsSpec<keyof ChartTypeRegistry> # Inherited from CoreChartOptions.animations # Defined in types/index.d.ts:1777 (opens new window)  # aspectRatio • aspectRatio: number Canvas aspect ratio (i.e. width / height, a value of 1 representing a square canvas). Note that this option is ignored if the height is explicitly defined either as attribute or via the style. Default 2 # Inherited from CoreChartOptions.aspectRatio # Defined in types/index.d.ts:1665 (opens new window)  # backgroundColor • backgroundColor: ScriptableAndArray<Color, ScriptableContext<keyof ChartTypeRegistry>> base background color See Defaults.backgroundColor # Inherited from CoreChartOptions.backgroundColor # Defined in types/index.d.ts:1624 (opens new window)  # borderColor • borderColor: ScriptableAndArray<Color, ScriptableContext<keyof ChartTypeRegistry>> base border color See Defaults.borderColor # Inherited from CoreChartOptions.borderColor # Defined in types/index.d.ts:1634 (opens new window)  # clip • clip: number | false | ChartArea How to clip relative to chartArea. Positive value allows overflow, negative value clips that many pixels inside chartArea. 0 = clip at chartArea. Clipping can also be configured per side: clip: {left: 5, top: false, right: -2, bottom: 0} # Inherited from CoreChartOptions.clip # Defined in types/index.d.ts:1613 (opens new window)  # color • color: Scriptable<Color, ScriptableContext<keyof ChartTypeRegistry>> base color See Defaults.color # Inherited from CoreChartOptions.color # Defined in types/index.d.ts:1619 (opens new window)  # datasets • datasets: Object # Type declaration Name Type bar BarControllerDatasetOptions bubble BubbleControllerDatasetOptions doughnut DoughnutControllerDatasetOptions line LineControllerDatasetOptions & FillerControllerDatasetOptions pie DoughnutControllerDatasetOptions polarArea PolarAreaControllerDatasetOptions radar RadarControllerDatasetOptions & FillerControllerDatasetOptions scatter LineControllerDatasetOptions # Inherited from CoreChartOptions.datasets # Defined in types/index.d.ts:1600 (opens new window)  # devicePixelRatio • devicePixelRatio: number Override the window's default devicePixelRatio. Default window.devicePixelRatio # Inherited from CoreChartOptions.devicePixelRatio # Defined in types/index.d.ts:1682 (opens new window)  # elements • elements: ElementOptionsByType<keyof ChartTypeRegistry> # Inherited from ElementChartOptions.elements # Defined in types/index.d.ts:2157 (opens new window)  # events • events: keyof HTMLElementEventMap[] The events option defines the browser events that the chart should listen to for tooltips and hovering. Default ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'] # Inherited from CoreChartOptions.events # Defined in types/index.d.ts:1692 (opens new window)  # font • font: Partial<FontSpec> base font See Defaults.font # Inherited from CoreChartOptions.font # Defined in types/index.d.ts:1644 (opens new window)  # hover • hover: CoreInteractionOptions # Inherited from CoreChartOptions.hover # Defined in types/index.d.ts:1686 (opens new window)  # hoverBackgroundColor • hoverBackgroundColor: ScriptableAndArray<Color, ScriptableContext<keyof ChartTypeRegistry>> base hover background color See Defaults.hoverBackgroundColor # Inherited from CoreChartOptions.hoverBackgroundColor # Defined in types/index.d.ts:1629 (opens new window)  # hoverBorderColor • hoverBorderColor: ScriptableAndArray<Color, ScriptableContext<keyof ChartTypeRegistry>> base hover border color See Defaults.hoverBorderColor # Inherited from CoreChartOptions.hoverBorderColor # Defined in types/index.d.ts:1639 (opens new window)  # indexAxis • indexAxis: "x" | "y" The base axis of the chart. 'x' for vertical charts and 'y' for horizontal charts. Default 'x' # Inherited from CoreChartOptions.indexAxis # Defined in types/index.d.ts:1608 (opens new window)  # interaction • interaction: CoreInteractionOptions # Inherited from CoreChartOptions.interaction # Defined in types/index.d.ts:1684 (opens new window)  # layout • layout: Partial<{ autoPadding: boolean ; padding: Scriptable<Padding, ScriptableContext<keyof ChartTypeRegistry>>  }> # Inherited from CoreChartOptions.layout # Defined in types/index.d.ts:1704 (opens new window)  # locale • locale: string Locale used for number formatting (using Intl.NumberFormat). Default user's browser setting # Inherited from CoreChartOptions.locale # Defined in types/index.d.ts:1671 (opens new window)  # maintainAspectRatio • maintainAspectRatio: boolean Maintain the original canvas aspect ratio (width / height) when resizing. For this option to work properly the chart must be in its own dedicated container. Default true # Inherited from CoreChartOptions.maintainAspectRatio # Defined in types/index.d.ts:1654 (opens new window)  # normalized • normalized: boolean Chart.js is fastest if you provide data with indices that are unique, sorted, and consistent across datasets and provide the normalized: true option to let Chart.js know that you have done so. # Inherited from CoreChartOptions.normalized # Defined in types/index.d.ts:63 (opens new window)  # parsing • parsing: false | { [key: string]: string;  } How to parse the dataset. The parsing can be disabled by specifying parsing: false at chart options or dataset. If parsing is disabled, data must be sorted and in the formats the associated chart type and scales use internally. # Inherited from CoreChartOptions.parsing # Defined in types/index.d.ts:54 (opens new window)  # plugins • plugins: PluginOptionsByType<keyof ChartTypeRegistry> # Inherited from PluginChartOptions.plugins # Defined in types/index.d.ts:2966 (opens new window)  # resizeDelay • resizeDelay: number Delay the resize update by give amount of milliseconds. This can ease the resize process by debouncing update of the elements. Default 0 # Inherited from CoreChartOptions.resizeDelay # Defined in types/index.d.ts:1659 (opens new window)  # responsive • responsive: boolean Resizes the chart canvas when its container does (important note...). Default true # Inherited from CoreChartOptions.responsive # Defined in types/index.d.ts:1649 (opens new window)  # scale • scale: ScaleOptionsByType<keyof ScaleTypeRegistry> # Defined in types/index.d.ts:678 (opens new window)  # scales • scales: Object # Type declaration Name Type category { type: "category"  } & Omit<CartesianScaleOptions, "max" | "min"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } linear { type: "linear"  } & CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: NumberFormatOptions ; precision: number ; stepSize: number  }  } logarithmic { type: "logarithmic"  } & CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: NumberFormatOptions  }  } radialLinear { type: "radialLinear"  } & CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | number | string[] | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } time { type: "time"  } & Omit<CartesianScaleOptions, "max" | "min"> & { adapters: { date: unknown  } ; bounds: "data" | "ticks" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } timeseries { type: "timeseries"  } & Omit<CartesianScaleOptions, "max" | "min"> & { adapters: { date: unknown  } ; bounds: "data" | "ticks" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:679 (opens new window)  # transitions • transitions: TransitionsSpec<keyof ChartTypeRegistry> # Inherited from CoreChartOptions.transitions # Defined in types/index.d.ts:1778 (opens new window) # Methods # describe ▸ describe(scope, values): AnyObject # Parameters Name Type scope string values AnyObject # Returns AnyObject # Defined in types/index.d.ts:687 (opens new window)  # get ▸ get(scope): AnyObject # Parameters Name Type scope string # Returns AnyObject # Defined in types/index.d.ts:685 (opens new window)  # onClick ▸ onClick(event, elements, chart): void Called if the event is of type 'mouseup' or 'click'. Passed the event, an array of active elements, and the chart. # Parameters Name Type event ChartEvent elements ActiveElement[] chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Returns void # Inherited from CoreChartOptions.onClick # Defined in types/index.d.ts:1702 (opens new window)  # onHover ▸ onHover(event, elements, chart): void Called when any of the events fire. Passed the event, an array of active elements (bars, points, etc), and the chart. # Parameters Name Type event ChartEvent elements ActiveElement[] chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Returns void # Inherited from CoreChartOptions.onHover # Defined in types/index.d.ts:1697 (opens new window)  # onResize ▸ onResize(chart, size): void Called when a resize occurs. Gets passed two arguments: the chart instance and the new size. # Parameters Name Type chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> size Object size.height number size.width number # Returns void # Inherited from CoreChartOptions.onResize # Defined in types/index.d.ts:1676 (opens new window)  # override ▸ override(scope, values): AnyObject # Parameters Name Type scope string values AnyObject # Returns AnyObject # Defined in types/index.d.ts:688 (opens new window)  # route ▸ route(scope, name, targetScope, targetName): void Routes the named defaults to fallback to another scope/name.
This routing is useful when those target values, like defaults.color, are changed runtime.
If the values would be copied, the runtime change would not take effect. By routing, the
fallback is evaluated at each access, so its always up to date. Example: defaults.route('elements.arc', 'backgroundColor', '', 'color') reads the backgroundColor from defaults.color when undefined locally # Parameters Name Type Description scope string Scope this route applies to. name string Property name that should be routed to different namespace when not defined here. targetScope string The namespace where those properties should be routed to. Empty string ('') is the root of defaults. targetName string The target name in the target scope the property should be routed to. # Returns void # Defined in types/index.d.ts:707 (opens new window)  # set ▸ set(values): AnyObject # Parameters Name Type values AnyObject # Returns AnyObject # Defined in types/index.d.ts:683 (opens new window) ▸ set(scope, values): AnyObject # Parameters Name Type scope string values AnyObject # Returns AnyObject # Defined in types/index.d.ts:684 (opens new window)   
      ←
      
        DatasetControllerChartComponent
       
        DoughnutAnimationOptions
      
      →\n\n\n\n# Interface: DoughnutAnimationOptions # Hierarchy AnimationSpec<"doughnut"> ↳ DoughnutAnimationOptions # Properties # animateRotate • animateRotate: boolean If true, the chart will animate in with a rotation animation. This property is in the options.animation object. Default true # Defined in types/index.d.ts:289 (opens new window)  # animateScale • animateScale: boolean If true, will animate scaling the chart from the center outwards. Default false # Defined in types/index.d.ts:295 (opens new window)  # delay • Optional delay: Scriptable<number, ScriptableContext<"doughnut">> Delay before starting the animations. Default 0 # Inherited from AnimationSpec.delay # Defined in types/index.d.ts:1726 (opens new window)  # duration • Optional duration: Scriptable<number, ScriptableContext<"doughnut">> The number of milliseconds an animation takes. Default 1000 # Inherited from AnimationSpec.duration # Defined in types/index.d.ts:1715 (opens new window)  # easing • Optional easing: Scriptable<"linear" | "easeOutQuart" | "easeInQuad" | "easeOutQuad" | "easeInOutQuad" | "easeInCubic" | "easeOutCubic" | "easeInOutCubic" | "easeInQuart" | "easeInOutQuart" | "easeInQuint" | "easeOutQuint" | "easeInOutQuint" | "easeInSine" | "easeOutSine" | "easeInOutSine" | "easeInExpo" | "easeOutExpo" | "easeInOutExpo" | "easeInCirc" | "easeOutCirc" | "easeInOutCirc" | "easeInElastic" | "easeOutElastic" | "easeInOutElastic" | "easeInBack" | "easeOutBack" | "easeInOutBack" | "easeInBounce" | "easeOutBounce" | "easeInOutBounce", ScriptableContext<"doughnut">> Easing function to use Default 'easeOutQuart' # Inherited from AnimationSpec.easing # Defined in types/index.d.ts:1720 (opens new window)  # loop • Optional loop: Scriptable<boolean, ScriptableContext<"doughnut">> If set to true, the animations loop endlessly. Default false # Inherited from AnimationSpec.loop # Defined in types/index.d.ts:1732 (opens new window)   
      ←
      
        Defaults
       
        DoughnutController
      
      →\n\n\n\n# Interface: DoughnutController # Hierarchy DatasetController ↳ DoughnutController # Properties # _cachedMeta • Readonly _cachedMeta: ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> # Inherited from DatasetController._cachedMeta # Defined in types/index.d.ts:602 (opens new window)  # chart • Readonly chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Inherited from DatasetController.chart # Defined in types/index.d.ts:600 (opens new window)  # enableOptionSharing • enableOptionSharing: boolean # Inherited from DatasetController.enableOptionSharing # Defined in types/index.d.ts:603 (opens new window)  # index • Readonly index: number # Inherited from DatasetController.index # Defined in types/index.d.ts:601 (opens new window)  # innerRadius • Readonly innerRadius: number # Defined in types/index.d.ts:341 (opens new window)  # offsetX • Readonly offsetX: number # Defined in types/index.d.ts:343 (opens new window)  # offsetY • Readonly offsetY: number # Defined in types/index.d.ts:344 (opens new window)  # outerRadius • Readonly outerRadius: number # Defined in types/index.d.ts:342 (opens new window)  # supportsDecimation • supportsDecimation: boolean # Inherited from DatasetController.supportsDecimation # Defined in types/index.d.ts:607 (opens new window) # Methods # addElements ▸ addElements(): void # Returns void # Inherited from DatasetController.addElements # Defined in types/index.d.ts:623 (opens new window)  # applyStack ▸ Protected applyStack(scale, parsed): number # Parameters Name Type scale Scale<CoreScaleOptions> parsed unknown[] # Returns number # Inherited from DatasetController.applyStack # Defined in types/index.d.ts:659 (opens new window)  # buildOrUpdateElements ▸ buildOrUpdateElements(resetNewElements?): void # Parameters Name Type resetNewElements? boolean # Returns void # Inherited from DatasetController.buildOrUpdateElements # Defined in types/index.d.ts:624 (opens new window)  # calculateCircumference ▸ calculateCircumference(value): number # Parameters Name Type value number # Returns number # Defined in types/index.d.ts:347 (opens new window)  # calculateTotal ▸ calculateTotal(): number # Returns number # Defined in types/index.d.ts:346 (opens new window)  # configure ▸ configure(): void # Returns void # Inherited from DatasetController.configure # Defined in types/index.d.ts:621 (opens new window)  # draw ▸ draw(): void # Returns void # Inherited from DatasetController.draw # Defined in types/index.d.ts:616 (opens new window)  # getAllParsedValues ▸ getAllParsedValues(scale): number[] # Parameters Name Type scale Scale<CoreScaleOptions> # Returns number[] # Inherited from DatasetController.getAllParsedValues # Defined in types/index.d.ts:610 (opens new window)  # getDataset ▸ getDataset(): ChartDataset<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[]> # Returns ChartDataset<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[]> # Inherited from DatasetController.getDataset # Defined in types/index.d.ts:618 (opens new window)  # getLabelAndValue ▸ Protected getLabelAndValue(index): Object # Parameters Name Type index number # Returns Object Name Type label string value string # Inherited from DatasetController.getLabelAndValue # Defined in types/index.d.ts:611 (opens new window)  # getMaxOverflow ▸ Protected getMaxOverflow(): number | boolean # Returns number | boolean # Inherited from DatasetController.getMaxOverflow # Defined in types/index.d.ts:615 (opens new window)  # getMeta ▸ getMeta(): ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> # Returns ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> # Inherited from DatasetController.getMeta # Defined in types/index.d.ts:619 (opens new window)  # getMinMax ▸ Protected getMinMax(scale, canStack?): Object # Parameters Name Type scale Scale<CoreScaleOptions> canStack? boolean # Returns Object Name Type max number min number # Inherited from DatasetController.getMinMax # Defined in types/index.d.ts:666 (opens new window)  # getParsed ▸ Protected getParsed(index): number | CartesianParsedData | BarParsedData | BubbleParsedData | RadialParsedData # Parameters Name Type index number # Returns number | CartesianParsedData | BarParsedData | BubbleParsedData | RadialParsedData # Inherited from DatasetController.getParsed # Defined in types/index.d.ts:658 (opens new window)  # getScaleForId ▸ getScaleForId(scaleID): Scale<CoreScaleOptions> # Parameters Name Type scaleID string # Returns Scale<CoreScaleOptions> # Inherited from DatasetController.getScaleForId # Defined in types/index.d.ts:620 (opens new window)  # getSharedOptions ▸ Protected getSharedOptions(options): AnyObject Utility for checking if the options are shared and should be animated separately. # Parameters Name Type options AnyObject # Returns AnyObject # Inherited from DatasetController.getSharedOptions # Defined in types/index.d.ts:633 (opens new window)  # getStyle ▸ getStyle(index, active): AnyObject # Parameters Name Type index number active boolean # Returns AnyObject # Inherited from DatasetController.getStyle # Defined in types/index.d.ts:626 (opens new window)  # includeOptions ▸ Protected includeOptions(mode, sharedOptions): boolean Utility for determining if options should be included in the updated properties # Parameters Name Type mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" sharedOptions AnyObject # Returns boolean # Inherited from DatasetController.includeOptions # Defined in types/index.d.ts:638 (opens new window)  # initialize ▸ initialize(): void # Returns void # Inherited from DatasetController.initialize # Defined in types/index.d.ts:622 (opens new window)  # linkScales ▸ linkScales(): void # Returns void # Inherited from DatasetController.linkScales # Defined in types/index.d.ts:609 (opens new window)  # parse ▸ parse(start, count): void # Parameters Name Type start number count number # Returns void # Inherited from DatasetController.parse # Defined in types/index.d.ts:654 (opens new window)  # parseArrayData ▸ Protected parseArrayData(meta, data, start, count): AnyObject[] # Parameters Name Type meta ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> data AnyObject[] start number count number # Returns AnyObject[] # Inherited from DatasetController.parseArrayData # Defined in types/index.d.ts:656 (opens new window)  # parseObjectData ▸ Protected parseObjectData(meta, data, start, count): AnyObject[] # Parameters Name Type meta ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> data AnyObject[] start number count number # Returns AnyObject[] # Inherited from DatasetController.parseObjectData # Defined in types/index.d.ts:657 (opens new window)  # parsePrimitiveData ▸ Protected parsePrimitiveData(meta, data, start, count): AnyObject[] # Parameters Name Type meta ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> data AnyObject[] start number count number # Returns AnyObject[] # Inherited from DatasetController.parsePrimitiveData # Defined in types/index.d.ts:655 (opens new window)  # removeHoverStyle ▸ removeHoverStyle(element, datasetIndex, index): void # Parameters Name Type element default<AnyObject, AnyObject> datasetIndex number index number # Returns void # Inherited from DatasetController.removeHoverStyle # Defined in types/index.d.ts:651 (opens new window)  # reset ▸ reset(): void # Returns void # Inherited from DatasetController.reset # Defined in types/index.d.ts:617 (opens new window)  # resolveDataElementOptions ▸ Protected resolveDataElementOptions(index, mode): AnyObject # Parameters Name Type index number mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" # Returns AnyObject # Inherited from DatasetController.resolveDataElementOptions # Defined in types/index.d.ts:628 (opens new window)  # resolveDatasetElementOptions ▸ Protected resolveDatasetElementOptions(mode): AnyObject # Parameters Name Type mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" # Returns AnyObject # Inherited from DatasetController.resolveDatasetElementOptions # Defined in types/index.d.ts:627 (opens new window)  # setHoverStyle ▸ setHoverStyle(element, datasetIndex, index): void # Parameters Name Type element default<AnyObject, AnyObject> datasetIndex number index number # Returns void # Inherited from DatasetController.setHoverStyle # Defined in types/index.d.ts:652 (opens new window)  # update ▸ update(mode): void # Parameters Name Type mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" # Returns void # Inherited from DatasetController.update # Defined in types/index.d.ts:613 (opens new window)  # updateElement ▸ Protected updateElement(element, index, properties, mode): void Utility for updating an element with new properties, using animations when appropriate. # Parameters Name Type element default<AnyObject, AnyObject> index number properties AnyObject mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" # Returns void # Inherited from DatasetController.updateElement # Defined in types/index.d.ts:644 (opens new window)  # updateElements ▸ updateElements(elements, start, count, mode): void # Parameters Name Type elements default<AnyObject, AnyObject>[] start number count number mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" # Returns void # Inherited from DatasetController.updateElements # Defined in types/index.d.ts:612 (opens new window)  # updateIndex ▸ updateIndex(datasetIndex): void # Parameters Name Type datasetIndex number # Returns void # Inherited from DatasetController.updateIndex # Defined in types/index.d.ts:614 (opens new window)  # updateRangeFromParsed ▸ Protected updateRangeFromParsed(range, scale, parsed, stack): void # Parameters Name Type range Object range.max number range.min number scale Scale<CoreScaleOptions> parsed unknown[] stack string | boolean # Returns void # Inherited from DatasetController.updateRangeFromParsed # Defined in types/index.d.ts:660 (opens new window)  # updateSharedOptions ▸ Protected updateSharedOptions(sharedOptions, mode, newOptions): void Utility to animate the shared options, that are potentially affecting multiple elements. # Parameters Name Type sharedOptions AnyObject mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" newOptions AnyObject # Returns void # Inherited from DatasetController.updateSharedOptions # Defined in types/index.d.ts:650 (opens new window)   
      ←
      
        DoughnutAnimationOptions
       
        DoughnutControllerChartOptions
      
      →\n\n\n\n# Interface: DoughnutControllerChartOptions # Properties # animation • animation: false | DoughnutAnimationOptions # Defined in types/index.d.ts:335 (opens new window)  # circumference • circumference: number Sweep to allow arcs to cover. Default 360 # Defined in types/index.d.ts:303 (opens new window)  # cutout • cutout: Scriptable<string | number, ScriptableContext<"doughnut">> The portion of the chart that is cut out of the middle. ('50%' - for doughnut, 0 - for pie)
String ending with '%' means percentage, number means pixels. Default 50 # Defined in types/index.d.ts:310 (opens new window)  # offset • offset: number | number[] Arc offset (in pixels). # Defined in types/index.d.ts:315 (opens new window)  # radius • radius: Scriptable<string | number, ScriptableContext<"doughnut">> The outer radius of the chart. String ending with '%' means percentage of maximum radius, number means pixels. Default '100%' # Defined in types/index.d.ts:321 (opens new window)  # rotation • rotation: number Starting angle to draw arcs from. Default 0 # Defined in types/index.d.ts:327 (opens new window)  # spacing • spacing: number Spacing between the arcs Default 0 # Defined in types/index.d.ts:333 (opens new window)   
      ←
      
        DoughnutController
       
        DoughnutControllerDatasetOptions
      
      →\n\n\n\n# Interface: DoughnutControllerDatasetOptions # Hierarchy ControllerDatasetOptions ScriptableAndArrayOptions<ArcOptions, ScriptableContext<"doughnut">> ScriptableAndArrayOptions<ArcHoverOptions, ScriptableContext<"doughnut">> AnimationOptions<"doughnut"> ↳ DoughnutControllerDatasetOptions ↳↳ PolarAreaControllerDatasetOptions # Properties # animation • animation: false | AnimationSpec<"doughnut"> & { onComplete?: (this: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, event: AnimationEvent) => void ; onProgress?: (this: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, event: AnimationEvent) => void  } # Inherited from AnimationOptions.animation # Defined in types/index.d.ts:1767 (opens new window)  # animations • animations: AnimationsSpec<"doughnut"> # Inherited from AnimationOptions.animations # Defined in types/index.d.ts:1777 (opens new window)  # backgroundColor • backgroundColor: ScriptableAndArray<Color, ScriptableContext<"doughnut">> # Inherited from ScriptableAndArrayOptions.backgroundColor # Defined in types/index.d.ts:1827 (opens new window)  # borderAlign • borderAlign: ScriptableAndArray<"center" | "inner", ScriptableContext<"doughnut">> Arc stroke alignment. # Inherited from ScriptableAndArrayOptions.borderAlign # Defined in types/index.d.ts:1853 (opens new window)  # borderColor • borderColor: ScriptableAndArray<Color, ScriptableContext<"doughnut">> # Inherited from ScriptableAndArrayOptions.borderColor # Defined in types/index.d.ts:1826 (opens new window)  # borderDash • borderDash: ScriptableAndArray<number[], ScriptableContext<"doughnut">> Line dash. See MDN. Default [] # Inherited from ScriptableAndArrayOptions.borderDash # Defined in types/index.d.ts:1858 (opens new window)  # borderDashOffset • borderDashOffset: ScriptableAndArray<number, ScriptableContext<"doughnut">> Line dash offset. See MDN. Default 0.0 # Inherited from ScriptableAndArrayOptions.borderDashOffset # Defined in types/index.d.ts:1863 (opens new window)  # borderJoinStyle • borderJoinStyle: ScriptableAndArray<CanvasLineJoin, ScriptableContext<"doughnut">> Line join style. See MDN. Default is 'round' when borderAlign is 'inner', else 'bevel'. # Inherited from ScriptableAndArrayOptions.borderJoinStyle # Defined in types/index.d.ts:1867 (opens new window)  # borderRadius • borderRadius: ScriptableAndArray<number | ArcBorderRadius, ScriptableContext<"doughnut">> Sets the border radius for arcs Default 0 # Inherited from ScriptableAndArrayOptions.borderRadius # Defined in types/index.d.ts:1873 (opens new window)  # borderWidth • borderWidth: ScriptableAndArray<number, ScriptableContext<"doughnut">> # Inherited from ScriptableAndArrayOptions.borderWidth # Defined in types/index.d.ts:1825 (opens new window)  # circular • circular: ScriptableAndArray<boolean, ScriptableContext<"doughnut">> If false, Arc will be flat. Default true # Inherited from ScriptableAndArrayOptions.circular # Defined in types/index.d.ts:1884 (opens new window)  # circumference • circumference: number Sweep to allow arcs to cover. Default 360 # Defined in types/index.d.ts:257 (opens new window)  # clip • clip: number | false | ChartArea How to clip relative to chartArea. Positive value allows overflow, negative value clips that many pixels inside chartArea. 0 = clip at chartArea. Clipping can also be configured per side: clip: {left: 5, top: false, right: -2, bottom: 0} # Inherited from ControllerDatasetOptions.clip # Defined in types/index.d.ts:75 (opens new window)  # hidden • hidden: boolean Configures the visibility state of the dataset. Set it to true, to hide the dataset from the chart. Default false # Inherited from ControllerDatasetOptions.hidden # Defined in types/index.d.ts:93 (opens new window)  # hoverBackgroundColor • hoverBackgroundColor: ScriptableAndArray<Color, ScriptableContext<"doughnut">> # Inherited from ScriptableAndArrayOptions.hoverBackgroundColor # Defined in types/index.d.ts:1833 (opens new window)  # hoverBorderColor • hoverBorderColor: ScriptableAndArray<Color, ScriptableContext<"doughnut">> # Inherited from ScriptableAndArrayOptions.hoverBorderColor # Defined in types/index.d.ts:1832 (opens new window)  # hoverBorderDash • hoverBorderDash: ScriptableAndArray<number[], ScriptableContext<"doughnut">> # Inherited from ScriptableAndArrayOptions.hoverBorderDash # Defined in types/index.d.ts:1893 (opens new window)  # hoverBorderDashOffset • hoverBorderDashOffset: ScriptableAndArray<number, ScriptableContext<"doughnut">> # Inherited from ScriptableAndArrayOptions.hoverBorderDashOffset # Defined in types/index.d.ts:1894 (opens new window)  # hoverBorderWidth • hoverBorderWidth: ScriptableAndArray<number, ScriptableContext<"doughnut">> # Inherited from ScriptableAndArrayOptions.hoverBorderWidth # Defined in types/index.d.ts:1831 (opens new window)  # hoverOffset • hoverOffset: ScriptableAndArray<number, ScriptableContext<"doughnut">> # Inherited from ScriptableAndArrayOptions.hoverOffset # Defined in types/index.d.ts:1895 (opens new window)  # indexAxis • indexAxis: "x" | "y" The base axis of the chart. 'x' for vertical charts and 'y' for horizontal charts. Default 'x' # Inherited from ControllerDatasetOptions.indexAxis # Defined in types/index.d.ts:71 (opens new window)  # label • label: string The label for the dataset which appears in the legend and tooltips. # Inherited from ControllerDatasetOptions.label # Defined in types/index.d.ts:79 (opens new window)  # normalized • normalized: boolean Chart.js is fastest if you provide data with indices that are unique, sorted, and consistent across datasets and provide the normalized: true option to let Chart.js know that you have done so. # Inherited from ControllerDatasetOptions.normalized # Defined in types/index.d.ts:63 (opens new window)  # offset • offset: number | number[] Arc offset (in pixels). # Overrides ScriptableAndArrayOptions.offset # Defined in types/index.d.ts:262 (opens new window)  # order • order: number The drawing order of dataset. Also affects order for stacking, tooltip and legend. # Inherited from ControllerDatasetOptions.order # Defined in types/index.d.ts:83 (opens new window)  # parsing • parsing: false | { [key: string]: string;  } How to parse the dataset. The parsing can be disabled by specifying parsing: false at chart options or dataset. If parsing is disabled, data must be sorted and in the formats the associated chart type and scales use internally. # Inherited from ControllerDatasetOptions.parsing # Defined in types/index.d.ts:54 (opens new window)  # rotation • rotation: number Starting angle to draw this dataset from. Default 0 # Defined in types/index.d.ts:268 (opens new window)  # spacing • spacing: number Similar to the offset option, but applies to all arcs. This can be used to to add spaces
between arcs Default 0 # Overrides ScriptableAndArrayOptions.spacing # Defined in types/index.d.ts:281 (opens new window)  # stack • stack: string The ID of the group to which this dataset belongs to (when stacked, each group will be a separate stack). # Inherited from ControllerDatasetOptions.stack # Defined in types/index.d.ts:88 (opens new window)  # transitions • transitions: TransitionsSpec<"doughnut"> # Inherited from AnimationOptions.transitions # Defined in types/index.d.ts:1778 (opens new window)  # weight • weight: number The relative thickness of the dataset. Providing a value for weight will cause the pie or doughnut dataset to be drawn with a thickness relative to the sum of all the dataset weight values. Default 1 # Defined in types/index.d.ts:274 (opens new window)   
      ←
      
        DoughnutControllerChartOptions
       
        DoughnutMetaExtensions
      
      →\n\n\n\n# Interface: DoughnutMetaExtensions # Properties # total • total: number # Defined in types/index.d.ts:356 (opens new window)   
      ←
      
        DoughnutControllerDatasetOptions
       
        ElementOptionsByType
      
      →\n\n\n\n# Interface: ElementOptionsByType<TType> # Type parameters Name Type TType extends ChartType # Properties # arc • arc: ScriptableAndArrayOptions<ArcOptions & ArcHoverOptions, ScriptableContext<TType>> # Defined in types/index.d.ts:2150 (opens new window)  # bar • bar: ScriptableAndArrayOptions<BarOptions & BarHoverOptions, ScriptableContext<TType>> # Defined in types/index.d.ts:2151 (opens new window)  # line • line: ScriptableAndArrayOptions<LineOptions & LineHoverOptions, ScriptableContext<TType>> # Defined in types/index.d.ts:2152 (opens new window)  # point • point: ScriptableAndArrayOptions<PointOptions & PointHoverOptions, ScriptableContext<TType>> # Defined in types/index.d.ts:2153 (opens new window)   
      ←
      
        DoughnutMetaExtensions
       
        ExtendedPlugin
      
      →\n\n\n\n# Interface: ExtendedPlugin<TType, O, Model> # Type parameters Name Type TType extends ChartType O AnyObject Model TooltipModel<TType> # Hierarchy ExtendedPlugin ↳ Plugin # Methods # afterTooltipDraw ▸ Optional afterTooltipDraw(chart, args, options): void Desc Called after drawing the tooltip. Note that this hook will not
be called if the tooltip drawing has been previously cancelled. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.tooltip Model The tooltip. options O The plugin options. # Returns void # Defined in types/index.d.ts:2721 (opens new window)  # beforeTooltipDraw ▸ Optional beforeTooltipDraw(chart, args, options): boolean | void Desc Called before drawing the tooltip. If any plugin returns false,
the tooltip drawing is cancelled until another render is triggered. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.cancelable true - args.tooltip Model The tooltip. options O The plugin options. # Returns boolean | void false to cancel the chart tooltip drawing. # Defined in types/index.d.ts:2712 (opens new window)   
      ←
      
        ElementOptionsByType
       
        FillerControllerDatasetOptions
      
      →\n\n\n\n# Interface: FillerControllerDatasetOptions # Properties # fill • fill: FillTarget | ComplexFillTarget Both line and radar charts support a fill option on the dataset object which can be used to create area between two datasets or a dataset and a boundary, i.e. the scale origin, start or end # Defined in types/index.d.ts:2269 (opens new window)   
      ←
      
        ExtendedPlugin
       
        FillerOptions
      
      →\n\n\n\n# Interface: FillerOptions # Properties # drawTime • drawTime: "beforeDraw" | "beforeDatasetsDraw" | "beforeDatasetDraw" # Defined in types/index.d.ts:2244 (opens new window)  # propagate • propagate: boolean # Defined in types/index.d.ts:2245 (opens new window)   
      ←
      
        FillerControllerDatasetOptions
       
        FontSpec
      
      →\n\n\n\n# Interface: FontSpec # Hierarchy FontSpec ↳ CanvasFontSpec # Properties # family • family: string Default font family for all text, follows CSS font-family options. Default "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif" # Defined in types/index.d.ts:1786 (opens new window)  # lineHeight • lineHeight: string | number Height of an individual line of text (see MDN). Default 1.2 # Defined in types/index.d.ts:1805 (opens new window)  # size • size: number Default font size (in px) for text. Does not apply to radialLinear scale point labels. Default 12 # Defined in types/index.d.ts:1791 (opens new window)  # style • style: "normal" | "inherit" | "italic" | "oblique" | "initial" Default font style. Does not apply to tooltip title or footer. Does not apply to chart title. Follows CSS font-style options (i.e. normal, italic, oblique, initial, inherit) Default 'normal' # Defined in types/index.d.ts:1796 (opens new window)  # weight • weight: number | "bold" | "normal" | "lighter" | "bolder" Default font weight (boldness). (see MDN). # Defined in types/index.d.ts:1800 (opens new window)   
      ←
      
        FillerOptions
       
        GridLineOptions
      
      →\n\n\n\n# Interface: GridLineOptions # Properties # circular • circular: boolean Default false # Defined in types/index.d.ts:2995 (opens new window)  # color • color: ScriptableAndArray<Color, ScriptableScaleContext> Default 'rgba(0, 0, 0, 0.1)' # Defined in types/index.d.ts:2999 (opens new window)  # display • display: boolean Default true # Defined in types/index.d.ts:2991 (opens new window)  # drawOnChartArea • drawOnChartArea: boolean Default true # Defined in types/index.d.ts:3007 (opens new window)  # drawTicks • drawTicks: boolean Default true # Defined in types/index.d.ts:3011 (opens new window)  # lineWidth • lineWidth: ScriptableAndArray<number, ScriptableScaleContext> Default 1 # Defined in types/index.d.ts:3003 (opens new window)  # offset • offset: boolean Default false # Defined in types/index.d.ts:3035 (opens new window)  # tickBorderDash • tickBorderDash: Scriptable<number[], ScriptableScaleContext> Default [] # Defined in types/index.d.ts:3015 (opens new window)  # tickBorderDashOffset • tickBorderDashOffset: Scriptable<number, ScriptableScaleContext> Default 0 # Defined in types/index.d.ts:3019 (opens new window)  # tickColor • tickColor: ScriptableAndArray<Color, ScriptableScaleContext> Default 'rgba(0, 0, 0, 0.1)' # Defined in types/index.d.ts:3023 (opens new window)  # tickLength • tickLength: number Default 10 # Defined in types/index.d.ts:3027 (opens new window)  # tickWidth • tickWidth: number Default 1 # Defined in types/index.d.ts:3031 (opens new window)  # z • z: number Default 0 # Defined in types/index.d.ts:3039 (opens new window)   
      ←
      
        FontSpec
       
        InteractionItem
      
      →\n\n\n\n# Interface: InteractionItem # Properties # datasetIndex • datasetIndex: number # Defined in types/index.d.ts:729 (opens new window)  # element • element: default<AnyObject, AnyObject> # Defined in types/index.d.ts:728 (opens new window)  # index • index: number # Defined in types/index.d.ts:730 (opens new window)   
      ←
      
        GridLineOptions
       
        InteractionModeMap
      
      →\n\n\n\n# Interface: InteractionModeMap # Properties # dataset • dataset: InteractionModeFunction Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
If the options.intersect is false, we find the nearest item and return the items in that dataset # Defined in types/index.d.ts:751 (opens new window)  # index • index: InteractionModeFunction Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item # Defined in types/index.d.ts:745 (opens new window)  # nearest • nearest: InteractionModeFunction nearest mode returns the element closest to the point # Defined in types/index.d.ts:760 (opens new window)  # point • point: InteractionModeFunction Point mode returns all elements that hit test based on the event position
of the event # Defined in types/index.d.ts:756 (opens new window)  # x • x: InteractionModeFunction x mode returns the elements that hit-test at the current x coordinate # Defined in types/index.d.ts:764 (opens new window)  # y • y: InteractionModeFunction y mode returns the elements that hit-test at the current y coordinate # Defined in types/index.d.ts:768 (opens new window)   
      ←
      
        InteractionItem
       
        InteractionOptions
      
      →\n\n\n\n# Interface: InteractionOptions # Properties # axis • Optional axis: string # Defined in types/index.d.ts:722 (opens new window)  # includeInvisible • Optional includeInvisible: boolean # Defined in types/index.d.ts:724 (opens new window)  # intersect • Optional intersect: boolean # Defined in types/index.d.ts:723 (opens new window)   
      ←
      
        InteractionModeMap
       
        LabelItem
      
      →\n\n\n\n# Interface: LabelItem # Properties # font • font: CanvasFontSpec # Defined in types/index.d.ts:1501 (opens new window)  # label • label: string | string[] # Defined in types/index.d.ts:1500 (opens new window)  # options • options: RenderTextOpts # Defined in types/index.d.ts:1503 (opens new window)  # textOffset • textOffset: number # Defined in types/index.d.ts:1502 (opens new window)   
      ←
      
        InteractionOptions
       
        LayoutItem
      
      →\n\n\n\n# Interface: LayoutItem # Hierarchy LayoutItem ↳ Scale ↳ LegendElement # Properties # bottom • bottom: number Bottom edge of the item. Set by layout system and cannot be used in update # Defined in types/layout.d.ts:41 (opens new window)  # fullSize • fullSize: boolean if true, and the item is horizontal, then push vertical boxes down # Defined in types/layout.d.ts:17 (opens new window)  # height • height: number Height of item. Must be valid after update() # Defined in types/layout.d.ts:25 (opens new window)  # left • left: number Left edge of the item. Set by layout system and cannot be used in update # Defined in types/layout.d.ts:29 (opens new window)  # position • position: LayoutPosition The position of the item in the chart layout. Possible values are # Defined in types/layout.d.ts:9 (opens new window)  # right • right: number Right edge of the item. Set by layout system and cannot be used in update # Defined in types/layout.d.ts:37 (opens new window)  # top • top: number Top edge of the item. Set by layout system and cannot be used in update # Defined in types/layout.d.ts:33 (opens new window)  # weight • weight: number The weight used to sort the item. Higher weights are further away from the chart area # Defined in types/layout.d.ts:13 (opens new window)  # width • width: number Width of item. Must be valid after update() # Defined in types/layout.d.ts:21 (opens new window) # Methods # beforeLayout ▸ Optional beforeLayout(): void Called before the layout process starts # Returns void # Defined in types/layout.d.ts:46 (opens new window)  # draw ▸ draw(chartArea): void Draws the element # Parameters Name Type chartArea ChartArea # Returns void # Defined in types/layout.d.ts:50 (opens new window)  # getPadding ▸ Optional getPadding(): ChartArea Returns an object with padding on the edges # Returns ChartArea # Defined in types/layout.d.ts:54 (opens new window)  # isHorizontal ▸ isHorizontal(): boolean returns true if the layout item is horizontal (ie. top or bottom) # Returns boolean # Defined in types/layout.d.ts:58 (opens new window)  # update ▸ update(width, height, margins?): void Takes two parameters: width and height. # Parameters Name Type width number height number margins? ChartArea # Returns void # Defined in types/layout.d.ts:64 (opens new window)   
      ←
      
        LabelItem
       
        LegendElement
      
      →\n\n\n\n# Interface: LegendElement<TType> # Type parameters Name Type TType extends ChartType # Hierarchy default<AnyObject, LegendOptions<TType>> LayoutItem ↳ LegendElement # Properties # $animations • $animations: Record<string, Animation> # Inherited from Element.$animations # Defined in core/core.element.ts:15 (opens new window)  # active • active: boolean = false # Inherited from Element.active # Defined in core/core.element.ts:13 (opens new window)  # bottom • bottom: number Bottom edge of the item. Set by layout system and cannot be used in update # Inherited from LayoutItem.bottom # Defined in types/layout.d.ts:41 (opens new window)  # chart • chart: Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> # Defined in types/index.d.ts:2363 (opens new window)  # ctx • ctx: CanvasRenderingContext2D # Defined in types/index.d.ts:2364 (opens new window)  # fullSize • fullSize: boolean if true, and the item is horizontal, then push vertical boxes down # Inherited from LayoutItem.fullSize # Defined in types/layout.d.ts:17 (opens new window)  # height • height: number Height of item. Must be valid after update() # Inherited from LayoutItem.height # Defined in types/layout.d.ts:25 (opens new window)  # left • left: number Left edge of the item. Set by layout system and cannot be used in update # Inherited from LayoutItem.left # Defined in types/layout.d.ts:29 (opens new window)  # legendItems • Optional legendItems: LegendItem[] # Defined in types/index.d.ts:2365 (opens new window)  # options • options: LegendOptions<TType> # Overrides Element.options # Defined in types/index.d.ts:2366 (opens new window)  # position • position: LayoutPosition The position of the item in the chart layout. Possible values are # Inherited from LayoutItem.position # Defined in types/layout.d.ts:9 (opens new window)  # right • right: number Right edge of the item. Set by layout system and cannot be used in update # Inherited from LayoutItem.right # Defined in types/layout.d.ts:37 (opens new window)  # top • top: number Top edge of the item. Set by layout system and cannot be used in update # Inherited from LayoutItem.top # Defined in types/layout.d.ts:33 (opens new window)  # weight • weight: number The weight used to sort the item. Higher weights are further away from the chart area # Inherited from LayoutItem.weight # Defined in types/layout.d.ts:13 (opens new window)  # width • width: number Width of item. Must be valid after update() # Inherited from LayoutItem.width # Defined in types/layout.d.ts:21 (opens new window)  # x • x: number # Inherited from Element.x # Defined in core/core.element.ts:11 (opens new window)  # y • y: number # Inherited from Element.y # Defined in core/core.element.ts:12 (opens new window) # Methods # beforeLayout ▸ Optional beforeLayout(): void Called before the layout process starts # Returns void # Inherited from LayoutItem.beforeLayout # Defined in types/layout.d.ts:46 (opens new window)  # draw ▸ draw(chartArea): void Draws the element # Parameters Name Type chartArea ChartArea # Returns void # Inherited from LayoutItem.draw # Defined in types/layout.d.ts:50 (opens new window)  # fit ▸ fit(): void # Returns void # Defined in types/index.d.ts:2367 (opens new window)  # getPadding ▸ Optional getPadding(): ChartArea Returns an object with padding on the edges # Returns ChartArea # Inherited from LayoutItem.getPadding # Defined in types/layout.d.ts:54 (opens new window)  # getProps ▸ getProps<P>(props, final?): Pick<AnyObject, P[number]> Gets the current or final value of each prop. Can return extra properties (whole object). # Type parameters Name Type P extends string[] # Parameters Name Type Description props P properties to get final? boolean get the final value (animation target) # Returns Pick<AnyObject, P[number]> # Inherited from Element.getProps # Defined in core/core.element.ts:31 (opens new window) ▸ getProps<P>(props, final?): Partial<Record<P, unknown>> # Type parameters Name Type P extends string # Parameters Name Type props P[] final? boolean # Returns Partial<Record<P, unknown>> # Inherited from Element.getProps # Defined in core/core.element.ts:32 (opens new window)  # hasValue ▸ hasValue(): boolean # Returns boolean # Inherited from Element.hasValue # Defined in core/core.element.ts:22 (opens new window)  # isHorizontal ▸ isHorizontal(): boolean returns true if the layout item is horizontal (ie. top or bottom) # Returns boolean # Inherited from LayoutItem.isHorizontal # Defined in types/layout.d.ts:58 (opens new window)  # tooltipPosition ▸ tooltipPosition(useFinalPosition): Point # Parameters Name Type useFinalPosition boolean # Returns Point # Inherited from Element.tooltipPosition # Defined in core/core.element.ts:17 (opens new window)  # update ▸ update(width, height, margins?): void Takes two parameters: width and height. # Parameters Name Type width number height number margins? ChartArea # Returns void # Inherited from LayoutItem.update # Defined in types/layout.d.ts:64 (opens new window)   
      ←
      
        LayoutItem
       
        LegendItem
      
      →\n\n\n\n# Interface: LegendItem # Properties # borderRadius • Optional borderRadius: number | BorderRadius Border radius of the legend box Since 3.1.0 # Defined in types/index.d.ts:2284 (opens new window)  # datasetIndex • Optional datasetIndex: number Index of the associated dataset # Defined in types/index.d.ts:2289 (opens new window)  # fillStyle • Optional fillStyle: Color Fill style of the legend box # Defined in types/index.d.ts:2299 (opens new window)  # fontColor • Optional fontColor: Color Font color for the text
Defaults to LegendOptions.labels.color # Defined in types/index.d.ts:2305 (opens new window)  # hidden • Optional hidden: boolean If true, this item represents a hidden dataset. Label will be rendered with a strike-through effect # Defined in types/index.d.ts:2310 (opens new window)  # index • Optional index: number Index the associated label in the labels array # Defined in types/index.d.ts:2294 (opens new window)  # lineCap • Optional lineCap: CanvasLineCap For box border. See https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D/lineCap # Defined in types/index.d.ts:2316 (opens new window)  # lineDash • Optional lineDash: number[] For box border. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash # Defined in types/index.d.ts:2322 (opens new window)  # lineDashOffset • Optional lineDashOffset: number For box border. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset # Defined in types/index.d.ts:2328 (opens new window)  # lineJoin • Optional lineJoin: CanvasLineJoin For box border. See https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin # Defined in types/index.d.ts:2334 (opens new window)  # lineWidth • Optional lineWidth: number Width of box border # Defined in types/index.d.ts:2339 (opens new window)  # pointStyle • Optional pointStyle: PointStyle Point style of the legend box (only used if usePointStyle is true) # Defined in types/index.d.ts:2349 (opens new window)  # rotation • Optional rotation: number Rotation of the point in degrees (only used if usePointStyle is true) # Defined in types/index.d.ts:2354 (opens new window)  # strokeStyle • Optional strokeStyle: Color Stroke style of the legend box # Defined in types/index.d.ts:2344 (opens new window)  # text • text: string Label that will be displayed # Defined in types/index.d.ts:2278 (opens new window)  # textAlign • Optional textAlign: TextAlign Text alignment # Defined in types/index.d.ts:2359 (opens new window)   
      ←
      
        LegendElement
       
        LegendOptions
      
      →\n\n\n\n# Interface: LegendOptions<TType> # Type parameters Name Type TType extends ChartType # Properties # align • align: Align Alignment of the legend. Default 'center' # Defined in types/index.d.ts:2385 (opens new window)  # display • display: boolean Is the legend shown? Default true # Defined in types/index.d.ts:2375 (opens new window)  # fullSize • fullSize: boolean Marks that this box should take the full width/height of the canvas (moving other boxes). This is unlikely to need to be changed in day-to-day use. Default true # Defined in types/index.d.ts:2398 (opens new window)  # labels • labels: Object # Type declaration Name Type Description borderRadius number Override the borderRadius to use. Default undefined boxHeight number Height of the coloured box. Default fontSize boxWidth number Width of colored box. Default 40 color Color Color of label See Defaults.color font ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableChartContext> Font of label See Defaults.font padding number Padding between rows of colored boxes. Default 10 pointStyle PointStyle Override point style for the legend. Only applies if usePointStyle is true pointStyleWidth number If usePointStyle is true, the width of the point style used for the legend. textAlign? TextAlign Text alignment useBorderRadius boolean Label borderRadius will match corresponding borderRadius. Default false usePointStyle boolean Label style will match corresponding point style (size is based on the minimum value between boxWidth and font.size). Default false filter (item: LegendItem, data: ChartData<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>) => boolean Filters legend items out of the legend. Receives 2 parameters, a Legend Item and the chart data generateLabels (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>) => LegendItem[] Generates legend items for each thing in the legend. Default implementation returns the text + styling for the color box. See Legend Item for details. sort (a: LegendItem, b: LegendItem, data: ChartData<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>) => number Sorts the legend items # Defined in types/index.d.ts:2417 (opens new window)  # maxHeight • maxHeight: number Maximum height of the legend, in pixels # Defined in types/index.d.ts:2389 (opens new window)  # maxWidth • maxWidth: number Maximum width of the legend, in pixels # Defined in types/index.d.ts:2393 (opens new window)  # position • position: LayoutPosition Position of the legend. Default 'top' # Defined in types/index.d.ts:2380 (opens new window)  # reverse • reverse: boolean Legend will show datasets in reverse order. Default false # Defined in types/index.d.ts:2403 (opens new window)  # rtl • rtl: boolean true for rendering the legends from right to left. # Defined in types/index.d.ts:2493 (opens new window)  # textDirection • textDirection: string This will force the text direction 'rtl' or 'ltr' on the canvas for rendering the legend, regardless of the css specified on the canvas Default canvas's default # Defined in types/index.d.ts:2498 (opens new window)  # title • title: Object # Type declaration Name Type Description color Color Color of title See Defaults.color display boolean Is the legend title displayed. Default false font ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableChartContext> see Fonts padding? number | ChartArea - position "center" | "end" | "start" - text string The string title. # Defined in types/index.d.ts:2500 (opens new window) # Methods # onClick ▸ onClick(this, e, legendItem, legend): void A callback that is called when a click event is registered on a label item. # Parameters Name Type this LegendElement<TType> e ChartEvent legendItem LegendItem legend LegendElement<TType> # Returns void # Defined in types/index.d.ts:2407 (opens new window)  # onHover ▸ onHover(this, e, legendItem, legend): void A callback that is called when a 'mousemove' event is registered on top of a label item # Parameters Name Type this LegendElement<TType> e ChartEvent legendItem LegendItem legend LegendElement<TType> # Returns void # Defined in types/index.d.ts:2411 (opens new window)  # onLeave ▸ onLeave(this, e, legendItem, legend): void A callback that is called when a 'mousemove' event is registered outside of a previously hovered label item. # Parameters Name Type this LegendElement<TType> e ChartEvent legendItem LegendItem legend LegendElement<TType> # Returns void # Defined in types/index.d.ts:2415 (opens new window)   
      ←
      
        LegendItem
       
        LineControllerChartOptions
      
      →\n\n\n\n# Interface: LineControllerChartOptions # Properties # showLine • showLine: boolean If false, the lines between points are not drawn. Default true # Defined in types/index.d.ts:226 (opens new window)  # spanGaps • spanGaps: number | boolean If true, lines will be drawn between points with no or null data. If false, points with NaN data will create a break in the line. Can also be a number specifying the maximum gap length to span. The unit of the value depends on the scale used. Default false # Defined in types/index.d.ts:221 (opens new window)   
      ←
      
        LegendOptions
       
        LineControllerDatasetOptions
      
      →\n\n\n\n# Interface: LineControllerDatasetOptions # Hierarchy ControllerDatasetOptions ScriptableAndArrayOptions<PointPrefixedOptions, ScriptableContext<"line">> ScriptableAndArrayOptions<PointPrefixedHoverOptions, ScriptableContext<"line">> ScriptableOptions<Omit<LineOptions, keyof CommonElementOptions>, ScriptableContext<"line">> ScriptableAndArrayOptions<CommonElementOptions, ScriptableContext<"line">> ScriptableOptions<Omit<LineHoverOptions, keyof CommonHoverOptions>, ScriptableContext<"line">> ScriptableAndArrayOptions<CommonHoverOptions, ScriptableContext<"line">> AnimationOptions<"line"> ↳ LineControllerDatasetOptions # Properties # animation • animation: false | AnimationSpec<"line"> & { onComplete?: (this: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, event: AnimationEvent) => void ; onProgress?: (this: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, event: AnimationEvent) => void  } # Inherited from AnimationOptions.animation # Defined in types/index.d.ts:1767 (opens new window)  # animations • animations: AnimationsSpec<"line"> # Inherited from AnimationOptions.animations # Defined in types/index.d.ts:1777 (opens new window)  # backgroundColor • backgroundColor: ScriptableAndArray<Color, ScriptableContext<"line">> # Inherited from ScriptableAndArrayOptions.backgroundColor # Defined in types/index.d.ts:1827 (opens new window)  # borderCapStyle • borderCapStyle: Scriptable<CanvasLineCap, ScriptableContext<"line">> Line cap style. See MDN. Default 'butt' # Inherited from ScriptableOptions.borderCapStyle # Defined in types/index.d.ts:1907 (opens new window)  # borderColor • borderColor: ScriptableAndArray<Color, ScriptableContext<"line">> # Inherited from ScriptableAndArrayOptions.borderColor # Defined in types/index.d.ts:1826 (opens new window)  # borderDash • borderDash: Scriptable<number[], ScriptableContext<"line">> Line dash. See MDN. Default [] # Inherited from ScriptableOptions.borderDash # Defined in types/index.d.ts:1912 (opens new window)  # borderDashOffset • borderDashOffset: Scriptable<number, ScriptableContext<"line">> Line dash offset. See MDN. Default 0.0 # Inherited from ScriptableOptions.borderDashOffset # Defined in types/index.d.ts:1917 (opens new window)  # borderJoinStyle • borderJoinStyle: Scriptable<CanvasLineJoin, ScriptableContext<"line">> Line join style. See MDN. Default 'miter' # Inherited from ScriptableOptions.borderJoinStyle # Defined in types/index.d.ts:1922 (opens new window)  # borderWidth • borderWidth: ScriptableAndArray<number, ScriptableContext<"line">> # Inherited from ScriptableAndArrayOptions.borderWidth # Defined in types/index.d.ts:1825 (opens new window)  # capBezierPoints • capBezierPoints: Scriptable<boolean, ScriptableContext<"line">> true to keep Bézier control inside the chart, false for no restriction. Default true # Inherited from ScriptableOptions.capBezierPoints # Defined in types/index.d.ts:1927 (opens new window)  # clip • clip: number | false | ChartArea How to clip relative to chartArea. Positive value allows overflow, negative value clips that many pixels inside chartArea. 0 = clip at chartArea. Clipping can also be configured per side: clip: {left: 5, top: false, right: -2, bottom: 0} # Inherited from ControllerDatasetOptions.clip # Defined in types/index.d.ts:75 (opens new window)  # cubicInterpolationMode • cubicInterpolationMode: Scriptable<"default" | "monotone", ScriptableContext<"line">> Interpolation mode to apply. Default 'default' # Inherited from ScriptableOptions.cubicInterpolationMode # Defined in types/index.d.ts:1932 (opens new window)  # fill • fill: Scriptable<FillTarget | ComplexFillTarget, ScriptableContext<"line">> Both line and radar charts support a fill option on the dataset object which can be used to create area between two datasets or a dataset and a boundary, i.e. the scale origin, start or end # Inherited from ScriptableOptions.fill # Defined in types/index.d.ts:1946 (opens new window)  # hidden • hidden: boolean Configures the visibility state of the dataset. Set it to true, to hide the dataset from the chart. Default false # Inherited from ControllerDatasetOptions.hidden # Defined in types/index.d.ts:93 (opens new window)  # hoverBackgroundColor • hoverBackgroundColor: ScriptableAndArray<Color, ScriptableContext<"line">> # Inherited from ScriptableAndArrayOptions.hoverBackgroundColor # Defined in types/index.d.ts:1833 (opens new window)  # hoverBorderCapStyle • hoverBorderCapStyle: Scriptable<CanvasLineCap, ScriptableContext<"line">> # Inherited from ScriptableOptions.hoverBorderCapStyle # Defined in types/index.d.ts:1964 (opens new window)  # hoverBorderColor • hoverBorderColor: ScriptableAndArray<Color, ScriptableContext<"line">> # Inherited from ScriptableAndArrayOptions.hoverBorderColor # Defined in types/index.d.ts:1832 (opens new window)  # hoverBorderDash • hoverBorderDash: Scriptable<number[], ScriptableContext<"line">> # Inherited from ScriptableOptions.hoverBorderDash # Defined in types/index.d.ts:1965 (opens new window)  # hoverBorderDashOffset • hoverBorderDashOffset: Scriptable<number, ScriptableContext<"line">> # Inherited from ScriptableOptions.hoverBorderDashOffset # Defined in types/index.d.ts:1966 (opens new window)  # hoverBorderJoinStyle • hoverBorderJoinStyle: Scriptable<CanvasLineJoin, ScriptableContext<"line">> # Inherited from ScriptableOptions.hoverBorderJoinStyle # Defined in types/index.d.ts:1967 (opens new window)  # hoverBorderWidth • hoverBorderWidth: ScriptableAndArray<number, ScriptableContext<"line">> # Inherited from ScriptableAndArrayOptions.hoverBorderWidth # Defined in types/index.d.ts:1831 (opens new window)  # indexAxis • indexAxis: "x" | "y" The base axis of the chart. 'x' for vertical charts and 'y' for horizontal charts. Default 'x' # Inherited from ControllerDatasetOptions.indexAxis # Defined in types/index.d.ts:71 (opens new window)  # label • label: string The label for the dataset which appears in the legend and tooltips. # Inherited from ControllerDatasetOptions.label # Defined in types/index.d.ts:79 (opens new window)  # normalized • normalized: boolean Chart.js is fastest if you provide data with indices that are unique, sorted, and consistent across datasets and provide the normalized: true option to let Chart.js know that you have done so. # Inherited from ControllerDatasetOptions.normalized # Defined in types/index.d.ts:63 (opens new window)  # order • order: number The drawing order of dataset. Also affects order for stacking, tooltip and legend. # Inherited from ControllerDatasetOptions.order # Defined in types/index.d.ts:83 (opens new window)  # parsing • parsing: false | { [key: string]: string;  } How to parse the dataset. The parsing can be disabled by specifying parsing: false at chart options or dataset. If parsing is disabled, data must be sorted and in the formats the associated chart type and scales use internally. # Inherited from ControllerDatasetOptions.parsing # Defined in types/index.d.ts:54 (opens new window)  # pointBackgroundColor • pointBackgroundColor: ScriptableAndArray<Color, ScriptableContext<"line">> The fill color for points. # Inherited from ScriptableAndArrayOptions.pointBackgroundColor # Defined in types/index.d.ts:2043 (opens new window)  # pointBorderColor • pointBorderColor: ScriptableAndArray<Color, ScriptableContext<"line">> The border color for points. # Inherited from ScriptableAndArrayOptions.pointBorderColor # Defined in types/index.d.ts:2047 (opens new window)  # pointBorderWidth • pointBorderWidth: ScriptableAndArray<number, ScriptableContext<"line">> The width of the point border in pixels. # Inherited from ScriptableAndArrayOptions.pointBorderWidth # Defined in types/index.d.ts:2051 (opens new window)  # pointHitRadius • pointHitRadius: ScriptableAndArray<number, ScriptableContext<"line">> The pixel size of the non-displayed point that reacts to mouse events. # Inherited from ScriptableAndArrayOptions.pointHitRadius # Defined in types/index.d.ts:2055 (opens new window)  # pointHoverBackgroundColor • pointHoverBackgroundColor: ScriptableAndArray<Color, ScriptableContext<"line">> Point background color when hovered. # Inherited from ScriptableAndArrayOptions.pointHoverBackgroundColor # Defined in types/index.d.ts:2074 (opens new window)  # pointHoverBorderColor • pointHoverBorderColor: ScriptableAndArray<Color, ScriptableContext<"line">> Point border color when hovered. # Inherited from ScriptableAndArrayOptions.pointHoverBorderColor # Defined in types/index.d.ts:2078 (opens new window)  # pointHoverBorderWidth • pointHoverBorderWidth: ScriptableAndArray<number, ScriptableContext<"line">> Border width of point when hovered. # Inherited from ScriptableAndArrayOptions.pointHoverBorderWidth # Defined in types/index.d.ts:2082 (opens new window)  # pointHoverRadius • pointHoverRadius: ScriptableAndArray<number, ScriptableContext<"line">> The radius of the point when hovered. # Inherited from ScriptableAndArrayOptions.pointHoverRadius # Defined in types/index.d.ts:2086 (opens new window)  # pointRadius • pointRadius: ScriptableAndArray<number, ScriptableContext<"line">> The radius of the point shape. If set to 0, the point is not rendered. # Inherited from ScriptableAndArrayOptions.pointRadius # Defined in types/index.d.ts:2059 (opens new window)  # pointRotation • pointRotation: ScriptableAndArray<number, ScriptableContext<"line">> The rotation of the point in degrees. # Inherited from ScriptableAndArrayOptions.pointRotation # Defined in types/index.d.ts:2063 (opens new window)  # pointStyle • pointStyle: ScriptableAndArray<PointStyle, ScriptableContext<"line">> Style of the point. # Inherited from ScriptableAndArrayOptions.pointStyle # Defined in types/index.d.ts:2067 (opens new window)  # segment • segment: Scriptable<{ backgroundColor: Scriptable<Color, ScriptableLineSegmentContext> ; borderCapStyle: Scriptable<CanvasLineCap, ScriptableLineSegmentContext> ; borderColor: Scriptable<Color, ScriptableLineSegmentContext> ; borderDash: Scriptable<number[], ScriptableLineSegmentContext> ; borderDashOffset: Scriptable<number, ScriptableLineSegmentContext> ; borderJoinStyle: Scriptable<CanvasLineJoin, ScriptableLineSegmentContext> ; borderWidth: Scriptable<number, ScriptableLineSegmentContext>  }, ScriptableContext<"line">> # Inherited from ScriptableOptions.segment # Defined in types/index.d.ts:1952 (opens new window)  # showLine • showLine: boolean # Defined in types/index.d.ts:213 (opens new window)  # spanGaps • spanGaps: number | boolean If true, lines will be drawn between points with no or null data. If false, points with NaN data will create a break in the line. Can also be a number specifying the maximum gap length to span. The unit of the value depends on the scale used. Default false # Overrides ScriptableOptions.spanGaps # Defined in types/index.d.ts:211 (opens new window)  # stack • stack: string The ID of the group to which this dataset belongs to (when stacked, each group will be a separate stack). # Inherited from ControllerDatasetOptions.stack # Defined in types/index.d.ts:88 (opens new window)  # stepped • stepped: Scriptable<boolean | "middle" | "after" | "before", ScriptableContext<"line">> true to show the line as a stepped line (tension will be ignored). Default false # Inherited from ScriptableOptions.stepped # Defined in types/index.d.ts:1942 (opens new window)  # tension • tension: Scriptable<number, ScriptableContext<"line">> Bézier curve tension (0 for no Bézier curves). Default 0 # Inherited from ScriptableOptions.tension # Defined in types/index.d.ts:1937 (opens new window)  # transitions • transitions: TransitionsSpec<"line"> # Inherited from AnimationOptions.transitions # Defined in types/index.d.ts:1778 (opens new window)  # xAxisID • xAxisID: string The ID of the x axis to plot this dataset on. # Defined in types/index.d.ts:201 (opens new window)  # yAxisID • yAxisID: string The ID of the y axis to plot this dataset on. # Defined in types/index.d.ts:205 (opens new window)   
      ←
      
        LineControllerChartOptions
       
        LineElement
      
      →\n\n\n\n# Interface: LineElement<T, O> # Type parameters Name Type T extends LineProps = LineProps O extends LineOptions = LineOptions # Hierarchy default<T, O> VisualElement ↳ LineElement # Properties # $animations • $animations: Record<keyof T, Animation> # Inherited from Element.$animations # Defined in core/core.element.ts:15 (opens new window)  # active • active: boolean = false # Inherited from Element.active # Defined in core/core.element.ts:13 (opens new window)  # options • options: O # Inherited from Element.options # Defined in core/core.element.ts:14 (opens new window)  # points • points: Point[] # Defined in types/index.d.ts:1974 (opens new window)  # segments • Readonly segments: Segment[] # Defined in types/index.d.ts:1975 (opens new window)  # x • x: number # Inherited from Element.x # Defined in core/core.element.ts:11 (opens new window)  # y • y: number # Inherited from Element.y # Defined in core/core.element.ts:12 (opens new window) # Methods # draw ▸ draw(ctx, area?): void # Parameters Name Type ctx CanvasRenderingContext2D area? ChartArea # Returns void # Inherited from VisualElement.draw # Defined in types/index.d.ts:1816 (opens new window)  # first ▸ first(): false | Point # Returns false | Point # Defined in types/index.d.ts:1976 (opens new window)  # getCenterPoint ▸ getCenterPoint(useFinalPosition?): Point # Parameters Name Type useFinalPosition? boolean # Returns Point # Inherited from VisualElement.getCenterPoint # Defined in types/index.d.ts:1820 (opens new window)  # getProps ▸ getProps<P>(props, final?): Pick<T, P[number]> Gets the current or final value of each prop. Can return extra properties (whole object). # Type parameters Name Type P extends keyof T[] # Parameters Name Type Description props P properties to get final? boolean get the final value (animation target) # Returns Pick<T, P[number]> # Inherited from Element.getProps # Defined in core/core.element.ts:31 (opens new window) ▸ getProps<P>(props, final?): Partial<Record<P, unknown>> # Type parameters Name Type P extends string # Parameters Name Type props P[] final? boolean # Returns Partial<Record<P, unknown>> # Inherited from Element.getProps # Defined in core/core.element.ts:32 (opens new window)  # getRange ▸ Optional getRange(axis): number # Parameters Name Type axis "x" | "y" # Returns number # Inherited from VisualElement.getRange # Defined in types/index.d.ts:1821 (opens new window)  # hasValue ▸ hasValue(): boolean # Returns boolean # Inherited from Element.hasValue # Defined in core/core.element.ts:22 (opens new window)  # inRange ▸ inRange(mouseX, mouseY, useFinalPosition?): boolean # Parameters Name Type mouseX number mouseY number useFinalPosition? boolean # Returns boolean # Inherited from VisualElement.inRange # Defined in types/index.d.ts:1817 (opens new window)  # inXRange ▸ inXRange(mouseX, useFinalPosition?): boolean # Parameters Name Type mouseX number useFinalPosition? boolean # Returns boolean # Inherited from VisualElement.inXRange # Defined in types/index.d.ts:1818 (opens new window)  # inYRange ▸ inYRange(mouseY, useFinalPosition?): boolean # Parameters Name Type mouseY number useFinalPosition? boolean # Returns boolean # Inherited from VisualElement.inYRange # Defined in types/index.d.ts:1819 (opens new window)  # interpolate ▸ interpolate(point, property): Point | Point[] # Parameters Name Type point Point property "x" | "y" # Returns Point | Point[] # Defined in types/index.d.ts:1978 (opens new window)  # last ▸ last(): false | Point # Returns false | Point # Defined in types/index.d.ts:1977 (opens new window)  # path ▸ path(ctx): boolean # Parameters Name Type ctx CanvasRenderingContext2D # Returns boolean # Defined in types/index.d.ts:1980 (opens new window)  # pathSegment ▸ pathSegment(ctx, segment, params): boolean # Parameters Name Type ctx CanvasRenderingContext2D segment Segment params AnyObject # Returns boolean # Defined in types/index.d.ts:1979 (opens new window)  # tooltipPosition ▸ tooltipPosition(useFinalPosition): Point # Parameters Name Type useFinalPosition boolean # Returns Point # Inherited from Element.tooltipPosition # Defined in core/core.element.ts:17 (opens new window)  # updateControlPoints ▸ updateControlPoints(chartArea, indexAxis?): void # Parameters Name Type chartArea ChartArea indexAxis? "x" | "y" # Returns void # Defined in types/index.d.ts:1973 (opens new window)   
      ←
      
        LineControllerDatasetOptions
       
        LineHoverOptions
      
      →\n\n\n\n# Interface: LineHoverOptions # Hierarchy CommonHoverOptions ↳ LineHoverOptions # Properties # hoverBackgroundColor • hoverBackgroundColor: Color # Inherited from CommonHoverOptions.hoverBackgroundColor # Defined in types/index.d.ts:1833 (opens new window)  # hoverBorderCapStyle • hoverBorderCapStyle: CanvasLineCap # Defined in types/index.d.ts:1964 (opens new window)  # hoverBorderColor • hoverBorderColor: Color # Inherited from CommonHoverOptions.hoverBorderColor # Defined in types/index.d.ts:1832 (opens new window)  # hoverBorderDash • hoverBorderDash: number[] # Defined in types/index.d.ts:1965 (opens new window)  # hoverBorderDashOffset • hoverBorderDashOffset: number # Defined in types/index.d.ts:1966 (opens new window)  # hoverBorderJoinStyle • hoverBorderJoinStyle: CanvasLineJoin # Defined in types/index.d.ts:1967 (opens new window)  # hoverBorderWidth • hoverBorderWidth: number # Inherited from CommonHoverOptions.hoverBorderWidth # Defined in types/index.d.ts:1831 (opens new window)   
      ←
      
        LineElement
       
        LineOptions
      
      →\n\n\n\n# Interface: LineOptions # Hierarchy CommonElementOptions ↳ LineOptions # Properties # backgroundColor • backgroundColor: Color # Inherited from CommonElementOptions.backgroundColor # Defined in types/index.d.ts:1827 (opens new window)  # borderCapStyle • borderCapStyle: CanvasLineCap Line cap style. See MDN. Default 'butt' # Defined in types/index.d.ts:1907 (opens new window)  # borderColor • borderColor: Color # Inherited from CommonElementOptions.borderColor # Defined in types/index.d.ts:1826 (opens new window)  # borderDash • borderDash: number[] Line dash. See MDN. Default [] # Defined in types/index.d.ts:1912 (opens new window)  # borderDashOffset • borderDashOffset: number Line dash offset. See MDN. Default 0.0 # Defined in types/index.d.ts:1917 (opens new window)  # borderJoinStyle • borderJoinStyle: CanvasLineJoin Line join style. See MDN. Default 'miter' # Defined in types/index.d.ts:1922 (opens new window)  # borderWidth • borderWidth: number # Inherited from CommonElementOptions.borderWidth # Defined in types/index.d.ts:1825 (opens new window)  # capBezierPoints • capBezierPoints: boolean true to keep Bézier control inside the chart, false for no restriction. Default true # Defined in types/index.d.ts:1927 (opens new window)  # cubicInterpolationMode • cubicInterpolationMode: "default" | "monotone" Interpolation mode to apply. Default 'default' # Defined in types/index.d.ts:1932 (opens new window)  # fill • fill: FillTarget | ComplexFillTarget Both line and radar charts support a fill option on the dataset object which can be used to create area between two datasets or a dataset and a boundary, i.e. the scale origin, start or end # Defined in types/index.d.ts:1946 (opens new window)  # segment • segment: Object # Type declaration Name Type backgroundColor Scriptable<Color, ScriptableLineSegmentContext> borderCapStyle Scriptable<CanvasLineCap, ScriptableLineSegmentContext> borderColor Scriptable<Color, ScriptableLineSegmentContext> borderDash Scriptable<number[], ScriptableLineSegmentContext> borderDashOffset Scriptable<number, ScriptableLineSegmentContext> borderJoinStyle Scriptable<CanvasLineJoin, ScriptableLineSegmentContext> borderWidth Scriptable<number, ScriptableLineSegmentContext> # Defined in types/index.d.ts:1952 (opens new window)  # spanGaps • spanGaps: number | boolean If true, lines will be drawn between points with no or null data. If false, points with NaN data will create a break in the line. Can also be a number specifying the maximum gap length to span. The unit of the value depends on the scale used. # Defined in types/index.d.ts:1950 (opens new window)  # stepped • stepped: boolean | "middle" | "after" | "before" true to show the line as a stepped line (tension will be ignored). Default false # Defined in types/index.d.ts:1942 (opens new window)  # tension • tension: number Bézier curve tension (0 for no Bézier curves). Default 0 # Defined in types/index.d.ts:1937 (opens new window)   
      ←
      
        LineHoverOptions
       
        LineProps
      
      →\n\n\n\n# Interface: LineProps # Properties # points • points: Point[] # Defined in types/index.d.ts:1899 (opens new window)   
      ←
      
        LineOptions
       
        ParsingOptions
      
      →\n\n\n\n# Interface: ParsingOptions # Hierarchy ParsingOptions ↳ ControllerDatasetOptions ↳ CoreChartOptions # Properties # normalized • normalized: boolean Chart.js is fastest if you provide data with indices that are unique, sorted, and consistent across datasets and provide the normalized: true option to let Chart.js know that you have done so. # Defined in types/index.d.ts:63 (opens new window)  # parsing • parsing: false | { [key: string]: string;  } How to parse the dataset. The parsing can be disabled by specifying parsing: false at chart options or dataset. If parsing is disabled, data must be sorted and in the formats the associated chart type and scales use internally. # Defined in types/index.d.ts:54 (opens new window)   
      ←
      
        LineProps
       
        Plugin
      
      →\n\n\n\n# Interface: Plugin<TType, O> # Type parameters Name Type TType extends ChartType = ChartType O AnyObject # Hierarchy ExtendedPlugin<TType, O> ↳ Plugin ↳↳ Tooltip # Properties # defaults • Optional defaults: Partial<O> Default options used in the plugin # Defined in types/index.d.ts:1132 (opens new window)  # events • Optional events: keyof HTMLElementEventMap[] The events option defines the browser events that the plugin should listen. Default ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'] # Defined in types/index.d.ts:833 (opens new window)  # id • id: string # Defined in types/index.d.ts:827 (opens new window) # Methods # afterBuildTicks ▸ Optional afterBuildTicks(chart, args, options): void Desc Called after scale has build its ticks. This hook is called separately for each scale in the chart. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args Object The call arguments. args.scale Scale<CoreScaleOptions> The scale. options O The plugin options. # Returns void # Defined in types/index.d.ts:992 (opens new window)  # afterDataLimits ▸ Optional afterDataLimits(chart, args, options): void Desc Called after scale data limits are calculated. This hook is called separately for each scale in the chart. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args Object The call arguments. args.scale Scale<CoreScaleOptions> The scale. options O The plugin options. # Returns void # Defined in types/index.d.ts:976 (opens new window)  # afterDatasetDraw ▸ Optional afterDatasetDraw(chart, args, options): void Desc Called after the chart datasets at the given args.index have been drawn
(datasets are drawn in the reverse order). Note that this hook will not be called
if the datasets drawing has been previously cancelled. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args Object The call arguments. args.index number The dataset index. args.meta ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> The dataset metadata. options O The plugin options. # Returns void # Defined in types/index.d.ts:1074 (opens new window)  # afterDatasetUpdate ▸ Optional afterDatasetUpdate(chart, args, options): void Desc Called after the chart datasets at the given args.index has been updated. Note
that this hook will not be called if the datasets update has been previously cancelled. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args Object The call arguments. args.cancelable false - args.index number The dataset index. args.meta ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> The dataset metadata. args.mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" The update mode. options O The plugin options. # Returns void # Defined in types/index.d.ts:951 (opens new window)  # afterDatasetsDraw ▸ Optional afterDatasetsDraw(chart, args, options, cancelable): void Desc Called after the chart datasets have been drawn. Note that this hook
will not be called if the datasets drawing has been previously cancelled. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args EmptyObject The call arguments. options O The plugin options. cancelable false - # Returns void # Defined in types/index.d.ts:1051 (opens new window)  # afterDatasetsUpdate ▸ Optional afterDatasetsUpdate(chart, args, options): void Desc Called after the chart datasets have been updated. Note that this hook
will not be called if the datasets update has been previously cancelled. Since version 2.1.5 # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args Object The call arguments. args.cancelable true - args.mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" The update mode. options O The plugin options. # Returns void # Defined in types/index.d.ts:928 (opens new window)  # afterDestroy ▸ Optional afterDestroy(chart, args, options): void Called after the chart has been destroyed. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args EmptyObject The call arguments. options O The plugin options. # Returns void # Defined in types/index.d.ts:1119 (opens new window)  # afterDraw ▸ Optional afterDraw(chart, args, options): void Desc Called after the chart has been drawn. Note that this hook will not be called
if the drawing has been previously cancelled. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args EmptyObject The call arguments. options O The plugin options. # Returns void # Defined in types/index.d.ts:1034 (opens new window)  # afterEvent ▸ Optional afterEvent(chart, args, options): void Desc Called after the event has been consumed. Note that this hook
will not be called if the event has been previously discarded. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args Object The call arguments. args.cancelable false - args.changed? boolean Set to true if the plugin needs a render. Should only be changed to true, because this args object is passed through all plugins. args.event ChartEvent The event object. args.inChartArea boolean The event position is inside chartArea args.replay boolean True if this event is replayed from Chart.update options O The plugin options. # Returns void # Defined in types/index.d.ts:1097 (opens new window)  # afterInit ▸ Optional afterInit(chart, args, options): void Desc Called after chart has been initialized and before the first update. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args EmptyObject The call arguments. options O The plugin options. # Returns void # Defined in types/index.d.ts:872 (opens new window)  # afterLayout ▸ Optional afterLayout(chart, args, options): void Desc Called after the chart has been laid out. Note that this hook will not
be called if the layout update has been previously cancelled. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args EmptyObject The call arguments. options O The plugin options. # Returns void # Defined in types/index.d.ts:1000 (opens new window)  # afterRender ▸ Optional afterRender(chart, args, options): void Desc Called after the chart has been fully rendered (and animation completed). Note
that this hook will not be called if the rendering has been previously cancelled. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args EmptyObject The call arguments. options O The plugin options. # Returns void # Defined in types/index.d.ts:1017 (opens new window)  # afterTooltipDraw ▸ Optional afterTooltipDraw(chart, args, options): void Desc Called after drawing the tooltip. Note that this hook will not
be called if the tooltip drawing has been previously cancelled. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.tooltip TooltipModel<TType> The tooltip. options O The plugin options. # Returns void # Inherited from ExtendedPlugin.afterTooltipDraw # Defined in types/index.d.ts:2721 (opens new window)  # afterUpdate ▸ Optional afterUpdate(chart, args, options): void Desc Called after chart has been updated and before rendering. Note that this
hook will not be called if the chart update has been previously cancelled. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args Object The call arguments. args.mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" The update mode options O The plugin options. # Returns void # Defined in types/index.d.ts:891 (opens new window)  # beforeBuildTicks ▸ Optional beforeBuildTicks(chart, args, options): void Desc Called before scale builds its ticks. This hook is called separately for each scale in the chart. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args Object The call arguments. args.scale Scale<CoreScaleOptions> The scale. options O The plugin options. # Returns void # Defined in types/index.d.ts:984 (opens new window)  # beforeDataLimits ▸ Optional beforeDataLimits(chart, args, options): void Desc Called before scale data limits are calculated. This hook is called separately for each scale in the chart. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args Object The call arguments. args.scale Scale<CoreScaleOptions> The scale. options O The plugin options. # Returns void # Defined in types/index.d.ts:968 (opens new window)  # beforeDatasetDraw ▸ Optional beforeDatasetDraw(chart, args, options): boolean | void Desc Called before drawing the chart dataset at the given args.index (datasets
are drawn in the reverse order). If any plugin returns false, the datasets drawing
is cancelled until another render is triggered. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args Object The call arguments. args.index number The dataset index. args.meta ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> The dataset metadata. options O The plugin options. # Returns boolean | void false to cancel the chart datasets drawing. # Defined in types/index.d.ts:1063 (opens new window)  # beforeDatasetUpdate ▸ Optional beforeDatasetUpdate(chart, args, options): boolean | void Desc Called before updating the chart dataset at the given args.index. If any plugin
returns false, the datasets update is cancelled until another update is triggered. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args Object The call arguments. args.cancelable true - args.index number The dataset index. args.meta ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> The dataset metadata. args.mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" The update mode. options O The plugin options. # Returns boolean | void false to cancel the chart datasets drawing. # Defined in types/index.d.ts:940 (opens new window)  # beforeDatasetsDraw ▸ Optional beforeDatasetsDraw(chart, args, options): boolean | void Desc Called before drawing the chart datasets. If any plugin returns false,
the datasets drawing is cancelled until another render is triggered. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args Object The call arguments. args.cancelable true - options O The plugin options. # Returns boolean | void false to cancel the chart datasets drawing. # Defined in types/index.d.ts:1043 (opens new window)  # beforeDatasetsUpdate ▸ Optional beforeDatasetsUpdate(chart, args, options): boolean | void Desc Called before updating the chart datasets. If any plugin returns false,
the datasets update is cancelled until another update is triggered. Since version 2.1.5 # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args Object The call arguments. args.mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" The update mode. options O The plugin options. # Returns boolean | void false to cancel the datasets update. # Defined in types/index.d.ts:918 (opens new window)  # beforeDestroy ▸ Optional beforeDestroy(chart, args, options): void Called before the chart is being destroyed. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args EmptyObject The call arguments. options O The plugin options. # Returns void # Defined in types/index.d.ts:1112 (opens new window)  # beforeDraw ▸ Optional beforeDraw(chart, args, options): boolean | void Desc Called before drawing chart at every animation frame. If any plugin returns false,
the frame drawing is cancelled untilanother render is triggered. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args Object The call arguments. args.cancelable true - options O The plugin options. # Returns boolean | void false to cancel the chart drawing. # Defined in types/index.d.ts:1026 (opens new window)  # beforeElementsUpdate ▸ Optional beforeElementsUpdate(chart, args, options): void Desc Called during the update process, before any chart elements have been created.
This can be used for data decimation by changing the data array inside a dataset. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args EmptyObject The call arguments. options O The plugin options. # Returns void # Defined in types/index.d.ts:899 (opens new window)  # beforeEvent ▸ Optional beforeEvent(chart, args, options): boolean | void Desc Called before processing the specified event. If any plugin returns false,
the event will be discarded. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args Object The call arguments. args.cancelable true - args.event ChartEvent The event object. args.inChartArea boolean The event position is inside chartArea args.replay boolean True if this event is replayed from Chart.update options O The plugin options. # Returns boolean | void # Defined in types/index.d.ts:1085 (opens new window)  # beforeInit ▸ Optional beforeInit(chart, args, options): void Desc Called before initializing chart. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args EmptyObject The call arguments. options O The plugin options. # Returns void # Defined in types/index.d.ts:865 (opens new window)  # beforeLayout ▸ Optional beforeLayout(chart, args, options): boolean | void Desc Called before laying out chart. If any plugin returns false,
the layout update is cancelled until another update is triggered. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args Object The call arguments. args.cancelable true - options O The plugin options. # Returns boolean | void false to cancel the chart layout. # Defined in types/index.d.ts:960 (opens new window)  # beforeRender ▸ Optional beforeRender(chart, args, options): boolean | void Desc Called before rendering chart. If any plugin returns false,
the rendering is cancelled until another render is triggered. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args Object The call arguments. args.cancelable true - options O The plugin options. # Returns boolean | void false to cancel the chart rendering. # Defined in types/index.d.ts:1009 (opens new window)  # beforeTooltipDraw ▸ Optional beforeTooltipDraw(chart, args, options): boolean | void Desc Called before drawing the tooltip. If any plugin returns false,
the tooltip drawing is cancelled until another render is triggered. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.cancelable true - args.tooltip TooltipModel<TType> The tooltip. options O The plugin options. # Returns boolean | void false to cancel the chart tooltip drawing. # Inherited from ExtendedPlugin.beforeTooltipDraw # Defined in types/index.d.ts:2712 (opens new window)  # beforeUpdate ▸ Optional beforeUpdate(chart, args, options): boolean | void Desc Called before updating chart. If any plugin returns false, the update
is cancelled (and thus subsequent render(s)) until another update is triggered. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args Object The call arguments. args.cancelable true - args.mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" The update mode options O The plugin options. # Returns boolean | void false to cancel the chart update. # Defined in types/index.d.ts:882 (opens new window)  # install ▸ Optional install(chart, args, options): void Desc Called when plugin is installed for this chart instance. This hook is also invoked for disabled plugins (options === false). Since 3.0.0 # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args EmptyObject The call arguments. options O The plugin options. # Returns void # Defined in types/index.d.ts:842 (opens new window)  # reset ▸ Optional reset(chart, args, options): void Desc Called during chart reset Since version 3.0.0 # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args EmptyObject The call arguments. options O The plugin options. # Returns void # Defined in types/index.d.ts:907 (opens new window)  # resize ▸ Optional resize(chart, args, options): void Desc Called after the chart as been resized. # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args Object The call arguments. args.size Object The new canvas display size (eq. canvas.style width & height). args.size.height number - args.size.width number - options O The plugin options. # Returns void # Defined in types/index.d.ts:1105 (opens new window)  # start ▸ Optional start(chart, args, options): void Desc Called when a plugin is starting. This happens when chart is created or plugin is enabled. Since 3.0.0 # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args EmptyObject The call arguments. options O The plugin options. # Returns void # Defined in types/index.d.ts:850 (opens new window)  # stop ▸ Optional stop(chart, args, options): void Desc Called when a plugin stopping. This happens when chart is destroyed or plugin is disabled. Since 3.0.0 # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args EmptyObject The call arguments. options O The plugin options. # Returns void # Defined in types/index.d.ts:858 (opens new window)  # uninstall ▸ Optional uninstall(chart, args, options): void Called after chart is destroyed on all plugins that were installed for that chart. This hook is also invoked for disabled plugins (options === false). Since 3.0.0 # Parameters Name Type Description chart Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> The chart instance. args EmptyObject The call arguments. options O The plugin options. # Returns void # Defined in types/index.d.ts:1127 (opens new window)   
      ←
      
        ParsingOptions
       
        PluginChartOptions
      
      →\n\n\n\n# Interface: PluginChartOptions<TType> # Type parameters Name Type TType extends ChartType # Hierarchy PluginChartOptions ↳ Defaults # Properties # plugins • plugins: PluginOptionsByType<TType> # Defined in types/index.d.ts:2966 (opens new window)   
      ←
      
        Plugin
       
        PluginOptionsByType
      
      →\n\n\n\n# Interface: PluginOptionsByType<TType> # Type parameters Name Type TType extends ChartType # Properties # colors • colors: ColorsPluginOptions # Defined in types/index.d.ts:2957 (opens new window)  # decimation • decimation: DecimationOptions # Defined in types/index.d.ts:2958 (opens new window)  # filler • filler: FillerOptions # Defined in types/index.d.ts:2959 (opens new window)  # legend • legend: LegendOptions<TType> # Defined in types/index.d.ts:2960 (opens new window)  # subtitle • subtitle: TitleOptions # Defined in types/index.d.ts:2961 (opens new window)  # title • title: TitleOptions # Defined in types/index.d.ts:2962 (opens new window)  # tooltip • tooltip: TooltipOptions<TType> # Defined in types/index.d.ts:2963 (opens new window)   
      ←
      
        PluginChartOptions
       
        Point
      
      →\n\n\n\n# Interface: Point # Hierarchy Point ↳ BubbleDataPoint ↳ BarProps ↳ TooltipPosition ↳ CartesianParsedData ↳ ArcProps # Properties # x • x: number # Defined in types/geometric.d.ts:11 (opens new window)  # y • y: number # Defined in types/geometric.d.ts:12 (opens new window)   
      ←
      
        PluginOptionsByType
       
        PointHoverOptions
      
      →\n\n\n\n# Interface: PointHoverOptions # Hierarchy CommonHoverOptions ↳ PointHoverOptions # Properties # hoverBackgroundColor • hoverBackgroundColor: Color # Inherited from CommonHoverOptions.hoverBackgroundColor # Defined in types/index.d.ts:1833 (opens new window)  # hoverBorderColor • hoverBorderColor: Color # Inherited from CommonHoverOptions.hoverBorderColor # Defined in types/index.d.ts:1832 (opens new window)  # hoverBorderWidth • hoverBorderWidth: number # Inherited from CommonHoverOptions.hoverBorderWidth # Defined in types/index.d.ts:1831 (opens new window)  # hoverRadius • hoverRadius: number Point radius when hovered. Default 4 # Defined in types/index.d.ts:2036 (opens new window)   
      ←
      
        Point
       
        PointOptions
      
      →\n\n\n\n# Interface: PointOptions # Hierarchy CommonElementOptions ↳ PointOptions # Properties # backgroundColor • backgroundColor: Color # Inherited from CommonElementOptions.backgroundColor # Defined in types/index.d.ts:1827 (opens new window)  # borderColor • borderColor: Color # Inherited from CommonElementOptions.borderColor # Defined in types/index.d.ts:1826 (opens new window)  # borderWidth • borderWidth: number # Inherited from CommonElementOptions.borderWidth # Defined in types/index.d.ts:1825 (opens new window)  # drawActiveElementsOnTop • drawActiveElementsOnTop: boolean Draw the active elements over the other elements of the dataset, Default true # Defined in types/index.d.ts:2028 (opens new window)  # hitRadius • hitRadius: number Extra radius added to point radius for hit detection. Default 1 # Defined in types/index.d.ts:2013 (opens new window)  # pointStyle • pointStyle: PointStyle Point style Default 'circle; # Defined in types/index.d.ts:2018 (opens new window)  # radius • radius: number Point radius Default 3 # Defined in types/index.d.ts:2008 (opens new window)  # rotation • rotation: number Point rotation (in degrees). Default 0 # Defined in types/index.d.ts:2023 (opens new window)   
      ←
      
        PointHoverOptions
       
        PointPrefixedHoverOptions
      
      →\n\n\n\n# Interface: PointPrefixedHoverOptions # Properties # pointHoverBackgroundColor • pointHoverBackgroundColor: Color Point background color when hovered. # Defined in types/index.d.ts:2074 (opens new window)  # pointHoverBorderColor • pointHoverBorderColor: Color Point border color when hovered. # Defined in types/index.d.ts:2078 (opens new window)  # pointHoverBorderWidth • pointHoverBorderWidth: number Border width of point when hovered. # Defined in types/index.d.ts:2082 (opens new window)  # pointHoverRadius • pointHoverRadius: number The radius of the point when hovered. # Defined in types/index.d.ts:2086 (opens new window)   
      ←
      
        PointOptions
       
        PointPrefixedOptions
      
      →\n\n\n\n# Interface: PointPrefixedOptions # Properties # pointBackgroundColor • pointBackgroundColor: Color The fill color for points. # Defined in types/index.d.ts:2043 (opens new window)  # pointBorderColor • pointBorderColor: Color The border color for points. # Defined in types/index.d.ts:2047 (opens new window)  # pointBorderWidth • pointBorderWidth: number The width of the point border in pixels. # Defined in types/index.d.ts:2051 (opens new window)  # pointHitRadius • pointHitRadius: number The pixel size of the non-displayed point that reacts to mouse events. # Defined in types/index.d.ts:2055 (opens new window)  # pointRadius • pointRadius: number The radius of the point shape. If set to 0, the point is not rendered. # Defined in types/index.d.ts:2059 (opens new window)  # pointRotation • pointRotation: number The rotation of the point in degrees. # Defined in types/index.d.ts:2063 (opens new window)  # pointStyle • pointStyle: PointStyle Style of the point. # Defined in types/index.d.ts:2067 (opens new window)   
      ←
      
        PointPrefixedHoverOptions
       
        PolarAreaController
      
      →\n\n\n\n# Interface: PolarAreaController # Hierarchy DoughnutController ↳ PolarAreaController # Properties # _cachedMeta • Readonly _cachedMeta: ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> # Inherited from DoughnutController._cachedMeta # Defined in types/index.d.ts:602 (opens new window)  # chart • Readonly chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Inherited from DoughnutController.chart # Defined in types/index.d.ts:600 (opens new window)  # enableOptionSharing • enableOptionSharing: boolean # Inherited from DoughnutController.enableOptionSharing # Defined in types/index.d.ts:603 (opens new window)  # index • Readonly index: number # Inherited from DoughnutController.index # Defined in types/index.d.ts:601 (opens new window)  # innerRadius • Readonly innerRadius: number # Inherited from DoughnutController.innerRadius # Defined in types/index.d.ts:341 (opens new window)  # offsetX • Readonly offsetX: number # Inherited from DoughnutController.offsetX # Defined in types/index.d.ts:343 (opens new window)  # offsetY • Readonly offsetY: number # Inherited from DoughnutController.offsetY # Defined in types/index.d.ts:344 (opens new window)  # outerRadius • Readonly outerRadius: number # Inherited from DoughnutController.outerRadius # Defined in types/index.d.ts:342 (opens new window)  # supportsDecimation • supportsDecimation: boolean # Inherited from DoughnutController.supportsDecimation # Defined in types/index.d.ts:607 (opens new window) # Methods # addElements ▸ addElements(): void # Returns void # Inherited from DoughnutController.addElements # Defined in types/index.d.ts:623 (opens new window)  # applyStack ▸ Protected applyStack(scale, parsed): number # Parameters Name Type scale Scale<CoreScaleOptions> parsed unknown[] # Returns number # Inherited from DoughnutController.applyStack # Defined in types/index.d.ts:659 (opens new window)  # buildOrUpdateElements ▸ buildOrUpdateElements(resetNewElements?): void # Parameters Name Type resetNewElements? boolean # Returns void # Inherited from DoughnutController.buildOrUpdateElements # Defined in types/index.d.ts:624 (opens new window)  # calculateCircumference ▸ calculateCircumference(value): number # Parameters Name Type value number # Returns number # Inherited from DoughnutController.calculateCircumference # Defined in types/index.d.ts:347 (opens new window)  # calculateTotal ▸ calculateTotal(): number # Returns number # Inherited from DoughnutController.calculateTotal # Defined in types/index.d.ts:346 (opens new window)  # configure ▸ configure(): void # Returns void # Inherited from DoughnutController.configure # Defined in types/index.d.ts:621 (opens new window)  # countVisibleElements ▸ countVisibleElements(): number # Returns number # Defined in types/index.d.ts:393 (opens new window)  # draw ▸ draw(): void # Returns void # Inherited from DoughnutController.draw # Defined in types/index.d.ts:616 (opens new window)  # getAllParsedValues ▸ getAllParsedValues(scale): number[] # Parameters Name Type scale Scale<CoreScaleOptions> # Returns number[] # Inherited from DoughnutController.getAllParsedValues # Defined in types/index.d.ts:610 (opens new window)  # getDataset ▸ getDataset(): ChartDataset<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[]> # Returns ChartDataset<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[]> # Inherited from DoughnutController.getDataset # Defined in types/index.d.ts:618 (opens new window)  # getLabelAndValue ▸ Protected getLabelAndValue(index): Object # Parameters Name Type index number # Returns Object Name Type label string value string # Inherited from DoughnutController.getLabelAndValue # Defined in types/index.d.ts:611 (opens new window)  # getMaxOverflow ▸ Protected getMaxOverflow(): number | boolean # Returns number | boolean # Inherited from DoughnutController.getMaxOverflow # Defined in types/index.d.ts:615 (opens new window)  # getMeta ▸ getMeta(): ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> # Returns ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> # Inherited from DoughnutController.getMeta # Defined in types/index.d.ts:619 (opens new window)  # getMinMax ▸ Protected getMinMax(scale, canStack?): Object # Parameters Name Type scale Scale<CoreScaleOptions> canStack? boolean # Returns Object Name Type max number min number # Inherited from DoughnutController.getMinMax # Defined in types/index.d.ts:666 (opens new window)  # getParsed ▸ Protected getParsed(index): number | CartesianParsedData | BarParsedData | BubbleParsedData | RadialParsedData # Parameters Name Type index number # Returns number | CartesianParsedData | BarParsedData | BubbleParsedData | RadialParsedData # Inherited from DoughnutController.getParsed # Defined in types/index.d.ts:658 (opens new window)  # getScaleForId ▸ getScaleForId(scaleID): Scale<CoreScaleOptions> # Parameters Name Type scaleID string # Returns Scale<CoreScaleOptions> # Inherited from DoughnutController.getScaleForId # Defined in types/index.d.ts:620 (opens new window)  # getSharedOptions ▸ Protected getSharedOptions(options): AnyObject Utility for checking if the options are shared and should be animated separately. # Parameters Name Type options AnyObject # Returns AnyObject # Inherited from DoughnutController.getSharedOptions # Defined in types/index.d.ts:633 (opens new window)  # getStyle ▸ getStyle(index, active): AnyObject # Parameters Name Type index number active boolean # Returns AnyObject # Inherited from DoughnutController.getStyle # Defined in types/index.d.ts:626 (opens new window)  # includeOptions ▸ Protected includeOptions(mode, sharedOptions): boolean Utility for determining if options should be included in the updated properties # Parameters Name Type mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" sharedOptions AnyObject # Returns boolean # Inherited from DoughnutController.includeOptions # Defined in types/index.d.ts:638 (opens new window)  # initialize ▸ initialize(): void # Returns void # Inherited from DoughnutController.initialize # Defined in types/index.d.ts:622 (opens new window)  # linkScales ▸ linkScales(): void # Returns void # Inherited from DoughnutController.linkScales # Defined in types/index.d.ts:609 (opens new window)  # parse ▸ parse(start, count): void # Parameters Name Type start number count number # Returns void # Inherited from DoughnutController.parse # Defined in types/index.d.ts:654 (opens new window)  # parseArrayData ▸ Protected parseArrayData(meta, data, start, count): AnyObject[] # Parameters Name Type meta ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> data AnyObject[] start number count number # Returns AnyObject[] # Inherited from DoughnutController.parseArrayData # Defined in types/index.d.ts:656 (opens new window)  # parseObjectData ▸ Protected parseObjectData(meta, data, start, count): AnyObject[] # Parameters Name Type meta ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> data AnyObject[] start number count number # Returns AnyObject[] # Inherited from DoughnutController.parseObjectData # Defined in types/index.d.ts:657 (opens new window)  # parsePrimitiveData ▸ Protected parsePrimitiveData(meta, data, start, count): AnyObject[] # Parameters Name Type meta ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> data AnyObject[] start number count number # Returns AnyObject[] # Inherited from DoughnutController.parsePrimitiveData # Defined in types/index.d.ts:655 (opens new window)  # removeHoverStyle ▸ removeHoverStyle(element, datasetIndex, index): void # Parameters Name Type element default<AnyObject, AnyObject> datasetIndex number index number # Returns void # Inherited from DoughnutController.removeHoverStyle # Defined in types/index.d.ts:651 (opens new window)  # reset ▸ reset(): void # Returns void # Inherited from DoughnutController.reset # Defined in types/index.d.ts:617 (opens new window)  # resolveDataElementOptions ▸ Protected resolveDataElementOptions(index, mode): AnyObject # Parameters Name Type index number mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" # Returns AnyObject # Inherited from DoughnutController.resolveDataElementOptions # Defined in types/index.d.ts:628 (opens new window)  # resolveDatasetElementOptions ▸ Protected resolveDatasetElementOptions(mode): AnyObject # Parameters Name Type mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" # Returns AnyObject # Inherited from DoughnutController.resolveDatasetElementOptions # Defined in types/index.d.ts:627 (opens new window)  # setHoverStyle ▸ setHoverStyle(element, datasetIndex, index): void # Parameters Name Type element default<AnyObject, AnyObject> datasetIndex number index number # Returns void # Inherited from DoughnutController.setHoverStyle # Defined in types/index.d.ts:652 (opens new window)  # update ▸ update(mode): void # Parameters Name Type mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" # Returns void # Inherited from DoughnutController.update # Defined in types/index.d.ts:613 (opens new window)  # updateElement ▸ Protected updateElement(element, index, properties, mode): void Utility for updating an element with new properties, using animations when appropriate. # Parameters Name Type element default<AnyObject, AnyObject> index number properties AnyObject mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" # Returns void # Inherited from DoughnutController.updateElement # Defined in types/index.d.ts:644 (opens new window)  # updateElements ▸ updateElements(elements, start, count, mode): void # Parameters Name Type elements default<AnyObject, AnyObject>[] start number count number mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" # Returns void # Inherited from DoughnutController.updateElements # Defined in types/index.d.ts:612 (opens new window)  # updateIndex ▸ updateIndex(datasetIndex): void # Parameters Name Type datasetIndex number # Returns void # Inherited from DoughnutController.updateIndex # Defined in types/index.d.ts:614 (opens new window)  # updateRangeFromParsed ▸ Protected updateRangeFromParsed(range, scale, parsed, stack): void # Parameters Name Type range Object range.max number range.min number scale Scale<CoreScaleOptions> parsed unknown[] stack string | boolean # Returns void # Inherited from DoughnutController.updateRangeFromParsed # Defined in types/index.d.ts:660 (opens new window)  # updateSharedOptions ▸ Protected updateSharedOptions(sharedOptions, mode, newOptions): void Utility to animate the shared options, that are potentially affecting multiple elements. # Parameters Name Type sharedOptions AnyObject mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" newOptions AnyObject # Returns void # Inherited from DoughnutController.updateSharedOptions # Defined in types/index.d.ts:650 (opens new window)   
      ←
      
        PointPrefixedOptions
       
        PolarAreaControllerChartOptions
      
      →\n\n\n\n# Interface: PolarAreaControllerChartOptions # Properties # animation • animation: false | DoughnutAnimationOptions # Defined in types/index.d.ts:389 (opens new window)  # startAngle • startAngle: number Starting angle to draw arcs for the first item in a dataset. In degrees, 0 is at top. Default 0 # Defined in types/index.d.ts:387 (opens new window)   
      ←
      
        PolarAreaController
       
        PolarAreaControllerDatasetOptions
      
      →\n\n\n\n# Interface: PolarAreaControllerDatasetOptions # Hierarchy DoughnutControllerDatasetOptions ↳ PolarAreaControllerDatasetOptions # Properties # angle • angle: number Arc angle to cover. - for polar only Default circumference / (arc count) # Defined in types/index.d.ts:377 (opens new window)  # animation • animation: false | AnimationSpec<"doughnut"> & { onComplete?: (this: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, event: AnimationEvent) => void ; onProgress?: (this: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, event: AnimationEvent) => void  } # Inherited from DoughnutControllerDatasetOptions.animation # Defined in types/index.d.ts:1767 (opens new window)  # animations • animations: AnimationsSpec<"doughnut"> # Inherited from DoughnutControllerDatasetOptions.animations # Defined in types/index.d.ts:1777 (opens new window)  # backgroundColor • backgroundColor: ScriptableAndArray<Color, ScriptableContext<"doughnut">> # Inherited from DoughnutControllerDatasetOptions.backgroundColor # Defined in types/index.d.ts:1827 (opens new window)  # borderAlign • borderAlign: ScriptableAndArray<"center" | "inner", ScriptableContext<"doughnut">> Arc stroke alignment. # Inherited from DoughnutControllerDatasetOptions.borderAlign # Defined in types/index.d.ts:1853 (opens new window)  # borderColor • borderColor: ScriptableAndArray<Color, ScriptableContext<"doughnut">> # Inherited from DoughnutControllerDatasetOptions.borderColor # Defined in types/index.d.ts:1826 (opens new window)  # borderDash • borderDash: ScriptableAndArray<number[], ScriptableContext<"doughnut">> Line dash. See MDN. Default [] # Inherited from DoughnutControllerDatasetOptions.borderDash # Defined in types/index.d.ts:1858 (opens new window)  # borderDashOffset • borderDashOffset: ScriptableAndArray<number, ScriptableContext<"doughnut">> Line dash offset. See MDN. Default 0.0 # Inherited from DoughnutControllerDatasetOptions.borderDashOffset # Defined in types/index.d.ts:1863 (opens new window)  # borderJoinStyle • borderJoinStyle: ScriptableAndArray<CanvasLineJoin, ScriptableContext<"doughnut">> Line join style. See MDN. Default is 'round' when borderAlign is 'inner', else 'bevel'. # Inherited from DoughnutControllerDatasetOptions.borderJoinStyle # Defined in types/index.d.ts:1867 (opens new window)  # borderRadius • borderRadius: ScriptableAndArray<number | ArcBorderRadius, ScriptableContext<"doughnut">> Sets the border radius for arcs Default 0 # Inherited from DoughnutControllerDatasetOptions.borderRadius # Defined in types/index.d.ts:1873 (opens new window)  # borderWidth • borderWidth: ScriptableAndArray<number, ScriptableContext<"doughnut">> # Inherited from DoughnutControllerDatasetOptions.borderWidth # Defined in types/index.d.ts:1825 (opens new window)  # circular • circular: ScriptableAndArray<boolean, ScriptableContext<"doughnut">> If false, Arc will be flat. Default true # Inherited from DoughnutControllerDatasetOptions.circular # Defined in types/index.d.ts:1884 (opens new window)  # circumference • circumference: number Sweep to allow arcs to cover. Default 360 # Inherited from DoughnutControllerDatasetOptions.circumference # Defined in types/index.d.ts:257 (opens new window)  # clip • clip: number | false | ChartArea How to clip relative to chartArea. Positive value allows overflow, negative value clips that many pixels inside chartArea. 0 = clip at chartArea. Clipping can also be configured per side: clip: {left: 5, top: false, right: -2, bottom: 0} # Inherited from DoughnutControllerDatasetOptions.clip # Defined in types/index.d.ts:75 (opens new window)  # hidden • hidden: boolean Configures the visibility state of the dataset. Set it to true, to hide the dataset from the chart. Default false # Inherited from DoughnutControllerDatasetOptions.hidden # Defined in types/index.d.ts:93 (opens new window)  # hoverBackgroundColor • hoverBackgroundColor: ScriptableAndArray<Color, ScriptableContext<"doughnut">> # Inherited from DoughnutControllerDatasetOptions.hoverBackgroundColor # Defined in types/index.d.ts:1833 (opens new window)  # hoverBorderColor • hoverBorderColor: ScriptableAndArray<Color, ScriptableContext<"doughnut">> # Inherited from DoughnutControllerDatasetOptions.hoverBorderColor # Defined in types/index.d.ts:1832 (opens new window)  # hoverBorderDash • hoverBorderDash: ScriptableAndArray<number[], ScriptableContext<"doughnut">> # Inherited from DoughnutControllerDatasetOptions.hoverBorderDash # Defined in types/index.d.ts:1893 (opens new window)  # hoverBorderDashOffset • hoverBorderDashOffset: ScriptableAndArray<number, ScriptableContext<"doughnut">> # Inherited from DoughnutControllerDatasetOptions.hoverBorderDashOffset # Defined in types/index.d.ts:1894 (opens new window)  # hoverBorderWidth • hoverBorderWidth: ScriptableAndArray<number, ScriptableContext<"doughnut">> # Inherited from DoughnutControllerDatasetOptions.hoverBorderWidth # Defined in types/index.d.ts:1831 (opens new window)  # hoverOffset • hoverOffset: ScriptableAndArray<number, ScriptableContext<"doughnut">> # Inherited from DoughnutControllerDatasetOptions.hoverOffset # Defined in types/index.d.ts:1895 (opens new window)  # indexAxis • indexAxis: "x" | "y" The base axis of the chart. 'x' for vertical charts and 'y' for horizontal charts. Default 'x' # Inherited from DoughnutControllerDatasetOptions.indexAxis # Defined in types/index.d.ts:71 (opens new window)  # label • label: string The label for the dataset which appears in the legend and tooltips. # Inherited from DoughnutControllerDatasetOptions.label # Defined in types/index.d.ts:79 (opens new window)  # normalized • normalized: boolean Chart.js is fastest if you provide data with indices that are unique, sorted, and consistent across datasets and provide the normalized: true option to let Chart.js know that you have done so. # Inherited from DoughnutControllerDatasetOptions.normalized # Defined in types/index.d.ts:63 (opens new window)  # offset • offset: number | number[] Arc offset (in pixels). # Inherited from DoughnutControllerDatasetOptions.offset # Defined in types/index.d.ts:262 (opens new window)  # order • order: number The drawing order of dataset. Also affects order for stacking, tooltip and legend. # Inherited from DoughnutControllerDatasetOptions.order # Defined in types/index.d.ts:83 (opens new window)  # parsing • parsing: false | { [key: string]: string;  } How to parse the dataset. The parsing can be disabled by specifying parsing: false at chart options or dataset. If parsing is disabled, data must be sorted and in the formats the associated chart type and scales use internally. # Inherited from DoughnutControllerDatasetOptions.parsing # Defined in types/index.d.ts:54 (opens new window)  # rotation • rotation: number Starting angle to draw this dataset from. Default 0 # Inherited from DoughnutControllerDatasetOptions.rotation # Defined in types/index.d.ts:268 (opens new window)  # spacing • spacing: number Similar to the offset option, but applies to all arcs. This can be used to to add spaces
between arcs Default 0 # Inherited from DoughnutControllerDatasetOptions.spacing # Defined in types/index.d.ts:281 (opens new window)  # stack • stack: string The ID of the group to which this dataset belongs to (when stacked, each group will be a separate stack). # Inherited from DoughnutControllerDatasetOptions.stack # Defined in types/index.d.ts:88 (opens new window)  # transitions • transitions: TransitionsSpec<"doughnut"> # Inherited from DoughnutControllerDatasetOptions.transitions # Defined in types/index.d.ts:1778 (opens new window)  # weight • weight: number The relative thickness of the dataset. Providing a value for weight will cause the pie or doughnut dataset to be drawn with a thickness relative to the sum of all the dataset weight values. Default 1 # Inherited from DoughnutControllerDatasetOptions.weight # Defined in types/index.d.ts:274 (opens new window)   
      ←
      
        PolarAreaControllerChartOptions
       
        RadarControllerDatasetOptions
      
      →\n\n\n\n# Interface: RadarControllerDatasetOptions # Hierarchy ControllerDatasetOptions ScriptableAndArrayOptions<PointOptions & PointHoverOptions & PointPrefixedOptions & PointPrefixedHoverOptions, ScriptableContext<"radar">> ScriptableAndArrayOptions<LineOptions & LineHoverOptions, ScriptableContext<"radar">> AnimationOptions<"radar"> ↳ RadarControllerDatasetOptions # Properties # animation • animation: false | AnimationSpec<"radar"> & { onComplete?: (this: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, event: AnimationEvent) => void ; onProgress?: (this: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, event: AnimationEvent) => void  } # Inherited from AnimationOptions.animation # Defined in types/index.d.ts:1767 (opens new window)  # animations • animations: AnimationsSpec<"radar"> # Inherited from AnimationOptions.animations # Defined in types/index.d.ts:1777 (opens new window)  # backgroundColor • backgroundColor: ScriptableAndArray<Color, ScriptableContext<"radar">> # Inherited from ScriptableAndArrayOptions.backgroundColor # Defined in types/index.d.ts:1827 (opens new window)  # borderCapStyle • borderCapStyle: ScriptableAndArray<CanvasLineCap, ScriptableContext<"radar">> Line cap style. See MDN. Default 'butt' # Inherited from ScriptableAndArrayOptions.borderCapStyle # Defined in types/index.d.ts:1907 (opens new window)  # borderColor • borderColor: ScriptableAndArray<Color, ScriptableContext<"radar">> # Inherited from ScriptableAndArrayOptions.borderColor # Defined in types/index.d.ts:1826 (opens new window)  # borderDash • borderDash: ScriptableAndArray<number[], ScriptableContext<"radar">> Line dash. See MDN. Default [] # Inherited from ScriptableAndArrayOptions.borderDash # Defined in types/index.d.ts:1912 (opens new window)  # borderDashOffset • borderDashOffset: ScriptableAndArray<number, ScriptableContext<"radar">> Line dash offset. See MDN. Default 0.0 # Inherited from ScriptableAndArrayOptions.borderDashOffset # Defined in types/index.d.ts:1917 (opens new window)  # borderJoinStyle • borderJoinStyle: ScriptableAndArray<CanvasLineJoin, ScriptableContext<"radar">> Line join style. See MDN. Default 'miter' # Inherited from ScriptableAndArrayOptions.borderJoinStyle # Defined in types/index.d.ts:1922 (opens new window)  # borderWidth • borderWidth: ScriptableAndArray<number, ScriptableContext<"radar">> # Inherited from ScriptableAndArrayOptions.borderWidth # Defined in types/index.d.ts:1825 (opens new window)  # capBezierPoints • capBezierPoints: ScriptableAndArray<boolean, ScriptableContext<"radar">> true to keep Bézier control inside the chart, false for no restriction. Default true # Inherited from ScriptableAndArrayOptions.capBezierPoints # Defined in types/index.d.ts:1927 (opens new window)  # clip • clip: number | false | ChartArea How to clip relative to chartArea. Positive value allows overflow, negative value clips that many pixels inside chartArea. 0 = clip at chartArea. Clipping can also be configured per side: clip: {left: 5, top: false, right: -2, bottom: 0} # Inherited from ControllerDatasetOptions.clip # Defined in types/index.d.ts:75 (opens new window)  # cubicInterpolationMode • cubicInterpolationMode: ScriptableAndArray<"default" | "monotone", ScriptableContext<"radar">> Interpolation mode to apply. Default 'default' # Inherited from ScriptableAndArrayOptions.cubicInterpolationMode # Defined in types/index.d.ts:1932 (opens new window)  # drawActiveElementsOnTop • drawActiveElementsOnTop: ScriptableAndArray<boolean, ScriptableContext<"radar">> Draw the active elements over the other elements of the dataset, Default true # Inherited from ScriptableAndArrayOptions.drawActiveElementsOnTop # Defined in types/index.d.ts:2028 (opens new window)  # fill • fill: ScriptableAndArray<FillTarget | ComplexFillTarget, ScriptableContext<"radar">> Both line and radar charts support a fill option on the dataset object which can be used to create area between two datasets or a dataset and a boundary, i.e. the scale origin, start or end # Inherited from ScriptableAndArrayOptions.fill # Defined in types/index.d.ts:1946 (opens new window)  # hidden • hidden: boolean Configures the visibility state of the dataset. Set it to true, to hide the dataset from the chart. Default false # Inherited from ControllerDatasetOptions.hidden # Defined in types/index.d.ts:93 (opens new window)  # hitRadius • hitRadius: ScriptableAndArray<number, ScriptableContext<"radar">> Extra radius added to point radius for hit detection. Default 1 # Inherited from ScriptableAndArrayOptions.hitRadius # Defined in types/index.d.ts:2013 (opens new window)  # hoverBackgroundColor • hoverBackgroundColor: ScriptableAndArray<Color, ScriptableContext<"radar">> # Inherited from ScriptableAndArrayOptions.hoverBackgroundColor # Defined in types/index.d.ts:1833 (opens new window)  # hoverBorderCapStyle • hoverBorderCapStyle: ScriptableAndArray<CanvasLineCap, ScriptableContext<"radar">> # Inherited from ScriptableAndArrayOptions.hoverBorderCapStyle # Defined in types/index.d.ts:1964 (opens new window)  # hoverBorderColor • hoverBorderColor: ScriptableAndArray<Color, ScriptableContext<"radar">> # Inherited from ScriptableAndArrayOptions.hoverBorderColor # Defined in types/index.d.ts:1832 (opens new window)  # hoverBorderDash • hoverBorderDash: ScriptableAndArray<number[], ScriptableContext<"radar">> # Inherited from ScriptableAndArrayOptions.hoverBorderDash # Defined in types/index.d.ts:1965 (opens new window)  # hoverBorderDashOffset • hoverBorderDashOffset: ScriptableAndArray<number, ScriptableContext<"radar">> # Inherited from ScriptableAndArrayOptions.hoverBorderDashOffset # Defined in types/index.d.ts:1966 (opens new window)  # hoverBorderJoinStyle • hoverBorderJoinStyle: ScriptableAndArray<CanvasLineJoin, ScriptableContext<"radar">> # Inherited from ScriptableAndArrayOptions.hoverBorderJoinStyle # Defined in types/index.d.ts:1967 (opens new window)  # hoverBorderWidth • hoverBorderWidth: ScriptableAndArray<number, ScriptableContext<"radar">> # Inherited from ScriptableAndArrayOptions.hoverBorderWidth # Defined in types/index.d.ts:1831 (opens new window)  # hoverRadius • hoverRadius: ScriptableAndArray<number, ScriptableContext<"radar">> Point radius when hovered. Default 4 # Inherited from ScriptableAndArrayOptions.hoverRadius # Defined in types/index.d.ts:2036 (opens new window)  # indexAxis • indexAxis: "x" | "y" The base axis of the chart. 'x' for vertical charts and 'y' for horizontal charts. Default 'x' # Inherited from ControllerDatasetOptions.indexAxis # Defined in types/index.d.ts:71 (opens new window)  # label • label: string The label for the dataset which appears in the legend and tooltips. # Inherited from ControllerDatasetOptions.label # Defined in types/index.d.ts:79 (opens new window)  # normalized • normalized: boolean Chart.js is fastest if you provide data with indices that are unique, sorted, and consistent across datasets and provide the normalized: true option to let Chart.js know that you have done so. # Inherited from ControllerDatasetOptions.normalized # Defined in types/index.d.ts:63 (opens new window)  # order • order: number The drawing order of dataset. Also affects order for stacking, tooltip and legend. # Inherited from ControllerDatasetOptions.order # Defined in types/index.d.ts:83 (opens new window)  # parsing • parsing: false | { [key: string]: string;  } How to parse the dataset. The parsing can be disabled by specifying parsing: false at chart options or dataset. If parsing is disabled, data must be sorted and in the formats the associated chart type and scales use internally. # Inherited from ControllerDatasetOptions.parsing # Defined in types/index.d.ts:54 (opens new window)  # pointBackgroundColor • pointBackgroundColor: ScriptableAndArray<Color, ScriptableContext<"radar">> The fill color for points. # Inherited from ScriptableAndArrayOptions.pointBackgroundColor # Defined in types/index.d.ts:2043 (opens new window)  # pointBorderColor • pointBorderColor: ScriptableAndArray<Color, ScriptableContext<"radar">> The border color for points. # Inherited from ScriptableAndArrayOptions.pointBorderColor # Defined in types/index.d.ts:2047 (opens new window)  # pointBorderWidth • pointBorderWidth: ScriptableAndArray<number, ScriptableContext<"radar">> The width of the point border in pixels. # Inherited from ScriptableAndArrayOptions.pointBorderWidth # Defined in types/index.d.ts:2051 (opens new window)  # pointHitRadius • pointHitRadius: ScriptableAndArray<number, ScriptableContext<"radar">> The pixel size of the non-displayed point that reacts to mouse events. # Inherited from ScriptableAndArrayOptions.pointHitRadius # Defined in types/index.d.ts:2055 (opens new window)  # pointHoverBackgroundColor • pointHoverBackgroundColor: ScriptableAndArray<Color, ScriptableContext<"radar">> Point background color when hovered. # Inherited from ScriptableAndArrayOptions.pointHoverBackgroundColor # Defined in types/index.d.ts:2074 (opens new window)  # pointHoverBorderColor • pointHoverBorderColor: ScriptableAndArray<Color, ScriptableContext<"radar">> Point border color when hovered. # Inherited from ScriptableAndArrayOptions.pointHoverBorderColor # Defined in types/index.d.ts:2078 (opens new window)  # pointHoverBorderWidth • pointHoverBorderWidth: ScriptableAndArray<number, ScriptableContext<"radar">> Border width of point when hovered. # Inherited from ScriptableAndArrayOptions.pointHoverBorderWidth # Defined in types/index.d.ts:2082 (opens new window)  # pointHoverRadius • pointHoverRadius: ScriptableAndArray<number, ScriptableContext<"radar">> The radius of the point when hovered. # Inherited from ScriptableAndArrayOptions.pointHoverRadius # Defined in types/index.d.ts:2086 (opens new window)  # pointRadius • pointRadius: ScriptableAndArray<number, ScriptableContext<"radar">> The radius of the point shape. If set to 0, the point is not rendered. # Inherited from ScriptableAndArrayOptions.pointRadius # Defined in types/index.d.ts:2059 (opens new window)  # pointRotation • pointRotation: ScriptableAndArray<number, ScriptableContext<"radar">> The rotation of the point in degrees. # Inherited from ScriptableAndArrayOptions.pointRotation # Defined in types/index.d.ts:2063 (opens new window)  # pointStyle • pointStyle: ScriptableAndArray<PointStyle, ScriptableContext<"radar">> Point style Default 'circle; # Inherited from ScriptableAndArrayOptions.pointStyle # Defined in types/index.d.ts:2018 (opens new window) types/index.d.ts:2067 (opens new window)  # radius • radius: ScriptableAndArray<number, ScriptableContext<"radar">> Point radius Default 3 # Inherited from ScriptableAndArrayOptions.radius # Defined in types/index.d.ts:2008 (opens new window)  # rotation • rotation: ScriptableAndArray<number, ScriptableContext<"radar">> Point rotation (in degrees). Default 0 # Inherited from ScriptableAndArrayOptions.rotation # Defined in types/index.d.ts:2023 (opens new window)  # segment • segment: ScriptableAndArray<{ backgroundColor: Scriptable<Color, ScriptableLineSegmentContext> ; borderCapStyle: Scriptable<CanvasLineCap, ScriptableLineSegmentContext> ; borderColor: Scriptable<Color, ScriptableLineSegmentContext> ; borderDash: Scriptable<number[], ScriptableLineSegmentContext> ; borderDashOffset: Scriptable<number, ScriptableLineSegmentContext> ; borderJoinStyle: Scriptable<CanvasLineJoin, ScriptableLineSegmentContext> ; borderWidth: Scriptable<number, ScriptableLineSegmentContext>  }, ScriptableContext<"radar">> # Inherited from ScriptableAndArrayOptions.segment # Defined in types/index.d.ts:1952 (opens new window)  # showLine • showLine: boolean If false, the line is not drawn for this dataset. # Defined in types/index.d.ts:422 (opens new window)  # spanGaps • spanGaps: number | boolean If true, lines will be drawn between points with no or null data. If false, points with NaN data will create a break in the line. Can also be a number specifying the maximum gap length to span. The unit of the value depends on the scale used. # Overrides ScriptableAndArrayOptions.spanGaps # Defined in types/index.d.ts:417 (opens new window)  # stack • stack: string The ID of the group to which this dataset belongs to (when stacked, each group will be a separate stack). # Inherited from ControllerDatasetOptions.stack # Defined in types/index.d.ts:88 (opens new window)  # stepped • stepped: ScriptableAndArray<boolean | "middle" | "after" | "before", ScriptableContext<"radar">> true to show the line as a stepped line (tension will be ignored). Default false # Inherited from ScriptableAndArrayOptions.stepped # Defined in types/index.d.ts:1942 (opens new window)  # tension • tension: ScriptableAndArray<number, ScriptableContext<"radar">> Bézier curve tension (0 for no Bézier curves). Default 0 # Inherited from ScriptableAndArrayOptions.tension # Defined in types/index.d.ts:1937 (opens new window)  # transitions • transitions: TransitionsSpec<"radar"> # Inherited from AnimationOptions.transitions # Defined in types/index.d.ts:1778 (opens new window)  # xAxisID • xAxisID: string The ID of the x axis to plot this dataset on. # Defined in types/index.d.ts:408 (opens new window)  # yAxisID • yAxisID: string The ID of the y axis to plot this dataset on. # Defined in types/index.d.ts:412 (opens new window)   
      ←
      
        PolarAreaControllerDatasetOptions
       
        RadialLinearScale
      
      →\n\n\n\n# Interface: RadialLinearScale<O> # Type parameters Name Type O extends RadialLinearScaleOptions = RadialLinearScaleOptions # Hierarchy Scale<O> ↳ RadialLinearScale # Properties # $animations • $animations: Record<never, Animation> # Inherited from Scale.$animations # Defined in core/core.element.ts:15 (opens new window)  # active • active: boolean = false # Inherited from Scale.active # Defined in core/core.element.ts:13 (opens new window)  # axis • axis: string # Inherited from Scale.axis # Defined in types/index.d.ts:1286 (opens new window)  # bottom • bottom: number Bottom edge of the item. Set by layout system and cannot be used in update # Inherited from Scale.bottom # Defined in types/layout.d.ts:41 (opens new window)  # chart • Readonly chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Inherited from Scale.chart # Defined in types/index.d.ts:1276 (opens new window)  # ctx • Readonly ctx: CanvasRenderingContext2D # Inherited from Scale.ctx # Defined in types/index.d.ts:1275 (opens new window)  # fullSize • fullSize: boolean if true, and the item is horizontal, then push vertical boxes down # Inherited from Scale.fullSize # Defined in types/layout.d.ts:17 (opens new window)  # height • height: number Height of item. Must be valid after update() # Inherited from Scale.height # Defined in types/layout.d.ts:25 (opens new window)  # id • Readonly id: string # Inherited from Scale.id # Defined in types/index.d.ts:1273 (opens new window)  # labelRotation • labelRotation: number # Inherited from Scale.labelRotation # Defined in types/index.d.ts:1287 (opens new window)  # left • left: number Left edge of the item. Set by layout system and cannot be used in update # Inherited from Scale.left # Defined in types/layout.d.ts:29 (opens new window)  # max • max: number # Inherited from Scale.max # Defined in types/index.d.ts:1289 (opens new window)  # maxHeight • maxHeight: number # Inherited from Scale.maxHeight # Defined in types/index.d.ts:1279 (opens new window)  # maxWidth • maxWidth: number # Inherited from Scale.maxWidth # Defined in types/index.d.ts:1278 (opens new window)  # min • min: number # Inherited from Scale.min # Defined in types/index.d.ts:1288 (opens new window)  # options • options: O # Inherited from Scale.options # Defined in core/core.element.ts:14 (opens new window)  # paddingBottom • paddingBottom: number # Inherited from Scale.paddingBottom # Defined in types/index.d.ts:1282 (opens new window)  # paddingLeft • paddingLeft: number # Inherited from Scale.paddingLeft # Defined in types/index.d.ts:1283 (opens new window)  # paddingRight • paddingRight: number # Inherited from Scale.paddingRight # Defined in types/index.d.ts:1284 (opens new window)  # paddingTop • paddingTop: number # Inherited from Scale.paddingTop # Defined in types/index.d.ts:1281 (opens new window)  # position • position: LayoutPosition The position of the item in the chart layout. Possible values are # Inherited from Scale.position # Defined in types/layout.d.ts:9 (opens new window)  # right • right: number Right edge of the item. Set by layout system and cannot be used in update # Inherited from Scale.right # Defined in types/layout.d.ts:37 (opens new window)  # ticks • ticks: Tick[] # Inherited from Scale.ticks # Defined in types/index.d.ts:1290 (opens new window)  # top • top: number Top edge of the item. Set by layout system and cannot be used in update # Inherited from Scale.top # Defined in types/layout.d.ts:33 (opens new window)  # type • Readonly type: string # Inherited from Scale.type # Defined in types/index.d.ts:1274 (opens new window)  # weight • weight: number The weight used to sort the item. Higher weights are further away from the chart area # Inherited from Scale.weight # Defined in types/layout.d.ts:13 (opens new window)  # width • width: number Width of item. Must be valid after update() # Inherited from Scale.width # Defined in types/layout.d.ts:21 (opens new window)  # x • x: number # Inherited from Scale.x # Defined in core/core.element.ts:11 (opens new window)  # xCenter • xCenter: number # Defined in types/index.d.ts:3600 (opens new window)  # y • y: number # Inherited from Scale.y # Defined in core/core.element.ts:12 (opens new window)  # yCenter • yCenter: number # Defined in types/index.d.ts:3601 (opens new window) # Methods # afterBuildTicks ▸ afterBuildTicks(): void # Returns void # Inherited from Scale.afterBuildTicks # Defined in types/index.d.ts:1371 (opens new window)  # afterCalculateLabelRotation ▸ afterCalculateLabelRotation(): void # Returns void # Inherited from Scale.afterCalculateLabelRotation # Defined in types/index.d.ts:1377 (opens new window)  # afterDataLimits ▸ afterDataLimits(): void # Returns void # Inherited from Scale.afterDataLimits # Defined in types/index.d.ts:1368 (opens new window)  # afterFit ▸ afterFit(): void # Returns void # Inherited from Scale.afterFit # Defined in types/index.d.ts:1380 (opens new window)  # afterSetDimensions ▸ afterSetDimensions(): void # Returns void # Inherited from Scale.afterSetDimensions # Defined in types/index.d.ts:1365 (opens new window)  # afterTickToLabelConversion ▸ afterTickToLabelConversion(): void # Returns void # Inherited from Scale.afterTickToLabelConversion # Defined in types/index.d.ts:1374 (opens new window)  # afterUpdate ▸ afterUpdate(): void # Returns void # Inherited from Scale.afterUpdate # Defined in types/index.d.ts:1362 (opens new window)  # beforeBuildTicks ▸ beforeBuildTicks(): void # Returns void # Inherited from Scale.beforeBuildTicks # Defined in types/index.d.ts:1369 (opens new window)  # beforeCalculateLabelRotation ▸ beforeCalculateLabelRotation(): void # Returns void # Inherited from Scale.beforeCalculateLabelRotation # Defined in types/index.d.ts:1375 (opens new window)  # beforeDataLimits ▸ beforeDataLimits(): void # Returns void # Inherited from Scale.beforeDataLimits # Defined in types/index.d.ts:1366 (opens new window)  # beforeFit ▸ beforeFit(): void # Returns void # Inherited from Scale.beforeFit # Defined in types/index.d.ts:1378 (opens new window)  # beforeLayout ▸ Optional beforeLayout(): void Called before the layout process starts # Returns void # Inherited from Scale.beforeLayout # Defined in types/layout.d.ts:46 (opens new window)  # beforeSetDimensions ▸ beforeSetDimensions(): void # Returns void # Inherited from Scale.beforeSetDimensions # Defined in types/index.d.ts:1363 (opens new window)  # beforeTickToLabelConversion ▸ beforeTickToLabelConversion(): void # Returns void # Inherited from Scale.beforeTickToLabelConversion # Defined in types/index.d.ts:1372 (opens new window)  # beforeUpdate ▸ beforeUpdate(): void # Returns void # Inherited from Scale.beforeUpdate # Defined in types/index.d.ts:1360 (opens new window)  # buildTicks ▸ buildTicks(): Tick[] # Returns Tick[] # Inherited from Scale.buildTicks # Defined in types/index.d.ts:1370 (opens new window)  # calculateLabelRotation ▸ calculateLabelRotation(): void # Returns void # Inherited from Scale.calculateLabelRotation # Defined in types/index.d.ts:1376 (opens new window)  # configure ▸ configure(): void # Returns void # Inherited from Scale.configure # Defined in types/index.d.ts:1361 (opens new window)  # determineDataLimits ▸ determineDataLimits(): void # Returns void # Inherited from Scale.determineDataLimits # Defined in types/index.d.ts:1367 (opens new window)  # draw ▸ draw(chartArea): void Draws the element # Parameters Name Type chartArea ChartArea # Returns void # Inherited from Scale.draw # Defined in types/layout.d.ts:50 (opens new window)  # drawGrid ▸ drawGrid(chartArea): void # Parameters Name Type chartArea ChartArea # Returns void # Inherited from Scale.drawGrid # Defined in types/index.d.ts:1295 (opens new window)  # drawLabels ▸ drawLabels(chartArea): void # Parameters Name Type chartArea ChartArea # Returns void # Inherited from Scale.drawLabels # Defined in types/index.d.ts:1294 (opens new window)  # drawTitle ▸ drawTitle(chartArea): void # Parameters Name Type chartArea ChartArea # Returns void # Inherited from Scale.drawTitle # Defined in types/index.d.ts:1293 (opens new window)  # fit ▸ fit(): void # Returns void # Inherited from Scale.fit # Defined in types/index.d.ts:1379 (opens new window)  # generateTickLabels ▸ generateTickLabels(ticks): void # Parameters Name Type ticks Tick[] # Returns void # Inherited from Scale.generateTickLabels # Defined in types/index.d.ts:1373 (opens new window)  # getBasePixel ▸ getBasePixel(): number Returns the pixel for the minimum chart value
The coordinate (0, 0) is at the upper-left corner of the canvas # Returns number # Inherited from Scale.getBasePixel # Defined in types/index.d.ts:1351 (opens new window)  # getBasePosition ▸ getBasePosition(index): Object # Parameters Name Type index number # Returns Object Name Type angle number x number y number # Defined in types/index.d.ts:3609 (opens new window)  # getBaseValue ▸ getBaseValue(): number # Returns number # Inherited from Scale.getBaseValue # Defined in types/index.d.ts:1345 (opens new window)  # getDecimalForPixel ▸ getDecimalForPixel(pixel): number # Parameters Name Type pixel number # Returns number # Inherited from Scale.getDecimalForPixel # Defined in types/index.d.ts:1301 (opens new window)  # getDistanceFromCenterForValue ▸ getDistanceFromCenterForValue(value): number # Parameters Name Type value number # Returns number # Defined in types/index.d.ts:3604 (opens new window)  # getIndexAngle ▸ getIndexAngle(index): number # Parameters Name Type index number # Returns number # Defined in types/index.d.ts:3603 (opens new window)  # getLabelForValue ▸ getLabelForValue(value): string Used to get the label to display in the tooltip for the given value # Parameters Name Type value number # Returns string # Inherited from Scale.getLabelForValue # Defined in types/index.d.ts:1321 (opens new window)  # getLabelItems ▸ getLabelItems(chartArea?): LabelItem[] # Parameters Name Type chartArea? ChartArea # Returns LabelItem[] # Inherited from Scale.getLabelItems # Defined in types/index.d.ts:1359 (opens new window)  # getLabels ▸ getLabels(): string[] # Returns string[] # Inherited from Scale.getLabels # Defined in types/index.d.ts:1358 (opens new window)  # getLineWidthForValue ▸ getLineWidthForValue(value): number Returns the grid line width at given value # Parameters Name Type value number # Returns number # Inherited from Scale.getLineWidthForValue # Defined in types/index.d.ts:1326 (opens new window)  # getMatchingVisibleMetas ▸ getMatchingVisibleMetas(type?): ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>>[] # Parameters Name Type type? string # Returns ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>>[] # Inherited from Scale.getMatchingVisibleMetas # Defined in types/index.d.ts:1291 (opens new window)  # getMinMax ▸ getMinMax(canStack): Object # Parameters Name Type canStack boolean # Returns Object Name Type max number min number # Inherited from Scale.getMinMax # Defined in types/index.d.ts:1356 (opens new window)  # getPadding ▸ Optional getPadding(): ChartArea Returns an object with padding on the edges # Returns ChartArea # Inherited from Scale.getPadding # Defined in types/layout.d.ts:54 (opens new window)  # getPixelForDecimal ▸ getPixelForDecimal(decimal): number Utility for getting the pixel location of a percentage of scale
The coordinate (0, 0) is at the upper-left corner of the canvas # Parameters Name Type decimal number # Returns number # Inherited from Scale.getPixelForDecimal # Defined in types/index.d.ts:1308 (opens new window)  # getPixelForTick ▸ getPixelForTick(index): number Returns the location of the tick at the given index
The coordinate (0, 0) is at the upper-left corner of the canvas # Parameters Name Type index number # Returns number # Inherited from Scale.getPixelForTick # Defined in types/index.d.ts:1315 (opens new window)  # getPixelForValue ▸ getPixelForValue(value, index?): number Returns the location of the given data point. Value can either be an index or a numerical value
The coordinate (0, 0) is at the upper-left corner of the canvas # Parameters Name Type value number index? number # Returns number # Inherited from Scale.getPixelForValue # Defined in types/index.d.ts:1335 (opens new window)  # getPointLabelPosition ▸ getPointLabelPosition(index): ChartArea # Parameters Name Type index number # Returns ChartArea # Defined in types/index.d.ts:3608 (opens new window)  # getPointPosition ▸ getPointPosition(index, distanceFromCenter): Object # Parameters Name Type index number distanceFromCenter number # Returns Object Name Type angle number x number y number # Defined in types/index.d.ts:3606 (opens new window)  # getPointPositionForValue ▸ getPointPositionForValue(index, value): Object # Parameters Name Type index number value number # Returns Object Name Type angle number x number y number # Defined in types/index.d.ts:3607 (opens new window)  # getProps ▸ getProps<P>(props, final?): Pick<unknown, P[number]> Gets the current or final value of each prop. Can return extra properties (whole object). # Type parameters Name Type P extends never[] # Parameters Name Type Description props P properties to get final? boolean get the final value (animation target) # Returns Pick<unknown, P[number]> # Inherited from Scale.getProps # Defined in core/core.element.ts:31 (opens new window) ▸ getProps<P>(props, final?): Partial<Record<P, unknown>> # Type parameters Name Type P extends string # Parameters Name Type props P[] final? boolean # Returns Partial<Record<P, unknown>> # Inherited from Scale.getProps # Defined in core/core.element.ts:32 (opens new window)  # getTicks ▸ getTicks(): Tick[] # Returns Tick[] # Inherited from Scale.getTicks # Defined in types/index.d.ts:1357 (opens new window)  # getUserBounds ▸ getUserBounds(): Object # Returns Object Name Type max number maxDefined boolean min number minDefined boolean # Inherited from Scale.getUserBounds # Defined in types/index.d.ts:1355 (opens new window)  # getValueForDistanceFromCenter ▸ getValueForDistanceFromCenter(distance): number # Parameters Name Type distance number # Returns number # Defined in types/index.d.ts:3605 (opens new window)  # getValueForPixel ▸ getValueForPixel(pixel): number Used to get the data value from a given pixel. This is the inverse of getPixelForValue
The coordinate (0, 0) is at the upper-left corner of the canvas # Parameters Name Type pixel number # Returns number # Inherited from Scale.getValueForPixel # Defined in types/index.d.ts:1343 (opens new window)  # hasValue ▸ hasValue(): boolean # Returns boolean # Inherited from Scale.hasValue # Defined in core/core.element.ts:22 (opens new window)  # init ▸ init(options): void # Parameters Name Type options O # Returns void # Inherited from Scale.init # Defined in types/index.d.ts:1353 (opens new window)  # isFullSize ▸ isFullSize(): boolean # Returns boolean # Inherited from Scale.isFullSize # Defined in types/index.d.ts:1382 (opens new window)  # isHorizontal ▸ isHorizontal(): boolean returns true if the layout item is horizontal (ie. top or bottom) # Returns boolean # Inherited from Scale.isHorizontal # Defined in types/layout.d.ts:58 (opens new window)  # parse ▸ parse(raw, index?): unknown # Parameters Name Type raw unknown index? number # Returns unknown # Inherited from Scale.parse # Defined in types/index.d.ts:1354 (opens new window)  # setCenterPoint ▸ setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement): void # Parameters Name Type leftMovement number rightMovement number topMovement number bottomMovement number # Returns void # Defined in types/index.d.ts:3602 (opens new window)  # setDimensions ▸ setDimensions(): void # Returns void # Inherited from Scale.setDimensions # Defined in types/index.d.ts:1364 (opens new window)  # tooltipPosition ▸ tooltipPosition(useFinalPosition): Point # Parameters Name Type useFinalPosition boolean # Returns Point # Inherited from Scale.tooltipPosition # Defined in core/core.element.ts:17 (opens new window)  # update ▸ update(width, height, margins?): void Takes two parameters: width and height. # Parameters Name Type width number height number margins? ChartArea # Returns void # Inherited from Scale.update # Defined in types/layout.d.ts:64 (opens new window)   
      ←
      
        RadarControllerDatasetOptions
       
        RadialParsedData
      
      →\n\n\n\n# Interface: RadialParsedData # Properties # r • r: number # Defined in types/index.d.ts:3674 (opens new window)   
      ←
      
        RadialLinearScale
       
        RadialScaleTypeRegistry
      
      →\n\n\n\n# Interface: RadialScaleTypeRegistry # Hierarchy RadialScaleTypeRegistry ↳ ScaleTypeRegistry # Properties # radialLinear • radialLinear: Object # Type declaration Name Type options RadialLinearScaleOptions # Defined in types/index.d.ts:3635 (opens new window)   
      ←
      
        RadialParsedData
       
        Registry
      
      →\n\n\n\n# Interface: Registry Please use the module's default export which provides a singleton instance
Note: class is exported for typedoc # Properties # controllers • Readonly controllers: TypedRegistry<DatasetController<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>, number | CartesianParsedData | BarParsedData | BubbleParsedData | RadialParsedData>> # Defined in types/index.d.ts:1142 (opens new window)  # elements • Readonly elements: TypedRegistry<default<AnyObject, AnyObject>> # Defined in types/index.d.ts:1143 (opens new window)  # plugins • Readonly plugins: TypedRegistry<Plugin<keyof ChartTypeRegistry, AnyObject>> # Defined in types/index.d.ts:1144 (opens new window)  # scales • Readonly scales: TypedRegistry<Scale<CoreScaleOptions>> # Defined in types/index.d.ts:1145 (opens new window) # Methods # add ▸ add(...args): void # Parameters Name Type ...args ChartComponentLike[] # Returns void # Defined in types/index.d.ts:1147 (opens new window)  # addControllers ▸ addControllers(...args): void # Parameters Name Type ...args ChartComponentLike[] # Returns void # Defined in types/index.d.ts:1150 (opens new window)  # addElements ▸ addElements(...args): void # Parameters Name Type ...args ChartComponentLike[] # Returns void # Defined in types/index.d.ts:1151 (opens new window)  # addPlugins ▸ addPlugins(...args): void # Parameters Name Type ...args ChartComponentLike[] # Returns void # Defined in types/index.d.ts:1152 (opens new window)  # addScales ▸ addScales(...args): void # Parameters Name Type ...args ChartComponentLike[] # Returns void # Defined in types/index.d.ts:1153 (opens new window)  # getController ▸ getController(id): DatasetController<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>, number | CartesianParsedData | BarParsedData | BubbleParsedData | RadialParsedData> # Parameters Name Type id string # Returns DatasetController<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>, number | CartesianParsedData | BarParsedData | BubbleParsedData | RadialParsedData> # Defined in types/index.d.ts:1155 (opens new window)  # getElement ▸ getElement(id): default<AnyObject, AnyObject> # Parameters Name Type id string # Returns default<AnyObject, AnyObject> # Defined in types/index.d.ts:1156 (opens new window)  # getPlugin ▸ getPlugin(id): Plugin<keyof ChartTypeRegistry, AnyObject> # Parameters Name Type id string # Returns Plugin<keyof ChartTypeRegistry, AnyObject> # Defined in types/index.d.ts:1157 (opens new window)  # getScale ▸ getScale(id): Scale<CoreScaleOptions> # Parameters Name Type id string # Returns Scale<CoreScaleOptions> # Defined in types/index.d.ts:1158 (opens new window)  # remove ▸ remove(...args): void # Parameters Name Type ...args ChartComponentLike[] # Returns void # Defined in types/index.d.ts:1148 (opens new window)   
      ←
      
        RadialScaleTypeRegistry
       
        RenderTextOpts
      
      →\n\n\n\n# Interface: RenderTextOpts # Properties # backdrop • Optional backdrop: BackdropOptions Dimensions for drawing the label backdrop # Defined in types/index.d.ts:1469 (opens new window)  # color • Optional color: Color The fill color of the text. If unset, the existing
fillStyle property of the canvas is unchanged. # Defined in types/index.d.ts:1408 (opens new window)  # decorationWidth • Optional decorationWidth: number The width of the strikethrough / underline Default 2 # Defined in types/index.d.ts:1414 (opens new window)  # maxWidth • Optional maxWidth: number The max width of the text in pixels # Defined in types/index.d.ts:1419 (opens new window)  # rotation • Optional rotation: number A rotation to be applied to the canvas
This is applied after the translation is applied # Defined in types/index.d.ts:1425 (opens new window)  # strikethrough • Optional strikethrough: boolean Apply a strikethrough effect to the text # Defined in types/index.d.ts:1430 (opens new window)  # strokeColor • Optional strokeColor: Color The color of the text stroke. If unset, the existing
strokeStyle property of the context is unchanged # Defined in types/index.d.ts:1436 (opens new window)  # strokeWidth • Optional strokeWidth: number The text stroke width. If unset, the existing
lineWidth property of the context is unchanged # Defined in types/index.d.ts:1442 (opens new window)  # textAlign • Optional textAlign: CanvasTextAlign The text alignment to use. If unset, the existing
textAlign property of the context is unchanged # Defined in types/index.d.ts:1448 (opens new window)  # textBaseline • Optional textBaseline: CanvasTextBaseline The text baseline to use. If unset, the existing
textBaseline property of the context is unchanged # Defined in types/index.d.ts:1454 (opens new window)  # translation • Optional translation: [number, number] If specified, a translation to apply to the context # Defined in types/index.d.ts:1459 (opens new window)  # underline • Optional underline: boolean Underline the text # Defined in types/index.d.ts:1464 (opens new window)   
      ←
      
        Registry
       
        ScaleTypeRegistry
      
      →\n\n\n\n# Interface: ScaleTypeRegistry # Hierarchy CartesianScaleTypeRegistry RadialScaleTypeRegistry ↳ ScaleTypeRegistry # Properties # category • category: Object # Type declaration Name Type options CategoryScaleOptions # Inherited from CartesianScaleTypeRegistry.category # Defined in types/index.d.ts:3623 (opens new window)  # linear • linear: Object # Type declaration Name Type options LinearScaleOptions # Inherited from CartesianScaleTypeRegistry.linear # Defined in types/index.d.ts:3617 (opens new window)  # logarithmic • logarithmic: Object # Type declaration Name Type options LogarithmicScaleOptions # Inherited from CartesianScaleTypeRegistry.logarithmic # Defined in types/index.d.ts:3620 (opens new window)  # radialLinear • radialLinear: Object # Type declaration Name Type options RadialLinearScaleOptions # Inherited from RadialScaleTypeRegistry.radialLinear # Defined in types/index.d.ts:3635 (opens new window)  # time • time: Object # Type declaration Name Type options TimeScaleOptions # Inherited from CartesianScaleTypeRegistry.time # Defined in types/index.d.ts:3626 (opens new window)  # timeseries • timeseries: Object # Type declaration Name Type options TimeScaleOptions # Inherited from CartesianScaleTypeRegistry.timeseries # Defined in types/index.d.ts:3629 (opens new window)   
      ←
      
        RenderTextOpts
       
        ScriptableCartesianScaleContext
      
      →\n\n\n\n# Interface: ScriptableCartesianScaleContext # Properties # scale • scale: keyof CartesianScaleTypeRegistry # Defined in types/index.d.ts:3175 (opens new window)  # type • type: string # Defined in types/index.d.ts:3176 (opens new window)   
      ←
      
        ScaleTypeRegistry
       
        ScriptableChartContext
      
      →\n\n\n\n# Interface: ScriptableChartContext # Properties # chart • chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Defined in types/index.d.ts:3180 (opens new window)  # type • type: string # Defined in types/index.d.ts:3181 (opens new window)   
      ←
      
        ScriptableCartesianScaleContext
       
        ScriptableContext
      
      →\n\n\n\n# Interface: ScriptableContext<TType> # Type parameters Name Type TType extends ChartType # Properties # active • active: boolean # Defined in types/index.d.ts:24 (opens new window)  # chart • chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Defined in types/index.d.ts:25 (opens new window)  # dataIndex • dataIndex: number # Defined in types/index.d.ts:26 (opens new window)  # dataset • dataset: UnionToIntersection<ChartDataset<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>>> # Defined in types/index.d.ts:27 (opens new window)  # datasetIndex • datasetIndex: number # Defined in types/index.d.ts:28 (opens new window)  # mode • mode: string # Defined in types/index.d.ts:30 (opens new window)  # parsed • parsed: UnionToIntersection<ParsedDataType<TType>> # Defined in types/index.d.ts:31 (opens new window)  # raw • raw: unknown # Defined in types/index.d.ts:32 (opens new window)  # type • type: string # Defined in types/index.d.ts:29 (opens new window)   
      ←
      
        ScriptableChartContext
       
        ScriptableLineSegmentContext
      
      →\n\n\n\n# Interface: ScriptableLineSegmentContext # Properties # datasetIndex • datasetIndex: number # Defined in types/index.d.ts:41 (opens new window)  # p0 • p0: PointElement # Defined in types/index.d.ts:37 (opens new window)  # p0DataIndex • p0DataIndex: number # Defined in types/index.d.ts:39 (opens new window)  # p1 • p1: PointElement # Defined in types/index.d.ts:38 (opens new window)  # p1DataIndex • p1DataIndex: number # Defined in types/index.d.ts:40 (opens new window)  # type • type: "segment" # Defined in types/index.d.ts:36 (opens new window)   
      ←
      
        ScriptableContext
       
        ScriptableScaleContext
      
      →\n\n\n\n# Interface: ScriptableScaleContext # Properties # chart • chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Defined in types/index.d.ts:1389 (opens new window)  # index • index: number # Defined in types/index.d.ts:1391 (opens new window)  # scale • scale: Scale<CoreScaleOptions> # Defined in types/index.d.ts:1390 (opens new window)  # tick • tick: Tick # Defined in types/index.d.ts:1392 (opens new window)   
      ←
      
        ScriptableLineSegmentContext
       
        ScriptableScalePointLabelContext
      
      →\n\n\n\n# Interface: ScriptableScalePointLabelContext # Properties # chart • chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Defined in types/index.d.ts:1396 (opens new window)  # index • index: number # Defined in types/index.d.ts:1398 (opens new window)  # label • label: string # Defined in types/index.d.ts:1399 (opens new window)  # scale • scale: Scale<CoreScaleOptions> # Defined in types/index.d.ts:1397 (opens new window)  # type • type: string # Defined in types/index.d.ts:1400 (opens new window)   
      ←
      
        ScriptableScaleContext
       
        ScriptableTooltipContext
      
      →\n\n\n\n# Interface: ScriptableTooltipContext<TType> # Type parameters Name Type TType extends ChartType # Properties # chart • chart: Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> # Defined in types/index.d.ts:2725 (opens new window)  # tooltip • tooltip: TooltipModel<TType> # Defined in types/index.d.ts:2726 (opens new window)  # tooltipItems • tooltipItems: TooltipItem<TType>[] # Defined in types/index.d.ts:2727 (opens new window)   
      ←
      
        ScriptableScalePointLabelContext
       
        Segment
      
      →\n\n\n\n# Interface: Segment # Properties # end • end: number # Defined in types/index.d.ts:1838 (opens new window)  # loop • loop: boolean # Defined in types/index.d.ts:1839 (opens new window)  # start • start: number # Defined in types/index.d.ts:1837 (opens new window)   
      ←
      
        ScriptableTooltipContext
       
        Tick
      
      →\n\n\n\n# Interface: Tick # Properties # label • Optional label: string | string[] # Defined in types/index.d.ts:1165 (opens new window)  # major • Optional major: boolean # Defined in types/index.d.ts:1166 (opens new window)  # value • value: number # Defined in types/index.d.ts:1164 (opens new window)   
      ←
      
        Segment
       
        TickOptions
      
      →\n\n\n\n# Interface: TickOptions # Properties # backdropColor • backdropColor: Scriptable<Color, ScriptableScaleContext> Color of label backdrops. Default 'rgba(255, 255, 255, 0.75)' # Defined in types/index.d.ts:3047 (opens new window)  # backdropPadding • backdropPadding: number | ChartArea Padding of tick backdrop. Default 2 # Defined in types/index.d.ts:3052 (opens new window)  # callback • callback: (this: Scale<CoreScaleOptions>, tickValue: string | number, index: number, ticks: Tick[]) => string | number | string[] | number[] # Type declaration ▸ (this, tickValue, index, ticks): string | number | string[] | number[] Returns the string representation of the tick value as it should be displayed on the chart. See callback. # Parameters Name Type this Scale<CoreScaleOptions> tickValue string | number index number ticks Tick[] # Returns string | number | string[] | number[] # Defined in types/index.d.ts:3057 (opens new window)  # color • color: ScriptableAndArray<Color, ScriptableScaleContext> Color of tick See Defaults.color # Defined in types/index.d.ts:3067 (opens new window)  # display • display: boolean If true, show tick labels. Default true # Defined in types/index.d.ts:3062 (opens new window)  # font • font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScaleContext> see Fonts # Defined in types/index.d.ts:3071 (opens new window)  # major • major: Object # Type declaration Name Type Description enabled boolean If true, major ticks are generated. A major tick will affect autoskipping and major will be defined on ticks in the scriptable options context. Default false # Defined in types/index.d.ts:3097 (opens new window)  # padding • padding: number Sets the offset of the tick labels from the axis # Defined in types/index.d.ts:3075 (opens new window)  # showLabelBackdrop • showLabelBackdrop: Scriptable<boolean, ScriptableScaleContext> If true, draw a background behind the tick labels. Default false # Defined in types/index.d.ts:3080 (opens new window)  # textStrokeColor • textStrokeColor: Scriptable<Color, ScriptableScaleContext> The color of the stroke around the text. Default undefined # Defined in types/index.d.ts:3085 (opens new window)  # textStrokeWidth • textStrokeWidth: Scriptable<number, ScriptableScaleContext> Stroke width around the text. Default 0 # Defined in types/index.d.ts:3090 (opens new window)  # z • z: number z-index of tick layer. Useful when ticks are drawn on chart area. Values <= 0 are drawn under datasets, > 0 on top. Default 0 # Defined in types/index.d.ts:3095 (opens new window)   
      ←
      
        Tick
       
        TimeScale
      
      →\n\n\n\n# Interface: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Hierarchy Scale<O> ↳ TimeScale # Properties # $animations • $animations: Record<never, Animation> # Inherited from Scale.$animations # Defined in core/core.element.ts:15 (opens new window)  # active • active: boolean = false # Inherited from Scale.active # Defined in core/core.element.ts:13 (opens new window)  # axis • axis: string # Inherited from Scale.axis # Defined in types/index.d.ts:1286 (opens new window)  # bottom • bottom: number Bottom edge of the item. Set by layout system and cannot be used in update # Inherited from Scale.bottom # Defined in types/layout.d.ts:41 (opens new window)  # chart • Readonly chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Inherited from Scale.chart # Defined in types/index.d.ts:1276 (opens new window)  # ctx • Readonly ctx: CanvasRenderingContext2D # Inherited from Scale.ctx # Defined in types/index.d.ts:1275 (opens new window)  # fullSize • fullSize: boolean if true, and the item is horizontal, then push vertical boxes down # Inherited from Scale.fullSize # Defined in types/layout.d.ts:17 (opens new window)  # height • height: number Height of item. Must be valid after update() # Inherited from Scale.height # Defined in types/layout.d.ts:25 (opens new window)  # id • Readonly id: string # Inherited from Scale.id # Defined in types/index.d.ts:1273 (opens new window)  # labelRotation • labelRotation: number # Inherited from Scale.labelRotation # Defined in types/index.d.ts:1287 (opens new window)  # left • left: number Left edge of the item. Set by layout system and cannot be used in update # Inherited from Scale.left # Defined in types/layout.d.ts:29 (opens new window)  # max • max: number # Inherited from Scale.max # Defined in types/index.d.ts:1289 (opens new window)  # maxHeight • maxHeight: number # Inherited from Scale.maxHeight # Defined in types/index.d.ts:1279 (opens new window)  # maxWidth • maxWidth: number # Inherited from Scale.maxWidth # Defined in types/index.d.ts:1278 (opens new window)  # min • min: number # Inherited from Scale.min # Defined in types/index.d.ts:1288 (opens new window)  # options • options: O # Inherited from Scale.options # Defined in core/core.element.ts:14 (opens new window)  # paddingBottom • paddingBottom: number # Inherited from Scale.paddingBottom # Defined in types/index.d.ts:1282 (opens new window)  # paddingLeft • paddingLeft: number # Inherited from Scale.paddingLeft # Defined in types/index.d.ts:1283 (opens new window)  # paddingRight • paddingRight: number # Inherited from Scale.paddingRight # Defined in types/index.d.ts:1284 (opens new window)  # paddingTop • paddingTop: number # Inherited from Scale.paddingTop # Defined in types/index.d.ts:1281 (opens new window)  # position • position: LayoutPosition The position of the item in the chart layout. Possible values are # Inherited from Scale.position # Defined in types/layout.d.ts:9 (opens new window)  # right • right: number Right edge of the item. Set by layout system and cannot be used in update # Inherited from Scale.right # Defined in types/layout.d.ts:37 (opens new window)  # ticks • ticks: Tick[] # Inherited from Scale.ticks # Defined in types/index.d.ts:1290 (opens new window)  # top • top: number Top edge of the item. Set by layout system and cannot be used in update # Inherited from Scale.top # Defined in types/layout.d.ts:33 (opens new window)  # type • Readonly type: string # Inherited from Scale.type # Defined in types/index.d.ts:1274 (opens new window)  # weight • weight: number The weight used to sort the item. Higher weights are further away from the chart area # Inherited from Scale.weight # Defined in types/layout.d.ts:13 (opens new window)  # width • width: number Width of item. Must be valid after update() # Inherited from Scale.width # Defined in types/layout.d.ts:21 (opens new window)  # x • x: number # Inherited from Scale.x # Defined in core/core.element.ts:11 (opens new window)  # y • y: number # Inherited from Scale.y # Defined in core/core.element.ts:12 (opens new window) # Methods # afterBuildTicks ▸ afterBuildTicks(): void # Returns void # Inherited from Scale.afterBuildTicks # Defined in types/index.d.ts:1371 (opens new window)  # afterCalculateLabelRotation ▸ afterCalculateLabelRotation(): void # Returns void # Inherited from Scale.afterCalculateLabelRotation # Defined in types/index.d.ts:1377 (opens new window)  # afterDataLimits ▸ afterDataLimits(): void # Returns void # Inherited from Scale.afterDataLimits # Defined in types/index.d.ts:1368 (opens new window)  # afterFit ▸ afterFit(): void # Returns void # Inherited from Scale.afterFit # Defined in types/index.d.ts:1380 (opens new window)  # afterSetDimensions ▸ afterSetDimensions(): void # Returns void # Inherited from Scale.afterSetDimensions # Defined in types/index.d.ts:1365 (opens new window)  # afterTickToLabelConversion ▸ afterTickToLabelConversion(): void # Returns void # Inherited from Scale.afterTickToLabelConversion # Defined in types/index.d.ts:1374 (opens new window)  # afterUpdate ▸ afterUpdate(): void # Returns void # Inherited from Scale.afterUpdate # Defined in types/index.d.ts:1362 (opens new window)  # beforeBuildTicks ▸ beforeBuildTicks(): void # Returns void # Inherited from Scale.beforeBuildTicks # Defined in types/index.d.ts:1369 (opens new window)  # beforeCalculateLabelRotation ▸ beforeCalculateLabelRotation(): void # Returns void # Inherited from Scale.beforeCalculateLabelRotation # Defined in types/index.d.ts:1375 (opens new window)  # beforeDataLimits ▸ beforeDataLimits(): void # Returns void # Inherited from Scale.beforeDataLimits # Defined in types/index.d.ts:1366 (opens new window)  # beforeFit ▸ beforeFit(): void # Returns void # Inherited from Scale.beforeFit # Defined in types/index.d.ts:1378 (opens new window)  # beforeLayout ▸ Optional beforeLayout(): void Called before the layout process starts # Returns void # Inherited from Scale.beforeLayout # Defined in types/layout.d.ts:46 (opens new window)  # beforeSetDimensions ▸ beforeSetDimensions(): void # Returns void # Inherited from Scale.beforeSetDimensions # Defined in types/index.d.ts:1363 (opens new window)  # beforeTickToLabelConversion ▸ beforeTickToLabelConversion(): void # Returns void # Inherited from Scale.beforeTickToLabelConversion # Defined in types/index.d.ts:1372 (opens new window)  # beforeUpdate ▸ beforeUpdate(): void # Returns void # Inherited from Scale.beforeUpdate # Defined in types/index.d.ts:1360 (opens new window)  # buildTicks ▸ buildTicks(): Tick[] # Returns Tick[] # Inherited from Scale.buildTicks # Defined in types/index.d.ts:1370 (opens new window)  # calculateLabelRotation ▸ calculateLabelRotation(): void # Returns void # Inherited from Scale.calculateLabelRotation # Defined in types/index.d.ts:1376 (opens new window)  # configure ▸ configure(): void # Returns void # Inherited from Scale.configure # Defined in types/index.d.ts:1361 (opens new window)  # determineDataLimits ▸ determineDataLimits(): void # Returns void # Inherited from Scale.determineDataLimits # Defined in types/index.d.ts:1367 (opens new window)  # draw ▸ draw(chartArea): void Draws the element # Parameters Name Type chartArea ChartArea # Returns void # Inherited from Scale.draw # Defined in types/layout.d.ts:50 (opens new window)  # drawGrid ▸ drawGrid(chartArea): void # Parameters Name Type chartArea ChartArea # Returns void # Inherited from Scale.drawGrid # Defined in types/index.d.ts:1295 (opens new window)  # drawLabels ▸ drawLabels(chartArea): void # Parameters Name Type chartArea ChartArea # Returns void # Inherited from Scale.drawLabels # Defined in types/index.d.ts:1294 (opens new window)  # drawTitle ▸ drawTitle(chartArea): void # Parameters Name Type chartArea ChartArea # Returns void # Inherited from Scale.drawTitle # Defined in types/index.d.ts:1293 (opens new window)  # fit ▸ fit(): void # Returns void # Inherited from Scale.fit # Defined in types/index.d.ts:1379 (opens new window)  # format ▸ format(value, format?): string # Parameters Name Type value number format? string # Returns string # Defined in types/index.d.ts:3441 (opens new window)  # generateTickLabels ▸ generateTickLabels(ticks): void # Parameters Name Type ticks Tick[] # Returns void # Inherited from Scale.generateTickLabels # Defined in types/index.d.ts:1373 (opens new window)  # getBasePixel ▸ getBasePixel(): number Returns the pixel for the minimum chart value
The coordinate (0, 0) is at the upper-left corner of the canvas # Returns number # Inherited from Scale.getBasePixel # Defined in types/index.d.ts:1351 (opens new window)  # getBaseValue ▸ getBaseValue(): number # Returns number # Inherited from Scale.getBaseValue # Defined in types/index.d.ts:1345 (opens new window)  # getDataTimestamps ▸ getDataTimestamps(): number[] # Returns number[] # Defined in types/index.d.ts:3442 (opens new window)  # getDecimalForPixel ▸ getDecimalForPixel(pixel): number # Parameters Name Type pixel number # Returns number # Inherited from Scale.getDecimalForPixel # Defined in types/index.d.ts:1301 (opens new window)  # getLabelForValue ▸ getLabelForValue(value): string Used to get the label to display in the tooltip for the given value # Parameters Name Type value number # Returns string # Inherited from Scale.getLabelForValue # Defined in types/index.d.ts:1321 (opens new window)  # getLabelItems ▸ getLabelItems(chartArea?): LabelItem[] # Parameters Name Type chartArea? ChartArea # Returns LabelItem[] # Inherited from Scale.getLabelItems # Defined in types/index.d.ts:1359 (opens new window)  # getLabelTimestamps ▸ getLabelTimestamps(): string[] # Returns string[] # Defined in types/index.d.ts:3443 (opens new window)  # getLabels ▸ getLabels(): string[] # Returns string[] # Inherited from Scale.getLabels # Defined in types/index.d.ts:1358 (opens new window)  # getLineWidthForValue ▸ getLineWidthForValue(value): number Returns the grid line width at given value # Parameters Name Type value number # Returns number # Inherited from Scale.getLineWidthForValue # Defined in types/index.d.ts:1326 (opens new window)  # getMatchingVisibleMetas ▸ getMatchingVisibleMetas(type?): ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>>[] # Parameters Name Type type? string # Returns ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>>[] # Inherited from Scale.getMatchingVisibleMetas # Defined in types/index.d.ts:1291 (opens new window)  # getMinMax ▸ getMinMax(canStack): Object # Parameters Name Type canStack boolean # Returns Object Name Type max number min number # Inherited from Scale.getMinMax # Defined in types/index.d.ts:1356 (opens new window)  # getPadding ▸ Optional getPadding(): ChartArea Returns an object with padding on the edges # Returns ChartArea # Inherited from Scale.getPadding # Defined in types/layout.d.ts:54 (opens new window)  # getPixelForDecimal ▸ getPixelForDecimal(decimal): number Utility for getting the pixel location of a percentage of scale
The coordinate (0, 0) is at the upper-left corner of the canvas # Parameters Name Type decimal number # Returns number # Inherited from Scale.getPixelForDecimal # Defined in types/index.d.ts:1308 (opens new window)  # getPixelForTick ▸ getPixelForTick(index): number Returns the location of the tick at the given index
The coordinate (0, 0) is at the upper-left corner of the canvas # Parameters Name Type index number # Returns number # Inherited from Scale.getPixelForTick # Defined in types/index.d.ts:1315 (opens new window)  # getPixelForValue ▸ getPixelForValue(value, index?): number Returns the location of the given data point. Value can either be an index or a numerical value
The coordinate (0, 0) is at the upper-left corner of the canvas # Parameters Name Type value number index? number # Returns number # Inherited from Scale.getPixelForValue # Defined in types/index.d.ts:1335 (opens new window)  # getProps ▸ getProps<P>(props, final?): Pick<unknown, P[number]> Gets the current or final value of each prop. Can return extra properties (whole object). # Type parameters Name Type P extends never[] # Parameters Name Type Description props P properties to get final? boolean get the final value (animation target) # Returns Pick<unknown, P[number]> # Inherited from Scale.getProps # Defined in core/core.element.ts:31 (opens new window) ▸ getProps<P>(props, final?): Partial<Record<P, unknown>> # Type parameters Name Type P extends string # Parameters Name Type props P[] final? boolean # Returns Partial<Record<P, unknown>> # Inherited from Scale.getProps # Defined in core/core.element.ts:32 (opens new window)  # getTicks ▸ getTicks(): Tick[] # Returns Tick[] # Inherited from Scale.getTicks # Defined in types/index.d.ts:1357 (opens new window)  # getUserBounds ▸ getUserBounds(): Object # Returns Object Name Type max number maxDefined boolean min number minDefined boolean # Inherited from Scale.getUserBounds # Defined in types/index.d.ts:1355 (opens new window)  # getValueForPixel ▸ getValueForPixel(pixel): number Used to get the data value from a given pixel. This is the inverse of getPixelForValue
The coordinate (0, 0) is at the upper-left corner of the canvas # Parameters Name Type pixel number # Returns number # Inherited from Scale.getValueForPixel # Defined in types/index.d.ts:1343 (opens new window)  # hasValue ▸ hasValue(): boolean # Returns boolean # Inherited from Scale.hasValue # Defined in core/core.element.ts:22 (opens new window)  # init ▸ init(options): void # Parameters Name Type options O # Returns void # Inherited from Scale.init # Defined in types/index.d.ts:1353 (opens new window)  # isFullSize ▸ isFullSize(): boolean # Returns boolean # Inherited from Scale.isFullSize # Defined in types/index.d.ts:1382 (opens new window)  # isHorizontal ▸ isHorizontal(): boolean returns true if the layout item is horizontal (ie. top or bottom) # Returns boolean # Inherited from Scale.isHorizontal # Defined in types/layout.d.ts:58 (opens new window)  # normalize ▸ normalize(values): number[] # Parameters Name Type values number[] # Returns number[] # Defined in types/index.d.ts:3444 (opens new window)  # parse ▸ parse(raw, index?): unknown # Parameters Name Type raw unknown index? number # Returns unknown # Inherited from Scale.parse # Defined in types/index.d.ts:1354 (opens new window)  # setDimensions ▸ setDimensions(): void # Returns void # Inherited from Scale.setDimensions # Defined in types/index.d.ts:1364 (opens new window)  # tooltipPosition ▸ tooltipPosition(useFinalPosition): Point # Parameters Name Type useFinalPosition boolean # Returns Point # Inherited from Scale.tooltipPosition # Defined in core/core.element.ts:17 (opens new window)  # update ▸ update(width, height, margins?): void Takes two parameters: width and height. # Parameters Name Type width number height number margins? ChartArea # Returns void # Inherited from Scale.update # Defined in types/layout.d.ts:64 (opens new window)   
      ←
      
        TickOptions
       
        TitleOptions
      
      →\n\n\n\n# Interface: TitleOptions # Properties # align • align: Align Alignment of the title. Default 'center' # Defined in types/index.d.ts:2532 (opens new window)  # color • color: Color Color of text See Defaults.color # Defined in types/index.d.ts:2547 (opens new window)  # display • display: boolean Is the title shown? Default false # Defined in types/index.d.ts:2537 (opens new window)  # font • font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableChartContext> # Defined in types/index.d.ts:2548 (opens new window)  # fullSize • fullSize: boolean Marks that this box should take the full width/height of the canvas (moving other boxes). If set to false, places the box above/beside the
chart area Default true # Defined in types/index.d.ts:2555 (opens new window)  # padding • padding: number | { bottom: number ; top: number  } Adds padding above and below the title text if a single number is specified. It is also possible to change top and bottom padding separately. # Defined in types/index.d.ts:2559 (opens new window)  # position • position: "left" | "top" | "bottom" | "right" Position of title Default 'top' # Defined in types/index.d.ts:2542 (opens new window)  # text • text: string | string[] Title text to display. If specified as an array, text is rendered on multiple lines. # Defined in types/index.d.ts:2563 (opens new window)   
      ←
      
        TimeScale
       
        Tooltip
      
      →\n\n\n\n# Interface: Tooltip # Hierarchy Plugin ↳ Tooltip # Properties # defaults • Optional defaults: Partial<AnyObject> Default options used in the plugin # Inherited from Plugin.defaults # Defined in types/index.d.ts:1132 (opens new window)  # events • Optional events: keyof HTMLElementEventMap[] The events option defines the browser events that the plugin should listen. Default ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'] # Inherited from Plugin.events # Defined in types/index.d.ts:833 (opens new window)  # id • id: string # Inherited from Plugin.id # Defined in types/index.d.ts:827 (opens new window)  # positioners • Readonly positioners: TooltipPositionerMap # Defined in types/index.d.ts:2669 (opens new window) # Methods # afterBuildTicks ▸ Optional afterBuildTicks(chart, args, options): void Desc Called after scale has build its ticks. This hook is called separately for each scale in the chart. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.scale Scale<CoreScaleOptions> The scale. options AnyObject The plugin options. # Returns void # Inherited from Plugin.afterBuildTicks # Defined in types/index.d.ts:992 (opens new window)  # afterDataLimits ▸ Optional afterDataLimits(chart, args, options): void Desc Called after scale data limits are calculated. This hook is called separately for each scale in the chart. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.scale Scale<CoreScaleOptions> The scale. options AnyObject The plugin options. # Returns void # Inherited from Plugin.afterDataLimits # Defined in types/index.d.ts:976 (opens new window)  # afterDatasetDraw ▸ Optional afterDatasetDraw(chart, args, options): void Desc Called after the chart datasets at the given args.index have been drawn
(datasets are drawn in the reverse order). Note that this hook will not be called
if the datasets drawing has been previously cancelled. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.index number The dataset index. args.meta ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> The dataset metadata. options AnyObject The plugin options. # Returns void # Inherited from Plugin.afterDatasetDraw # Defined in types/index.d.ts:1074 (opens new window)  # afterDatasetUpdate ▸ Optional afterDatasetUpdate(chart, args, options): void Desc Called after the chart datasets at the given args.index has been updated. Note
that this hook will not be called if the datasets update has been previously cancelled. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.cancelable false - args.index number The dataset index. args.meta ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> The dataset metadata. args.mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" The update mode. options AnyObject The plugin options. # Returns void # Inherited from Plugin.afterDatasetUpdate # Defined in types/index.d.ts:951 (opens new window)  # afterDatasetsDraw ▸ Optional afterDatasetsDraw(chart, args, options, cancelable): void Desc Called after the chart datasets have been drawn. Note that this hook
will not be called if the datasets drawing has been previously cancelled. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args EmptyObject The call arguments. options AnyObject The plugin options. cancelable false - # Returns void # Inherited from Plugin.afterDatasetsDraw # Defined in types/index.d.ts:1051 (opens new window)  # afterDatasetsUpdate ▸ Optional afterDatasetsUpdate(chart, args, options): void Desc Called after the chart datasets have been updated. Note that this hook
will not be called if the datasets update has been previously cancelled. Since version 2.1.5 # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.cancelable true - args.mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" The update mode. options AnyObject The plugin options. # Returns void # Inherited from Plugin.afterDatasetsUpdate # Defined in types/index.d.ts:928 (opens new window)  # afterDestroy ▸ Optional afterDestroy(chart, args, options): void Called after the chart has been destroyed. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args EmptyObject The call arguments. options AnyObject The plugin options. # Returns void # Inherited from Plugin.afterDestroy # Defined in types/index.d.ts:1119 (opens new window)  # afterDraw ▸ Optional afterDraw(chart, args, options): void Desc Called after the chart has been drawn. Note that this hook will not be called
if the drawing has been previously cancelled. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args EmptyObject The call arguments. options AnyObject The plugin options. # Returns void # Inherited from Plugin.afterDraw # Defined in types/index.d.ts:1034 (opens new window)  # afterEvent ▸ Optional afterEvent(chart, args, options): void Desc Called after the event has been consumed. Note that this hook
will not be called if the event has been previously discarded. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.cancelable false - args.changed? boolean Set to true if the plugin needs a render. Should only be changed to true, because this args object is passed through all plugins. args.event ChartEvent The event object. args.inChartArea boolean The event position is inside chartArea args.replay boolean True if this event is replayed from Chart.update options AnyObject The plugin options. # Returns void # Inherited from Plugin.afterEvent # Defined in types/index.d.ts:1097 (opens new window)  # afterInit ▸ Optional afterInit(chart, args, options): void Desc Called after chart has been initialized and before the first update. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args EmptyObject The call arguments. options AnyObject The plugin options. # Returns void # Inherited from Plugin.afterInit # Defined in types/index.d.ts:872 (opens new window)  # afterLayout ▸ Optional afterLayout(chart, args, options): void Desc Called after the chart has been laid out. Note that this hook will not
be called if the layout update has been previously cancelled. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args EmptyObject The call arguments. options AnyObject The plugin options. # Returns void # Inherited from Plugin.afterLayout # Defined in types/index.d.ts:1000 (opens new window)  # afterRender ▸ Optional afterRender(chart, args, options): void Desc Called after the chart has been fully rendered (and animation completed). Note
that this hook will not be called if the rendering has been previously cancelled. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args EmptyObject The call arguments. options AnyObject The plugin options. # Returns void # Inherited from Plugin.afterRender # Defined in types/index.d.ts:1017 (opens new window)  # afterTooltipDraw ▸ Optional afterTooltipDraw(chart, args, options): void Desc Called after drawing the tooltip. Note that this hook will not
be called if the tooltip drawing has been previously cancelled. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.tooltip TooltipModel<keyof ChartTypeRegistry> The tooltip. options AnyObject The plugin options. # Returns void # Inherited from Plugin.afterTooltipDraw # Defined in types/index.d.ts:2721 (opens new window)  # afterUpdate ▸ Optional afterUpdate(chart, args, options): void Desc Called after chart has been updated and before rendering. Note that this
hook will not be called if the chart update has been previously cancelled. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" The update mode options AnyObject The plugin options. # Returns void # Inherited from Plugin.afterUpdate # Defined in types/index.d.ts:891 (opens new window)  # beforeBuildTicks ▸ Optional beforeBuildTicks(chart, args, options): void Desc Called before scale builds its ticks. This hook is called separately for each scale in the chart. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.scale Scale<CoreScaleOptions> The scale. options AnyObject The plugin options. # Returns void # Inherited from Plugin.beforeBuildTicks # Defined in types/index.d.ts:984 (opens new window)  # beforeDataLimits ▸ Optional beforeDataLimits(chart, args, options): void Desc Called before scale data limits are calculated. This hook is called separately for each scale in the chart. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.scale Scale<CoreScaleOptions> The scale. options AnyObject The plugin options. # Returns void # Inherited from Plugin.beforeDataLimits # Defined in types/index.d.ts:968 (opens new window)  # beforeDatasetDraw ▸ Optional beforeDatasetDraw(chart, args, options): boolean | void Desc Called before drawing the chart dataset at the given args.index (datasets
are drawn in the reverse order). If any plugin returns false, the datasets drawing
is cancelled until another render is triggered. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.index number The dataset index. args.meta ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> The dataset metadata. options AnyObject The plugin options. # Returns boolean | void false to cancel the chart datasets drawing. # Inherited from Plugin.beforeDatasetDraw # Defined in types/index.d.ts:1063 (opens new window)  # beforeDatasetUpdate ▸ Optional beforeDatasetUpdate(chart, args, options): boolean | void Desc Called before updating the chart dataset at the given args.index. If any plugin
returns false, the datasets update is cancelled until another update is triggered. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.cancelable true - args.index number The dataset index. args.meta ChartMeta<keyof ChartTypeRegistry, default<AnyObject, AnyObject>, default<AnyObject, AnyObject>> The dataset metadata. args.mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" The update mode. options AnyObject The plugin options. # Returns boolean | void false to cancel the chart datasets drawing. # Inherited from Plugin.beforeDatasetUpdate # Defined in types/index.d.ts:940 (opens new window)  # beforeDatasetsDraw ▸ Optional beforeDatasetsDraw(chart, args, options): boolean | void Desc Called before drawing the chart datasets. If any plugin returns false,
the datasets drawing is cancelled until another render is triggered. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.cancelable true - options AnyObject The plugin options. # Returns boolean | void false to cancel the chart datasets drawing. # Inherited from Plugin.beforeDatasetsDraw # Defined in types/index.d.ts:1043 (opens new window)  # beforeDatasetsUpdate ▸ Optional beforeDatasetsUpdate(chart, args, options): boolean | void Desc Called before updating the chart datasets. If any plugin returns false,
the datasets update is cancelled until another update is triggered. Since version 2.1.5 # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" The update mode. options AnyObject The plugin options. # Returns boolean | void false to cancel the datasets update. # Inherited from Plugin.beforeDatasetsUpdate # Defined in types/index.d.ts:918 (opens new window)  # beforeDestroy ▸ Optional beforeDestroy(chart, args, options): void Called before the chart is being destroyed. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args EmptyObject The call arguments. options AnyObject The plugin options. # Returns void # Inherited from Plugin.beforeDestroy # Defined in types/index.d.ts:1112 (opens new window)  # beforeDraw ▸ Optional beforeDraw(chart, args, options): boolean | void Desc Called before drawing chart at every animation frame. If any plugin returns false,
the frame drawing is cancelled untilanother render is triggered. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.cancelable true - options AnyObject The plugin options. # Returns boolean | void false to cancel the chart drawing. # Inherited from Plugin.beforeDraw # Defined in types/index.d.ts:1026 (opens new window)  # beforeElementsUpdate ▸ Optional beforeElementsUpdate(chart, args, options): void Desc Called during the update process, before any chart elements have been created.
This can be used for data decimation by changing the data array inside a dataset. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args EmptyObject The call arguments. options AnyObject The plugin options. # Returns void # Inherited from Plugin.beforeElementsUpdate # Defined in types/index.d.ts:899 (opens new window)  # beforeEvent ▸ Optional beforeEvent(chart, args, options): boolean | void Desc Called before processing the specified event. If any plugin returns false,
the event will be discarded. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.cancelable true - args.event ChartEvent The event object. args.inChartArea boolean The event position is inside chartArea args.replay boolean True if this event is replayed from Chart.update options AnyObject The plugin options. # Returns boolean | void # Inherited from Plugin.beforeEvent # Defined in types/index.d.ts:1085 (opens new window)  # beforeInit ▸ Optional beforeInit(chart, args, options): void Desc Called before initializing chart. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args EmptyObject The call arguments. options AnyObject The plugin options. # Returns void # Inherited from Plugin.beforeInit # Defined in types/index.d.ts:865 (opens new window)  # beforeLayout ▸ Optional beforeLayout(chart, args, options): boolean | void Desc Called before laying out chart. If any plugin returns false,
the layout update is cancelled until another update is triggered. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.cancelable true - options AnyObject The plugin options. # Returns boolean | void false to cancel the chart layout. # Inherited from Plugin.beforeLayout # Defined in types/index.d.ts:960 (opens new window)  # beforeRender ▸ Optional beforeRender(chart, args, options): boolean | void Desc Called before rendering chart. If any plugin returns false,
the rendering is cancelled until another render is triggered. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.cancelable true - options AnyObject The plugin options. # Returns boolean | void false to cancel the chart rendering. # Inherited from Plugin.beforeRender # Defined in types/index.d.ts:1009 (opens new window)  # beforeTooltipDraw ▸ Optional beforeTooltipDraw(chart, args, options): boolean | void Desc Called before drawing the tooltip. If any plugin returns false,
the tooltip drawing is cancelled until another render is triggered. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.cancelable true - args.tooltip TooltipModel<keyof ChartTypeRegistry> The tooltip. options AnyObject The plugin options. # Returns boolean | void false to cancel the chart tooltip drawing. # Inherited from Plugin.beforeTooltipDraw # Defined in types/index.d.ts:2712 (opens new window)  # beforeUpdate ▸ Optional beforeUpdate(chart, args, options): boolean | void Desc Called before updating chart. If any plugin returns false, the update
is cancelled (and thus subsequent render(s)) until another update is triggered. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.cancelable true - args.mode "none" | "hide" | "show" | "default" | "active" | "resize" | "reset" The update mode options AnyObject The plugin options. # Returns boolean | void false to cancel the chart update. # Inherited from Plugin.beforeUpdate # Defined in types/index.d.ts:882 (opens new window)  # install ▸ Optional install(chart, args, options): void Desc Called when plugin is installed for this chart instance. This hook is also invoked for disabled plugins (options === false). Since 3.0.0 # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args EmptyObject The call arguments. options AnyObject The plugin options. # Returns void # Inherited from Plugin.install # Defined in types/index.d.ts:842 (opens new window)  # reset ▸ Optional reset(chart, args, options): void Desc Called during chart reset Since version 3.0.0 # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args EmptyObject The call arguments. options AnyObject The plugin options. # Returns void # Inherited from Plugin.reset # Defined in types/index.d.ts:907 (opens new window)  # resize ▸ Optional resize(chart, args, options): void Desc Called after the chart as been resized. # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args Object The call arguments. args.size Object The new canvas display size (eq. canvas.style width & height). args.size.height number - args.size.width number - options AnyObject The plugin options. # Returns void # Inherited from Plugin.resize # Defined in types/index.d.ts:1105 (opens new window)  # start ▸ Optional start(chart, args, options): void Desc Called when a plugin is starting. This happens when chart is created or plugin is enabled. Since 3.0.0 # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args EmptyObject The call arguments. options AnyObject The plugin options. # Returns void # Inherited from Plugin.start # Defined in types/index.d.ts:850 (opens new window)  # stop ▸ Optional stop(chart, args, options): void Desc Called when a plugin stopping. This happens when chart is destroyed or plugin is disabled. Since 3.0.0 # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args EmptyObject The call arguments. options AnyObject The plugin options. # Returns void # Inherited from Plugin.stop # Defined in types/index.d.ts:858 (opens new window)  # uninstall ▸ Optional uninstall(chart, args, options): void Called after chart is destroyed on all plugins that were installed for that chart. This hook is also invoked for disabled plugins (options === false). Since 3.0.0 # Parameters Name Type Description chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart instance. args EmptyObject The call arguments. options AnyObject The plugin options. # Returns void # Inherited from Plugin.uninstall # Defined in types/index.d.ts:1127 (opens new window)   
      ←
      
        TitleOptions
       
        TooltipCallbacks
      
      →\n\n\n\n# Interface: TooltipCallbacks<TType, Model, Item> # Type parameters Name Type TType extends ChartType Model TooltipModel<TType> Item TooltipItem<TType> # Methods # afterBody ▸ afterBody(this, tooltipItems): string | void | string[] # Parameters Name Type this Model tooltipItems Item[] # Returns string | void | string[] # Defined in types/index.d.ts:2684 (opens new window)  # afterFooter ▸ afterFooter(this, tooltipItems): string | void | string[] # Parameters Name Type this Model tooltipItems Item[] # Returns string | void | string[] # Defined in types/index.d.ts:2696 (opens new window)  # afterLabel ▸ afterLabel(this, tooltipItem): string | void | string[] # Parameters Name Type this Model tooltipItem Item # Returns string | void | string[] # Defined in types/index.d.ts:2688 (opens new window)  # afterTitle ▸ afterTitle(this, tooltipItems): string | void | string[] # Parameters Name Type this Model tooltipItems Item[] # Returns string | void | string[] # Defined in types/index.d.ts:2681 (opens new window)  # beforeBody ▸ beforeBody(this, tooltipItems): string | void | string[] # Parameters Name Type this Model tooltipItems Item[] # Returns string | void | string[] # Defined in types/index.d.ts:2683 (opens new window)  # beforeFooter ▸ beforeFooter(this, tooltipItems): string | void | string[] # Parameters Name Type this Model tooltipItems Item[] # Returns string | void | string[] # Defined in types/index.d.ts:2694 (opens new window)  # beforeLabel ▸ beforeLabel(this, tooltipItem): string | void | string[] # Parameters Name Type this Model tooltipItem Item # Returns string | void | string[] # Defined in types/index.d.ts:2686 (opens new window)  # beforeTitle ▸ beforeTitle(this, tooltipItems): string | void | string[] # Parameters Name Type this Model tooltipItems Item[] # Returns string | void | string[] # Defined in types/index.d.ts:2679 (opens new window)  # footer ▸ footer(this, tooltipItems): string | void | string[] # Parameters Name Type this Model tooltipItems Item[] # Returns string | void | string[] # Defined in types/index.d.ts:2695 (opens new window)  # label ▸ label(this, tooltipItem): string | void | string[] # Parameters Name Type this Model tooltipItem Item # Returns string | void | string[] # Defined in types/index.d.ts:2687 (opens new window)  # labelColor ▸ labelColor(this, tooltipItem): void | TooltipLabelStyle # Parameters Name Type this Model tooltipItem Item # Returns void | TooltipLabelStyle # Defined in types/index.d.ts:2690 (opens new window)  # labelPointStyle ▸ labelPointStyle(this, tooltipItem): void | { pointStyle: PointStyle ; rotation: number  } # Parameters Name Type this Model tooltipItem Item # Returns void | { pointStyle: PointStyle ; rotation: number  } # Defined in types/index.d.ts:2692 (opens new window)  # labelTextColor ▸ labelTextColor(this, tooltipItem): void | Color # Parameters Name Type this Model tooltipItem Item # Returns void | Color # Defined in types/index.d.ts:2691 (opens new window)  # title ▸ title(this, tooltipItems): string | void | string[] # Parameters Name Type this Model tooltipItems Item[] # Returns string | void | string[] # Defined in types/index.d.ts:2680 (opens new window)   
      ←
      
        Tooltip
       
        TooltipItem
      
      →\n\n\n\n# Interface: TooltipItem<TType> # Type parameters Name Type TType extends ChartType # Properties # chart • chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> The chart the tooltip is being shown on # Defined in types/index.d.ts:2913 (opens new window)  # dataIndex • dataIndex: number Index of this data item in the dataset # Defined in types/index.d.ts:2948 (opens new window)  # dataset • dataset: UnionToIntersection<ChartDataset<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>>> The dataset the item comes from # Defined in types/index.d.ts:2938 (opens new window)  # datasetIndex • datasetIndex: number Index of the dataset the item comes from # Defined in types/index.d.ts:2943 (opens new window)  # element • element: default<AnyObject, AnyObject> The chart element (point, arc, bar, etc.) for this tooltip item # Defined in types/index.d.ts:2953 (opens new window)  # formattedValue • formattedValue: string Formatted value for the tooltip # Defined in types/index.d.ts:2933 (opens new window)  # label • label: string Label for the tooltip # Defined in types/index.d.ts:2918 (opens new window)  # parsed • parsed: UnionToIntersection<ParsedDataType<TType>> Parsed data values for the given dataIndex and datasetIndex # Defined in types/index.d.ts:2923 (opens new window)  # raw • raw: unknown Raw data values for the given dataIndex and datasetIndex # Defined in types/index.d.ts:2928 (opens new window)   
      ←
      
        TooltipCallbacks
       
        TooltipLabelStyle
      
      →\n\n\n\n# Interface: TooltipLabelStyle # Properties # backgroundColor • backgroundColor: Color # Defined in types/index.d.ts:2570 (opens new window)  # borderColor • borderColor: Color # Defined in types/index.d.ts:2569 (opens new window)  # borderDash • Optional borderDash: [number, number] Border dash Since 3.1.0 # Defined in types/index.d.ts:2582 (opens new window)  # borderDashOffset • Optional borderDashOffset: number Border dash offset Since 3.1.0 # Defined in types/index.d.ts:2588 (opens new window)  # borderRadius • Optional borderRadius: number | BorderRadius borderRadius Since 3.1.0 # Defined in types/index.d.ts:2594 (opens new window)  # borderWidth • Optional borderWidth: number Width of border line Since 3.1.0 # Defined in types/index.d.ts:2576 (opens new window)   
      ←
      
        TooltipItem
       
        TooltipModel
      
      →\n\n\n\n# Interface: TooltipModel<TType> # Type parameters Name Type TType extends ChartType # Hierarchy default<AnyObject, TooltipOptions<TType>> ↳ TooltipModel # Properties # $animations • $animations: Record<string, Animation> # Inherited from Element.$animations # Defined in core/core.element.ts:15 (opens new window)  # active • active: boolean = false # Inherited from Element.active # Defined in core/core.element.ts:13 (opens new window)  # afterBody • afterBody: string[] # Defined in types/index.d.ts:2625 (opens new window)  # beforeBody • beforeBody: string[] # Defined in types/index.d.ts:2623 (opens new window)  # body • body: { after: string[] ; before: string[] ; lines: string[]  }[] # Defined in types/index.d.ts:2621 (opens new window)  # caretX • caretX: number # Defined in types/index.d.ts:2612 (opens new window)  # caretY • caretY: number # Defined in types/index.d.ts:2613 (opens new window)  # chart • Readonly chart: Chart<TType, DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]>, unknown> # Defined in types/index.d.ts:2597 (opens new window)  # dataPoints • dataPoints: TooltipItem<TType>[] # Defined in types/index.d.ts:2600 (opens new window)  # footer • footer: string[] # Defined in types/index.d.ts:2633 (opens new window)  # height • height: number # Defined in types/index.d.ts:2610 (opens new window)  # labelColors • labelColors: TooltipLabelStyle[] # Defined in types/index.d.ts:2636 (opens new window)  # labelPointStyles • labelPointStyles: { pointStyle: PointStyle ; rotation: number  }[] # Defined in types/index.d.ts:2638 (opens new window)  # labelTextColors • labelTextColors: Color[] # Defined in types/index.d.ts:2637 (opens new window)  # opacity • opacity: number # Defined in types/index.d.ts:2641 (opens new window)  # options • options: TooltipOptions<TType> # Overrides Element.options # Defined in types/index.d.ts:2644 (opens new window)  # title • title: string[] # Defined in types/index.d.ts:2629 (opens new window)  # width • width: number # Defined in types/index.d.ts:2609 (opens new window)  # x • x: number # Overrides Element.x # Defined in types/index.d.ts:2607 (opens new window)  # xAlign • xAlign: TooltipXAlignment # Defined in types/index.d.ts:2603 (opens new window)  # y • y: number # Overrides Element.y # Defined in types/index.d.ts:2608 (opens new window)  # yAlign • yAlign: TooltipYAlignment # Defined in types/index.d.ts:2604 (opens new window) # Methods # getActiveElements ▸ getActiveElements(): ActiveElement[] # Returns ActiveElement[] # Defined in types/index.d.ts:2646 (opens new window)  # getProps ▸ getProps<P>(props, final?): Pick<AnyObject, P[number]> Gets the current or final value of each prop. Can return extra properties (whole object). # Type parameters Name Type P extends string[] # Parameters Name Type Description props P properties to get final? boolean get the final value (animation target) # Returns Pick<AnyObject, P[number]> # Inherited from Element.getProps # Defined in core/core.element.ts:31 (opens new window) ▸ getProps<P>(props, final?): Partial<Record<P, unknown>> # Type parameters Name Type P extends string # Parameters Name Type props P[] final? boolean # Returns Partial<Record<P, unknown>> # Inherited from Element.getProps # Defined in core/core.element.ts:32 (opens new window)  # hasValue ▸ hasValue(): boolean # Returns boolean # Inherited from Element.hasValue # Defined in core/core.element.ts:22 (opens new window)  # setActiveElements ▸ setActiveElements(active, eventPosition): void # Parameters Name Type active ActiveDataPoint[] eventPosition Point # Returns void # Defined in types/index.d.ts:2647 (opens new window)  # tooltipPosition ▸ tooltipPosition(useFinalPosition): Point # Parameters Name Type useFinalPosition boolean # Returns Point # Inherited from Element.tooltipPosition # Defined in core/core.element.ts:17 (opens new window)   
      ←
      
        TooltipLabelStyle
       
        TooltipOptions
      
      →\n\n\n\n# Interface: TooltipOptions<TType> # Type parameters Name Type TType extends ChartType = ChartType # Hierarchy CoreInteractionOptions ↳ TooltipOptions # Properties # animation • animation: false | AnimationSpec<TType> # Defined in types/index.d.ts:2904 (opens new window)  # animations • animations: false | AnimationsSpec<TType> # Defined in types/index.d.ts:2905 (opens new window)  # axis • axis: InteractionAxis Defines which directions are used in calculating distances. Defaults to 'x' for 'index' mode and 'xy' in dataset and 'nearest' modes. # Inherited from CoreInteractionOptions.axis # Defined in types/index.d.ts:1589 (opens new window)  # backgroundColor • backgroundColor: Scriptable<Color, ScriptableTooltipContext<TType>> Background color of the tooltip. Default 'rgba(0, 0, 0, 0.8)' # Defined in types/index.d.ts:2762 (opens new window)  # bodyAlign • bodyAlign: Scriptable<TextAlign, ScriptableTooltipContext<TType>> Horizontal alignment of the body text lines. Default 'left' # Defined in types/index.d.ts:2812 (opens new window)  # bodyColor • bodyColor: Scriptable<Color, ScriptableTooltipContext<TType>> Color of body Default '#fff' # Defined in types/index.d.ts:2802 (opens new window)  # bodyFont • bodyFont: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableTooltipContext<TType>> See Fonts. Default # Defined in types/index.d.ts:2807 (opens new window)  # bodySpacing • bodySpacing: Scriptable<number, ScriptableTooltipContext<TType>> Spacing to add to top and bottom of each tooltip item. Default 2 # Defined in types/index.d.ts:2797 (opens new window)  # borderColor • borderColor: Scriptable<Color, ScriptableTooltipContext<TType>> Color of the border. Default 'rgba(0, 0, 0, 0)' # Defined in types/index.d.ts:2887 (opens new window)  # borderWidth • borderWidth: Scriptable<number, ScriptableTooltipContext<TType>> Size of the border. Default 0 # Defined in types/index.d.ts:2892 (opens new window)  # boxHeight • boxHeight: Scriptable<number, ScriptableTooltipContext<TType>> Height of the color box if displayColors is true. Default bodyFont.size # Defined in types/index.d.ts:2877 (opens new window)  # boxPadding • boxPadding: number Padding between the color box and the text. Default 1 # Defined in types/index.d.ts:2767 (opens new window)  # boxWidth • boxWidth: Scriptable<number, ScriptableTooltipContext<TType>> Width of the color box if displayColors is true. Default bodyFont.size # Defined in types/index.d.ts:2872 (opens new window)  # callbacks • callbacks: TooltipCallbacks<TType, TooltipModel<TType>, TooltipItem<TType>> # Defined in types/index.d.ts:2906 (opens new window)  # caretPadding • caretPadding: Scriptable<number, ScriptableTooltipContext<TType>> Extra distance to move the end of the tooltip arrow away from the tooltip point. Default 2 # Defined in types/index.d.ts:2847 (opens new window)  # caretSize • caretSize: Scriptable<number, ScriptableTooltipContext<TType>> Size, in px, of the tooltip arrow. Default 5 # Defined in types/index.d.ts:2852 (opens new window)  # cornerRadius • cornerRadius: Scriptable<number | BorderRadius, ScriptableTooltipContext<TType>> Radius of tooltip corner curves. Default 6 # Defined in types/index.d.ts:2857 (opens new window)  # displayColors • displayColors: Scriptable<boolean, ScriptableTooltipContext<TType>> If true, color boxes are shown in the tooltip. Default true # Defined in types/index.d.ts:2867 (opens new window)  # enabled • enabled: Scriptable<boolean, ScriptableTooltipContext<TType>> Are on-canvas tooltips enabled? Default true # Defined in types/index.d.ts:2735 (opens new window)  # filter • filter: (e: TooltipItem<TType>, index: number, array: TooltipItem<TType>[], data: ChartData<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>) => boolean # Type declaration ▸ (e, index, array, data): boolean # Parameters Name Type e TooltipItem<TType> index number array TooltipItem<TType>[] data ChartData<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Returns boolean # Defined in types/index.d.ts:2756 (opens new window)  # footerAlign • footerAlign: Scriptable<TextAlign, ScriptableTooltipContext<TType>> Horizontal alignment of the footer text lines. Default 'left' # Defined in types/index.d.ts:2837 (opens new window)  # footerColor • footerColor: Scriptable<Color, ScriptableTooltipContext<TType>> Color of footer Default '#fff' # Defined in types/index.d.ts:2827 (opens new window)  # footerFont • footerFont: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableTooltipContext<TType>> See Fonts Default # Defined in types/index.d.ts:2832 (opens new window)  # footerMarginTop • footerMarginTop: Scriptable<number, ScriptableTooltipContext<TType>> Margin to add before drawing the footer. Default 6 # Defined in types/index.d.ts:2822 (opens new window)  # footerSpacing • footerSpacing: Scriptable<number, ScriptableTooltipContext<TType>> Spacing to add to top and bottom of each footer line. Default 2 # Defined in types/index.d.ts:2817 (opens new window)  # includeInvisible • includeInvisible: boolean if true, the invisible points that are outside of the chart area will also be included when evaluating interactions. Default false # Inherited from CoreInteractionOptions.includeInvisible # Defined in types/index.d.ts:1595 (opens new window)  # intersect • intersect: boolean if true, the hover mode only applies when the mouse position intersects an item on the chart. Default true # Inherited from CoreInteractionOptions.intersect # Defined in types/index.d.ts:1584 (opens new window)  # itemSort • itemSort: (a: TooltipItem<TType>, b: TooltipItem<TType>, data: ChartData<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>) => number # Type declaration ▸ (a, b, data): number Sort tooltip items. # Parameters Name Type a TooltipItem<TType> b TooltipItem<TType> data ChartData<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> # Returns number # Defined in types/index.d.ts:2754 (opens new window)  # mode • mode: keyof InteractionModeMap Sets which elements appear in the tooltip. See Interaction Modes for details. Default 'nearest' # Inherited from CoreInteractionOptions.mode # Defined in types/index.d.ts:1579 (opens new window)  # multiKeyBackground • multiKeyBackground: Scriptable<Color, ScriptableTooltipContext<TType>> Color to draw behind the colored boxes when multiple items are in the tooltip. Default '#fff' # Defined in types/index.d.ts:2862 (opens new window)  # padding • padding: Scriptable<Padding, ScriptableTooltipContext<TType>> Padding to add to the tooltip Default 6 # Defined in types/index.d.ts:2842 (opens new window)  # position • position: Scriptable<keyof TooltipPositionerMap, ScriptableTooltipContext<TType>> The mode for positioning the tooltip # Defined in types/index.d.ts:2743 (opens new window)  # rtl • rtl: Scriptable<boolean, ScriptableTooltipContext<TType>> true for rendering the legends from right to left. # Defined in types/index.d.ts:2896 (opens new window)  # textDirection • textDirection: Scriptable<string, ScriptableTooltipContext<TType>> This will force the text direction 'rtl' or 'ltr on the canvas for rendering the tooltips, regardless of the css specified on the canvas Default canvas's default # Defined in types/index.d.ts:2902 (opens new window)  # titleAlign • titleAlign: Scriptable<TextAlign, ScriptableTooltipContext<TType>> Horizontal alignment of the title text lines. Default 'left' # Defined in types/index.d.ts:2792 (opens new window)  # titleColor • titleColor: Scriptable<Color, ScriptableTooltipContext<TType>> Color of title Default '#fff' # Defined in types/index.d.ts:2772 (opens new window)  # titleFont • titleFont: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableTooltipContext<TType>> See Fonts Default # Defined in types/index.d.ts:2777 (opens new window)  # titleMarginBottom • titleMarginBottom: Scriptable<number, ScriptableTooltipContext<TType>> Margin to add on bottom of title section. Default 6 # Defined in types/index.d.ts:2787 (opens new window)  # titleSpacing • titleSpacing: Scriptable<number, ScriptableTooltipContext<TType>> Spacing to add to top and bottom of each title line. Default 2 # Defined in types/index.d.ts:2782 (opens new window)  # usePointStyle • usePointStyle: Scriptable<boolean, ScriptableTooltipContext<TType>> Use the corresponding point style (from dataset options) instead of color boxes, ex: star, triangle etc. (size is based on the minimum value between boxWidth and boxHeight) Default false # Defined in types/index.d.ts:2882 (opens new window)  # xAlign • xAlign: Scriptable<TooltipXAlignment, ScriptableTooltipContext<TType>> Override the tooltip alignment calculations # Defined in types/index.d.ts:2748 (opens new window)  # yAlign • yAlign: Scriptable<TooltipYAlignment, ScriptableTooltipContext<TType>> # Defined in types/index.d.ts:2749 (opens new window) # Methods # external ▸ external(this, args): void See external tooltip section. # Parameters Name Type this TooltipModel<TType> args Object args.chart Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown> args.tooltip TooltipModel<TType> # Returns void # Defined in types/index.d.ts:2739 (opens new window)   
      ←
      
        TooltipModel
       
        TooltipPosition
      
      →\n\n\n\n# Interface: TooltipPosition # Hierarchy Point ↳ TooltipPosition # Properties # x • x: number # Inherited from Point.x # Defined in types/geometric.d.ts:11 (opens new window)  # xAlign • Optional xAlign: TooltipXAlignment # Defined in types/index.d.ts:2651 (opens new window)  # y • y: number # Inherited from Point.y # Defined in types/geometric.d.ts:12 (opens new window)  # yAlign • Optional yAlign: TooltipYAlignment # Defined in types/index.d.ts:2652 (opens new window)   
      ←
      
        TooltipOptions
       
        TooltipPositionerMap
      
      →\n\n\n\n# Interface: TooltipPositionerMap # Properties # average • average: TooltipPositionerFunction<keyof ChartTypeRegistry> # Defined in types/index.d.ts:2662 (opens new window)  # nearest • nearest: TooltipPositionerFunction<keyof ChartTypeRegistry> # Defined in types/index.d.ts:2663 (opens new window)   
      ←
      
        TooltipPosition
       
        TypedRegistry
      
      →\n\n\n\n# Interface: TypedRegistry<T> # Type parameters Name T # Methods # get ▸ get(id): T # Parameters Name Type id string # Returns T # Defined in types/index.d.ts:1539 (opens new window)  # register ▸ register(item): string # Parameters Name Type item ChartComponent # Returns string The scope where items defaults were registered to. # Defined in types/index.d.ts:1538 (opens new window)  # unregister ▸ unregister(item): void # Parameters Name Type item ChartComponent # Returns void # Defined in types/index.d.ts:1540 (opens new window)   
      ←
      
        TooltipPositionerMap
       
        VisualElement
      
      →\n\n\n\n# Interface: VisualElement # Hierarchy VisualElement ↳ LineElement ↳ BarElement # Methods # draw ▸ draw(ctx, area?): void # Parameters Name Type ctx CanvasRenderingContext2D area? ChartArea # Returns void # Defined in types/index.d.ts:1816 (opens new window)  # getCenterPoint ▸ getCenterPoint(useFinalPosition?): Point # Parameters Name Type useFinalPosition? boolean # Returns Point # Defined in types/index.d.ts:1820 (opens new window)  # getRange ▸ Optional getRange(axis): number # Parameters Name Type axis "x" | "y" # Returns number # Defined in types/index.d.ts:1821 (opens new window)  # inRange ▸ inRange(mouseX, mouseY, useFinalPosition?): boolean # Parameters Name Type mouseX number mouseY number useFinalPosition? boolean # Returns boolean # Defined in types/index.d.ts:1817 (opens new window)  # inXRange ▸ inXRange(mouseX, useFinalPosition?): boolean # Parameters Name Type mouseX number useFinalPosition? boolean # Returns boolean # Defined in types/index.d.ts:1818 (opens new window)  # inYRange ▸ inYRange(mouseY, useFinalPosition?): boolean # Parameters Name Type mouseY number useFinalPosition? boolean # Returns boolean # Defined in types/index.d.ts:1819 (opens new window)   
      ←
      
        TypedRegistry\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n# Chart.js - v4.4.9 # Enumerations DecimationAlgorithm UpdateModeEnum # Classes Animation Animations Animator ArcElement BasePlatform BasicPlatform Chart DatasetController DomPlatform PointElement Scale # Interfaces ActiveDataPoint ActiveElement AnimationEvent ArcBorderRadius ArcHoverOptions ArcOptions ArcProps BackdropOptions BarControllerChartOptions BarControllerDatasetOptions BarElement BarHoverOptions BarOptions BarParsedData BarProps BorderOptions BorderRadius BubbleControllerDatasetOptions BubbleDataPoint BubbleParsedData CanvasFontSpec CartesianParsedData CartesianScaleOptions CartesianScaleTypeRegistry ChartArea ChartComponent ChartConfiguration ChartConfigurationCustomTypesPerDataset ChartData ChartDataCustomTypesPerDataset ChartDatasetProperties ChartDatasetPropertiesCustomTypesPerDataset ChartEvent ChartTypeRegistry CommonElementOptions CommonHoverOptions ComplexFillTarget ControllerDatasetOptions CoreChartOptions CoreInteractionOptions CoreScaleOptions DatasetControllerChartComponent Defaults DoughnutAnimationOptions DoughnutController DoughnutControllerChartOptions DoughnutControllerDatasetOptions DoughnutMetaExtensions ElementOptionsByType ExtendedPlugin FillerControllerDatasetOptions FillerOptions FontSpec GridLineOptions InteractionItem InteractionModeMap InteractionOptions LabelItem LayoutItem LegendElement LegendItem LegendOptions LineControllerChartOptions LineControllerDatasetOptions LineElement LineHoverOptions LineOptions LineProps ParsingOptions Plugin PluginChartOptions PluginOptionsByType Point PointHoverOptions PointOptions PointPrefixedHoverOptions PointPrefixedOptions PolarAreaController PolarAreaControllerChartOptions PolarAreaControllerDatasetOptions RadarControllerDatasetOptions RadialLinearScale RadialParsedData RadialScaleTypeRegistry Registry RenderTextOpts ScaleTypeRegistry ScriptableCartesianScaleContext ScriptableChartContext ScriptableContext ScriptableLineSegmentContext ScriptableScaleContext ScriptableScalePointLabelContext ScriptableTooltipContext Segment Tick TickOptions TimeScale TitleOptions Tooltip TooltipCallbacks TooltipItem TooltipLabelStyle TooltipModel TooltipOptions TooltipPosition TooltipPositionerMap TypedRegistry VisualElement # Type Aliases # Align Ƭ Align: "start" | "center" | "end" # Defined in types/index.d.ts:1813 (opens new window)  # AnimationOptions Ƭ AnimationOptions<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation false | AnimationSpec<TType> & { onComplete?: (this: Chart, event: AnimationEvent) => void ; onProgress?: (this: Chart, event: AnimationEvent) => void  } animations AnimationsSpec<TType> transitions TransitionsSpec<TType> # Defined in types/index.d.ts:1766 (opens new window)  # AnimationSpec Ƭ AnimationSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type Description delay? Scriptable<number, ScriptableContext<TType>> Delay before starting the animations. Default 0 duration? Scriptable<number, ScriptableContext<TType>> The number of milliseconds an animation takes. Default 1000 easing? Scriptable<EasingFunction, ScriptableContext<TType>> Easing function to use Default 'easeOutQuart' loop? Scriptable<boolean, ScriptableContext<TType>> If set to true, the animations loop endlessly. Default false # Defined in types/index.d.ts:1710 (opens new window)  # AnimationsSpec Ƭ AnimationsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [name: string]: false | AnimationSpec<TType> & { fn: <T>(from: T, to: T, factor: number) => T ; from: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; properties: string[] ; to: Scriptable<Color | number | boolean, ScriptableContext<TType>> ; type: "color" | "number" | "boolean"  } # Defined in types/index.d.ts:1735 (opens new window)  # BarController Ƭ BarController: DatasetController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BubbleController Ƭ BubbleController: DatasetController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CartesianTickOptions Ƭ CartesianTickOptions: TickOptions & { align: Align | "inner" ; autoSkip: boolean ; autoSkipPadding: number ; crossAlign: "near" | "center" | "far" ; includeBounds: boolean ; labelOffset: number ; maxRotation: number ; maxTicksLimit: number ; minRotation: number ; mirror: boolean ; padding: number ; sampleSize: number  } # Defined in types/index.d.ts:3106 (opens new window)  # CategoryScale Ƭ CategoryScale<O>: Scale<O> # Type parameters Name Type O extends CategoryScaleOptions = CategoryScaleOptions # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # CategoryScaleOptions Ƭ CategoryScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { labels: string[] | string[][] ; max: string | number ; min: string | number  } # Defined in types/index.d.ts:3267 (opens new window)  # ChartComponentLike Ƭ ChartComponentLike: ChartComponent | ChartComponent[] | { [key: string]: ChartComponent;  } | Plugin | Plugin[] # Defined in types/index.d.ts:1135 (opens new window)  # ChartDataset Ƭ ChartDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetProperties<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3791 (opens new window)  # ChartDatasetCustomTypesPerDataset Ƭ ChartDatasetCustomTypesPerDataset<TType, TData>: DeepPartial<{ [key in ChartType]: Object & ChartTypeRegistry[key]["datasetOptions"] }[TType]> & ChartDatasetPropertiesCustomTypesPerDataset<TType, TData> # Type parameters Name Type TType extends ChartType = ChartType TData DefaultDataPoint<TType> # Defined in types/index.d.ts:3798 (opens new window)  # ChartItem Ƭ ChartItem: string | CanvasRenderingContext2D | HTMLCanvasElement | { canvas: HTMLCanvasElement  } | ArrayLike<CanvasRenderingContext2D | HTMLCanvasElement> # Defined in types/index.d.ts:573 (opens new window)  # ChartMeta Ƭ ChartMeta<TType, TElement, TDatasetElement>: DeepPartial<{ [key in ChartType]: ChartTypeRegistry[key]["metaExtensions"] }[TType]> & ChartMetaCommon<TElement, TDatasetElement> # Type parameters Name Type TType extends ChartType = ChartType TElement extends Element = Element TDatasetElement extends Element = Element # Defined in types/index.d.ts:477 (opens new window)  # ChartOptions Ƭ ChartOptions<TType>: Exclude<DeepPartial<CoreChartOptions<TType> & ElementChartOptions<TType> & PluginChartOptions<TType> & DatasetChartOptions<TType> & ScaleChartOptions<TType> & ChartTypeRegistry[TType]["chartOptions"]>, DeepPartial<unknown[]>> # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3765 (opens new window)  # ChartType Ƭ ChartType: keyof ChartTypeRegistry # Defined in types/index.d.ts:3744 (opens new window)  # Color Ƭ Color: string | CanvasGradient | CanvasPattern # Defined in types/color.d.ts:1 (opens new window)  # DatasetChartOptions Ƭ DatasetChartOptions<TType>: { [key in TType]: Object } # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3753 (opens new window)  # DecimationOptions Ƭ DecimationOptions: LttbDecimationOptions | MinMaxDecimationOptions # Defined in types/index.d.ts:2240 (opens new window)  # DefaultDataPoint Ƭ DefaultDataPoint<TType>: DistributiveArray<ChartTypeRegistry[TType]["defaultDataPoint"]> # Type parameters Name Type TType extends ChartType # Defined in types/index.d.ts:3777 (opens new window)  # DoughnutDataPoint Ƭ DoughnutDataPoint: number # Defined in types/index.d.ts:338 (opens new window)  # EasingFunction Ƭ EasingFunction: keyof typeof effects # Defined in helpers/helpers.easing.ts:122 (opens new window)  # ElementChartOptions Ƭ ElementChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type elements ElementOptionsByType<TType> # Defined in types/index.d.ts:2156 (opens new window)  # FillTarget Ƭ FillTarget: number | string | { value: number  } | "start" | "end" | "origin" | "stack" | "shape" | boolean # Defined in types/index.d.ts:2248 (opens new window)  # InteractionAxis Ƭ InteractionAxis: "x" | "y" | "xy" | "r" # Defined in types/index.d.ts:1572 (opens new window)  # InteractionMode Ƭ InteractionMode: keyof InteractionModeMap # Defined in types/index.d.ts:771 (opens new window)  # InteractionModeFunction Ƭ InteractionModeFunction: (chart: Chart, e: ChartEvent, options: InteractionOptions, useFinalPosition?: boolean) => InteractionItem[] # Type declaration ▸ (chart, e, options, useFinalPosition?): InteractionItem[] # Parameters Name Type chart Chart e ChartEvent options InteractionOptions useFinalPosition? boolean # Returns InteractionItem[] # Defined in types/index.d.ts:733 (opens new window)  # LayoutPosition Ƭ LayoutPosition: "left" | "top" | "right" | "bottom" | "center" | "chartArea" | { [scaleId: string]: number;  } # Defined in types/layout.d.ts:3 (opens new window)  # LineController Ƭ LineController: DatasetController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LinearScale Ƭ LinearScale<O>: Scale<O> # Type parameters Name Type O extends LinearScaleOptions = LinearScaleOptions # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LinearScaleOptions Ƭ LinearScaleOptions: CartesianScaleOptions & { beginAtZero: boolean ; grace?: string | number ; suggestedMax?: number ; suggestedMin?: number ; ticks: { count: number ; format: Intl.NumberFormatOptions ; precision: number ; stepSize: number  }  } # Defined in types/index.d.ts:3279 (opens new window)  # LogarithmicScale Ƭ LogarithmicScale<O>: Scale<O> # Type parameters Name Type O extends LogarithmicScaleOptions = LogarithmicScaleOptions # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # LogarithmicScaleOptions Ƭ LogarithmicScaleOptions: CartesianScaleOptions & { suggestedMax?: number ; suggestedMin?: number ; ticks: { format: Intl.NumberFormatOptions  }  } # Defined in types/index.d.ts:3328 (opens new window)  # Overrides Ƭ Overrides: { [key in ChartType]: CoreChartOptions<key> & ElementChartOptions<key> & PluginChartOptions<key> & DatasetChartOptions<ChartType> & ScaleChartOptions<key> & ChartTypeRegistry[key]["chartOptions"] } # Defined in types/index.d.ts:710 (opens new window)  # ParsedDataType Ƭ ParsedDataType<TType>: ChartTypeRegistry[TType]["parsedDataType"] # Type parameters Name Type TType extends ChartType = ChartType # Defined in types/index.d.ts:3779 (opens new window)  # PieAnimationOptions Ƭ PieAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:361 (opens new window)  # PieController Ƭ PieController: DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PieControllerChartOptions Ƭ PieControllerChartOptions: DoughnutControllerChartOptions # Defined in types/index.d.ts:360 (opens new window)  # PieControllerDatasetOptions Ƭ PieControllerDatasetOptions: DoughnutControllerDatasetOptions # Defined in types/index.d.ts:359 (opens new window)  # PieDataPoint Ƭ PieDataPoint: DoughnutDataPoint # Defined in types/index.d.ts:363 (opens new window)  # PieMetaExtensions Ƭ PieMetaExtensions: DoughnutMetaExtensions # Defined in types/index.d.ts:364 (opens new window)  # PointProps Ƭ PointProps: Point # Defined in elements/element.point.ts:18 (opens new window)  # PointStyle Ƭ PointStyle: "circle" | "cross" | "crossRot" | "dash" | "line" | "rect" | "rectRounded" | "rectRot" | "star" | "triangle" | false | HTMLImageElement | HTMLCanvasElement # Defined in types/index.d.ts:1988 (opens new window)  # PolarAreaAnimationOptions Ƭ PolarAreaAnimationOptions: DoughnutAnimationOptions # Defined in types/index.d.ts:380 (opens new window)  # RadarController Ƭ RadarController: DatasetController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadarControllerChartOptions Ƭ RadarControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:425 (opens new window)  # RadialLinearScaleOptions Ƭ RadialLinearScaleOptions: CoreScaleOptions & { angleLines: { borderDash: Scriptable<number[], ScriptableScaleContext> ; borderDashOffset: Scriptable<number, ScriptableScaleContext> ; color: Scriptable<Color, ScriptableScaleContext> ; display: boolean ; lineWidth: Scriptable<number, ScriptableScaleContext>  } ; animate: boolean ; beginAtZero: boolean ; grid: Partial<GridLineOptions> ; max: number ; min: number ; pointLabels: { backdropColor: Scriptable<Color, ScriptableScalePointLabelContext> ; backdropPadding: Scriptable<number | ChartArea, ScriptableScalePointLabelContext> ; borderRadius: Scriptable<number | BorderRadius, ScriptableScalePointLabelContext> ; callback: (label: string, index: number) => string | string[] | number | number[] ; centerPointLabels: boolean ; color: Scriptable<Color, ScriptableScalePointLabelContext> ; display: boolean | "auto" ; font: ScriptableAndScriptableOptions<Partial<FontSpec>, ScriptableScalePointLabelContext> ; padding: Scriptable<number, ScriptableScalePointLabelContext>  } ; startAngle: number ; suggestedMax: number ; suggestedMin: number ; ticks: RadialTickOptions  } # Defined in types/index.d.ts:3486 (opens new window)  # RadialTickOptions Ƭ RadialTickOptions: TickOptions & { count: number ; format: Intl.NumberFormatOptions ; maxTicksLimit: number ; precision: number ; stepSize: number  } # Defined in types/index.d.ts:3458 (opens new window)  # ScaleChartOptions Ƭ ScaleChartOptions<TType>: Object # Type parameters Name Type TType extends ChartType = ChartType # Type declaration Name Type scales { [key: string]: ScaleOptionsByType<ChartTypeRegistry[TType]["scales"]>;  } # Defined in types/index.d.ts:3759 (opens new window)  # ScaleOptions Ƭ ScaleOptions<TScale>: DeepPartial<ScaleOptionsByType<TScale>> # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3751 (opens new window)  # ScaleOptionsByType Ƭ ScaleOptionsByType<TScale>: { [key in ScaleType]: Object & ScaleTypeRegistry[key]["options"] }[TScale] # Type parameters Name Type TScale extends ScaleType = ScaleType # Defined in types/index.d.ts:3746 (opens new window)  # ScaleType Ƭ ScaleType: keyof ScaleTypeRegistry # Defined in types/index.d.ts:3643 (opens new window)  # ScatterController Ƭ ScatterController: LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # ScatterControllerChartOptions Ƭ ScatterControllerChartOptions: LineControllerChartOptions # Defined in types/index.d.ts:239 (opens new window)  # ScatterControllerDatasetOptions Ƭ ScatterControllerDatasetOptions: LineControllerDatasetOptions # Defined in types/index.d.ts:235 (opens new window)  # ScatterDataPoint Ƭ ScatterDataPoint: Point # Defined in types/index.d.ts:237 (opens new window)  # Scriptable Ƭ Scriptable<T, TContext>: T | (ctx: TContext, options: AnyObject) => T | undefined # Type parameters Name T TContext # Defined in types/index.d.ts:44 (opens new window)  # ScriptableAndArray Ƭ ScriptableAndArray<T, TContext>: readonly T[] | Scriptable<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:47 (opens new window)  # ScriptableAndArrayOptions Ƭ ScriptableAndArrayOptions<T, TContext>: { [P in keyof T]: ScriptableAndArray<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:48 (opens new window)  # ScriptableAndScriptableOptions Ƭ ScriptableAndScriptableOptions<T, TContext>: Scriptable<T, TContext> | ScriptableOptions<T, TContext> # Type parameters Name T TContext # Defined in types/index.d.ts:46 (opens new window)  # ScriptableOptions Ƭ ScriptableOptions<T, TContext>: { [P in keyof T]: Scriptable<T[P], TContext> } # Type parameters Name T TContext # Defined in types/index.d.ts:45 (opens new window)  # TRBL Ƭ TRBL: Object # Type declaration Name Type bottom number left number right number top number # Defined in types/geometric.d.ts:15 (opens new window)  # TextAlign Ƭ TextAlign: "left" | "center" | "right" # Defined in types/index.d.ts:1812 (opens new window)  # TimeScaleOptions Ƭ TimeScaleOptions: Omit<CartesianScaleOptions, "min" | "max"> & { adapters: { date: unknown  } ; bounds: "ticks" | "data" ; max: string | number ; min: string | number ; offsetAfterAutoskip: boolean ; suggestedMax: string | number ; suggestedMin: string | number ; ticks: TimeScaleTickOptions ; time: TimeScaleTimeOptions  } # Defined in types/index.d.ts:3407 (opens new window)  # TimeScaleTickOptions Ƭ TimeScaleTickOptions: Object # Type declaration Name Type Description source "labels" | "auto" | "data" Ticks generation input values: - 'auto': generates "optimal" ticks based on scale size and time options. - 'data': generates ticks from data (including labels from data {t\|x\|y} objects). - 'labels': generates ticks from user given data.labels values ONLY. See https://github.com/chartjs/Chart.js/pull/4507 Since 2.7.0 Default 'auto' stepSize number The number of units between grid lines. Default 1 # Defined in types/index.d.ts:3389 (opens new window)  # TimeScaleTimeOptions Ƭ TimeScaleTimeOptions: Object # Type declaration Name Type Description displayFormats { [key: string]: string;  } Sets how different time units are displayed. isoWeekday boolean | number If boolean and true and the unit is set to 'week', then the first day of the week will be Monday. Otherwise, it will be Sunday. If number, the index of the first day of the week (0 - Sunday, 6 - Saturday). Default false minUnit TimeUnit The minimum display format to be used for a time unit. Default 'millisecond' parser string | (v: unknown) => number Custom parser for dates. round false | TimeUnit If defined, dates will be rounded to the start of this unit. See Time Units below for the allowed units. tooltipFormat string The format string to use for the tooltip. unit false | TimeUnit If defined, will force the unit to be a certain type. See Time Units section below for details. Default false # Defined in types/index.d.ts:3352 (opens new window)  # TimeSeriesScale Ƭ TimeSeriesScale<O>: TimeScale<O> # Type parameters Name Type O extends TimeScaleOptions = TimeScaleOptions # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # TooltipPositioner Ƭ TooltipPositioner: keyof TooltipPositionerMap # Defined in types/index.d.ts:2666 (opens new window)  # TooltipPositionerFunction Ƭ TooltipPositionerFunction<TType>: (this: TooltipModel<TType>, items: readonly ActiveElement[], eventPosition: Point) => TooltipPosition | false # Type parameters Name Type TType extends ChartType # Type declaration ▸ (this, items, eventPosition): TooltipPosition | false # Parameters Name Type this TooltipModel<TType> items readonly ActiveElement[] eventPosition Point # Returns TooltipPosition | false # Defined in types/index.d.ts:2655 (opens new window)  # TooltipXAlignment Ƭ TooltipXAlignment: "left" | "center" | "right" # Defined in types/index.d.ts:2566 (opens new window)  # TooltipYAlignment Ƭ TooltipYAlignment: "top" | "center" | "bottom" # Defined in types/index.d.ts:2567 (opens new window)  # TransitionSpec Ƭ TransitionSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Type declaration Name Type animation AnimationSpec<TType> animations AnimationsSpec<TType> # Defined in types/index.d.ts:1757 (opens new window)  # TransitionsSpec Ƭ TransitionsSpec<TType>: Object # Type parameters Name Type TType extends ChartType # Index signature ▪ [mode: string]: TransitionSpec<TType> # Defined in types/index.d.ts:1762 (opens new window)  # UpdateMode Ƭ UpdateMode: keyof typeof UpdateModeEnum # Defined in types/index.d.ts:590 (opens new window) # Variables # BarController • BarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BarController # Defined in types/index.d.ts:156 (opens new window) types/index.d.ts:157 (opens new window)  # BarElement • BarElement: ChartComponent & (cfg: AnyObject) => BarElement<BarProps, BarOptions> # Defined in types/index.d.ts:2139 (opens new window) types/index.d.ts:2144 (opens new window)  # BubbleController • BubbleController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => BubbleController # Defined in types/index.d.ts:183 (opens new window) types/index.d.ts:184 (opens new window)  # CategoryScale • CategoryScale: ChartComponent & <O>(cfg: AnyObject) => CategoryScale<O> # Defined in types/index.d.ts:3273 (opens new window) types/index.d.ts:3274 (opens new window)  # Decimation • Const Decimation: Plugin # Defined in types/index.d.ts:2220 (opens new window)  # DoughnutController • DoughnutController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:340 (opens new window) types/index.d.ts:350 (opens new window)  # Filler • Const Filler: Plugin # Defined in types/index.d.ts:2242 (opens new window)  # Interaction • Const Interaction: Object # Type declaration Name Type modes InteractionModeMap evaluateInteractionItems (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, axis: InteractionAxis, position: Point, handler: (element: default<AnyObject, AnyObject> & VisualElement, datasetIndex: number, index: number) => void, intersect?: boolean) => InteractionItem[] # Defined in types/index.d.ts:773 (opens new window)  # Legend • Const Legend: Plugin # Defined in types/index.d.ts:2272 (opens new window)  # LineController • LineController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:229 (opens new window) types/index.d.ts:230 (opens new window)  # LineElement • LineElement: ChartComponent & (cfg: AnyObject) => LineElement<LineProps, LineOptions> # Defined in types/index.d.ts:1970 (opens new window) types/index.d.ts:1983 (opens new window)  # LinearScale • LinearScale: ChartComponent & <O>(cfg: AnyObject) => LinearScale<O> # Defined in types/index.d.ts:3322 (opens new window) types/index.d.ts:3323 (opens new window)  # LogarithmicScale • LogarithmicScale: ChartComponent & <O>(cfg: AnyObject) => LogarithmicScale<O> # Defined in types/index.d.ts:3346 (opens new window) types/index.d.ts:3347 (opens new window)  # PieController • PieController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => DoughnutController # Defined in types/index.d.ts:366 (opens new window) types/index.d.ts:367 (opens new window)  # PolarAreaController • PolarAreaController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => PolarAreaController # Defined in types/index.d.ts:392 (opens new window) types/index.d.ts:395 (opens new window)  # RadarController • RadarController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => RadarController # Defined in types/index.d.ts:427 (opens new window) types/index.d.ts:428 (opens new window)  # RadialLinearScale • RadialLinearScale: ChartComponent & <O>(cfg: AnyObject) => RadialLinearScale<O> # Defined in types/index.d.ts:3599 (opens new window) types/index.d.ts:3611 (opens new window)  # ScatterController • ScatterController: ChartComponent & (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, datasetIndex: number) => LineController # Defined in types/index.d.ts:241 (opens new window) types/index.d.ts:242 (opens new window)  # SubTitle • Const SubTitle: Plugin # Defined in types/index.d.ts:2524 (opens new window)  # Ticks • Const Ticks: Object # Type declaration Name Type formatters { logarithmic: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; numeric: (tickValue: number, index: number, ticks: { value: number  }[]) => string ; values: (value: unknown) => string | string[]  } formatters.logarithmic [object Object] formatters.numeric [object Object] formatters.values [object Object] # Defined in types/index.d.ts:1506 (opens new window)  # TimeScale • TimeScale: ChartComponent & <O>(cfg: AnyObject) => TimeScale<O> # Defined in types/index.d.ts:3440 (opens new window) types/index.d.ts:3447 (opens new window)  # TimeSeriesScale • TimeSeriesScale: ChartComponent & <O>(cfg: AnyObject) => TimeSeriesScale<O> # Defined in types/index.d.ts:3452 (opens new window) types/index.d.ts:3453 (opens new window)  # Title • Const Title: Plugin # Defined in types/index.d.ts:2525 (opens new window)  # Tooltip • Tooltip: Tooltip # Defined in types/index.d.ts:2668 (opens new window) types/index.d.ts:2672 (opens new window)  # defaults • Const defaults: Defaults # Defined in types/index.d.ts:720 (opens new window)  # layouts • Const layouts: Object # Type declaration Name Type addBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem) => void configure (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, item: LayoutItem, options: { fullSize?: number ; position?: LayoutPosition ; weight?: number  }) => void removeBox (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, layoutItem: LayoutItem) => void update (chart: Chart<keyof ChartTypeRegistry, (number | [number, number] | Point | BubbleDataPoint)[], unknown>, width: number, height: number) => void # Defined in types/index.d.ts:788 (opens new window)  # registerables • Const registerables: readonly ChartComponentLike[] # Defined in types/index.d.ts:571 (opens new window)  # registry • Const registry: Registry # Defined in types/index.d.ts:1161 (opens new window)    
        DecimationAlgorithm
      
      →\n\n\n\n