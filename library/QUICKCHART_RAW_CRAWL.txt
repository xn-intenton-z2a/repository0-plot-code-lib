On this pageIntroduction


QuickChart is a web service that generates chart images on-the-fly. These images are suitable for embedding in email, SMS, chatbots, and other formats. Charts are rendered by Chart.js, a popular open-source charting library.
Getting started​
QuickChart works by taking Chart.js configurations and rendering them as images. You may send your chart configuration in JSON or Javascript format using a simple URL or through POST request.
For example, take this simple Chart.js configuration:
{  type: 'bar',                                // Show a bar chart  data: {    labels: [2012, 2013, 2014, 2015, 2016],   // Set X-axis labels    datasets: [{      label: 'Users',                         // Create the 'Users' dataset      data: [120, 60, 50, 180, 120]           // Add data to the chart    }]  }}
We'll pack the Chart.js object into the /chart URL endpoint:
https://quickchart.io/chart?c={type:'bar',data:{labels:[2012,2013,2014,2015, 2016],datasets:[{label:'Users',data:[120,60,50,180,120]}]}}
The URL generates this chart image, a rendering of the Chart.js config above:
Loading...
Try making adjustments to the example above!

Edit the chart and replacing bar with line or pie to get a different type of chart.
Change the legend labels.
Add another dataset to get a grouped bar chart.

Because QuickChart is built on open-source chart libraries, our charts are flexible and highly customizable. Keep on reading to learn more or view more chart examples.
Using the API​
The https://quickchart.io/chart endpoint supports both GET and POST methods. These parameters provide control over dimensions, resolution, background, and Chart.js version of your chart:
ParameterTypeDescriptionchartstringChart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.widthintegerWidth of image in pixels. Defaults to 500heightintegerHeight of image in pixels. Defaults to 300devicePixelRatiointegerDevice pixel ratio of output. Set to 1 for normal resolution, 2 for retina. Defaults to 2backgroundColorstringRGB, HEX, HSL, or color name. Defaults to transparentversionstringChart.js version. Default to 2. Setting to 4 enables latest stable Chart.js v4 support.formatstringpng, webp, svg, or pdf. Defaults to pngencodingstringurl or base64. Defaults to url
infoLearn more about API parameters and the POST
endpoint.
Customization​
Because QuickChart is built on the open-source Chart.js library, charts are flexible and highly customizable. To learn more, view our examples gallery or see the reference section to learn how to use Chart.js.
Loading...
QR codes​
To learn more about generating QR codes, follow this link.
Need help?​
If you have questions, please don't hesitate to ask in our community or send us a message.Edit this page\n\nOn this pageIntroduction


QuickChart is a web service that generates chart images on-the-fly. These images are suitable for embedding in email, SMS, chatbots, and other formats. Charts are rendered by Chart.js, a popular open-source charting library.
Getting started​
QuickChart works by taking Chart.js configurations and rendering them as images. You may send your chart configuration in JSON or Javascript format using a simple URL or through POST request.
For example, take this simple Chart.js configuration:
{  type: 'bar',                                // Show a bar chart  data: {    labels: [2012, 2013, 2014, 2015, 2016],   // Set X-axis labels    datasets: [{      label: 'Users',                         // Create the 'Users' dataset      data: [120, 60, 50, 180, 120]           // Add data to the chart    }]  }}
We'll pack the Chart.js object into the /chart URL endpoint:
https://quickchart.io/chart?c={type:'bar',data:{labels:[2012,2013,2014,2015, 2016],datasets:[{label:'Users',data:[120,60,50,180,120]}]}}
The URL generates this chart image, a rendering of the Chart.js config above:
Loading...
Try making adjustments to the example above!

Edit the chart and replacing bar with line or pie to get a different type of chart.
Change the legend labels.
Add another dataset to get a grouped bar chart.

Because QuickChart is built on open-source chart libraries, our charts are flexible and highly customizable. Keep on reading to learn more or view more chart examples.
Using the API​
The https://quickchart.io/chart endpoint supports both GET and POST methods. These parameters provide control over dimensions, resolution, background, and Chart.js version of your chart:
ParameterTypeDescriptionchartstringChart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.widthintegerWidth of image in pixels. Defaults to 500heightintegerHeight of image in pixels. Defaults to 300devicePixelRatiointegerDevice pixel ratio of output. Set to 1 for normal resolution, 2 for retina. Defaults to 2backgroundColorstringRGB, HEX, HSL, or color name. Defaults to transparentversionstringChart.js version. Default to 2. Setting to 4 enables latest stable Chart.js v4 support.formatstringpng, webp, svg, or pdf. Defaults to pngencodingstringurl or base64. Defaults to url
infoLearn more about API parameters and the POST
endpoint.
Customization​
Because QuickChart is built on the open-source Chart.js library, charts are flexible and highly customizable. To learn more, view our examples gallery or see the reference section to learn how to use Chart.js.
Loading...
QR codes​
To learn more about generating QR codes, follow this link.
Need help?​
If you have questions, please don't hesitate to ask in our community or send us a message.Edit this pageNextAPI parametersGetting startedUsing the APICustomizationQR codesNeed help?\n\n\n\nOn this pageIntroduction


QuickChart is a web service that generates chart images on-the-fly. These images are suitable for embedding in email, SMS, chatbots, and other formats. Charts are rendered by Chart.js, a popular open-source charting library.
Getting started​
QuickChart works by taking Chart.js configurations and rendering them as images. You may send your chart configuration in JSON or Javascript format using a simple URL or through POST request.
For example, take this simple Chart.js configuration:
{  type: 'bar',                                // Show a bar chart  data: {    labels: [2012, 2013, 2014, 2015, 2016],   // Set X-axis labels    datasets: [{      label: 'Users',                         // Create the 'Users' dataset      data: [120, 60, 50, 180, 120]           // Add data to the chart    }]  }}
We'll pack the Chart.js object into the /chart URL endpoint:
https://quickchart.io/chart?c={type:'bar',data:{labels:[2012,2013,2014,2015, 2016],datasets:[{label:'Users',data:[120,60,50,180,120]}]}}
The URL generates this chart image, a rendering of the Chart.js config above:
Loading...
Try making adjustments to the example above!

Edit the chart and replacing bar with line or pie to get a different type of chart.
Change the legend labels.
Add another dataset to get a grouped bar chart.

Because QuickChart is built on open-source chart libraries, our charts are flexible and highly customizable. Keep on reading to learn more or view more chart examples.
Using the API​
The https://quickchart.io/chart endpoint supports both GET and POST methods. These parameters provide control over dimensions, resolution, background, and Chart.js version of your chart:
ParameterTypeDescriptionchartstringChart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.widthintegerWidth of image in pixels. Defaults to 500heightintegerHeight of image in pixels. Defaults to 300devicePixelRatiointegerDevice pixel ratio of output. Set to 1 for normal resolution, 2 for retina. Defaults to 2backgroundColorstringRGB, HEX, HSL, or color name. Defaults to transparentversionstringChart.js version. Default to 2. Setting to 4 enables latest stable Chart.js v4 support.formatstringpng, webp, svg, or pdf. Defaults to pngencodingstringurl or base64. Defaults to url
infoLearn more about API parameters and the POST
endpoint.
Customization​
Because QuickChart is built on the open-source Chart.js library, charts are flexible and highly customizable. To learn more, view our examples gallery or see the reference section to learn how to use Chart.js.
Loading...
QR codes​
To learn more about generating QR codes, follow this link.
Need help?​
If you have questions, please don't hesitate to ask in our community or send us a message.Edit this page\n\nOn this pageIntroduction


QuickChart is a web service that generates chart images on-the-fly. These images are suitable for embedding in email, SMS, chatbots, and other formats. Charts are rendered by Chart.js, a popular open-source charting library.
Getting started​
QuickChart works by taking Chart.js configurations and rendering them as images. You may send your chart configuration in JSON or Javascript format using a simple URL or through POST request.
For example, take this simple Chart.js configuration:
{  type: 'bar',                                // Show a bar chart  data: {    labels: [2012, 2013, 2014, 2015, 2016],   // Set X-axis labels    datasets: [{      label: 'Users',                         // Create the 'Users' dataset      data: [120, 60, 50, 180, 120]           // Add data to the chart    }]  }}
We'll pack the Chart.js object into the /chart URL endpoint:
https://quickchart.io/chart?c={type:'bar',data:{labels:[2012,2013,2014,2015, 2016],datasets:[{label:'Users',data:[120,60,50,180,120]}]}}
The URL generates this chart image, a rendering of the Chart.js config above:
Loading...
Try making adjustments to the example above!

Edit the chart and replacing bar with line or pie to get a different type of chart.
Change the legend labels.
Add another dataset to get a grouped bar chart.

Because QuickChart is built on open-source chart libraries, our charts are flexible and highly customizable. Keep on reading to learn more or view more chart examples.
Using the API​
The https://quickchart.io/chart endpoint supports both GET and POST methods. These parameters provide control over dimensions, resolution, background, and Chart.js version of your chart:
ParameterTypeDescriptionchartstringChart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.widthintegerWidth of image in pixels. Defaults to 500heightintegerHeight of image in pixels. Defaults to 300devicePixelRatiointegerDevice pixel ratio of output. Set to 1 for normal resolution, 2 for retina. Defaults to 2backgroundColorstringRGB, HEX, HSL, or color name. Defaults to transparentversionstringChart.js version. Default to 2. Setting to 4 enables latest stable Chart.js v4 support.formatstringpng, webp, svg, or pdf. Defaults to pngencodingstringurl or base64. Defaults to url
infoLearn more about API parameters and the POST
endpoint.
Customization​
Because QuickChart is built on the open-source Chart.js library, charts are flexible and highly customizable. To learn more, view our examples gallery or see the reference section to learn how to use Chart.js.
Loading...
QR codes​
To learn more about generating QR codes, follow this link.
Need help?​
If you have questions, please don't hesitate to ask in our community or send us a message.Edit this pageNextAPI parametersGetting startedUsing the APICustomizationQR codesNeed help?\n\n\n\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nDocs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.
  
  
    Click an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.
  
  
    
      Chart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data
      
    
  
  
     
        Bar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable
        
    
  
  
    Some examples above are based on examples from the Chart.js project.\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.\nClick an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...\nScales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...\nCustomization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nVertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHorizontal bars with labels\nHorizontal bars with labels\nHorizontal bars with labels\nLine charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nBasic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nPoint styles - circle\nPoint styles - circle\nPoint styles - circle\nPoint styles - triangle\nPoint styles - triangle\nPoint styles - triangle\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nExponential Smoothing\nExponential Smoothing\nExponential Smoothing\nArea charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nOther charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nBubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 3\nAnnotated progress bar 3\nAnnotated progress bar 3\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nLinear scale
        Hide section
        
           Step size
           Min & max (suggested)\nStep size
           Min & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nLogarithmic scale
        Hide section
        
           Line
           Scatter\nLine
           Scatter\nTime scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nLine
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nFinancial (Candlestick)\nFinancial (Candlestick)\nFinancial (Candlestick)\nScale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nGrid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nLegend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nPositioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nTitle
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center\nAlignment - position top align center
           Alignment - position left align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position left align center\nAlignment - position left align center\nAlignment - position left align center\nLabels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nLabels and Annotations\nLabels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nPatterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nPatterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - vertical\nGradient fill - vertical\nGradient fill - vertical\nPie Chart with Images\nPie Chart with Images\nPie Chart with Images\nExternal data
        Hide section
        
           From Google Sheets
           From Airtable\nFrom Google Sheets
           From Airtable\nSome examples above are based on examples from the Chart.js project.\n© Alioth LLC
      ·
      Privacy & Compliance
      ·
      Terms of Service
      ·
      Contact
      
        Back to top\n© Alioth LLC
      ·
      Privacy
      ·
      Terms of Service
      ·
      Contact\n\n\n\n\nContact us
Direct support: [email protected]
To download invoices and update payment methods: Billing portal
How to create and configure charts: Ask questions here!
Sales: [email protected]


About QuickChart
Founded in 2015, QuickChart (Alioth LLC) provides tools for developers who want to create charts, graphs, and other data visualizations. We are based in San Mateo, California.
As software engineers and marketers, we built QuickChart because other chart services left much to be desired in terms of function and customization. QuickChart was open-source from the beginning and it quickly became one of the most popular ways to provision a chart render API.
Our aims at QuickChart are simple and straightforward:

Best-in-class speed and reliability: Our engineers have experience scaling the world’s largest tech companies. QuickChart customers will always be hosted on infrastructure that scales automatically and is carefully monitored.
Secure and private: We ensure that your chart data is deleted as soon as it’s rendered.
Open-source: Our open-source model is better for developers and the businesses they support. We actively contribute to the open data visualization community and avoid vendor lock-in and proprietary formats.

Thanks for using QuickChart,


  
  
  Ian Webster, CEO
  
  
    
  
  [email protected]
  
  +1 (650) 332-4607\n\nContact us
Direct support: [email protected]
To download invoices and update payment methods: Billing portal
How to create and configure charts: Ask questions here!
Sales: [email protected]


About QuickChart
Founded in 2015, QuickChart (Alioth LLC) provides tools for developers who want to create charts, graphs, and other data visualizations. We are based in San Mateo, California.
As software engineers and marketers, we built QuickChart because other chart services left much to be desired in terms of function and customization. QuickChart was open-source from the beginning and it quickly became one of the most popular ways to provision a chart render API.
Our aims at QuickChart are simple and straightforward:

Best-in-class speed and reliability: Our engineers have experience scaling the world’s largest tech companies. QuickChart customers will always be hosted on infrastructure that scales automatically and is carefully monitored.
Secure and private: We ensure that your chart data is deleted as soon as it’s rendered.
Open-source: Our open-source model is better for developers and the businesses they support. We actively contribute to the open data visualization community and avoid vendor lock-in and proprietary formats.

Thanks for using QuickChart,


  
  
  Ian Webster, CEO
  
  
    
  
  [email protected]
  
  +1 (650) 332-4607\n\n\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this page\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this pagePreviousIntroductionNextPOST endpointSupported parameterschartwidthheightdevicePixelRatiobackgroundColorversionformatencodingPostman examples\n\n\n\nPOST endpointIf your chart is large or complicated, you may prefer to send a POST request rather than a GET request. This avoids limitations on URL length and means you don't have to worry about URL encoding. The /chart POST endpoint returns a chart. It takes the standard request parameters as a JSON object:
{  "version": "2",  "backgroundColor": "transparent",  "width": 500,  "height": 300,  "devicePixelRatio": 1.0,  "format": "png",  "chart": {...}}
tipTo include Javascript code in chart (e.g. to format labels), you must send chart as a string, not as a JSON object.For examples of this, see documentation on using JS Functions.

Here is the type specification of the POST data object:
{  width: string;                        // Pixel width  height: string;                       // Pixel height  devicePixelRatio: number;             // Pixel ratio (2.0 by default)  format: string;                       // png, svg, or webp  backgroundColor: string;              // Canvas background  version: string;                      // Chart.js version  key: string;                          // API key (optional)  chart: string | ChartConfiguration;   // Chart.js configuration}
ChartConfiguration is a Chart.js v2+ configuration object in JSON format.Edit this page\n\nPOST endpointIf your chart is large or complicated, you may prefer to send a POST request rather than a GET request. This avoids limitations on URL length and means you don't have to worry about URL encoding. The /chart POST endpoint returns a chart. It takes the standard request parameters as a JSON object:
{  "version": "2",  "backgroundColor": "transparent",  "width": 500,  "height": 300,  "devicePixelRatio": 1.0,  "format": "png",  "chart": {...}}
tipTo include Javascript code in chart (e.g. to format labels), you must send chart as a string, not as a JSON object.For examples of this, see documentation on using JS Functions.

Here is the type specification of the POST data object:
{  width: string;                        // Pixel width  height: string;                       // Pixel height  devicePixelRatio: number;             // Pixel ratio (2.0 by default)  format: string;                       // png, svg, or webp  backgroundColor: string;              // Canvas background  version: string;                      // Chart.js version  key: string;                          // API key (optional)  chart: string | ChartConfiguration;   // Chart.js configuration}
ChartConfiguration is a Chart.js v2+ configuration object in JSON format.Edit this pagePreviousAPI parametersNextShort URLs and Templates\n\n\n\nOn this pageAdvanced API


Short URLs​
You may want to create a shorter URL for your charts, especially if you are sending them via email or SMS. To generate a short URL for your chart, send a POST request to https://quickchart.io/chart/create.
The endpoint takes the following JSON request body, identical to the /chart POST endpoint:
{  width: string;                        // Pixel width  height: string;                       // Pixel height  devicePixelRatio: number;             // Pixel ratio (2.0 by default)  format: string;                       // png, svg, or webp  backgroundColor: string;              // Canvas background  version: string;                      // Chart.js version  key: string;                          // API key (optional)  chart: string | ChartConfiguration;   // Chart.js configuration}
Here's an example using curl. You can use any library that sends an HTTP POST request:
curl -X POST \     -H 'Content-Type: application/json' \     -d '{"chart": {"type": "bar", "data": {"labels": ["Hello", "World"], "datasets": [{"label": "Foo", "data": [1, 2]}]}}}' \     https://quickchart.io/chart/create
Here's an equivalent request using Python:
import jsonimport requestsquickchart_url = 'https://quickchart.io/chart/create'post_data = {'chart': {'type': 'bar', 'data': {'labels': ['Hello', 'World'],             'datasets': [{'label': 'Foo', 'data': [1, 2]}]}}}response = requests.post(    quickchart_url,    json=post_data,)if (response.status_code != 200):    print('Error:', response.text)else:    chart_response = json.loads(response.text)    print(chart_response)
You will get a response that looks like this:
{  "success": true,  "url": "https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232"}
Go to the URL in the response to render your chart.
Please note the following limitations:

It can take a couple seconds for short URLs to become active globally.
Request inputs are not validated before the URL is created. The chart is only rendered when the URL is visited.
If your chart includes Javascript, you must supply your chart definition as a string (see using JS functions).
Saved charts expire after 3 days for free users, 6 months for paid users.

Templates​
If you want to generate many charts, but they only differ slightly, you may prefer to use chart templates. Any chart with a Short URL can also be used as a template.
Customize a template by adding URL parameters to the template URL. The following template parameters are supported:

title - The title of the chart
labels - Comma-separated labels for the label axis of a chart (usually the X axis)
data1, data2, ..., dataN - Comma-separated data values for each dataseries
label1, label2, ..., labelN - Comma-separated labels for each dataseries
backgroundColor1, ..., backgroundColorN - Comma-separated backgrounds for each dataseries
borderColor1, ..., borderColorN - Comma-separated border colors for each dataseries

For example, this URL will take template zf-abc-123 and update its title to "New title":
https://quickchart.io/chart/render/zf-abc-123?title=New title
We can add a labels URL parameter:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
Or even override multiple datasets:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8
In addition to plain numbers, templates also accept (x, y) data values and arbitrary JSON objects.
An example walkthrough with a live template can be viewed here.
IFrames​
By default, short URLs/templates render as images and are not interactive. If you'd like to display a chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the short URL:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe src="demo_iframe.htm" frameborder="0" height="500" width="300" title="Iframe Example"></iframe>
Expiration​
Expiration of short URLs and templates varies based on whether you've created them using the /chart/create API endpoint, or via the Chart Maker.
Free TierProfessional PlanAPI3 days6 months  Can be extended by contacting supportAdvanced Chart Editor (Sandbox)3 days6 months  Can be extended by contacting supportChart Maker60+ days  Expiration is reset when rendered6+ months  Expiration is reset when rendered
An expired short URL will return a 404 Not Found error.Edit this page\n\nOn this pageAdvanced API


Short URLs​
You may want to create a shorter URL for your charts, especially if you are sending them via email or SMS. To generate a short URL for your chart, send a POST request to https://quickchart.io/chart/create.
The endpoint takes the following JSON request body, identical to the /chart POST endpoint:
{  width: string;                        // Pixel width  height: string;                       // Pixel height  devicePixelRatio: number;             // Pixel ratio (2.0 by default)  format: string;                       // png, svg, or webp  backgroundColor: string;              // Canvas background  version: string;                      // Chart.js version  key: string;                          // API key (optional)  chart: string | ChartConfiguration;   // Chart.js configuration}
Here's an example using curl. You can use any library that sends an HTTP POST request:
curl -X POST \     -H 'Content-Type: application/json' \     -d '{"chart": {"type": "bar", "data": {"labels": ["Hello", "World"], "datasets": [{"label": "Foo", "data": [1, 2]}]}}}' \     https://quickchart.io/chart/create
Here's an equivalent request using Python:
import jsonimport requestsquickchart_url = 'https://quickchart.io/chart/create'post_data = {'chart': {'type': 'bar', 'data': {'labels': ['Hello', 'World'],             'datasets': [{'label': 'Foo', 'data': [1, 2]}]}}}response = requests.post(    quickchart_url,    json=post_data,)if (response.status_code != 200):    print('Error:', response.text)else:    chart_response = json.loads(response.text)    print(chart_response)
You will get a response that looks like this:
{  "success": true,  "url": "https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232"}
Go to the URL in the response to render your chart.
Please note the following limitations:

It can take a couple seconds for short URLs to become active globally.
Request inputs are not validated before the URL is created. The chart is only rendered when the URL is visited.
If your chart includes Javascript, you must supply your chart definition as a string (see using JS functions).
Saved charts expire after 3 days for free users, 6 months for paid users.

Templates​
If you want to generate many charts, but they only differ slightly, you may prefer to use chart templates. Any chart with a Short URL can also be used as a template.
Customize a template by adding URL parameters to the template URL. The following template parameters are supported:

title - The title of the chart
labels - Comma-separated labels for the label axis of a chart (usually the X axis)
data1, data2, ..., dataN - Comma-separated data values for each dataseries
label1, label2, ..., labelN - Comma-separated labels for each dataseries
backgroundColor1, ..., backgroundColorN - Comma-separated backgrounds for each dataseries
borderColor1, ..., borderColorN - Comma-separated border colors for each dataseries

For example, this URL will take template zf-abc-123 and update its title to "New title":
https://quickchart.io/chart/render/zf-abc-123?title=New title
We can add a labels URL parameter:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
Or even override multiple datasets:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8
In addition to plain numbers, templates also accept (x, y) data values and arbitrary JSON objects.
An example walkthrough with a live template can be viewed here.
IFrames​
By default, short URLs/templates render as images and are not interactive. If you'd like to display a chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the short URL:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe src="demo_iframe.htm" frameborder="0" height="500" width="300" title="Iframe Example"></iframe>
Expiration​
Expiration of short URLs and templates varies based on whether you've created them using the /chart/create API endpoint, or via the Chart Maker.
Free TierProfessional PlanAPI3 days6 months  Can be extended by contacting supportAdvanced Chart Editor (Sandbox)3 days6 months  Can be extended by contacting supportChart Maker60+ days  Expiration is reset when rendered6+ months  Expiration is reset when rendered
An expired short URL will return a 404 Not Found error.Edit this pagePreviousPOST endpointNextClient librariesShort URLsTemplatesIFramesExpiration\n\n\n\nOn this pageClient libraries
We maintain client libraries for your convenience:

quickchart-js - Javascript
quickchart-python - Python
quickchart-ruby - Ruby
quickchart-php - PHP
quickchart-csharp - C#
quickchart-java - Java
quickchart-go - Go (third-party)
chartjs-to-image - Javascript package for Chart.js images
Postman - Tool for building API requests

You don't necessarily need a library to use QuickChart. To use QuickChart without a library, simply build a QuickChart URL as described in API parameters.
Javascript/Node​
Run npm install quickchart-js to install the QuickChart dependency. Use it like so:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: {      labels: ['Hello world', 'Foo bar'],      datasets: [{ label: 'Foo', data: [1, 2] }],    },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');// Print the chart URLconsole.log(myChart.getUrl());
Get more details on the quickchart-js project page.
Python​
Run pip install quickchart.io to install the QuickChart dependency. Use it like so:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print the chart URLprint(qc.get_url())
Read the full Python tutorial or see details on the quickchart-python project page.
Ruby​
Run gem install quickchart to install the QuickChart Ruby gem:
require 'quickchart'qc = QuickChart.new(  {    type: "bar",    data: {      labels: ["Hello world", "Test"],      datasets: [{        label: "Foo",        data: [1, 2]      }]    }  },  width: 600,  height: 300,  device_pixel_ratio: 2.0,)# Print the chart URLputs qc.get_url
Learn more about chart generation in Ruby at the quickchart-ruby repository.
PHP​
Run composer require ianw/quickchart to install the QuickChart PHP library:
require 'quickchart'$qc = new QuickChart(array(  'width' => 600,  'height' => 300,));$qc->setConfig('{  type: "bar",  data: {    labels: ["Hello world", "Test"],    datasets: [{      label: "Foo",      data: [1, 2]    }]  }}');// Print the chart URLecho $qc->getUrl();
See the PHP QuickChart client at the quickchart-php repository.
C#​
Add the QuickChart package from NuGet. Then use the Chart object provided by the QuickChart namespace:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Hello world', 'Test'],                datasets: [{                  label: 'Foo',                  data: [1, 2]                }]              }            }"            Console.WriteLine(qc.GetUrl());        }    }}
The C# QuickChart client is available on NuGet and at the quickchart-csharp repository.
Java​
Add the QuickChart package from Maven Central. If you use Maven or Gradle, you can add it to your config (view details).
This library provides an io.quickchart package that contains a QuickChart class:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("{"                + "    type: 'bar',"                + "    data: {"                + "        labels: ['Q1', 'Q2', 'Q3', 'Q4'],"                + "        datasets: [{"                + "            label: 'Users',"                + "            data: [50, 60, 70, 180]"                + "        }]"                + "    }"                + "}"        );        System.out.println(chart.getUrl());    }}
The Java library is open-source and accessible on Github.
Go​
A third-party QuickChart Go library is available on Github. It can be used like so:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";fmt.Println(qc.GetUrl());
Other programming languages​
QuickChart is not limited to the libraries listed above. You can create a QuickChart URL in any language by building a URL string. Because building a URL string is a matter of string concatenation, this can be done in any language.
See the API Parameters documentation to learn how to build a URL that renders a chart image.
If you need help, please reach out and we will help you implement in your preferred programming language.Edit this page\n\nOn this pageClient libraries
We maintain client libraries for your convenience:

quickchart-js - Javascript
quickchart-python - Python
quickchart-ruby - Ruby
quickchart-php - PHP
quickchart-csharp - C#
quickchart-java - Java
quickchart-go - Go (third-party)
chartjs-to-image - Javascript package for Chart.js images
Postman - Tool for building API requests

You don't necessarily need a library to use QuickChart. To use QuickChart without a library, simply build a QuickChart URL as described in API parameters.
Javascript/Node​
Run npm install quickchart-js to install the QuickChart dependency. Use it like so:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: {      labels: ['Hello world', 'Foo bar'],      datasets: [{ label: 'Foo', data: [1, 2] }],    },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');// Print the chart URLconsole.log(myChart.getUrl());
Get more details on the quickchart-js project page.
Python​
Run pip install quickchart.io to install the QuickChart dependency. Use it like so:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print the chart URLprint(qc.get_url())
Read the full Python tutorial or see details on the quickchart-python project page.
Ruby​
Run gem install quickchart to install the QuickChart Ruby gem:
require 'quickchart'qc = QuickChart.new(  {    type: "bar",    data: {      labels: ["Hello world", "Test"],      datasets: [{        label: "Foo",        data: [1, 2]      }]    }  },  width: 600,  height: 300,  device_pixel_ratio: 2.0,)# Print the chart URLputs qc.get_url
Learn more about chart generation in Ruby at the quickchart-ruby repository.
PHP​
Run composer require ianw/quickchart to install the QuickChart PHP library:
require 'quickchart'$qc = new QuickChart(array(  'width' => 600,  'height' => 300,));$qc->setConfig('{  type: "bar",  data: {    labels: ["Hello world", "Test"],    datasets: [{      label: "Foo",      data: [1, 2]    }]  }}');// Print the chart URLecho $qc->getUrl();
See the PHP QuickChart client at the quickchart-php repository.
C#​
Add the QuickChart package from NuGet. Then use the Chart object provided by the QuickChart namespace:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Hello world', 'Test'],                datasets: [{                  label: 'Foo',                  data: [1, 2]                }]              }            }"            Console.WriteLine(qc.GetUrl());        }    }}
The C# QuickChart client is available on NuGet and at the quickchart-csharp repository.
Java​
Add the QuickChart package from Maven Central. If you use Maven or Gradle, you can add it to your config (view details).
This library provides an io.quickchart package that contains a QuickChart class:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("{"                + "    type: 'bar',"                + "    data: {"                + "        labels: ['Q1', 'Q2', 'Q3', 'Q4'],"                + "        datasets: [{"                + "            label: 'Users',"                + "            data: [50, 60, 70, 180]"                + "        }]"                + "    }"                + "}"        );        System.out.println(chart.getUrl());    }}
The Java library is open-source and accessible on Github.
Go​
A third-party QuickChart Go library is available on Github. It can be used like so:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";fmt.Println(qc.GetUrl());
Other programming languages​
QuickChart is not limited to the libraries listed above. You can create a QuickChart URL in any language by building a URL string. Because building a URL string is a matter of string concatenation, this can be done in any language.
See the API Parameters documentation to learn how to build a URL that renders a chart image.
If you need help, please reach out and we will help you implement in your preferred programming language.Edit this pagePreviousShort URLs and TemplatesNextNo-code chartsJavascript/NodePythonRubyPHPC#JavaGoOther programming languages\n\n\n\nNo-code charts
If you prefer not to edit a Chart.js configuration directly, use the Chart Maker to create a chart without code.

Design a chart & customize its look and feel to match your brand
Save & share the chart
Use this chart as a template to generate other charts based on dynamic data
Embed generated charts anywhere

tipTo learn more about no-code chart APIs and templates, see the chart maker
documentation.
The no-code chart builder generates a special endpoint that generates charts based on your specification.Edit this page\n\nNo-code charts
If you prefer not to edit a Chart.js configuration directly, use the Chart Maker to create a chart without code.

Design a chart & customize its look and feel to match your brand
Save & share the chart
Use this chart as a template to generate other charts based on dynamic data
Embed generated charts anywhere

tipTo learn more about no-code chart APIs and templates, see the chart maker
documentation.
The no-code chart builder generates a special endpoint that generates charts based on your specification.Edit this pagePreviousClient librariesNextError handling\n\n\n\nOn this pageError handling400 Bad Request​
Errors that prevent the chart from rendering will return a non-200 HTTP status code, most commonly 400 Bad Request. In most cases, the error will be rendered in the requested image format. If an error is rendered in an image, it is also included as a string in the X-quickchart-error HTTP header.
An example error due to invalid chart config - not URL encoded.
Invalid or unexpected token​
Invalid Chart.js configurations may return errors similar to this one. The most common cause of this error is that the caller forgot to URL-encode the chart variable. The next most common cause is invalid JSON/Javascript syntax in the chart configuration.
Cannot read property <X> of undefined​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
<X> is not a function​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
Request header or cookie too large​
The URL length limitation is imposed by web browsers and hosting providers, so we cannot change it.  Here are two ways you can solve this problem:


Consolidate the request payload.
Charts: Reduce the number of datapoints, or reduce the precision of datapoints.  For example, shorten "2.0003" to just "2".  You can also reduce the amount of text required to define your datapoints by using a map function (example).
Word clouds: Use the word list format to combine repeat words with their counts.  You can enable this by setting useWordList=1 in the URL.  Here's an example text payload: "understanding:5,companies:1,freedom:10"


Use the POST API.  By sending an HTTP POST request instead of a GET, you'll be able to include much more data.  See documentation on POST endpoint.


Certificate errors​
If you are receiving a certificate error message while using or accessing QuickChart, or notice of an expired certificate, this likely means that you have an outdated root certificate. To fix, you must update your local CA bundle.
The root cause of this is that a root certificate IdentTrust DST Root CA X3 expired. Those with outdated systems still have this certificate.

Learn more here
Relevant news article
Edit this page\n\nOn this pageError handling400 Bad Request​
Errors that prevent the chart from rendering will return a non-200 HTTP status code, most commonly 400 Bad Request. In most cases, the error will be rendered in the requested image format. If an error is rendered in an image, it is also included as a string in the X-quickchart-error HTTP header.
An example error due to invalid chart config - not URL encoded.
Invalid or unexpected token​
Invalid Chart.js configurations may return errors similar to this one. The most common cause of this error is that the caller forgot to URL-encode the chart variable. The next most common cause is invalid JSON/Javascript syntax in the chart configuration.
Cannot read property <X> of undefined​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
<X> is not a function​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
Request header or cookie too large​
The URL length limitation is imposed by web browsers and hosting providers, so we cannot change it.  Here are two ways you can solve this problem:


Consolidate the request payload.
Charts: Reduce the number of datapoints, or reduce the precision of datapoints.  For example, shorten "2.0003" to just "2".  You can also reduce the amount of text required to define your datapoints by using a map function (example).
Word clouds: Use the word list format to combine repeat words with their counts.  You can enable this by setting useWordList=1 in the URL.  Here's an example text payload: "understanding:5,companies:1,freedom:10"


Use the POST API.  By sending an HTTP POST request instead of a GET, you'll be able to include much more data.  See documentation on POST endpoint.


Certificate errors​
If you are receiving a certificate error message while using or accessing QuickChart, or notice of an expired certificate, this likely means that you have an outdated root certificate. To fix, you must update your local CA bundle.
The root cause of this is that a root certificate IdentTrust DST Root CA X3 expired. Those with outdated systems still have this certificate.

Learn more here
Relevant news article
Edit this pagePreviousNo-code chartsNextChart Types400 Bad RequestInvalid or unexpected tokenCannot read property <X> of undefined<X> is not a functionRequest header or cookie too largeCertificate errors\n\n\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this page\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this pagePreviousError handlingNextChart MakerBar chartLine graphRadar chartPie chartDoughnut chartPolar chartScatter PlotBubble chartRadial Gauge / "Meter" ChartsSpeedometer ChartsBox Plots and Violin ChartsFunnel ChartsFinancial ChartsSparklinesSankeysProgress barsMixed chartsMore examples\n\n\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this page\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this pagePreviousChart TypesNextReferenceCreate a chart templateAdd dataCustomize look & feelDynamic datasourcesSave the templateUse the no-code chart APIReal exampleCustomizable propertiesEmbedding an interactive chartAdvanced API featuresNeed help?\n\n\n\n📄️ Chart titleThe chart title is a label that appears on the top, left, bottom, or right of the chart.📄️ Grid linesChart.js v2 (default)📄️ AxesThere are several types of chart axes: Linear, Logarithmic, Time, Categorical, and Radial. If you are looking to create a standard chart, chances are you want to use a linear or time axis.📄️ LabelsThere are several different types of labels: axis labels, tick labels, and data labels.📄️ LegendThe chart legend can be customized via the options.legend property (see chart legend in Chart.js v2 and chart legend in Chart.js v3+).📄️ FontsQuickChart supports all Google Noto fonts. Custom fonts are available upon request.📄️ Colors and backgroundsEvery aspect of chart coloration is customizable. All colors are taken as strings, in either hex, RGB, or by specifying a color name. To adjust opacity, set an RGBA value.📄️ Point stylePoints (also referred to as "markers") may appear in a line, sparkline, radar, or bubble chart. Point style can be configured globally using the options.elements.point object. See Chart.js point configuration for more details.📄️ Line styleYou can style lines by setting properties on the data.dataset object that defines your line series. See Chart.js line styling documentation for full details.📄️ Time seriesDate and time series axes automatically handle calendar dates. To create a time series axis, set its type to time:📄️ Smoothing & roundingLine charts📄️ Plugins & addonsPre-installed plugins📄️ Retina supportUse retina support to generate high quality images suitable for high-DPI displays. By default, QuickChart serves charts at 2x requested pixel size so that they appear sharp on retina displays.📄️ Chart titleThe chart title is a label that appears on the top, left, bottom, or right of the chart.📄️ Grid linesChart.js v2 (default)📄️ AxesThere are several types of chart axes: Linear, Logarithmic, Time, Categorical, and Radial. If you are looking to create a standard chart, chances are you want to use a linear or time axis.📄️ LabelsThere are several different types of labels: axis labels, tick labels, and data labels.📄️ LegendThe chart legend can be customized via the options.legend property (see chart legend in Chart.js v2 and chart legend in Chart.js v3+).📄️ FontsQuickChart supports all Google Noto fonts. Custom fonts are available upon request.📄️ Colors and backgroundsEvery aspect of chart coloration is customizable. All colors are taken as strings, in either hex, RGB, or by specifying a color name. To adjust opacity, set an RGBA value.📄️ Point stylePoints (also referred to as "markers") may appear in a line, sparkline, radar, or bubble chart. Point style can be configured globally using the options.elements.point object. See Chart.js point configuration for more details.📄️ Line styleYou can style lines by setting properties on the data.dataset object that defines your line series. See Chart.js line styling documentation for full details.📄️ Time seriesDate and time series axes automatically handle calendar dates. To create a time series axis, set its type to time:📄️ Smoothing & roundingLine charts📄️ Plugins & addonsPre-installed plugins📄️ Retina supportUse retina support to generate high quality images suitable for high-DPI displays. By default, QuickChart serves charts at 2x requested pixel size so that they appear sharp on retina displays.\n\nReference📄️ Chart titleThe chart title is a label that appears on the top, left, bottom, or right of the chart.📄️ Grid linesChart.js v2 (default)📄️ AxesThere are several types of chart axes: Linear, Logarithmic, Time, Categorical, and Radial. If you are looking to create a standard chart, chances are you want to use a linear or time axis.📄️ LabelsThere are several different types of labels: axis labels, tick labels, and data labels.📄️ LegendThe chart legend can be customized via the options.legend property (see chart legend in Chart.js v2 and chart legend in Chart.js v3+).📄️ FontsQuickChart supports all Google Noto fonts. Custom fonts are available upon request.📄️ Colors and backgroundsEvery aspect of chart coloration is customizable. All colors are taken as strings, in either hex, RGB, or by specifying a color name. To adjust opacity, set an RGBA value.📄️ Point stylePoints (also referred to as "markers") may appear in a line, sparkline, radar, or bubble chart. Point style can be configured globally using the options.elements.point object. See Chart.js point configuration for more details.📄️ Line styleYou can style lines by setting properties on the data.dataset object that defines your line series. See Chart.js line styling documentation for full details.📄️ Time seriesDate and time series axes automatically handle calendar dates. To create a time series axis, set its type to time:📄️ Smoothing & roundingLine charts📄️ Plugins & addonsPre-installed plugins📄️ Retina supportUse retina support to generate high quality images suitable for high-DPI displays. By default, QuickChart serves charts at 2x requested pixel size so that they appear sharp on retina displays.PreviousChart MakerNextChart title\n\n\n\nOn this pageHow to create and send charts in email


Email is a ubiquitous format, but it comes with limitations. Mail clients like Gmail and Outlook remove Javascript, SVG, and other alternatives. This means in order to include a chart or graph in email, you must render it as an image.
This tutorial explains how to use the open-source QuickChart project to display a simple bar chart in the body of an email.
Normally, rendering dynamic charts at scale is resource-intensive, requiring a server render farm, headless browsers, and other configuration.
Production infrastructure for chart rendering
We will remove this complexity by using a service that renders graphs for us. A specially constructed URL sent to the QuickChart API will return a chart image. Because it's just a matter of building a URL, it's easy to do in your existing programming environment.
By changing the URL, you can make the chart dynamic. The API is built on Chart.js, the most popular frontend charts library, which means it's very easy to customize your chart.
A simple chart in an email
Render the chart image​
The main QuickChart endpoint is https://quickchart.io/chart. Use this as the base URL, then add some query parameters:

chart: The Chart.js object (required). Check out the Chart.js docs for many different chart types and customization options and use the sandbox editor to test out your configs.
width: Width of chart in pixels (optional)
height: Height of chart in pixels (optional)
devicePixelRatio: Ratio between physical pixels and logical pixels. Defaults to 2.0 for retina support (optional)
View more parameters in the documentation

Let's suppose you built your Chart.js config and it looks like this:
{  type: 'bar',  data: {    labels: [2012, 2013, 2014, 2015, 2016],    datasets: [{      label: 'Users',      data: [120, 60, 50, 180, 120]    }]  }}
As you can see, we're building a graph of users from 2012 through 2016. You can preview this graph by pasting the config into the testing sandbox.
Take the Chart.js config and put it into the main endpoint URL:
https://quickchart.io/chart?c={type:'bar',data:{labels:[2012,2013,2014,2015,2016],datasets:[{label:'Users',data:[120,60,50,180,120]}]}}
This URL will render the chart when your browser loads it. To include it in an email, all we need to do is put the URL in an image tag:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:[2012,2013,2014,2015,2016],datasets:[{label:'Users',data:[120,60,50,180,120]}]}} />
This displays the chart image, like so:

You can safely embed this chart directly in your email. It doesn't require any Javascript, and any email client like Gmail or Outlook will display your chart.
Email a chart in any programming language​
Because a chart is just defined by its URL, you may construct a QuickChart URL in any programming language. Follow the instructions above to build your chart configuration, then put it in an <img> tag in your email.
This lightweight approach avoids third-party dependencies. That said, QuickChart has published libraries for a few languages. See the most up-to-date list here. We've also included many examples below.
Once you've generated the chart, you can use any existing email service (such as Mailgun or Sendgrid) to send an email.
For more advanced chart use cases, you may use your language's HTTP library in order to generate short URLs for your chart.
Email charts with Python​
Here's how to use Python to generate and email charts. First, build your Chart.js config. In this example, we'll display a simple bar graph:
chart_config = {  'type': 'bar',  'data': {    'labels': ['Week 1', 'Week 2', 'Week 3', 'Week 4'],    'datasets': [{      'label': 'Retweets',      'data': [12, 5, 40, 5]    }, {      'label': 'Likes',      'data': [80, 42, 215, 30]    }]  }}))
Now, let's build our email message as a string. In order to build the image chart URL, we'll convert the chart config to JSON and URL encode it.
import jsonfrom urllib.parse import quoteencoded_config = quote(json.dumps(chart_config))chart_url = f'https://quickchart.io/chart?c={encoded_config}'email_message = f"""Hello, this is my email body containing a chart image. Please see the chart below:<br><br><img src="{chart_url}" />"""
Note that you can also use the quickchart-python library to build your chart and generate its image URL.
Now that we have created the email body, the next step is to decide how we want to send the email. You can do this using any method that's already available to you in Python, whether it's using your own SMTP server, Gmail, or an email-sending service like Mailgun or Sendgrid.
To finish it off, let's just use the Mailgun API:
import requestsrequest_url = f'https://api.mailgun.net/v2/{DOMAIN}/messages'request = requests.post(request_url, auth=('api', 'your_api_key_here'), data={    'from': '[email protected]',    'to': '[email protected]',    'subject': 'Updated Chart Report with Mailgun',    'html': email_message,})print(f'Status: {request.status_code}')print(f'Body:   {request.text}')
Or using Sendgrid's Python library:
from sendgrid import SendGridAPIClientfrom sendgrid.helpers.mail import Mailmessage = Mail(    from_email='[email protected]',    to_emails='[email protected]',    subject='Updated Chart Report with Sendgrid',    html_content=email_message)try:    sg = SendGridAPIClient('your_api_key_here')    response = sg.send(message)    print(response.status_code)    print(response.body)    print(response.headers)except Exception as e:    print(e.message)
Email charts with Javascript/Node.js​
Sending charts using Javascript or node.js is straightforward. You can either build the URL as described above, or npm install quickchart-js.
Use the library like so. First, generate the URL for your chart image and build your email message:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: { labels: ['Hello world', 'Foo bar'], datasets: [{ label: 'Foo', data: [1, 2] }] },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');const chartImageUrl = myChart.getUrl();const message = `Hello, please see the chart below:<br><br><img src="${chartImageUrl}" />`;
Then, send the email with Mailgun or some other preferred email library:
const mailgunGenerator = require('mailgun-js');const mailgun = mailgunGenerator({  apiKey: 'abc123',  domain: 'xyz.com',});const data = {  from: '[email protected]',  to: '[email protected]',  subject: 'Updated Chart Report',  html: message,};mailgun.messages().send(data, (err, body) => {  console.log(body);});
Here's the Sendgrid equivalent:
const sgMail = require('@sendgrid/mail');sgMail.setApiKey('your_api_key_here');const msg = {  to: '[email protected]',  from: '[email protected]',  subject: 'Updated Chart Report',  html: message,};sgMail.send(msg);
Email charts with Java​
In order to email a chart with Java, first create a string containing our Chart.js config.
You can build this JSON string dynamically if you'd like - use normal string manipulation and concatenation to substitute your data. Here's a simple example of a Chart.js config with some hardcoded values:
String chartConfig = "{" +  "\"type\": \"bar\"," +  "\"data\": {" +    "\"labels\": [2012, 2013, 2014, 2015, 2016]," +    "\"datasets\": [{" +      "\"label\": \"Users\"," +      "\"data\": [120, 60, 50, 180, 120]" +    "}]" +  "}" +"}";
Suppose we wanted to replace the data with dynamic values from an array. Here's one approach:
String chartConfigTemplate = "{" +  "\"type\": \"bar\"," +  "\"data\": {" +    "\"labels\": [2012, 2013, 2014, 2015, 2016]," +    "\"datasets\": [{" +      "\"label\": \"Users\"," +      "\"data\": [ %DATA_VALUES% ]" +    "}]" +  "}" +"}";ArrayList<Integer> values = new ArrayList<Integer>();values.add(120);values.add(60);values.add(50);values.add(180);values.add(120);String chartConfig =    chartConfigTemplate.replace("%DATA_VALUES%", values.toString());
You can also build the JSON completely dynamically using org.json or a similar library.
Now that we have our chart config, pack this into the QuickChart API URL. We use java.net.URLEncoder:
String chartUrl =    "https://quickchart.io/chart?width=500&height=200&chart=" +    URLEncoder.encode(chartConfig, StandardCharsets.UTF_8);String message =    "Hello, please see the chart below:<br><br><img src=\"" + chartUrl + "\">";
That's it for generating the chart. Now all we need to do is send the chart image in the body of the email:
import com.mashape.unirest.http.HttpResponse;import com.mashape.unirest.http.JsonNode;import com.mashape.unirest.http.Unirest;import com.mashape.unirest.http.exceptions.UnirestException;public class MGSample {    public static JsonNode sendSimpleMessage() throws UnirestException {        // ... Generate the chart image        // Send the email        HttpResponse<JsonNode> request = Unirest.post("https://api.mailgun.net/v3/" + YOUR_DOMAIN_NAME + "/messages")            .basicAuth("api", API_KEY)            .field("from", "Bob Smith <[email protected]>")            .field("to", "[email protected]")            .field("subject", "Chart Report")            .field("html", message)            .asJson();        return request.getBody();    }}
See here for the equivalent Java Sendgrid example.
Email charts with C#​
To email a chart in C#, first we create our Chart.js config. Basic chart configs are JSON, so you can use any method of creating JSON objects in C# that you prefer. In this case, we'll just put the config directly in our source code:
String chartConfig = @"{  ""type"": ""bar"",  ""data"": {    ""labels"": [2012, 2013, 2014, 2015, 2016],    ""datasets"": [{      ""label"": ""Users"",      ""data"": [120, 60, 50, 180, 120]    }]  }}";
Next, put this chart config object in the QuickChart API URL and build our message:
String chartUrl = "https://quickchart.io/chart?width=500&height=200&chart=" + Uri.EscapeDataString(chartConfig);String message = $"Hello, please see the chart below:<br><br><img src=\"{chartUrl}\">"
Now that we've constructed our email body, all we need to do is send the email. This part is easy if you're using a third-party email API. Here's an example using Sendgrid C#:
var apiKey = "your_api_key_here";var client = new SendGridClient(apiKey);var msg = new SendGridMessage(){    From = new EmailAddress("[email protected]", "My Name"),    Subject = "Chart Report Update",    HtmlContent = message};msg.AddTo(new EmailAddress("[email protected]", "Recipient Name"));var response = await client.SendEmailAsync(msg).ConfigureAwait(false);
Email charts with PHP​
To get started with sending chart emails in PHP, build a simple JSON object that defines your chart. Here's a simple example:
$chartConfig = '{  "type": "bar",  "data": {    "labels": [2012, 2013, 2014, 2015, 2016],    "datasets": [{      "label": "Users",      "data": [120, 60, 50, 180, 120]    }]  }}';
This is a static example, but let's suppose you wanted to fill your data object automatically using the contents of an array. It might look something like this:
$data = array(120, 60, 50, 180, 120);$chartConfig = '{  "type": "bar",  "data": {    "labels": [2012, 2013, 2014, 2015, 2016],    "datasets": [{      "label": "Users",      "data": [' . implode(',', $data) . ']    }]  }}';
You can even build the whole thing as a nested PHP array and get the string using json_encode:
$chartConfigArr = array(  'type' => 'bar',  'data' => array(    'labels' => array(2012, 2013, 2014, 2015, 2016),    'datasets' => array(      array(        'label' => 'Users',        'data' => array(120, 60, 50, 180, 120),      )    )  ));$chartConfig = json_encode($chartConfigArr);
Once you have a chart configuration that you're happy with, we are ready to render it as an image. This creates a chart with width of 500 pixels and height of 300 pixels:
$chartUrl = 'https://quickchart.io/chart?w=500&h=300&c=' . urlencode($chartConfig);
We just need to take this URL and include it as an image tag in our email. Here's an example using the PHP Sendgrid library:
$email = new \SendGrid\Mail\Mail();$email->setFrom("[email protected]", "From User");$email->setSubject("Chart Report Update");$email->addTo("[email protected]", "Recipient User");$email->addContent(    "text/html", "Please see the chart below:<br><br><img src=\"$chartUrl\">");$sendgrid = new \SendGrid('your_api_key_here');try {    $response = $sendgrid->send($email);    print $response->statusCode() . "\n";    print_r($response->headers());    print $response->body() . "\n";} catch (Exception $e) {    echo 'Caught exception: ',  $e->getMessage(), "\n";}
Email charts with Ruby​
In order to generate a chart image that can be emailed in Ruby, we must construct the chart JSON.
You can do this by creating a Chart.js config string directly:
chart_config = '{  "type": "bar",  "data": {    "labels": [2012, 2013, 2014, 2015, 2016],    "datasets": [{      "label": "Users",      "data": [120, 60, 50, 180, 120]    }]  }}'
Or you can construct it as JSON using a Ruby hash:
require 'json'raw_config = {  'type': 'bar',  'data': {    'labels': [2012, 2013, 2014, 2015, 2016],    'datasets': [{      'label': 'Users',      'data': [120, 60, 50, 180, 120]    }]  }}chart_config = JSON[raw_config]
Now, we can take this config, encode it into a chart URL, and build our email message:
require 'cgi'chart_url = 'https://quickchart.io/chart?w=500&h=300&c=' + (CGI.escape chart_config)email_message = "Hello, please see the chart below:<br><br><img src=\"#{chart_url}\">"
Then, send the chart image in the email body using the Sendgrid Ruby gem (or any other method of sending email in Ruby):
require 'sendgrid-ruby'include SendGridfrom = Email.new(email: '[email protected]')to = Email.new(email: '[email protected]')subject = 'Chart Report Update'content = Content.new(type: 'text/html', value: email_message)mail = Mail.new(from, subject, to, content)sg = SendGrid::API.new(api_key: 'your_sendgrid_api_key_here')response = sg.client.mail._('send').post(request_body: mail.to_json)puts response.status_codeputs response.bodyputs response.headers
Advanced features​
The process of building a chart image via URL is quite straightforward, but there are many ways to customize your chart. For starters, you can use the Chart.js configuration to make many other types of charts: line graphs, pie charts, mixed charts, and more.
If you're creating more complex charts, consider generating a short URL for your chart so you don't have to pack everything into the image tag.
You can also use a variety of Chart.js plugins to add more customizations annotating your chart images.
For more advanced usage and many other chart types and customization, view the documentation.
There are many ways to make your chart stand out in an email
Need help?​
If you have questions or need help with your chart rendering, please reach out in our community or via email.
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:emailpythonjavascriptjavacsharpphprubyEdit this page\n\nOn this pageHow to create and send charts in email


Email is a ubiquitous format, but it comes with limitations. Mail clients like Gmail and Outlook remove Javascript, SVG, and other alternatives. This means in order to include a chart or graph in email, you must render it as an image.
This tutorial explains how to use the open-source QuickChart project to display a simple bar chart in the body of an email.
Normally, rendering dynamic charts at scale is resource-intensive, requiring a server render farm, headless browsers, and other configuration.
Production infrastructure for chart rendering
We will remove this complexity by using a service that renders graphs for us. A specially constructed URL sent to the QuickChart API will return a chart image. Because it's just a matter of building a URL, it's easy to do in your existing programming environment.
By changing the URL, you can make the chart dynamic. The API is built on Chart.js, the most popular frontend charts library, which means it's very easy to customize your chart.
A simple chart in an email
Render the chart image​
The main QuickChart endpoint is https://quickchart.io/chart. Use this as the base URL, then add some query parameters:

chart: The Chart.js object (required). Check out the Chart.js docs for many different chart types and customization options and use the sandbox editor to test out your configs.
width: Width of chart in pixels (optional)
height: Height of chart in pixels (optional)
devicePixelRatio: Ratio between physical pixels and logical pixels. Defaults to 2.0 for retina support (optional)
View more parameters in the documentation

Let's suppose you built your Chart.js config and it looks like this:
{  type: 'bar',  data: {    labels: [2012, 2013, 2014, 2015, 2016],    datasets: [{      label: 'Users',      data: [120, 60, 50, 180, 120]    }]  }}
As you can see, we're building a graph of users from 2012 through 2016. You can preview this graph by pasting the config into the testing sandbox.
Take the Chart.js config and put it into the main endpoint URL:
https://quickchart.io/chart?c={type:'bar',data:{labels:[2012,2013,2014,2015,2016],datasets:[{label:'Users',data:[120,60,50,180,120]}]}}
This URL will render the chart when your browser loads it. To include it in an email, all we need to do is put the URL in an image tag:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:[2012,2013,2014,2015,2016],datasets:[{label:'Users',data:[120,60,50,180,120]}]}} />
This displays the chart image, like so:

You can safely embed this chart directly in your email. It doesn't require any Javascript, and any email client like Gmail or Outlook will display your chart.
Email a chart in any programming language​
Because a chart is just defined by its URL, you may construct a QuickChart URL in any programming language. Follow the instructions above to build your chart configuration, then put it in an <img> tag in your email.
This lightweight approach avoids third-party dependencies. That said, QuickChart has published libraries for a few languages. See the most up-to-date list here. We've also included many examples below.
Once you've generated the chart, you can use any existing email service (such as Mailgun or Sendgrid) to send an email.
For more advanced chart use cases, you may use your language's HTTP library in order to generate short URLs for your chart.
Email charts with Python​
Here's how to use Python to generate and email charts. First, build your Chart.js config. In this example, we'll display a simple bar graph:
chart_config = {  'type': 'bar',  'data': {    'labels': ['Week 1', 'Week 2', 'Week 3', 'Week 4'],    'datasets': [{      'label': 'Retweets',      'data': [12, 5, 40, 5]    }, {      'label': 'Likes',      'data': [80, 42, 215, 30]    }]  }}))
Now, let's build our email message as a string. In order to build the image chart URL, we'll convert the chart config to JSON and URL encode it.
import jsonfrom urllib.parse import quoteencoded_config = quote(json.dumps(chart_config))chart_url = f'https://quickchart.io/chart?c={encoded_config}'email_message = f"""Hello, this is my email body containing a chart image. Please see the chart below:<br><br><img src="{chart_url}" />"""
Note that you can also use the quickchart-python library to build your chart and generate its image URL.
Now that we have created the email body, the next step is to decide how we want to send the email. You can do this using any method that's already available to you in Python, whether it's using your own SMTP server, Gmail, or an email-sending service like Mailgun or Sendgrid.
To finish it off, let's just use the Mailgun API:
import requestsrequest_url = f'https://api.mailgun.net/v2/{DOMAIN}/messages'request = requests.post(request_url, auth=('api', 'your_api_key_here'), data={    'from': '[email protected]',    'to': '[email protected]',    'subject': 'Updated Chart Report with Mailgun',    'html': email_message,})print(f'Status: {request.status_code}')print(f'Body:   {request.text}')
Or using Sendgrid's Python library:
from sendgrid import SendGridAPIClientfrom sendgrid.helpers.mail import Mailmessage = Mail(    from_email='[email protected]',    to_emails='[email protected]',    subject='Updated Chart Report with Sendgrid',    html_content=email_message)try:    sg = SendGridAPIClient('your_api_key_here')    response = sg.send(message)    print(response.status_code)    print(response.body)    print(response.headers)except Exception as e:    print(e.message)
Email charts with Javascript/Node.js​
Sending charts using Javascript or node.js is straightforward. You can either build the URL as described above, or npm install quickchart-js.
Use the library like so. First, generate the URL for your chart image and build your email message:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: { labels: ['Hello world', 'Foo bar'], datasets: [{ label: 'Foo', data: [1, 2] }] },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');const chartImageUrl = myChart.getUrl();const message = `Hello, please see the chart below:<br><br><img src="${chartImageUrl}" />`;
Then, send the email with Mailgun or some other preferred email library:
const mailgunGenerator = require('mailgun-js');const mailgun = mailgunGenerator({  apiKey: 'abc123',  domain: 'xyz.com',});const data = {  from: '[email protected]',  to: '[email protected]',  subject: 'Updated Chart Report',  html: message,};mailgun.messages().send(data, (err, body) => {  console.log(body);});
Here's the Sendgrid equivalent:
const sgMail = require('@sendgrid/mail');sgMail.setApiKey('your_api_key_here');const msg = {  to: '[email protected]',  from: '[email protected]',  subject: 'Updated Chart Report',  html: message,};sgMail.send(msg);
Email charts with Java​
In order to email a chart with Java, first create a string containing our Chart.js config.
You can build this JSON string dynamically if you'd like - use normal string manipulation and concatenation to substitute your data. Here's a simple example of a Chart.js config with some hardcoded values:
String chartConfig = "{" +  "\"type\": \"bar\"," +  "\"data\": {" +    "\"labels\": [2012, 2013, 2014, 2015, 2016]," +    "\"datasets\": [{" +      "\"label\": \"Users\"," +      "\"data\": [120, 60, 50, 180, 120]" +    "}]" +  "}" +"}";
Suppose we wanted to replace the data with dynamic values from an array. Here's one approach:
String chartConfigTemplate = "{" +  "\"type\": \"bar\"," +  "\"data\": {" +    "\"labels\": [2012, 2013, 2014, 2015, 2016]," +    "\"datasets\": [{" +      "\"label\": \"Users\"," +      "\"data\": [ %DATA_VALUES% ]" +    "}]" +  "}" +"}";ArrayList<Integer> values = new ArrayList<Integer>();values.add(120);values.add(60);values.add(50);values.add(180);values.add(120);String chartConfig =    chartConfigTemplate.replace("%DATA_VALUES%", values.toString());
You can also build the JSON completely dynamically using org.json or a similar library.
Now that we have our chart config, pack this into the QuickChart API URL. We use java.net.URLEncoder:
String chartUrl =    "https://quickchart.io/chart?width=500&height=200&chart=" +    URLEncoder.encode(chartConfig, StandardCharsets.UTF_8);String message =    "Hello, please see the chart below:<br><br><img src=\"" + chartUrl + "\">";
That's it for generating the chart. Now all we need to do is send the chart image in the body of the email:
import com.mashape.unirest.http.HttpResponse;import com.mashape.unirest.http.JsonNode;import com.mashape.unirest.http.Unirest;import com.mashape.unirest.http.exceptions.UnirestException;public class MGSample {    public static JsonNode sendSimpleMessage() throws UnirestException {        // ... Generate the chart image        // Send the email        HttpResponse<JsonNode> request = Unirest.post("https://api.mailgun.net/v3/" + YOUR_DOMAIN_NAME + "/messages")            .basicAuth("api", API_KEY)            .field("from", "Bob Smith <[email protected]>")            .field("to", "[email protected]")            .field("subject", "Chart Report")            .field("html", message)            .asJson();        return request.getBody();    }}
See here for the equivalent Java Sendgrid example.
Email charts with C#​
To email a chart in C#, first we create our Chart.js config. Basic chart configs are JSON, so you can use any method of creating JSON objects in C# that you prefer. In this case, we'll just put the config directly in our source code:
String chartConfig = @"{  ""type"": ""bar"",  ""data"": {    ""labels"": [2012, 2013, 2014, 2015, 2016],    ""datasets"": [{      ""label"": ""Users"",      ""data"": [120, 60, 50, 180, 120]    }]  }}";
Next, put this chart config object in the QuickChart API URL and build our message:
String chartUrl = "https://quickchart.io/chart?width=500&height=200&chart=" + Uri.EscapeDataString(chartConfig);String message = $"Hello, please see the chart below:<br><br><img src=\"{chartUrl}\">"
Now that we've constructed our email body, all we need to do is send the email. This part is easy if you're using a third-party email API. Here's an example using Sendgrid C#:
var apiKey = "your_api_key_here";var client = new SendGridClient(apiKey);var msg = new SendGridMessage(){    From = new EmailAddress("[email protected]", "My Name"),    Subject = "Chart Report Update",    HtmlContent = message};msg.AddTo(new EmailAddress("[email protected]", "Recipient Name"));var response = await client.SendEmailAsync(msg).ConfigureAwait(false);
Email charts with PHP​
To get started with sending chart emails in PHP, build a simple JSON object that defines your chart. Here's a simple example:
$chartConfig = '{  "type": "bar",  "data": {    "labels": [2012, 2013, 2014, 2015, 2016],    "datasets": [{      "label": "Users",      "data": [120, 60, 50, 180, 120]    }]  }}';
This is a static example, but let's suppose you wanted to fill your data object automatically using the contents of an array. It might look something like this:
$data = array(120, 60, 50, 180, 120);$chartConfig = '{  "type": "bar",  "data": {    "labels": [2012, 2013, 2014, 2015, 2016],    "datasets": [{      "label": "Users",      "data": [' . implode(',', $data) . ']    }]  }}';
You can even build the whole thing as a nested PHP array and get the string using json_encode:
$chartConfigArr = array(  'type' => 'bar',  'data' => array(    'labels' => array(2012, 2013, 2014, 2015, 2016),    'datasets' => array(      array(        'label' => 'Users',        'data' => array(120, 60, 50, 180, 120),      )    )  ));$chartConfig = json_encode($chartConfigArr);
Once you have a chart configuration that you're happy with, we are ready to render it as an image. This creates a chart with width of 500 pixels and height of 300 pixels:
$chartUrl = 'https://quickchart.io/chart?w=500&h=300&c=' . urlencode($chartConfig);
We just need to take this URL and include it as an image tag in our email. Here's an example using the PHP Sendgrid library:
$email = new \SendGrid\Mail\Mail();$email->setFrom("[email protected]", "From User");$email->setSubject("Chart Report Update");$email->addTo("[email protected]", "Recipient User");$email->addContent(    "text/html", "Please see the chart below:<br><br><img src=\"$chartUrl\">");$sendgrid = new \SendGrid('your_api_key_here');try {    $response = $sendgrid->send($email);    print $response->statusCode() . "\n";    print_r($response->headers());    print $response->body() . "\n";} catch (Exception $e) {    echo 'Caught exception: ',  $e->getMessage(), "\n";}
Email charts with Ruby​
In order to generate a chart image that can be emailed in Ruby, we must construct the chart JSON.
You can do this by creating a Chart.js config string directly:
chart_config = '{  "type": "bar",  "data": {    "labels": [2012, 2013, 2014, 2015, 2016],    "datasets": [{      "label": "Users",      "data": [120, 60, 50, 180, 120]    }]  }}'
Or you can construct it as JSON using a Ruby hash:
require 'json'raw_config = {  'type': 'bar',  'data': {    'labels': [2012, 2013, 2014, 2015, 2016],    'datasets': [{      'label': 'Users',      'data': [120, 60, 50, 180, 120]    }]  }}chart_config = JSON[raw_config]
Now, we can take this config, encode it into a chart URL, and build our email message:
require 'cgi'chart_url = 'https://quickchart.io/chart?w=500&h=300&c=' + (CGI.escape chart_config)email_message = "Hello, please see the chart below:<br><br><img src=\"#{chart_url}\">"
Then, send the chart image in the email body using the Sendgrid Ruby gem (or any other method of sending email in Ruby):
require 'sendgrid-ruby'include SendGridfrom = Email.new(email: '[email protected]')to = Email.new(email: '[email protected]')subject = 'Chart Report Update'content = Content.new(type: 'text/html', value: email_message)mail = Mail.new(from, subject, to, content)sg = SendGrid::API.new(api_key: 'your_sendgrid_api_key_here')response = sg.client.mail._('send').post(request_body: mail.to_json)puts response.status_codeputs response.bodyputs response.headers
Advanced features​
The process of building a chart image via URL is quite straightforward, but there are many ways to customize your chart. For starters, you can use the Chart.js configuration to make many other types of charts: line graphs, pie charts, mixed charts, and more.
If you're creating more complex charts, consider generating a short URL for your chart so you don't have to pack everything into the image tag.
You can also use a variety of Chart.js plugins to add more customizations annotating your chart images.
For more advanced usage and many other chart types and customization, view the documentation.
There are many ways to make your chart stand out in an email
Need help?​
If you have questions or need help with your chart rendering, please reach out in our community or via email.
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:emailpythonjavascriptjavacsharpphprubyEdit this pagePreviousRetina supportNextUsing Chart.js in emailsRender the chart imageEmail a chart in any programming languageEmail charts with PythonEmail charts with Javascript/Node.jsEmail charts with JavaEmail charts with C#Email charts with PHPEmail charts with RubyAdvanced featuresNeed help?\n\nchart_url\n\n\n\nOn this pageQR Code API
QuickChart supports QR code generation. Generate a QR code like this:
https://quickchart.io/qr?text=Here's my text

QR code parameters​
Build your customized QR code using the following query parameters. You may also use the web-based QR code builder.
Parameter NameDescriptionRequired?Default valuetextContent of the QR code (can be a URL or any other string)YesformatFormat of QR code, either png, svg, or base64pngmarginWhitespace around QR image4sizeWidth and height dimension of the image150darkHex color code of "dark" QR grid cells000000 (black)lightHex color code of "light" QR grid cellsffffff (white)ecLevelError correction level (L, M, Q, H)M (H if center image is present)centerImageUrlURL of image to show in the center. Must be URL-encoded.centerImageSizeRatioHow much space to take up, between 0.0 and 1.00.3centerImageWidthWidth of center image in pixelscenterImageHeightHeight of center image in pixelscaptionCaption text to display below the QR code.captionFontFamilyFont family of the caption text'sans-serif'captionFontSizeFont size of the caption text in pixels.10captionFontColorColor caption text, color names or hex code.black
tipRemember to URL-encode the text parameter. Otherwise special characters
and symbols might not be included correctly (the QR builder
takes care of this automatically).
Customizing QR code appearance​
To customize the color of your QR code, use dark and light. The parameters must be hex color codes (e.g. dark=000000, light=ffffff). For a transparent background, set light to 0000.
Set the whitespace around QR image in modules with query parameter margin (defaults to 4), size determines the pixel dimensions of the image (defaults to 150), and error correction level with ecLevel (valid values: L, M, Q, H).
The QR endpoint produces a PNG image by default. You may optionally set the query parameter format=svg for SVG format.
Here's the same code as above but URL encoded with slimmer margins, more error protection, colors, and in SVG format:
https://quickchart.io/qr?text=Here's%20my%20text&dark=f00&light=0ff&ecLevel=Q&format=svg

Use our interactive QR code generator to preview API behavior and test things out. You may also be interested in how to generate QR codes in a spreadsheet.
Images in QR codes​
You may include an image centered in your QR code by using the centerImageUrl parameter. Note that the URL must be URL-encoded. PNG and JPG images are supported.
For example:
https://quickchart.io/qr?text=Here's my text&centerImageUrl=https://cdn-icons-png.flaticon.com/512/1389/1389234.png

To set width/height, use centerImageSizeRatio. This ratio should be a float between 0 and 1. It determines how much space the center image takes up.
https://quickchart.io/qr?text=Here's my text&centerImageUrl=https://cdn-icons-png.flaticon.com/512/1389/1389234.png&centerImageSizeRatio=0.75

Alternatively, you can specify width and height in pixels using centerImageWidth and centerImageHeight.
Note that the image URLs used in QR codes must be accessible on the public internet.  Base64 data URIs are also supported.
cautionYou should always test the QR code after overlaying an image. This is because an image can
potentially block critical portions of the QR code. You can guard against this by making sure the
image covers less than ~30% of the available area.
tipRemember to URL-encode the centerImageUrl parameter. Otherwise the URL
will not work correctly if it contains special characters (the QR
builder takes care of this automatically).
Text below QR code​
You can add a caption below your QR code by using the caption, captionFontFamily, and captionFontSize parameters. This allows for further customization and can be particularly useful for branding or providing additional context.
For example:
https://quickchart.io/qr?text=abc123&caption=TextBelowQr&captionFontFamily=mono&captionFontSize=20

Bulk QR code generator​
The API can generate bulk QR codes, but if you're looking to generate codes quickly, try our web-based bulk QR code generator.
Migrating from Google Image Charts​
Google Image Chart parameters such as cht, chs, and chl are supported by the API.
This means that to migrate, you only need to replace chart.googleapis.com with quickchart.io:
https://quickchart.io/chart?cht=qr&chs=150x150&chl=Testing123
Troubleshooting​
Parameters or Special Characters not working​
When creating QR codes with QuickChart, you may find that certain parameters, special characters, or parts of the URL are not correctly preserved when the QR code is scanned.
Root Cause​
This issue typically occurs when the URL or text content in the QR code is not properly URL-encoded within the QuickChart API call.
Solution: URL Encode the text or chl Parameter​
To resolve this issue, you need to URL encode the entire content that you're putting into the QR code. This applies to both the text parameter in the new API and the chl parameter if you're using the Google Image Charts compatible API.
Steps to URL Encode:​


Use a URL Encoding Tool:

Use an online URL encoder or a function in your programming language
Encode the full content of your QR code, including any special characters or parameters



Update Your QuickChart API Call:

Replace the unencoded content in your text or chl parameter with the encoded version



Example:​
Original content:
https://example.com/page?param1=value1&param2=value2
Encoded content (to be used in the 'text' or 'chl' parameter):
https%3A%2F%2Fexample.com%2Fpage%3Fparam1%3Dvalue1%26param2%3Dvalue2
Complete QuickChart API call with encoded content:
https://quickchart.io/qr?text=https%3A%2F%2Fexample.com%2Fpage%3Fparam1%3Dvalue1%26param2%3Dvalue2Edit this page\n\nOn this pageQR Code API
QuickChart supports QR code generation. Generate a QR code like this:
https://quickchart.io/qr?text=Here's my text

QR code parameters​
Build your customized QR code using the following query parameters. You may also use the web-based QR code builder.
Parameter NameDescriptionRequired?Default valuetextContent of the QR code (can be a URL or any other string)YesformatFormat of QR code, either png, svg, or base64pngmarginWhitespace around QR image4sizeWidth and height dimension of the image150darkHex color code of "dark" QR grid cells000000 (black)lightHex color code of "light" QR grid cellsffffff (white)ecLevelError correction level (L, M, Q, H)M (H if center image is present)centerImageUrlURL of image to show in the center. Must be URL-encoded.centerImageSizeRatioHow much space to take up, between 0.0 and 1.00.3centerImageWidthWidth of center image in pixelscenterImageHeightHeight of center image in pixelscaptionCaption text to display below the QR code.captionFontFamilyFont family of the caption text'sans-serif'captionFontSizeFont size of the caption text in pixels.10captionFontColorColor caption text, color names or hex code.black
tipRemember to URL-encode the text parameter. Otherwise special characters
and symbols might not be included correctly (the QR builder
takes care of this automatically).
Customizing QR code appearance​
To customize the color of your QR code, use dark and light. The parameters must be hex color codes (e.g. dark=000000, light=ffffff). For a transparent background, set light to 0000.
Set the whitespace around QR image in modules with query parameter margin (defaults to 4), size determines the pixel dimensions of the image (defaults to 150), and error correction level with ecLevel (valid values: L, M, Q, H).
The QR endpoint produces a PNG image by default. You may optionally set the query parameter format=svg for SVG format.
Here's the same code as above but URL encoded with slimmer margins, more error protection, colors, and in SVG format:
https://quickchart.io/qr?text=Here's%20my%20text&dark=f00&light=0ff&ecLevel=Q&format=svg

Use our interactive QR code generator to preview API behavior and test things out. You may also be interested in how to generate QR codes in a spreadsheet.
Images in QR codes​
You may include an image centered in your QR code by using the centerImageUrl parameter. Note that the URL must be URL-encoded. PNG and JPG images are supported.
For example:
https://quickchart.io/qr?text=Here's my text&centerImageUrl=https://cdn-icons-png.flaticon.com/512/1389/1389234.png

To set width/height, use centerImageSizeRatio. This ratio should be a float between 0 and 1. It determines how much space the center image takes up.
https://quickchart.io/qr?text=Here's my text&centerImageUrl=https://cdn-icons-png.flaticon.com/512/1389/1389234.png&centerImageSizeRatio=0.75

Alternatively, you can specify width and height in pixels using centerImageWidth and centerImageHeight.
Note that the image URLs used in QR codes must be accessible on the public internet.  Base64 data URIs are also supported.
cautionYou should always test the QR code after overlaying an image. This is because an image can
potentially block critical portions of the QR code. You can guard against this by making sure the
image covers less than ~30% of the available area.
tipRemember to URL-encode the centerImageUrl parameter. Otherwise the URL
will not work correctly if it contains special characters (the QR
builder takes care of this automatically).
Text below QR code​
You can add a caption below your QR code by using the caption, captionFontFamily, and captionFontSize parameters. This allows for further customization and can be particularly useful for branding or providing additional context.
For example:
https://quickchart.io/qr?text=abc123&caption=TextBelowQr&captionFontFamily=mono&captionFontSize=20

Bulk QR code generator​
The API can generate bulk QR codes, but if you're looking to generate codes quickly, try our web-based bulk QR code generator.
Migrating from Google Image Charts​
Google Image Chart parameters such as cht, chs, and chl are supported by the API.
This means that to migrate, you only need to replace chart.googleapis.com with quickchart.io:
https://quickchart.io/chart?cht=qr&chs=150x150&chl=Testing123
Troubleshooting​
Parameters or Special Characters not working​
When creating QR codes with QuickChart, you may find that certain parameters, special characters, or parts of the URL are not correctly preserved when the QR code is scanned.
Root Cause​
This issue typically occurs when the URL or text content in the QR code is not properly URL-encoded within the QuickChart API call.
Solution: URL Encode the text or chl Parameter​
To resolve this issue, you need to URL encode the entire content that you're putting into the QR code. This applies to both the text parameter in the new API and the chl parameter if you're using the Google Image Charts compatible API.
Steps to URL Encode:​


Use a URL Encoding Tool:

Use an online URL encoder or a function in your programming language
Encode the full content of your QR code, including any special characters or parameters



Update Your QuickChart API Call:

Replace the unencoded content in your text or chl parameter with the encoded version



Example:​
Original content:
https://example.com/page?param1=value1&param2=value2
Encoded content (to be used in the 'text' or 'chl' parameter):
https%3A%2F%2Fexample.com%2Fpage%3Fparam1%3Dvalue1%26param2%3Dvalue2
Complete QuickChart API call with encoded content:
https://quickchart.io/qr?text=https%3A%2F%2Fexample.com%2Fpage%3Fparam1%3Dvalue1%26param2%3Dvalue2Edit this pagePreviousDoughnut chart size & rotationNextAnalyticsQR code parametersCustomizing QR code appearanceImages in QR codesText below QR codeBulk QR code generatorMigrating from Google Image ChartsTroubleshootingParameters or Special Characters not working\n\n\n\n📄️ AirtableQuickChart is an open-source project for rendering charts. Generated chart images can be embedded in static locations such as websites, emails, PDFs, chat services, and many other places.📄️ ThunkableThunkable has a great tutorial for using the Chart Maker to create no-code charts.📄️ Google SheetsQuickChart can render chart images based on the latest data from your spreadsheet. This post describes how to integrate Google Sheets as a data source for dynamic chart images.📄️ Google Apps ScriptQuickChart is a web service that allows you to generate chart images and embed them nearly anywhere.  You can use QuickChart from Google Apps Script in order to insert chart images in docs, spreadsheets, presentations, and more.🗃️ Google Image Charts2 items📄️ Make.comMake (formerly Integromat) is a platform that you can use to glue & script other platforms together.  QuickChart offers a powerful no-code integration with Make.📄️ SalesforceThis post describes how to use Apex components to display chart images in SalesForce. These chart images can be embedded in SalesForce or exported to other formats such as PDF.🗃️ Zapier1 items📄️ MJMLThis tutorial describes how to use mjml-chartjs, an open-source custom component for MJML that allows you to create responsive charts in your HTML emails.📄️ Crystal ReportsCreating QR codes in SAP Crystal Reports is a great way to provide interactive content in your reports, such as links to websites, product information, or contact details (vCards).📄️ AirtableQuickChart is an open-source project for rendering charts. Generated chart images can be embedded in static locations such as websites, emails, PDFs, chat services, and many other places.📄️ ThunkableThunkable has a great tutorial for using the Chart Maker to create no-code charts.📄️ Google SheetsQuickChart can render chart images based on the latest data from your spreadsheet. This post describes how to integrate Google Sheets as a data source for dynamic chart images.📄️ Google Apps ScriptQuickChart is a web service that allows you to generate chart images and embed them nearly anywhere.  You can use QuickChart from Google Apps Script in order to insert chart images in docs, spreadsheets, presentations, and more.🗃️ Google Image Charts2 items📄️ Make.comMake (formerly Integromat) is a platform that you can use to glue & script other platforms together.  QuickChart offers a powerful no-code integration with Make.📄️ SalesforceThis post describes how to use Apex components to display chart images in SalesForce. These chart images can be embedded in SalesForce or exported to other formats such as PDF.🗃️ Zapier1 items📄️ MJMLThis tutorial describes how to use mjml-chartjs, an open-source custom component for MJML that allows you to create responsive charts in your HTML emails.📄️ Crystal ReportsCreating QR codes in SAP Crystal Reports is a great way to provide interactive content in your reports, such as links to websites, product information, or contact details (vCards).\n\nIntegrations📄️ AirtableQuickChart is an open-source project for rendering charts. Generated chart images can be embedded in static locations such as websites, emails, PDFs, chat services, and many other places.📄️ ThunkableThunkable has a great tutorial for using the Chart Maker to create no-code charts.📄️ Google SheetsQuickChart can render chart images based on the latest data from your spreadsheet. This post describes how to integrate Google Sheets as a data source for dynamic chart images.📄️ Google Apps ScriptQuickChart is a web service that allows you to generate chart images and embed them nearly anywhere.  You can use QuickChart from Google Apps Script in order to insert chart images in docs, spreadsheets, presentations, and more.🗃️ Google Image Charts2 items📄️ Make.comMake (formerly Integromat) is a platform that you can use to glue & script other platforms together.  QuickChart offers a powerful no-code integration with Make.📄️ SalesforceThis post describes how to use Apex components to display chart images in SalesForce. These chart images can be embedded in SalesForce or exported to other formats such as PDF.🗃️ Zapier1 items📄️ MJMLThis tutorial describes how to use mjml-chartjs, an open-source custom component for MJML that allows you to create responsive charts in your HTML emails.📄️ Crystal ReportsCreating QR codes in SAP Crystal Reports is a great way to provide interactive content in your reports, such as links to websites, product information, or contact details (vCards).PreviousWiFi QR CodesNextAirtable\n\n\n\nOn this pageApex Charts server-side image renderingThis post describes our API for rendering Apex Charts as images. Use this method to render Apex Charts as images on the server-side.
This functionality is useful if you can't create the chart in a browser, for example if you intend to embed these charts in emails or PDF reports.
Apex Chart rendered to image using the QuickChart API.
Usage​
Rendering a chart is straightforward:

Create a Javascript/JSON Apex Charts configuration object.
URL-encode the configuration.
Send the configuration to the API endpoint.

API endpoint:
https://quickchart.io/apex-charts/render
Basic Usage:
https://quickchart.io/apex-charts/render?width=500&height=300&config={apex chart config...}
API parameters​
The following parameters are accepted by the render function:

config: Apex Charts configuration in Javascript or JSON format (required)
width: Image width in pixels. Defaults to 800.
height: Image height in pixels. If not specified, will default to golden ratio (roughly 16:10 aspect ratio).
apexChartsVersion: Which version of the Apex Charts library to use. If not specified, will default to the latest version.

Example​
Let's take a simple Apex Chart configuration:
{  chart: {    type: 'line'  },  series: [{    name: 'sales',    data: [31,40,35,50,49,60,70,91,125]  }],  xaxis: {    categories: [1991,1992,1993,1994,1995,1996,1997, 1998,1999]  }}
We send it as a config query parameter to the API endpoint:
https://quickchart.io/apex-charts/render?config={ chart: { type: 'line' }, series: [{ name: 'sales', data: [31,40,35,50,49,60,70,91,125] }], xaxis: { categories: [1991,1992,1993,1994,1995,1996,1997, 1998,1999] } }
If your chart contains special characters like # or %, you will have to URL encode it. Most programming languages have built-in URL encoding capabilities:
https://quickchart.io/apex-charts/render?config={%20chart:%20{%20type:%20%27line%27%20},%20series:%20[{%20name:%20%27sales%27,%20data:%20[31,40,35,50,49,60,70,91,125]%20}],%20xaxis:%20{%20categories:%20[1991,1992,1993,1994,1995,1996,1997,%201998,1999]%20}%20}
The above URL produces this image when loaded in the browser, email, chat apps, and other formats:

Here's a direct link to the image URL.
POST request​
For complex charts or larger charts, you'll want to send a POST request because URLs can get messy. POST the parameters to the endpoint in JSON format.
A request in Python would look like this:
resp = requests.post('https://quickchart.io/apex-charts/render', json={    'width': 600,    'height': 300,    'config': '{...}',})with open('chart.png', 'wb') as f:    f.write(resp.content)
Need help?​
Apex Charts is one of several chart formats that we support. Feel free to reach out about rendering charts.
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:apex chartsEdit this page\n\nOn this pageApex Charts server-side image renderingThis post describes our API for rendering Apex Charts as images. Use this method to render Apex Charts as images on the server-side.
This functionality is useful if you can't create the chart in a browser, for example if you intend to embed these charts in emails or PDF reports.
Apex Chart rendered to image using the QuickChart API.
Usage​
Rendering a chart is straightforward:

Create a Javascript/JSON Apex Charts configuration object.
URL-encode the configuration.
Send the configuration to the API endpoint.

API endpoint:
https://quickchart.io/apex-charts/render
Basic Usage:
https://quickchart.io/apex-charts/render?width=500&height=300&config={apex chart config...}
API parameters​
The following parameters are accepted by the render function:

config: Apex Charts configuration in Javascript or JSON format (required)
width: Image width in pixels. Defaults to 800.
height: Image height in pixels. If not specified, will default to golden ratio (roughly 16:10 aspect ratio).
apexChartsVersion: Which version of the Apex Charts library to use. If not specified, will default to the latest version.

Example​
Let's take a simple Apex Chart configuration:
{  chart: {    type: 'line'  },  series: [{    name: 'sales',    data: [31,40,35,50,49,60,70,91,125]  }],  xaxis: {    categories: [1991,1992,1993,1994,1995,1996,1997, 1998,1999]  }}
We send it as a config query parameter to the API endpoint:
https://quickchart.io/apex-charts/render?config={ chart: { type: 'line' }, series: [{ name: 'sales', data: [31,40,35,50,49,60,70,91,125] }], xaxis: { categories: [1991,1992,1993,1994,1995,1996,1997, 1998,1999] } }
If your chart contains special characters like # or %, you will have to URL encode it. Most programming languages have built-in URL encoding capabilities:
https://quickchart.io/apex-charts/render?config={%20chart:%20{%20type:%20%27line%27%20},%20series:%20[{%20name:%20%27sales%27,%20data:%20[31,40,35,50,49,60,70,91,125]%20}],%20xaxis:%20{%20categories:%20[1991,1992,1993,1994,1995,1996,1997,%201998,1999]%20}%20}
The above URL produces this image when loaded in the browser, email, chat apps, and other formats:

Here's a direct link to the image URL.
POST request​
For complex charts or larger charts, you'll want to send a POST request because URLs can get messy. POST the parameters to the endpoint in JSON format.
A request in Python would look like this:
resp = requests.post('https://quickchart.io/apex-charts/render', json={    'width': 600,    'height': 300,    'config': '{...}',})with open('chart.png', 'wb') as f:    f.write(resp.content)
Need help?​
Apex Charts is one of several chart formats that we support. Feel free to reach out about rendering charts.
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:apex chartsEdit this pagePreviousCrystal ReportsNextBarcodesUsageAPI parametersExamplePOST requestNeed help?\n\n\n\nOn this pageFAQ
How can I make my chart look like X?​
QuickChart uses the popular open-source Chart.js library, so you can use all Chart.js documentation and Chart.js-related search terms to answer questions on how to customize your chart. If you're stuck, feel free to ask in our community or email us.
Do I need a license to use QuickChart?​
Users of QuickChart's paid versions retain full copyright to images they generate. Charts generated by QuickChart's free version are public domain, meaning you are free to use them for any purpose.
If you'd like to fork the code, keep in mind this project is licensed under AGPLv3 and you should make your code public and retain the copyright notice. If you'd like to license QuickChart privately or commercially, or if you'd like help setting up a private instance, please get in touch.
Is this a suitable replacement for Google Image Charts?​
This service is a replacement for the Google Image Charts API, which turned off on March 14, 2019. QuickChart provides a drop-in replacement for Google Image Charts documented here.
QuickChart encourages the use of Chart.js format over the deprecated Google Image Charts format. Although Chart.js doesn't match exactly with the Google Image Charts API, it is a more flexible, general-purpose charting specification. Both Chart.js and QuickChart have strong open-source communities.
We encourage developers to choose a fully open-source solution over proprietary services in order to mitigate risk and future-proof their choice of API.
How reliable is QuickChart?​
This service (QuickChart.io) is widely used and generates over 300 million charts per month. It is hosted on a large cluster of redundant servers. There is a built-in rate limit of 60 charts/min (1 chart/sec) and 1,000 charts/month for free users.
If you want to adjust rate limits or need a Service-Level Agreement with uptime guarantees, purchase a license or get in touch.
See also the QuickChart status page, which monitors uptime.
How can I contribute?​
QuickChart is under active development. If you'd like to suggest a feature or modify QuickChart code, please open an issue or pull request on the QuickChart Github.Edit this page\n\nOn this pageFAQ
How can I make my chart look like X?​
QuickChart uses the popular open-source Chart.js library, so you can use all Chart.js documentation and Chart.js-related search terms to answer questions on how to customize your chart. If you're stuck, feel free to ask in our community or email us.
Do I need a license to use QuickChart?​
Users of QuickChart's paid versions retain full copyright to images they generate. Charts generated by QuickChart's free version are public domain, meaning you are free to use them for any purpose.
If you'd like to fork the code, keep in mind this project is licensed under AGPLv3 and you should make your code public and retain the copyright notice. If you'd like to license QuickChart privately or commercially, or if you'd like help setting up a private instance, please get in touch.
Is this a suitable replacement for Google Image Charts?​
This service is a replacement for the Google Image Charts API, which turned off on March 14, 2019. QuickChart provides a drop-in replacement for Google Image Charts documented here.
QuickChart encourages the use of Chart.js format over the deprecated Google Image Charts format. Although Chart.js doesn't match exactly with the Google Image Charts API, it is a more flexible, general-purpose charting specification. Both Chart.js and QuickChart have strong open-source communities.
We encourage developers to choose a fully open-source solution over proprietary services in order to mitigate risk and future-proof their choice of API.
How reliable is QuickChart?​
This service (QuickChart.io) is widely used and generates over 300 million charts per month. It is hosted on a large cluster of redundant servers. There is a built-in rate limit of 60 charts/min (1 chart/sec) and 1,000 charts/month for free users.
If you want to adjust rate limits or need a Service-Level Agreement with uptime guarantees, purchase a license or get in touch.
See also the QuickChart status page, which monitors uptime.
How can I contribute?​
QuickChart is under active development. If you'd like to suggest a feature or modify QuickChart code, please open an issue or pull request on the QuickChart Github.Edit this pagePreviousWord CloudsHow can I make my chart look like X?Do I need a license to use QuickChart?Is this a suitable replacement for Google Image Charts?How reliable is QuickChart?How can I contribute?\n\n\n\nOn this pageIntroduction


QuickChart is a web service that generates chart images on-the-fly. These images are suitable for embedding in email, SMS, chatbots, and other formats. Charts are rendered by Chart.js, a popular open-source charting library.
Getting started​
QuickChart works by taking Chart.js configurations and rendering them as images. You may send your chart configuration in JSON or Javascript format using a simple URL or through POST request.
For example, take this simple Chart.js configuration:
{  type: 'bar',                                // Show a bar chart  data: {    labels: [2012, 2013, 2014, 2015, 2016],   // Set X-axis labels    datasets: [{      label: 'Users',                         // Create the 'Users' dataset      data: [120, 60, 50, 180, 120]           // Add data to the chart    }]  }}
We'll pack the Chart.js object into the /chart URL endpoint:
https://quickchart.io/chart?c={type:'bar',data:{labels:[2012,2013,2014,2015, 2016],datasets:[{label:'Users',data:[120,60,50,180,120]}]}}
The URL generates this chart image, a rendering of the Chart.js config above:
Loading...
Try making adjustments to the example above!

Edit the chart and replacing bar with line or pie to get a different type of chart.
Change the legend labels.
Add another dataset to get a grouped bar chart.

Because QuickChart is built on open-source chart libraries, our charts are flexible and highly customizable. Keep on reading to learn more or view more chart examples.
Using the API​
The https://quickchart.io/chart endpoint supports both GET and POST methods. These parameters provide control over dimensions, resolution, background, and Chart.js version of your chart:
ParameterTypeDescriptionchartstringChart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.widthintegerWidth of image in pixels. Defaults to 500heightintegerHeight of image in pixels. Defaults to 300devicePixelRatiointegerDevice pixel ratio of output. Set to 1 for normal resolution, 2 for retina. Defaults to 2backgroundColorstringRGB, HEX, HSL, or color name. Defaults to transparentversionstringChart.js version. Default to 2. Setting to 4 enables latest stable Chart.js v4 support.formatstringpng, webp, svg, or pdf. Defaults to pngencodingstringurl or base64. Defaults to url
infoLearn more about API parameters and the POST
endpoint.
Customization​
Because QuickChart is built on the open-source Chart.js library, charts are flexible and highly customizable. To learn more, view our examples gallery or see the reference section to learn how to use Chart.js.
Loading...
QR codes​
To learn more about generating QR codes, follow this link.
Need help?​
If you have questions, please don't hesitate to ask in our community or send us a message.Edit this page\n\nOn this pageIntroduction


QuickChart is a web service that generates chart images on-the-fly. These images are suitable for embedding in email, SMS, chatbots, and other formats. Charts are rendered by Chart.js, a popular open-source charting library.
Getting started​
QuickChart works by taking Chart.js configurations and rendering them as images. You may send your chart configuration in JSON or Javascript format using a simple URL or through POST request.
For example, take this simple Chart.js configuration:
{  type: 'bar',                                // Show a bar chart  data: {    labels: [2012, 2013, 2014, 2015, 2016],   // Set X-axis labels    datasets: [{      label: 'Users',                         // Create the 'Users' dataset      data: [120, 60, 50, 180, 120]           // Add data to the chart    }]  }}
We'll pack the Chart.js object into the /chart URL endpoint:
https://quickchart.io/chart?c={type:'bar',data:{labels:[2012,2013,2014,2015, 2016],datasets:[{label:'Users',data:[120,60,50,180,120]}]}}
The URL generates this chart image, a rendering of the Chart.js config above:
Loading...
Try making adjustments to the example above!

Edit the chart and replacing bar with line or pie to get a different type of chart.
Change the legend labels.
Add another dataset to get a grouped bar chart.

Because QuickChart is built on open-source chart libraries, our charts are flexible and highly customizable. Keep on reading to learn more or view more chart examples.
Using the API​
The https://quickchart.io/chart endpoint supports both GET and POST methods. These parameters provide control over dimensions, resolution, background, and Chart.js version of your chart:
ParameterTypeDescriptionchartstringChart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.widthintegerWidth of image in pixels. Defaults to 500heightintegerHeight of image in pixels. Defaults to 300devicePixelRatiointegerDevice pixel ratio of output. Set to 1 for normal resolution, 2 for retina. Defaults to 2backgroundColorstringRGB, HEX, HSL, or color name. Defaults to transparentversionstringChart.js version. Default to 2. Setting to 4 enables latest stable Chart.js v4 support.formatstringpng, webp, svg, or pdf. Defaults to pngencodingstringurl or base64. Defaults to url
infoLearn more about API parameters and the POST
endpoint.
Customization​
Because QuickChart is built on the open-source Chart.js library, charts are flexible and highly customizable. To learn more, view our examples gallery or see the reference section to learn how to use Chart.js.
Loading...
QR codes​
To learn more about generating QR codes, follow this link.
Need help?​
If you have questions, please don't hesitate to ask in our community or send us a message.Edit this pageNextAPI parametersGetting startedUsing the APICustomizationQR codesNeed help?\n\n\n\nOn this pageIntroduction


QuickChart is a web service that generates chart images on-the-fly. These images are suitable for embedding in email, SMS, chatbots, and other formats. Charts are rendered by Chart.js, a popular open-source charting library.
Getting started​
QuickChart works by taking Chart.js configurations and rendering them as images. You may send your chart configuration in JSON or Javascript format using a simple URL or through POST request.
For example, take this simple Chart.js configuration:
{  type: 'bar',                                // Show a bar chart  data: {    labels: [2012, 2013, 2014, 2015, 2016],   // Set X-axis labels    datasets: [{      label: 'Users',                         // Create the 'Users' dataset      data: [120, 60, 50, 180, 120]           // Add data to the chart    }]  }}
We'll pack the Chart.js object into the /chart URL endpoint:
https://quickchart.io/chart?c={type:'bar',data:{labels:[2012,2013,2014,2015, 2016],datasets:[{label:'Users',data:[120,60,50,180,120]}]}}
The URL generates this chart image, a rendering of the Chart.js config above:
Loading...
Try making adjustments to the example above!

Edit the chart and replacing bar with line or pie to get a different type of chart.
Change the legend labels.
Add another dataset to get a grouped bar chart.

Because QuickChart is built on open-source chart libraries, our charts are flexible and highly customizable. Keep on reading to learn more or view more chart examples.
Using the API​
The https://quickchart.io/chart endpoint supports both GET and POST methods. These parameters provide control over dimensions, resolution, background, and Chart.js version of your chart:
ParameterTypeDescriptionchartstringChart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.widthintegerWidth of image in pixels. Defaults to 500heightintegerHeight of image in pixels. Defaults to 300devicePixelRatiointegerDevice pixel ratio of output. Set to 1 for normal resolution, 2 for retina. Defaults to 2backgroundColorstringRGB, HEX, HSL, or color name. Defaults to transparentversionstringChart.js version. Default to 2. Setting to 4 enables latest stable Chart.js v4 support.formatstringpng, webp, svg, or pdf. Defaults to pngencodingstringurl or base64. Defaults to url
infoLearn more about API parameters and the POST
endpoint.
Customization​
Because QuickChart is built on the open-source Chart.js library, charts are flexible and highly customizable. To learn more, view our examples gallery or see the reference section to learn how to use Chart.js.
Loading...
QR codes​
To learn more about generating QR codes, follow this link.
Need help?​
If you have questions, please don't hesitate to ask in our community or send us a message.Edit this page\n\nOn this pageIntroduction


QuickChart is a web service that generates chart images on-the-fly. These images are suitable for embedding in email, SMS, chatbots, and other formats. Charts are rendered by Chart.js, a popular open-source charting library.
Getting started​
QuickChart works by taking Chart.js configurations and rendering them as images. You may send your chart configuration in JSON or Javascript format using a simple URL or through POST request.
For example, take this simple Chart.js configuration:
{  type: 'bar',                                // Show a bar chart  data: {    labels: [2012, 2013, 2014, 2015, 2016],   // Set X-axis labels    datasets: [{      label: 'Users',                         // Create the 'Users' dataset      data: [120, 60, 50, 180, 120]           // Add data to the chart    }]  }}
We'll pack the Chart.js object into the /chart URL endpoint:
https://quickchart.io/chart?c={type:'bar',data:{labels:[2012,2013,2014,2015, 2016],datasets:[{label:'Users',data:[120,60,50,180,120]}]}}
The URL generates this chart image, a rendering of the Chart.js config above:
Loading...
Try making adjustments to the example above!

Edit the chart and replacing bar with line or pie to get a different type of chart.
Change the legend labels.
Add another dataset to get a grouped bar chart.

Because QuickChart is built on open-source chart libraries, our charts are flexible and highly customizable. Keep on reading to learn more or view more chart examples.
Using the API​
The https://quickchart.io/chart endpoint supports both GET and POST methods. These parameters provide control over dimensions, resolution, background, and Chart.js version of your chart:
ParameterTypeDescriptionchartstringChart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.widthintegerWidth of image in pixels. Defaults to 500heightintegerHeight of image in pixels. Defaults to 300devicePixelRatiointegerDevice pixel ratio of output. Set to 1 for normal resolution, 2 for retina. Defaults to 2backgroundColorstringRGB, HEX, HSL, or color name. Defaults to transparentversionstringChart.js version. Default to 2. Setting to 4 enables latest stable Chart.js v4 support.formatstringpng, webp, svg, or pdf. Defaults to pngencodingstringurl or base64. Defaults to url
infoLearn more about API parameters and the POST
endpoint.
Customization​
Because QuickChart is built on the open-source Chart.js library, charts are flexible and highly customizable. To learn more, view our examples gallery or see the reference section to learn how to use Chart.js.
Loading...
QR codes​
To learn more about generating QR codes, follow this link.
Need help?​
If you have questions, please don't hesitate to ask in our community or send us a message.Edit this pageNextAPI parametersGetting startedUsing the APICustomizationQR codesNeed help?\n\n\n\nOn this pageIntroduction


QuickChart is a web service that generates chart images on-the-fly. These images are suitable for embedding in email, SMS, chatbots, and other formats. Charts are rendered by Chart.js, a popular open-source charting library.
Getting started​
QuickChart works by taking Chart.js configurations and rendering them as images. You may send your chart configuration in JSON or Javascript format using a simple URL or through POST request.
For example, take this simple Chart.js configuration:
{  type: 'bar',                                // Show a bar chart  data: {    labels: [2012, 2013, 2014, 2015, 2016],   // Set X-axis labels    datasets: [{      label: 'Users',                         // Create the 'Users' dataset      data: [120, 60, 50, 180, 120]           // Add data to the chart    }]  }}
We'll pack the Chart.js object into the /chart URL endpoint:
https://quickchart.io/chart?c={type:'bar',data:{labels:[2012,2013,2014,2015, 2016],datasets:[{label:'Users',data:[120,60,50,180,120]}]}}
The URL generates this chart image, a rendering of the Chart.js config above:
Loading...
Try making adjustments to the example above!

Edit the chart and replacing bar with line or pie to get a different type of chart.
Change the legend labels.
Add another dataset to get a grouped bar chart.

Because QuickChart is built on open-source chart libraries, our charts are flexible and highly customizable. Keep on reading to learn more or view more chart examples.
Using the API​
The https://quickchart.io/chart endpoint supports both GET and POST methods. These parameters provide control over dimensions, resolution, background, and Chart.js version of your chart:
ParameterTypeDescriptionchartstringChart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.widthintegerWidth of image in pixels. Defaults to 500heightintegerHeight of image in pixels. Defaults to 300devicePixelRatiointegerDevice pixel ratio of output. Set to 1 for normal resolution, 2 for retina. Defaults to 2backgroundColorstringRGB, HEX, HSL, or color name. Defaults to transparentversionstringChart.js version. Default to 2. Setting to 4 enables latest stable Chart.js v4 support.formatstringpng, webp, svg, or pdf. Defaults to pngencodingstringurl or base64. Defaults to url
infoLearn more about API parameters and the POST
endpoint.
Customization​
Because QuickChart is built on the open-source Chart.js library, charts are flexible and highly customizable. To learn more, view our examples gallery or see the reference section to learn how to use Chart.js.
Loading...
QR codes​
To learn more about generating QR codes, follow this link.
Need help?​
If you have questions, please don't hesitate to ask in our community or send us a message.Edit this page\n\nOn this pageIntroduction


QuickChart is a web service that generates chart images on-the-fly. These images are suitable for embedding in email, SMS, chatbots, and other formats. Charts are rendered by Chart.js, a popular open-source charting library.
Getting started​
QuickChart works by taking Chart.js configurations and rendering them as images. You may send your chart configuration in JSON or Javascript format using a simple URL or through POST request.
For example, take this simple Chart.js configuration:
{  type: 'bar',                                // Show a bar chart  data: {    labels: [2012, 2013, 2014, 2015, 2016],   // Set X-axis labels    datasets: [{      label: 'Users',                         // Create the 'Users' dataset      data: [120, 60, 50, 180, 120]           // Add data to the chart    }]  }}
We'll pack the Chart.js object into the /chart URL endpoint:
https://quickchart.io/chart?c={type:'bar',data:{labels:[2012,2013,2014,2015, 2016],datasets:[{label:'Users',data:[120,60,50,180,120]}]}}
The URL generates this chart image, a rendering of the Chart.js config above:
Loading...
Try making adjustments to the example above!

Edit the chart and replacing bar with line or pie to get a different type of chart.
Change the legend labels.
Add another dataset to get a grouped bar chart.

Because QuickChart is built on open-source chart libraries, our charts are flexible and highly customizable. Keep on reading to learn more or view more chart examples.
Using the API​
The https://quickchart.io/chart endpoint supports both GET and POST methods. These parameters provide control over dimensions, resolution, background, and Chart.js version of your chart:
ParameterTypeDescriptionchartstringChart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.widthintegerWidth of image in pixels. Defaults to 500heightintegerHeight of image in pixels. Defaults to 300devicePixelRatiointegerDevice pixel ratio of output. Set to 1 for normal resolution, 2 for retina. Defaults to 2backgroundColorstringRGB, HEX, HSL, or color name. Defaults to transparentversionstringChart.js version. Default to 2. Setting to 4 enables latest stable Chart.js v4 support.formatstringpng, webp, svg, or pdf. Defaults to pngencodingstringurl or base64. Defaults to url
infoLearn more about API parameters and the POST
endpoint.
Customization​
Because QuickChart is built on the open-source Chart.js library, charts are flexible and highly customizable. To learn more, view our examples gallery or see the reference section to learn how to use Chart.js.
Loading...
QR codes​
To learn more about generating QR codes, follow this link.
Need help?​
If you have questions, please don't hesitate to ask in our community or send us a message.Edit this pageNextAPI parametersGetting startedUsing the APICustomizationQR codesNeed help?\n\n\n\nOn this pageIntroduction


QuickChart is a web service that generates chart images on-the-fly. These images are suitable for embedding in email, SMS, chatbots, and other formats. Charts are rendered by Chart.js, a popular open-source charting library.
Getting started​
QuickChart works by taking Chart.js configurations and rendering them as images. You may send your chart configuration in JSON or Javascript format using a simple URL or through POST request.
For example, take this simple Chart.js configuration:
{  type: 'bar',                                // Show a bar chart  data: {    labels: [2012, 2013, 2014, 2015, 2016],   // Set X-axis labels    datasets: [{      label: 'Users',                         // Create the 'Users' dataset      data: [120, 60, 50, 180, 120]           // Add data to the chart    }]  }}
We'll pack the Chart.js object into the /chart URL endpoint:
https://quickchart.io/chart?c={type:'bar',data:{labels:[2012,2013,2014,2015, 2016],datasets:[{label:'Users',data:[120,60,50,180,120]}]}}
The URL generates this chart image, a rendering of the Chart.js config above:
Loading...
Try making adjustments to the example above!

Edit the chart and replacing bar with line or pie to get a different type of chart.
Change the legend labels.
Add another dataset to get a grouped bar chart.

Because QuickChart is built on open-source chart libraries, our charts are flexible and highly customizable. Keep on reading to learn more or view more chart examples.
Using the API​
The https://quickchart.io/chart endpoint supports both GET and POST methods. These parameters provide control over dimensions, resolution, background, and Chart.js version of your chart:
ParameterTypeDescriptionchartstringChart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.widthintegerWidth of image in pixels. Defaults to 500heightintegerHeight of image in pixels. Defaults to 300devicePixelRatiointegerDevice pixel ratio of output. Set to 1 for normal resolution, 2 for retina. Defaults to 2backgroundColorstringRGB, HEX, HSL, or color name. Defaults to transparentversionstringChart.js version. Default to 2. Setting to 4 enables latest stable Chart.js v4 support.formatstringpng, webp, svg, or pdf. Defaults to pngencodingstringurl or base64. Defaults to url
infoLearn more about API parameters and the POST
endpoint.
Customization​
Because QuickChart is built on the open-source Chart.js library, charts are flexible and highly customizable. To learn more, view our examples gallery or see the reference section to learn how to use Chart.js.
Loading...
QR codes​
To learn more about generating QR codes, follow this link.
Need help?​
If you have questions, please don't hesitate to ask in our community or send us a message.Edit this page\n\nOn this pageIntroduction


QuickChart is a web service that generates chart images on-the-fly. These images are suitable for embedding in email, SMS, chatbots, and other formats. Charts are rendered by Chart.js, a popular open-source charting library.
Getting started​
QuickChart works by taking Chart.js configurations and rendering them as images. You may send your chart configuration in JSON or Javascript format using a simple URL or through POST request.
For example, take this simple Chart.js configuration:
{  type: 'bar',                                // Show a bar chart  data: {    labels: [2012, 2013, 2014, 2015, 2016],   // Set X-axis labels    datasets: [{      label: 'Users',                         // Create the 'Users' dataset      data: [120, 60, 50, 180, 120]           // Add data to the chart    }]  }}
We'll pack the Chart.js object into the /chart URL endpoint:
https://quickchart.io/chart?c={type:'bar',data:{labels:[2012,2013,2014,2015, 2016],datasets:[{label:'Users',data:[120,60,50,180,120]}]}}
The URL generates this chart image, a rendering of the Chart.js config above:
Loading...
Try making adjustments to the example above!

Edit the chart and replacing bar with line or pie to get a different type of chart.
Change the legend labels.
Add another dataset to get a grouped bar chart.

Because QuickChart is built on open-source chart libraries, our charts are flexible and highly customizable. Keep on reading to learn more or view more chart examples.
Using the API​
The https://quickchart.io/chart endpoint supports both GET and POST methods. These parameters provide control over dimensions, resolution, background, and Chart.js version of your chart:
ParameterTypeDescriptionchartstringChart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.widthintegerWidth of image in pixels. Defaults to 500heightintegerHeight of image in pixels. Defaults to 300devicePixelRatiointegerDevice pixel ratio of output. Set to 1 for normal resolution, 2 for retina. Defaults to 2backgroundColorstringRGB, HEX, HSL, or color name. Defaults to transparentversionstringChart.js version. Default to 2. Setting to 4 enables latest stable Chart.js v4 support.formatstringpng, webp, svg, or pdf. Defaults to pngencodingstringurl or base64. Defaults to url
infoLearn more about API parameters and the POST
endpoint.
Customization​
Because QuickChart is built on the open-source Chart.js library, charts are flexible and highly customizable. To learn more, view our examples gallery or see the reference section to learn how to use Chart.js.
Loading...
QR codes​
To learn more about generating QR codes, follow this link.
Need help?​
If you have questions, please don't hesitate to ask in our community or send us a message.Edit this pageNextAPI parametersGetting startedUsing the APICustomizationQR codesNeed help?\n\n\n\nOn this pageIntroduction


QuickChart is a web service that generates chart images on-the-fly. These images are suitable for embedding in email, SMS, chatbots, and other formats. Charts are rendered by Chart.js, a popular open-source charting library.
Getting started​
QuickChart works by taking Chart.js configurations and rendering them as images. You may send your chart configuration in JSON or Javascript format using a simple URL or through POST request.
For example, take this simple Chart.js configuration:
{  type: 'bar',                                // Show a bar chart  data: {    labels: [2012, 2013, 2014, 2015, 2016],   // Set X-axis labels    datasets: [{      label: 'Users',                         // Create the 'Users' dataset      data: [120, 60, 50, 180, 120]           // Add data to the chart    }]  }}
We'll pack the Chart.js object into the /chart URL endpoint:
https://quickchart.io/chart?c={type:'bar',data:{labels:[2012,2013,2014,2015, 2016],datasets:[{label:'Users',data:[120,60,50,180,120]}]}}
The URL generates this chart image, a rendering of the Chart.js config above:
Loading...
Try making adjustments to the example above!

Edit the chart and replacing bar with line or pie to get a different type of chart.
Change the legend labels.
Add another dataset to get a grouped bar chart.

Because QuickChart is built on open-source chart libraries, our charts are flexible and highly customizable. Keep on reading to learn more or view more chart examples.
Using the API​
The https://quickchart.io/chart endpoint supports both GET and POST methods. These parameters provide control over dimensions, resolution, background, and Chart.js version of your chart:
ParameterTypeDescriptionchartstringChart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.widthintegerWidth of image in pixels. Defaults to 500heightintegerHeight of image in pixels. Defaults to 300devicePixelRatiointegerDevice pixel ratio of output. Set to 1 for normal resolution, 2 for retina. Defaults to 2backgroundColorstringRGB, HEX, HSL, or color name. Defaults to transparentversionstringChart.js version. Default to 2. Setting to 4 enables latest stable Chart.js v4 support.formatstringpng, webp, svg, or pdf. Defaults to pngencodingstringurl or base64. Defaults to url
infoLearn more about API parameters and the POST
endpoint.
Customization​
Because QuickChart is built on the open-source Chart.js library, charts are flexible and highly customizable. To learn more, view our examples gallery or see the reference section to learn how to use Chart.js.
Loading...
QR codes​
To learn more about generating QR codes, follow this link.
Need help?​
If you have questions, please don't hesitate to ask in our community or send us a message.Edit this page\n\nOn this pageIntroduction


QuickChart is a web service that generates chart images on-the-fly. These images are suitable for embedding in email, SMS, chatbots, and other formats. Charts are rendered by Chart.js, a popular open-source charting library.
Getting started​
QuickChart works by taking Chart.js configurations and rendering them as images. You may send your chart configuration in JSON or Javascript format using a simple URL or through POST request.
For example, take this simple Chart.js configuration:
{  type: 'bar',                                // Show a bar chart  data: {    labels: [2012, 2013, 2014, 2015, 2016],   // Set X-axis labels    datasets: [{      label: 'Users',                         // Create the 'Users' dataset      data: [120, 60, 50, 180, 120]           // Add data to the chart    }]  }}
We'll pack the Chart.js object into the /chart URL endpoint:
https://quickchart.io/chart?c={type:'bar',data:{labels:[2012,2013,2014,2015, 2016],datasets:[{label:'Users',data:[120,60,50,180,120]}]}}
The URL generates this chart image, a rendering of the Chart.js config above:
Loading...
Try making adjustments to the example above!

Edit the chart and replacing bar with line or pie to get a different type of chart.
Change the legend labels.
Add another dataset to get a grouped bar chart.

Because QuickChart is built on open-source chart libraries, our charts are flexible and highly customizable. Keep on reading to learn more or view more chart examples.
Using the API​
The https://quickchart.io/chart endpoint supports both GET and POST methods. These parameters provide control over dimensions, resolution, background, and Chart.js version of your chart:
ParameterTypeDescriptionchartstringChart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.widthintegerWidth of image in pixels. Defaults to 500heightintegerHeight of image in pixels. Defaults to 300devicePixelRatiointegerDevice pixel ratio of output. Set to 1 for normal resolution, 2 for retina. Defaults to 2backgroundColorstringRGB, HEX, HSL, or color name. Defaults to transparentversionstringChart.js version. Default to 2. Setting to 4 enables latest stable Chart.js v4 support.formatstringpng, webp, svg, or pdf. Defaults to pngencodingstringurl or base64. Defaults to url
infoLearn more about API parameters and the POST
endpoint.
Customization​
Because QuickChart is built on the open-source Chart.js library, charts are flexible and highly customizable. To learn more, view our examples gallery or see the reference section to learn how to use Chart.js.
Loading...
QR codes​
To learn more about generating QR codes, follow this link.
Need help?​
If you have questions, please don't hesitate to ask in our community or send us a message.Edit this pageNextAPI parametersGetting startedUsing the APICustomizationQR codesNeed help?\n\n\n\nPlease enable cookies.
    
      
        Email Protection
        You are unable to access this email address quickchart.io
      

      
        
          
            The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?
                    
                
              
            
          
        
      

      
  
    Cloudflare Ray ID: 93647534aaa22078
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nPlease enable cookies.\nEmail Protection
        You are unable to access this email address quickchart.io
      

      
        
          
            The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?
                    
                
              
            
          
        
      

      
  
    Cloudflare Ray ID: 93647534aaa22078
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nEmail Protection
        You are unable to access this email address quickchart.io\nYou are unable to access this email address quickchart.io\nYou are unable to access this email address\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.\nIf you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.\nsign up for Cloudflare\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?\nHow does Cloudflare protect email addresses on website from spammers?\nCan I sign up for Cloudflare?\nCan I sign up for Cloudflare?\nCloudflare Ray ID: 93647534aaa22078
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nCloudflare Ray ID: 93647534aaa22078
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nCloudflare Ray ID: 93647534aaa22078\nYour IP:
      Click to reveal
      20.39.61.197
      •\nPerformance & security by Cloudflare\nPerformance & security by\n\n\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nDocs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nThousands of developers and businesses use QuickChart
    
      
        ⚡ 4 billion+ images rendered
      
      
        📈 Flexible, custom charts
      
      
        
          ✅ Built on open standards
        
      
    
    
      
        
        Save time by rendering any Chart.js config - you don't need to learn a new chart format.
      
      
        
        Unlimited customization includes multiple axes, custom fonts, compound, gradient, patterned charts, retina support, and more.
      
      
        
        Open-source prevents vendor lock-in with closed APIs.\nThousands of developers and businesses use QuickChart
    
      
        ⚡ 4 billion+ images rendered
      
      
        📈 Flexible, custom charts
      
      
        
          ✅ Built on open standards
        
      
    
    
      
        
        Save time by rendering any Chart.js config - you don't need to learn a new chart format.
      
      
        
        Unlimited customization includes multiple axes, custom fonts, compound, gradient, patterned charts, retina support, and more.
      
      
        
        Open-source prevents vendor lock-in with closed APIs.\nThousands of developers and businesses use QuickChart\n⚡ 4 billion+ images rendered
      
      
        📈 Flexible, custom charts
      
      
        
          ✅ Built on open standards\n⚡ 4 billion+ images rendered\n⚡ 4 billion+ images rendered\n📈 Flexible, custom charts\n📈 Flexible, custom charts\n✅ Built on open standards\n✅ Built on open standards\nSave time by rendering any Chart.js config - you don't need to learn a new chart format.
      
      
        
        Unlimited customization includes multiple axes, custom fonts, compound, gradient, patterned charts, retina support, and more.
      
      
        
        Open-source prevents vendor lock-in with closed APIs.\nSave time by rendering any Chart.js config - you don't need to learn a new chart format.\nUnlimited customization includes multiple axes, custom fonts, compound, gradient, patterned charts, retina support, and more.\nUnlimited customization\nOpen-source prevents vendor lock-in with closed APIs.\nCommunity$0/month
        Professional$40/month
        EnterpriseContact Us
      
      
        License
        GNU AGPL v3 license
        Full commercial usage
        Full commercial usage
      
      
        Features
        Charts and QR codesNo watermarks
        
          All Community features
          Chart URL shortener
          Custom chart plugins
        
        
          All Professional features
          Custom fonts
          Custom chart backgrounds
          Custom domain
          On-prem option
        
      
      
        Limits
        Rate limit enforced
        100,00 images/month50,000 short URLs/monthNo rate limits
        Unlimited chartsUnlimited short URLsNo rate limits
      
      
        Network
        Variable latencyShared servers
        Low-latencyDedicated server cluster
        Worldwide CDNHigh-performance cluster
      
      
        Support
        Best-effort email support
        Priority support
        Dedicated account manager
      
      
        SLA
        None
        None
        QuickChart SLA
      
      
        
        No purchase required
        
          
            Select
          
        
        
          
            Contact Us
          
        
      
    
  
  
    
      If you're not happy with your subscription within 30 days, contact us for a full refund - no questions asked.  Cancellations after 30 days are prorated and granted immediately upon request.
    
    
      Credit cards are processed by Stripe and not stored on our servers.  You can also purchase with PayPal.\nCommunity$0/month
        Professional$40/month
        EnterpriseContact Us
      
      
        License
        GNU AGPL v3 license
        Full commercial usage
        Full commercial usage
      
      
        Features
        Charts and QR codesNo watermarks
        
          All Community features
          Chart URL shortener
          Custom chart plugins
        
        
          All Professional features
          Custom fonts
          Custom chart backgrounds
          Custom domain
          On-prem option
        
      
      
        Limits
        Rate limit enforced
        100,00 images/month50,000 short URLs/monthNo rate limits
        Unlimited chartsUnlimited short URLsNo rate limits
      
      
        Network
        Variable latencyShared servers
        Low-latencyDedicated server cluster
        Worldwide CDNHigh-performance cluster
      
      
        Support
        Best-effort email support
        Priority support
        Dedicated account manager
      
      
        SLA
        None
        None
        QuickChart SLA
      
      
        
        No purchase required
        
          
            Select
          
        
        
          
            Contact Us\nProfessional$40/month\nFull commercial usage\nFull commercial usage\nFull commercial usage\nFull commercial usage\nCharts and QR codesNo watermarks\nAll Community features
          Chart URL shortener
          Custom chart plugins\nAll Professional features
          Custom fonts
          Custom chart backgrounds
          Custom domain
          On-prem option\nCustom chart backgrounds\n100,00 images/month50,000 short URLs/monthNo rate limits\nUnlimited chartsUnlimited short URLsNo rate limits\nVariable latencyShared servers\nLow-latencyDedicated server cluster\nWorldwide CDNHigh-performance cluster\nBest-effort email support\nDedicated account manager\nDedicated account manager\nIf you're not happy with your subscription within 30 days, contact us for a full refund - no questions asked.  Cancellations after 30 days are prorated and granted immediately upon request.
    
    
      Credit cards are processed by Stripe and not stored on our servers.  You can also purchase with PayPal.\nIf you're not happy with your subscription within 30 days, contact us for a full refund - no questions asked.  Cancellations after 30 days are prorated and granted immediately upon request.\nCredit cards are processed by Stripe and not stored on our servers.  You can also purchase with PayPal.\nUsed by universities, hospitals, and Fortune Global 500 companies\nUsed by universities, hospitals, and Fortune Global 500 companies\nReliable & fast
    
      
        
          Chart rendering at scale can be surprisingly tricky.  Our render workloads are load balanced and cached in order to failover gracefully and speed up subsequent renders.
        
        
          We've scaled QuickChart so you don't have to.  The service is distributed across multiple cloud providers in datacenters around the world.
        
        
          View a speed benchmark or uptime history
        
      
      
        
      
    
  
  
    Build or buy?
    
      
        Cost tradeoff calculator
      
      
        
          Monthly server cost
          
        
      
      
        
          Hourly rate of labor
          
        
      
      
        
          Number of hours per month, averaged
          
        
      
    
    
      Cost: $140/month to build & maintain versus $40/month for a Professional license.
    
    
      If you're considering running your own rendering system, don't forget to plan for the following:
    
    
      Sandbox the chart renderer so that arbitrary Javascript cannot be executed. (72 hours of up-front time)
      Handle memory issues caused by concurrent requests and shared canvas objects. (36 hours of up-front time)
      Configure desired chart or QR code plugins. (16 hours of up-front time)
      Security patches and updates for the underlying native libraries. (8+ hours of monthly maintenance)
      Scale to meet hundreds or thousands of renders per second. (40 hours of up-front time, 8+ hours of monthly maintenance)
      Performance optimization and global distribution. (15 hours of up-front time, 4+ hours of monthly maintenance)
    
  
  
    About QuickChart
    
    Founded in 2015, QuickChart (Alioth LLC) provides tools for developers who want to create charts, graphs, and other data visualizations.  We are based in San Mateo, California.
    
      As software engineers and marketers, we built QuickChart because other chart services left much to be desired in terms of function and customization.  QuickChart was open-source from the beginning and it quickly became one of the most popular ways to provision a chart render API.
    
    Our aims at QuickChart are simple and straightforward:
    
    Best-in-class speed and reliability: Our engineers have experience scaling the world’s largest tech companies.  QuickChart customers will always be hosted on infrastructure that scales automatically and is carefully monitored.
    Secure and private: We ensure that your chart data is deleted as soon as it’s rendered.
    Open-source: Our open-source model is better for developers and the businesses they support. We actively contribute to the open data visualization community and avoid vendor lock-in and proprietary formats.
    
    Thanks for choosing QuickChart,
    
    
    
    Ian Webster, CEO
    
    
      
    
    [email protected]\nChart rendering at scale can be surprisingly tricky.  Our render workloads are load balanced and cached in order to failover gracefully and speed up subsequent renders.
        
        
          We've scaled QuickChart so you don't have to.  The service is distributed across multiple cloud providers in datacenters around the world.
        
        
          View a speed benchmark or uptime history\nChart rendering at scale can be surprisingly tricky.  Our render workloads are load balanced and cached in order to failover gracefully and speed up subsequent renders.
        
        
          We've scaled QuickChart so you don't have to.  The service is distributed across multiple cloud providers in datacenters around the world.
        
        
          View a speed benchmark or uptime history\nChart rendering at scale can be surprisingly tricky.  Our render workloads are load balanced and cached in order to failover gracefully and speed up subsequent renders.\nWe've scaled QuickChart so you don't have to.  The service is distributed across multiple cloud providers in datacenters around the world.\nView a speed benchmark or uptime history\nCost tradeoff calculator
      
      
        
          Monthly server cost
          
        
      
      
        
          Hourly rate of labor
          
        
      
      
        
          Number of hours per month, averaged\nCost tradeoff calculator\nNumber of hours per month, averaged\nCost: $140/month to build & maintain versus $40/month for a Professional license.\nIf you're considering running your own rendering system, don't forget to plan for the following:\nSandbox the chart renderer so that arbitrary Javascript cannot be executed. (72 hours of up-front time)\nHandle memory issues caused by concurrent requests and shared canvas objects. (36 hours of up-front time)\nConfigure desired chart or QR code plugins. (16 hours of up-front time)\nSecurity patches and updates for the underlying native libraries. (8+ hours of monthly maintenance)\nScale to meet hundreds or thousands of renders per second. (40 hours of up-front time, 8+ hours of monthly maintenance)\nPerformance optimization and global distribution. (15 hours of up-front time, 4+ hours of monthly maintenance)\nFounded in 2015, QuickChart (Alioth LLC) provides tools for developers who want to create charts, graphs, and other data visualizations.  We are based in San Mateo, California.\nSan Mateo, California\nAs software engineers and marketers, we built QuickChart because other chart services left much to be desired in terms of function and customization.  QuickChart was open-source from the beginning and it quickly became one of the most popular ways to provision a chart render API.\nOur aims at QuickChart are simple and straightforward:\nBest-in-class speed and reliability: Our engineers have experience scaling the world’s largest tech companies.  QuickChart customers will always be hosted on infrastructure that scales automatically and is carefully monitored.\nSecure and private: We ensure that your chart data is deleted as soon as it’s rendered.\nOpen-source: Our open-source model is better for developers and the businesses they support. We actively contribute to the open data visualization community and avoid vendor lock-in and proprietary formats.\nThanks for choosing QuickChart,\nIan Webster, CEO
    
    
      
    
    [email protected]\n© Alioth LLC
      ·
      Privacy & Compliance
      ·
      Terms of Service
      ·
      Contact
      
        Back to top\n© Alioth LLC
      ·
      Privacy
      ·
      Terms of Service
      ·
      Contact\n\n\nPlease enable cookies.
    
      
        Email Protection
        You are unable to access this email address quickchart.io
      

      
        
          
            The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?
                    
                
              
            
          
        
      

      
  
    Cloudflare Ray ID: 93647535ab8a2078
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nPlease enable cookies.\nEmail Protection
        You are unable to access this email address quickchart.io
      

      
        
          
            The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?
                    
                
              
            
          
        
      

      
  
    Cloudflare Ray ID: 93647535ab8a2078
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nEmail Protection
        You are unable to access this email address quickchart.io\nYou are unable to access this email address quickchart.io\nYou are unable to access this email address\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.\nIf you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.\nsign up for Cloudflare\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?\nHow does Cloudflare protect email addresses on website from spammers?\nCan I sign up for Cloudflare?\nCan I sign up for Cloudflare?\nCloudflare Ray ID: 93647535ab8a2078
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nCloudflare Ray ID: 93647535ab8a2078
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nCloudflare Ray ID: 93647535ab8a2078\nYour IP:
      Click to reveal
      20.39.61.197
      •\nPerformance & security by Cloudflare\nPerformance & security by\n\n\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nDocs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nGenerate chart images with a simple, open API
      
        Add charts to emails, reports, and anywhere else.  Over 4 billion charts rendered for users around the world.
      
      
        Get started
        View hosted plans
      
    
    
      
        
          https://quickchart.io/chart?c={type:'bar',data:{labels:['Q1','Q2','Q3','Q4'], datasets:[{label:'Users',data:[50,60,70,180]},{label:'Revenue',data:[100,200,300,400]}]}}
        
      
      
        ⇣
      
      
        
          
            Edit chart\nGenerate chart images with a simple, open API
      
        Add charts to emails, reports, and anywhere else.  Over 4 billion charts rendered for users around the world.
      
      
        Get started
        View hosted plans
      
    
    
      
        
          https://quickchart.io/chart?c={type:'bar',data:{labels:['Q1','Q2','Q3','Q4'], datasets:[{label:'Users',data:[50,60,70,180]},{label:'Revenue',data:[100,200,300,400]}]}}
        
      
      
        ⇣
      
      
        
          
            Edit chart\nGenerate chart images with a simple, open API
      
        Add charts to emails, reports, and anywhere else.  Over 4 billion charts rendered for users around the world.
      
      
        Get started
        View hosted plans\nGenerate chart images with a simple, open API\nAdd charts to emails, reports, and anywhere else.  Over 4 billion charts rendered for users around the world.\nGet started
        View hosted plans\nhttps://quickchart.io/chart?c={type:'bar',data:{labels:['Q1','Q2','Q3','Q4'], datasets:[{label:'Users',data:[50,60,70,180]},{label:'Revenue',data:[100,200,300,400]}]}}
        
      
      
        ⇣
      
      
        
          
            Edit chart\nhttps://quickchart.io/chart?c={type:'bar',data:{labels:['Q1','Q2','Q3','Q4'], datasets:[{label:'Users',data:[50,60,70,180]},{label:'Revenue',data:[100,200,300,400]}]}}\n{type:'bar',data:{labels:['Q1','Q2','Q3','Q4'], datasets:[{label:'Users',data:[50,60,70,180]},{label:'Revenue',data:[100,200,300,400]}]}}\nTake your charts to new places
  
    
      
      Embed charts anywhere.  Our chart API generates chart images, QR codes, and more.
    
    
      
      Highly customizable.  We're built on Chart.js, the most popular open-source charting library.  We'll render any Chart.js configuration.
    
    
      
      Easy to use.
      Start by putting your Chart.js definition in a URL:
      https://quickchart.io/chart?c={your chart here}
    
    
      
      No-code support.
      Not technical? No problem. Design your chart using the Chart Maker, Zapier, or Make.
    
  
  
    Trusted by developers and marketers around the world\nTake your charts to new places\nEmbed charts anywhere.  Our chart API generates chart images, QR codes, and more.
    
    
      
      Highly customizable.  We're built on Chart.js, the most popular open-source charting library.  We'll render any Chart.js configuration.
    
    
      
      Easy to use.
      Start by putting your Chart.js definition in a URL:
      https://quickchart.io/chart?c={your chart here}
    
    
      
      No-code support.
      Not technical? No problem. Design your chart using the Chart Maker, Zapier, or Make.\nEmbed charts anywhere.  Our chart API generates chart images, QR codes, and more.\nHighly customizable.  We're built on Chart.js, the most popular open-source charting library.  We'll render any Chart.js configuration.\nEasy to use.
      Start by putting your Chart.js definition in a URL:
      https://quickchart.io/chart?c={your chart here}\nNo-code support.
      Not technical? No problem. Design your chart using the Chart Maker, Zapier, or Make.\nTrusted by developers and marketers around the world\nTrusted by developers and marketers around the world\nTry it yourself
    


  
    Live editor
    HTML
    Javascript
    Python
    C#
    Java
    Ruby
    PHP
    Go
    Other languages
    No-code ✨
  


  
  
    {
  type: 'bar',
  data: {
    labels: ['Q1', 'Q2', 'Q3', 'Q4'],
    datasets: [{
      label: 'Users',
      data: [50, 60, 70, 180]
    }, {
      label: 'Revenue',
      data: [100, 200, 300, 400]
    }]
  }
}
  
  
  
    
    
  




  
    Create chart images by concatenating URL parameters and embedding them in an image tag.  For example:
  
  
<img src="https://quickchart.io/chart?width=500&height=300&chart={type:'bar',data:{labels:['January','February', 'March','April', 'May'], datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}" />
  
  
    
      Learn more about URL parameters
    
  


Using quickchart-js:

const QuickChart = require('quickchart-js');const chart = new QuickChart();chart.setWidth(500)chart.setHeight(300);// Config can be set as string or as a Javascript objectchart.setConfig(`{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  }}`);// Print the chart URLconsole.log(chart.getUrl());// Get the image...const image = await chart.toBinary();// Or write it to a filechart.toFile('chart.png');


Using quickchart-python:

from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300# Config can be set as a string or as a nested dictqc.config = """{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  }}"""# You can get the chart URL...print(qc.get_url())# Get the image as a variable...image = qc.get_image()# Or write the chart to a fileqc.to_file('mychart.png')


Using quickchart-csharp:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Q1', 'Q2', 'Q3', 'Q4'],                datasets: [{                  label: 'Users',                  data: [50, 60, 70, 180]                }]              }            }";            // Get the URL            Console.WriteLine(qc.GetUrl());            // Or get the image            byte[] imageBytes = qc.ToByteArray();            // Or write it to a file            qc.ToFile("chart.png");        }    }}`;


Using quickchart-java:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("<chart config>");        // Print the chart image URL        System.out.println(chart.getUrl());        // Or get the image        byte[] imageBytes = chart.toByteArray();        // Or write it to disk        chart.toFile("chart.png");    }}


Using quickchart-ruby:
require 'quickchart'# Chart config can be set as a string or as a nested hashconfig = <<~EOS{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  }}EOSqc = QuickChart.new(config)# Print the chart URLputs qc.get_url# Get the imageimage = qc.to_blob# Or write it to a fileqc.to_file("chart.png")


Using quickchart-php:
require 'quickchart'$qc = new QuickChart(array(  'width': 500,  'height': 300,));// Chart config can be set as a string or as a nested array$config = <<<EOD{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  }}EOD;$qc->setConfig(config);// Print the chart URLecho $qc->getUrl();// Get the image$image = $qc->toBinary();// Or write it to a file$qc->toFile('chart.png')


Using quickchart-go:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";// Print the chart URLfmt.Println(qc.GetUrl());// Or write it to a filefile, err := os.Create("output.png")if err != nil {  panic(err)}defer file.Close()qc.Write(file)


  
    Because chart URLs are built by string concatenation, you can create a QuickChart URL in any programming language by building a URL string.  In most cases it is not necessary to use a library.
  
  
    See the API Parameters documentation to learn how to build a URL that renders a chart image.  If you need help, please reach out and we will help you implement in your preferred programming language.
  


  
    QuickChart's Chart Maker offers no-code support for generating dynamic charts in spreadsheets, Airtable, Bubble, AppSheet, Thunkable, and many other platforms.
  
  
    We also offer chart integrations with Zapier and Make.
  
  
    View the no-code chart tutorial\nTry it yourself
    


  
    Live editor
    HTML
    Javascript
    Python
    C#
    Java
    Ruby
    PHP
    Go
    Other languages
    No-code ✨
  


  
  
    {
  type: 'bar',
  data: {
    labels: ['Q1', 'Q2', 'Q3', 'Q4'],
    datasets: [{
      label: 'Users',
      data: [50, 60, 70, 180]
    }, {
      label: 'Revenue',
      data: [100, 200, 300, 400]
    }]
  }
}
  
  
  
    
    
  




  
    Create chart images by concatenating URL parameters and embedding them in an image tag.  For example:
  
  
<img src="https://quickchart.io/chart?width=500&height=300&chart={type:'bar',data:{labels:['January','February', 'March','April', 'May'], datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}" />
  
  
    
      Learn more about URL parameters
    
  


Using quickchart-js:

const QuickChart = require('quickchart-js');const chart = new QuickChart();chart.setWidth(500)chart.setHeight(300);// Config can be set as string or as a Javascript objectchart.setConfig(`{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  }}`);// Print the chart URLconsole.log(chart.getUrl());// Get the image...const image = await chart.toBinary();// Or write it to a filechart.toFile('chart.png');


Using quickchart-python:

from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300# Config can be set as a string or as a nested dictqc.config = """{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  }}"""# You can get the chart URL...print(qc.get_url())# Get the image as a variable...image = qc.get_image()# Or write the chart to a fileqc.to_file('mychart.png')


Using quickchart-csharp:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Q1', 'Q2', 'Q3', 'Q4'],                datasets: [{                  label: 'Users',                  data: [50, 60, 70, 180]                }]              }            }";            // Get the URL            Console.WriteLine(qc.GetUrl());            // Or get the image            byte[] imageBytes = qc.ToByteArray();            // Or write it to a file            qc.ToFile("chart.png");        }    }}`;


Using quickchart-java:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("<chart config>");        // Print the chart image URL        System.out.println(chart.getUrl());        // Or get the image        byte[] imageBytes = chart.toByteArray();        // Or write it to disk        chart.toFile("chart.png");    }}


Using quickchart-ruby:
require 'quickchart'# Chart config can be set as a string or as a nested hashconfig = <<~EOS{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  }}EOSqc = QuickChart.new(config)# Print the chart URLputs qc.get_url# Get the imageimage = qc.to_blob# Or write it to a fileqc.to_file("chart.png")


Using quickchart-php:
require 'quickchart'$qc = new QuickChart(array(  'width': 500,  'height': 300,));// Chart config can be set as a string or as a nested array$config = <<<EOD{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  }}EOD;$qc->setConfig(config);// Print the chart URLecho $qc->getUrl();// Get the image$image = $qc->toBinary();// Or write it to a file$qc->toFile('chart.png')


Using quickchart-go:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";// Print the chart URLfmt.Println(qc.GetUrl());// Or write it to a filefile, err := os.Create("output.png")if err != nil {  panic(err)}defer file.Close()qc.Write(file)


  
    Because chart URLs are built by string concatenation, you can create a QuickChart URL in any programming language by building a URL string.  In most cases it is not necessary to use a library.
  
  
    See the API Parameters documentation to learn how to build a URL that renders a chart image.  If you need help, please reach out and we will help you implement in your preferred programming language.
  


  
    QuickChart's Chart Maker offers no-code support for generating dynamic charts in spreadsheets, Airtable, Bubble, AppSheet, Thunkable, and many other platforms.
  
  
    We also offer chart integrations with Zapier and Make.
  
  
    View the no-code chart tutorial\nLive editor
    HTML
    Javascript
    Python
    C#
    Java
    Ruby
    PHP
    Go
    Other languages
    No-code ✨\n{
  type: 'bar',
  data: {
    labels: ['Q1', 'Q2', 'Q3', 'Q4'],
    datasets: [{
      label: 'Users',
      data: [50, 60, 70, 180]
    }, {
      label: 'Revenue',
      data: [100, 200, 300, 400]
    }]
  }
}\n{
  type: 'bar',
  data: {
    labels: ['Q1', 'Q2', 'Q3', 'Q4'],
    datasets: [{
      label: 'Users',
      data: [50, 60, 70, 180]
    }, {
      label: 'Revenue',
      data: [100, 200, 300, 400]
    }]
  }
}\n{
  type: 'bar',
  data: {
    labels: ['Q1', 'Q2', 'Q3', 'Q4'],
    datasets: [{
      label: 'Users',
      data: [50, 60, 70, 180]
    }, {
      label: 'Revenue',
      data: [100, 200, 300, 400]
    }]
  }
}\nCreate chart images by concatenating URL parameters and embedding them in an image tag.  For example:
  
  
<img src="https://quickchart.io/chart?width=500&height=300&chart={type:'bar',data:{labels:['January','February', 'March','April', 'May'], datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}" />
  
  
    
      Learn more about URL parameters\nCreate chart images by concatenating URL parameters and embedding them in an image tag.  For example:\nLearn more about URL parameters\nLearn more about URL parameters\nUsing quickchart-js:

const QuickChart = require('quickchart-js');const chart = new QuickChart();chart.setWidth(500)chart.setHeight(300);// Config can be set as string or as a Javascript objectchart.setConfig(`{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  }}`);// Print the chart URLconsole.log(chart.getUrl());// Get the image...const image = await chart.toBinary();// Or write it to a filechart.toFile('chart.png');\n// Config can be set as string or as a Javascript object\n`{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  }}`\n{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  }}\n// Print the chart URL\n// Or write it to a file\nUsing quickchart-python:

from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300# Config can be set as a string or as a nested dictqc.config = """{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  }}"""# You can get the chart URL...print(qc.get_url())# Get the image as a variable...image = qc.get_image()# Or write the chart to a fileqc.to_file('mychart.png')\n# Config can be set as a string or as a nested dict\n"""{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  }}"""\n# You can get the chart URL...\n# Get the image as a variable...\n# Or write the chart to a file\nUsing quickchart-csharp:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Q1', 'Q2', 'Q3', 'Q4'],                datasets: [{                  label: 'Users',                  data: [50, 60, 70, 180]                }]              }            }";            // Get the URL            Console.WriteLine(qc.GetUrl());            // Or get the image            byte[] imageBytes = qc.ToByteArray();            // Or write it to a file            qc.ToFile("chart.png");        }    }}`;\n@"{              type: 'bar',              data: {                labels: ['Q1', 'Q2', 'Q3', 'Q4'],                datasets: [{                  label: 'Users',                  data: [50, 60, 70, 180]                }]              }            }"\n// Or write it to a file\nUsing quickchart-java:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("<chart config>");        // Print the chart image URL        System.out.println(chart.getUrl());        // Or get the image        byte[] imageBytes = chart.toByteArray();        // Or write it to disk        chart.toFile("chart.png");    }}\n// Print the chart image URL\n// Or write it to disk\nUsing quickchart-ruby:
require 'quickchart'# Chart config can be set as a string or as a nested hashconfig = <<~EOS{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  }}EOSqc = QuickChart.new(config)# Print the chart URLputs qc.get_url# Get the imageimage = qc.to_blob# Or write it to a fileqc.to_file("chart.png")\n# Chart config can be set as a string or as a nested hash\n# Print the chart URL\n# Or write it to a file\nUsing quickchart-php:
require 'quickchart'$qc = new QuickChart(array(  'width': 500,  'height': 300,));// Chart config can be set as a string or as a nested array$config = <<<EOD{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  }}EOD;$qc->setConfig(config);// Print the chart URLecho $qc->getUrl();// Get the image$image = $qc->toBinary();// Or write it to a file$qc->toFile('chart.png')\n// Chart config can be set as a string or as a nested array\n<<<EOD{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  }}EOD;\n// Print the chart URL\n// Or write it to a file\nUsing quickchart-go:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";// Print the chart URLfmt.Println(qc.GetUrl());// Or write it to a filefile, err := os.Create("output.png")if err != nil {  panic(err)}defer file.Close()qc.Write(file)\n`{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`\n// Print the chart URL\n// Or write it to a file\nBecause chart URLs are built by string concatenation, you can create a QuickChart URL in any programming language by building a URL string.  In most cases it is not necessary to use a library.
  
  
    See the API Parameters documentation to learn how to build a URL that renders a chart image.  If you need help, please reach out and we will help you implement in your preferred programming language.\nBecause chart URLs are built by string concatenation, you can create a QuickChart URL in any programming language by building a URL string.  In most cases it is not necessary to use a library.\nSee the API Parameters documentation to learn how to build a URL that renders a chart image.  If you need help, please reach out and we will help you implement in your preferred programming language.\nQuickChart's Chart Maker offers no-code support for generating dynamic charts in spreadsheets, Airtable, Bubble, AppSheet, Thunkable, and many other platforms.
  
  
    We also offer chart integrations with Zapier and Make.
  
  
    View the no-code chart tutorial\nQuickChart's Chart Maker offers no-code support for generating dynamic charts in spreadsheets, Airtable, Bubble, AppSheet, Thunkable, and many other platforms.\nWe also offer chart integrations with Zapier and Make.\nView the no-code chart tutorial\nView the no-code chart tutorial\nBuild any chart
  
    Let's get creative!
    You can use all static customization options available in Chart.js.
    Visit our chart gallery to see different chart types and plugins: bar charts, line graphs, pie charts, and much more.\nLet's get creative!
    You can use all static customization options available in Chart.js.
    Visit our chart gallery to see different chart types and plugins: bar charts, line graphs, pie charts, and much more.\n⚡ 4 billion+ images rendered
      
      
        📈 Flexible, custom charts
      
      
        ✅ Built on open standards
      
    
    
      Get started
      View hosted plans\n⚡ 4 billion+ images rendered
      
      
        📈 Flexible, custom charts
      
      
        ✅ Built on open standards\n⚡ 4 billion+ images rendered\n⚡ 4 billion+ images rendered\n📈 Flexible, custom charts\n📈 Flexible, custom charts\n✅ Built on open standards\n✅ Built on open standards\nGet started
      View hosted plans\nPlug into your existing workflows
    
      QuickChart easily integrates with many no-code tools. Click on a product to learn more.\nPlug into your existing workflows\nQuickChart easily integrates with many no-code tools. Click on a product to learn more.\nNo-code chart maker
        
          Use our no-code chart maker to create custom chart templates that you can embed dynamically in spreadsheets, Airtable, Bubble, AppSheet, Thunkable, and many other no-code tools.\nNo-code chart maker
        
          Use our no-code chart maker to create custom chart templates that you can embed dynamically in spreadsheets, Airtable, Bubble, AppSheet, Thunkable, and many other no-code tools.\nNo-code chart maker
        
          Use our no-code chart maker to create custom chart templates that you can embed dynamically in spreadsheets, Airtable, Bubble, AppSheet, Thunkable, and many other no-code tools.\nUse our no-code chart maker to create custom chart templates that you can embed dynamically in spreadsheets, Airtable, Bubble, AppSheet, Thunkable, and many other no-code tools.\nTry the Chart Maker
      Learn more\nTry the Chart Maker
      Learn more\nOur hosted solutions
        
          Rendering at scale is difficult and resource intensive.  We've put a lot of working into taking care of the most difficult parts so you can focus on building your application.
        
        
          Purchasing a license also grants permission to modify QuickChart for private and on-prem commercial use.
        
        
          Learn more about hosting options »
        
      
      
        
      
    
  
  
    
      
        Charts can be used anywhere
        
          A chart is simply defined by its URL, so you can use our chart API in any programming language you like.
          And because our API produces images, you can include these charts nearly anywhere.
        
        
          We support many languages and frameworks, including Python, Javascript/Node, Java, C#, and PHP.
        
        
          Need help with development?  Send us a message.
        
      
      
        
          
        
      
    
  
  
    
      
        Open-source
        
          QuickChart is open source, dual licensed under the GNU AGPLv3 and a commercial license.  You may use images produced by our API for any purpose.
        
        
          Don't build your software on top of proprietary chart formats - use open source!\nOur hosted solutions
        
          Rendering at scale is difficult and resource intensive.  We've put a lot of working into taking care of the most difficult parts so you can focus on building your application.
        
        
          Purchasing a license also grants permission to modify QuickChart for private and on-prem commercial use.
        
        
          Learn more about hosting options »\nOur hosted solutions
        
          Rendering at scale is difficult and resource intensive.  We've put a lot of working into taking care of the most difficult parts so you can focus on building your application.
        
        
          Purchasing a license also grants permission to modify QuickChart for private and on-prem commercial use.
        
        
          Learn more about hosting options »\nRendering at scale is difficult and resource intensive.  We've put a lot of working into taking care of the most difficult parts so you can focus on building your application.\nPurchasing a license also grants permission to modify QuickChart for private and on-prem commercial use.\nLearn more about hosting options »\nLearn more about hosting options »\nCharts can be used anywhere
        
          A chart is simply defined by its URL, so you can use our chart API in any programming language you like.
          And because our API produces images, you can include these charts nearly anywhere.
        
        
          We support many languages and frameworks, including Python, Javascript/Node, Java, C#, and PHP.
        
        
          Need help with development?  Send us a message.\nCharts can be used anywhere
        
          A chart is simply defined by its URL, so you can use our chart API in any programming language you like.
          And because our API produces images, you can include these charts nearly anywhere.
        
        
          We support many languages and frameworks, including Python, Javascript/Node, Java, C#, and PHP.
        
        
          Need help with development?  Send us a message.\nCharts can be used anywhere\nA chart is simply defined by its URL, so you can use our chart API in any programming language you like.
          And because our API produces images, you can include these charts nearly anywhere.\nWe support many languages and frameworks, including Python, Javascript/Node, Java, C#, and PHP.\nNeed help with development?  Send us a message.\nOpen-source
        
          QuickChart is open source, dual licensed under the GNU AGPLv3 and a commercial license.  You may use images produced by our API for any purpose.
        
        
          Don't build your software on top of proprietary chart formats - use open source!\nOpen-source
        
          QuickChart is open source, dual licensed under the GNU AGPLv3 and a commercial license.  You may use images produced by our API for any purpose.
        
        
          Don't build your software on top of proprietary chart formats - use open source!\nQuickChart is open source, dual licensed under the GNU AGPLv3 and a commercial license.  You may use images produced by our API for any purpose.\nDon't build your software on top of proprietary chart formats - use open source!\nSee why thousands of developers and businesses use QuickChart
    
    
      View documentation
      View hosted plans\nSee why thousands of developers and businesses use QuickChart\nSee why thousands of developers and businesses use QuickChart\nView documentation
      View hosted plans\n© Alioth LLC
      ·
      Privacy & Compliance
      ·
      Terms of Service
      ·
      Contact
      
        Back to top\n© Alioth LLC
      ·
      Privacy
      ·
      Terms of Service
      ·
      Contact\n\n\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nDocs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.
  
  
    Click an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.
  
  
    
      Chart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data
      
    
  
  
     
        Bar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable
        
    
  
  
    Some examples above are based on examples from the Chart.js project.\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.\nClick an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...\nScales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...\nCustomization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nVertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHorizontal bars with labels\nHorizontal bars with labels\nHorizontal bars with labels\nLine charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nBasic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nPoint styles - circle\nPoint styles - circle\nPoint styles - circle\nPoint styles - triangle\nPoint styles - triangle\nPoint styles - triangle\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nExponential Smoothing\nExponential Smoothing\nExponential Smoothing\nArea charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nOther charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nBubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 3\nAnnotated progress bar 3\nAnnotated progress bar 3\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nLinear scale
        Hide section
        
           Step size
           Min & max (suggested)\nStep size
           Min & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nLogarithmic scale
        Hide section
        
           Line
           Scatter\nLine
           Scatter\nTime scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nLine
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nFinancial (Candlestick)\nFinancial (Candlestick)\nFinancial (Candlestick)\nScale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nGrid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nLegend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nPositioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nTitle
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center\nAlignment - position top align center
           Alignment - position left align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position left align center\nAlignment - position left align center\nAlignment - position left align center\nLabels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nLabels and Annotations\nLabels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nPatterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nPatterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - vertical\nGradient fill - vertical\nGradient fill - vertical\nPie Chart with Images\nPie Chart with Images\nPie Chart with Images\nExternal data
        Hide section
        
           From Google Sheets
           From Airtable\nFrom Google Sheets
           From Airtable\nSome examples above are based on examples from the Chart.js project.\n© Alioth LLC
      ·
      Privacy & Compliance
      ·
      Terms of Service
      ·
      Contact
      
        Back to top\n© Alioth LLC
      ·
      Privacy
      ·
      Terms of Service
      ·
      Contact\n\n\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nDocs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.
  
  
    Click an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.
  
  
    
      Chart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data
      
    
  
  
     
        Bar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable
        
    
  
  
    Some examples above are based on examples from the Chart.js project.\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.\nClick an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...\nScales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...\nCustomization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nVertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHorizontal bars with labels\nHorizontal bars with labels\nHorizontal bars with labels\nLine charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nBasic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nPoint styles - circle\nPoint styles - circle\nPoint styles - circle\nPoint styles - triangle\nPoint styles - triangle\nPoint styles - triangle\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nExponential Smoothing\nExponential Smoothing\nExponential Smoothing\nArea charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nOther charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nBubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 3\nAnnotated progress bar 3\nAnnotated progress bar 3\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nLinear scale
        Hide section
        
           Step size
           Min & max (suggested)\nStep size
           Min & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nLogarithmic scale
        Hide section
        
           Line
           Scatter\nLine
           Scatter\nTime scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nLine
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nFinancial (Candlestick)\nFinancial (Candlestick)\nFinancial (Candlestick)\nScale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nGrid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nLegend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nPositioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nTitle
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center\nAlignment - position top align center
           Alignment - position left align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position left align center\nAlignment - position left align center\nAlignment - position left align center\nLabels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nLabels and Annotations\nLabels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nPatterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nPatterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - vertical\nGradient fill - vertical\nGradient fill - vertical\nPie Chart with Images\nPie Chart with Images\nPie Chart with Images\nExternal data
        Hide section
        
           From Google Sheets
           From Airtable\nFrom Google Sheets
           From Airtable\nSome examples above are based on examples from the Chart.js project.\n© Alioth LLC
      ·
      Privacy & Compliance
      ·
      Terms of Service
      ·
      Contact
      
        Back to top\n© Alioth LLC
      ·
      Privacy
      ·
      Terms of Service
      ·
      Contact\n\n\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nDocs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.
  
  
    Click an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.
  
  
    
      Chart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data
      
    
  
  
     
        Bar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable
        
    
  
  
    Some examples above are based on examples from the Chart.js project.\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.\nClick an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...\nScales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...\nCustomization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nVertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHorizontal bars with labels\nHorizontal bars with labels\nHorizontal bars with labels\nLine charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nBasic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nPoint styles - circle\nPoint styles - circle\nPoint styles - circle\nPoint styles - triangle\nPoint styles - triangle\nPoint styles - triangle\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nExponential Smoothing\nExponential Smoothing\nExponential Smoothing\nArea charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nOther charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nBubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 3\nAnnotated progress bar 3\nAnnotated progress bar 3\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nLinear scale
        Hide section
        
           Step size
           Min & max (suggested)\nStep size
           Min & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nLogarithmic scale
        Hide section
        
           Line
           Scatter\nLine
           Scatter\nTime scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nLine
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nFinancial (Candlestick)\nFinancial (Candlestick)\nFinancial (Candlestick)\nScale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nGrid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nLegend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nPositioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nTitle
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center\nAlignment - position top align center
           Alignment - position left align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position left align center\nAlignment - position left align center\nAlignment - position left align center\nLabels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nLabels and Annotations\nLabels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nPatterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nPatterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - vertical\nGradient fill - vertical\nGradient fill - vertical\nPie Chart with Images\nPie Chart with Images\nPie Chart with Images\nExternal data
        Hide section
        
           From Google Sheets
           From Airtable\nFrom Google Sheets
           From Airtable\nSome examples above are based on examples from the Chart.js project.\n© Alioth LLC
      ·
      Privacy & Compliance
      ·
      Terms of Service
      ·
      Contact
      
        Back to top\n© Alioth LLC
      ·
      Privacy
      ·
      Terms of Service
      ·
      Contact\n\n\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nDocs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.
  
  
    Click an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.
  
  
    
      Chart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data
      
    
  
  
     
        Bar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable
        
    
  
  
    Some examples above are based on examples from the Chart.js project.\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.\nClick an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...\nScales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...\nCustomization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nVertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHorizontal bars with labels\nHorizontal bars with labels\nHorizontal bars with labels\nLine charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nBasic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nPoint styles - circle\nPoint styles - circle\nPoint styles - circle\nPoint styles - triangle\nPoint styles - triangle\nPoint styles - triangle\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nExponential Smoothing\nExponential Smoothing\nExponential Smoothing\nArea charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nOther charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nBubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 3\nAnnotated progress bar 3\nAnnotated progress bar 3\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nLinear scale
        Hide section
        
           Step size
           Min & max (suggested)\nStep size
           Min & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nLogarithmic scale
        Hide section
        
           Line
           Scatter\nLine
           Scatter\nTime scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nLine
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nFinancial (Candlestick)\nFinancial (Candlestick)\nFinancial (Candlestick)\nScale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nGrid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nLegend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nPositioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nTitle
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center\nAlignment - position top align center
           Alignment - position left align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position left align center\nAlignment - position left align center\nAlignment - position left align center\nLabels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nLabels and Annotations\nLabels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nPatterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nPatterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - vertical\nGradient fill - vertical\nGradient fill - vertical\nPie Chart with Images\nPie Chart with Images\nPie Chart with Images\nExternal data
        Hide section
        
           From Google Sheets
           From Airtable\nFrom Google Sheets
           From Airtable\nSome examples above are based on examples from the Chart.js project.\n© Alioth LLC
      ·
      Privacy & Compliance
      ·
      Terms of Service
      ·
      Contact
      
        Back to top\n© Alioth LLC
      ·
      Privacy
      ·
      Terms of Service
      ·
      Contact\n\n\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nDocs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.
  
  
    Click an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.
  
  
    
      Chart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data
      
    
  
  
     
        Bar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable
        
    
  
  
    Some examples above are based on examples from the Chart.js project.\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.\nClick an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...\nScales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...\nCustomization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nVertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHorizontal bars with labels\nHorizontal bars with labels\nHorizontal bars with labels\nLine charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nBasic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nPoint styles - circle\nPoint styles - circle\nPoint styles - circle\nPoint styles - triangle\nPoint styles - triangle\nPoint styles - triangle\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nExponential Smoothing\nExponential Smoothing\nExponential Smoothing\nArea charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nOther charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nBubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 3\nAnnotated progress bar 3\nAnnotated progress bar 3\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nLinear scale
        Hide section
        
           Step size
           Min & max (suggested)\nStep size
           Min & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nLogarithmic scale
        Hide section
        
           Line
           Scatter\nLine
           Scatter\nTime scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nLine
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nFinancial (Candlestick)\nFinancial (Candlestick)\nFinancial (Candlestick)\nScale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nGrid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nLegend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nPositioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nTitle
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center\nAlignment - position top align center
           Alignment - position left align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position left align center\nAlignment - position left align center\nAlignment - position left align center\nLabels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nLabels and Annotations\nLabels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nPatterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nPatterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - vertical\nGradient fill - vertical\nGradient fill - vertical\nPie Chart with Images\nPie Chart with Images\nPie Chart with Images\nExternal data
        Hide section
        
           From Google Sheets
           From Airtable\nFrom Google Sheets
           From Airtable\nSome examples above are based on examples from the Chart.js project.\n© Alioth LLC
      ·
      Privacy & Compliance
      ·
      Terms of Service
      ·
      Contact
      
        Back to top\n© Alioth LLC
      ·
      Privacy
      ·
      Terms of Service
      ·
      Contact\n\n\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nDocs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.
  
  
    Click an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.
  
  
    
      Chart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data
      
    
  
  
     
        Bar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable
        
    
  
  
    Some examples above are based on examples from the Chart.js project.\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.\nClick an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...\nScales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...\nCustomization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nVertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHorizontal bars with labels\nHorizontal bars with labels\nHorizontal bars with labels\nLine charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nBasic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nPoint styles - circle\nPoint styles - circle\nPoint styles - circle\nPoint styles - triangle\nPoint styles - triangle\nPoint styles - triangle\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nExponential Smoothing\nExponential Smoothing\nExponential Smoothing\nArea charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nOther charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nBubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 3\nAnnotated progress bar 3\nAnnotated progress bar 3\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nLinear scale
        Hide section
        
           Step size
           Min & max (suggested)\nStep size
           Min & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nLogarithmic scale
        Hide section
        
           Line
           Scatter\nLine
           Scatter\nTime scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nLine
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nFinancial (Candlestick)\nFinancial (Candlestick)\nFinancial (Candlestick)\nScale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nGrid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nLegend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nPositioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nTitle
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center\nAlignment - position top align center
           Alignment - position left align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position left align center\nAlignment - position left align center\nAlignment - position left align center\nLabels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nLabels and Annotations\nLabels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nPatterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nPatterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - vertical\nGradient fill - vertical\nGradient fill - vertical\nPie Chart with Images\nPie Chart with Images\nPie Chart with Images\nExternal data
        Hide section
        
           From Google Sheets
           From Airtable\nFrom Google Sheets
           From Airtable\nSome examples above are based on examples from the Chart.js project.\n© Alioth LLC
      ·
      Privacy & Compliance
      ·
      Terms of Service
      ·
      Contact
      
        Back to top\n© Alioth LLC
      ·
      Privacy
      ·
      Terms of Service
      ·
      Contact\n\n\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nDocs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.
  
  
    Click an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.
  
  
    
      Chart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data
      
    
  
  
     
        Bar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable
        
    
  
  
    Some examples above are based on examples from the Chart.js project.\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.\nClick an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...\nScales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...\nCustomization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nVertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHorizontal bars with labels\nHorizontal bars with labels\nHorizontal bars with labels\nLine charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nBasic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nPoint styles - circle\nPoint styles - circle\nPoint styles - circle\nPoint styles - triangle\nPoint styles - triangle\nPoint styles - triangle\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nExponential Smoothing\nExponential Smoothing\nExponential Smoothing\nArea charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nOther charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nBubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 3\nAnnotated progress bar 3\nAnnotated progress bar 3\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nLinear scale
        Hide section
        
           Step size
           Min & max (suggested)\nStep size
           Min & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nLogarithmic scale
        Hide section
        
           Line
           Scatter\nLine
           Scatter\nTime scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nLine
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nFinancial (Candlestick)\nFinancial (Candlestick)\nFinancial (Candlestick)\nScale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nGrid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nLegend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nPositioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nTitle
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center\nAlignment - position top align center
           Alignment - position left align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position left align center\nAlignment - position left align center\nAlignment - position left align center\nLabels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nLabels and Annotations\nLabels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nPatterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nPatterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - vertical\nGradient fill - vertical\nGradient fill - vertical\nPie Chart with Images\nPie Chart with Images\nPie Chart with Images\nExternal data
        Hide section
        
           From Google Sheets
           From Airtable\nFrom Google Sheets
           From Airtable\nSome examples above are based on examples from the Chart.js project.\n© Alioth LLC
      ·
      Privacy & Compliance
      ·
      Terms of Service
      ·
      Contact
      
        Back to top\n© Alioth LLC
      ·
      Privacy
      ·
      Terms of Service
      ·
      Contact\n\n\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nDocs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.
  
  
    Click an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.
  
  
    
      Chart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data
      
    
  
  
     
        Bar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable
        
    
  
  
    Some examples above are based on examples from the Chart.js project.\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.\nClick an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...\nScales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...\nCustomization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nVertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHorizontal bars with labels\nHorizontal bars with labels\nHorizontal bars with labels\nLine charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nBasic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nPoint styles - circle\nPoint styles - circle\nPoint styles - circle\nPoint styles - triangle\nPoint styles - triangle\nPoint styles - triangle\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nExponential Smoothing\nExponential Smoothing\nExponential Smoothing\nArea charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nOther charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nBubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 3\nAnnotated progress bar 3\nAnnotated progress bar 3\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nLinear scale
        Hide section
        
           Step size
           Min & max (suggested)\nStep size
           Min & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nLogarithmic scale
        Hide section
        
           Line
           Scatter\nLine
           Scatter\nTime scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nLine
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nFinancial (Candlestick)\nFinancial (Candlestick)\nFinancial (Candlestick)\nScale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nGrid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nLegend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nPositioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nTitle
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center\nAlignment - position top align center
           Alignment - position left align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position left align center\nAlignment - position left align center\nAlignment - position left align center\nLabels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nLabels and Annotations\nLabels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nPatterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nPatterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - vertical\nGradient fill - vertical\nGradient fill - vertical\nPie Chart with Images\nPie Chart with Images\nPie Chart with Images\nExternal data
        Hide section
        
           From Google Sheets
           From Airtable\nFrom Google Sheets
           From Airtable\nSome examples above are based on examples from the Chart.js project.\n© Alioth LLC
      ·
      Privacy & Compliance
      ·
      Terms of Service
      ·
      Contact
      
        Back to top\n© Alioth LLC
      ·
      Privacy
      ·
      Terms of Service
      ·
      Contact\n\n\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nDocs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.
  
  
    Click an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.
  
  
    
      Chart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data
      
    
  
  
     
        Bar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable
        
    
  
  
    Some examples above are based on examples from the Chart.js project.\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.\nClick an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...\nScales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...\nCustomization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nVertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHorizontal bars with labels\nHorizontal bars with labels\nHorizontal bars with labels\nLine charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nBasic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nPoint styles - circle\nPoint styles - circle\nPoint styles - circle\nPoint styles - triangle\nPoint styles - triangle\nPoint styles - triangle\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nExponential Smoothing\nExponential Smoothing\nExponential Smoothing\nArea charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nOther charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nBubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 3\nAnnotated progress bar 3\nAnnotated progress bar 3\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nLinear scale
        Hide section
        
           Step size
           Min & max (suggested)\nStep size
           Min & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nLogarithmic scale
        Hide section
        
           Line
           Scatter\nLine
           Scatter\nTime scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nLine
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nFinancial (Candlestick)\nFinancial (Candlestick)\nFinancial (Candlestick)\nScale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nGrid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nLegend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nPositioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nTitle
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center\nAlignment - position top align center
           Alignment - position left align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position left align center\nAlignment - position left align center\nAlignment - position left align center\nLabels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nLabels and Annotations\nLabels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nPatterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nPatterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - vertical\nGradient fill - vertical\nGradient fill - vertical\nPie Chart with Images\nPie Chart with Images\nPie Chart with Images\nExternal data
        Hide section
        
           From Google Sheets
           From Airtable\nFrom Google Sheets
           From Airtable\nSome examples above are based on examples from the Chart.js project.\n© Alioth LLC
      ·
      Privacy & Compliance
      ·
      Terms of Service
      ·
      Contact
      
        Back to top\n© Alioth LLC
      ·
      Privacy
      ·
      Terms of Service
      ·
      Contact\n\n\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nDocs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.
  
  
    Click an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.
  
  
    
      Chart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data
      
    
  
  
     
        Bar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable
        
    
  
  
    Some examples above are based on examples from the Chart.js project.\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.\nClick an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...\nScales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...\nCustomization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nVertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHorizontal bars with labels\nHorizontal bars with labels\nHorizontal bars with labels\nLine charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nBasic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nPoint styles - circle\nPoint styles - circle\nPoint styles - circle\nPoint styles - triangle\nPoint styles - triangle\nPoint styles - triangle\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nExponential Smoothing\nExponential Smoothing\nExponential Smoothing\nArea charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nOther charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nBubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 3\nAnnotated progress bar 3\nAnnotated progress bar 3\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nLinear scale
        Hide section
        
           Step size
           Min & max (suggested)\nStep size
           Min & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nLogarithmic scale
        Hide section
        
           Line
           Scatter\nLine
           Scatter\nTime scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nLine
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nFinancial (Candlestick)\nFinancial (Candlestick)\nFinancial (Candlestick)\nScale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nGrid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nLegend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nPositioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nTitle
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center\nAlignment - position top align center
           Alignment - position left align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position left align center\nAlignment - position left align center\nAlignment - position left align center\nLabels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nLabels and Annotations\nLabels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nPatterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nPatterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - vertical\nGradient fill - vertical\nGradient fill - vertical\nPie Chart with Images\nPie Chart with Images\nPie Chart with Images\nExternal data
        Hide section
        
           From Google Sheets
           From Airtable\nFrom Google Sheets
           From Airtable\nSome examples above are based on examples from the Chart.js project.\n© Alioth LLC
      ·
      Privacy & Compliance
      ·
      Terms of Service
      ·
      Contact
      
        Back to top\n© Alioth LLC
      ·
      Privacy
      ·
      Terms of Service
      ·
      Contact\n\n\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nDocs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.
  
  
    Click an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.
  
  
    
      Chart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data
      
    
  
  
     
        Bar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable
        
    
  
  
    Some examples above are based on examples from the Chart.js project.\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.\nClick an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...\nScales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...\nCustomization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nVertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHorizontal bars with labels\nHorizontal bars with labels\nHorizontal bars with labels\nLine charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nBasic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nPoint styles - circle\nPoint styles - circle\nPoint styles - circle\nPoint styles - triangle\nPoint styles - triangle\nPoint styles - triangle\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nExponential Smoothing\nExponential Smoothing\nExponential Smoothing\nArea charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nOther charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nBubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 3\nAnnotated progress bar 3\nAnnotated progress bar 3\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nLinear scale
        Hide section
        
           Step size
           Min & max (suggested)\nStep size
           Min & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nLogarithmic scale
        Hide section
        
           Line
           Scatter\nLine
           Scatter\nTime scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nLine
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nFinancial (Candlestick)\nFinancial (Candlestick)\nFinancial (Candlestick)\nScale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nGrid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nLegend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nPositioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nTitle
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center\nAlignment - position top align center
           Alignment - position left align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position left align center\nAlignment - position left align center\nAlignment - position left align center\nLabels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nLabels and Annotations\nLabels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nPatterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nPatterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - vertical\nGradient fill - vertical\nGradient fill - vertical\nPie Chart with Images\nPie Chart with Images\nPie Chart with Images\nExternal data
        Hide section
        
           From Google Sheets
           From Airtable\nFrom Google Sheets
           From Airtable\nSome examples above are based on examples from the Chart.js project.\n© Alioth LLC
      ·
      Privacy & Compliance
      ·
      Terms of Service
      ·
      Contact
      
        Back to top\n© Alioth LLC
      ·
      Privacy
      ·
      Terms of Service
      ·
      Contact\n\n\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nDocs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.
  
  
    Click an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.
  
  
    
      Chart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data
      
    
  
  
     
        Bar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable
        
    
  
  
    Some examples above are based on examples from the Chart.js project.\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.\nClick an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...\nScales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...\nCustomization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nVertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHorizontal bars with labels\nHorizontal bars with labels\nHorizontal bars with labels\nLine charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nBasic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nPoint styles - circle\nPoint styles - circle\nPoint styles - circle\nPoint styles - triangle\nPoint styles - triangle\nPoint styles - triangle\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nExponential Smoothing\nExponential Smoothing\nExponential Smoothing\nArea charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nOther charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nBubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 3\nAnnotated progress bar 3\nAnnotated progress bar 3\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nLinear scale
        Hide section
        
           Step size
           Min & max (suggested)\nStep size
           Min & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nLogarithmic scale
        Hide section
        
           Line
           Scatter\nLine
           Scatter\nTime scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nLine
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nFinancial (Candlestick)\nFinancial (Candlestick)\nFinancial (Candlestick)\nScale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nGrid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nLegend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nPositioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nTitle
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center\nAlignment - position top align center
           Alignment - position left align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position left align center\nAlignment - position left align center\nAlignment - position left align center\nLabels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nLabels and Annotations\nLabels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nPatterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nPatterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - vertical\nGradient fill - vertical\nGradient fill - vertical\nPie Chart with Images\nPie Chart with Images\nPie Chart with Images\nExternal data
        Hide section
        
           From Google Sheets
           From Airtable\nFrom Google Sheets
           From Airtable\nSome examples above are based on examples from the Chart.js project.\n© Alioth LLC
      ·
      Privacy & Compliance
      ·
      Terms of Service
      ·
      Contact
      
        Back to top\n© Alioth LLC
      ·
      Privacy
      ·
      Terms of Service
      ·
      Contact\n\n\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nDocs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.
  
  
    Click an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.
  
  
    
      Chart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data
      
    
  
  
     
        Bar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable
        
    
  
  
    Some examples above are based on examples from the Chart.js project.\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.\nClick an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...\nScales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...\nCustomization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nVertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHorizontal bars with labels\nHorizontal bars with labels\nHorizontal bars with labels\nLine charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nBasic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nPoint styles - circle\nPoint styles - circle\nPoint styles - circle\nPoint styles - triangle\nPoint styles - triangle\nPoint styles - triangle\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nExponential Smoothing\nExponential Smoothing\nExponential Smoothing\nArea charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nOther charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nBubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 3\nAnnotated progress bar 3\nAnnotated progress bar 3\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nLinear scale
        Hide section
        
           Step size
           Min & max (suggested)\nStep size
           Min & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nLogarithmic scale
        Hide section
        
           Line
           Scatter\nLine
           Scatter\nTime scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nLine
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nFinancial (Candlestick)\nFinancial (Candlestick)\nFinancial (Candlestick)\nScale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nGrid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nLegend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nPositioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nTitle
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center\nAlignment - position top align center
           Alignment - position left align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position left align center\nAlignment - position left align center\nAlignment - position left align center\nLabels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nLabels and Annotations\nLabels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nPatterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nPatterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - vertical\nGradient fill - vertical\nGradient fill - vertical\nPie Chart with Images\nPie Chart with Images\nPie Chart with Images\nExternal data
        Hide section
        
           From Google Sheets
           From Airtable\nFrom Google Sheets
           From Airtable\nSome examples above are based on examples from the Chart.js project.\n© Alioth LLC
      ·
      Privacy & Compliance
      ·
      Terms of Service
      ·
      Contact
      
        Back to top\n© Alioth LLC
      ·
      Privacy
      ·
      Terms of Service
      ·
      Contact\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOn this pageUsing the QuickChart GraphViz APIGraphViz API


QuickChart is an open-source API that generates GraphViz charts. The API takes a graph description in the DOT language and renders it with the latest stable version of GraphViz, returning the output as PNG or SVG.
To get started, use the https://quickchart.io/graphviz endpoint. Here's a simple example:
https://quickchart.io/graphviz?graph=graph{a--b}

You'll notice that it defaults to SVG output. Let's change it to PNG and give it some dimensions so I can, for example, send it in an email:
https://quickchart.io/graphviz?format=png&width=100&height=150&graph=graph{a--b}

Examples​
Directed graphs​
Directed graphs or "digraphs" have edges that define a direction from one vertex to another. Here's our DOT definition for a straightforward directed graph:
digraph {  main->parse->execute;  main->init;  main->cleanup;  execute->make_string;  execute->printf  init->make_string;  main->printf;  execute->compare;}
Pack it into the URL:
https://quickchart.io/graphviz?graph=digraph{main->parse->execute;main->init;main->cleanup;execute->make_string;execute->printf;init->make_string;main->printf;execute->compare;}
And it will render like so:

Node shapes and colors​
GraphViz is incredibly flexible. There are 59 built-in node shapes available, and you can also edit colors and styles however you like:
digraph G {    size ="4,4";    main [shape=doubleoctagon];    main -> parse [weight=8];    parse -> execute;    main -> init [style=dotted];    main -> cleanup;    execute -> { make_string; printf}    init -> make_string;    edge [color=red];   // so is this    main -> printf [style=bold,label="100 times"];    make_string [label="make a\nstring"];    node [shape=star,style=filled,color=".7 .3 1.0"];    execute -> compare;}
Let's put the above graph description in our API url:
https://quickchart.io/graphviz?graph=digraph{...}
This URL returns the following image:

Note that when sending a GET request, you should always URL encode your graph parameter in the API request. For more complex charts, this is a requirement.
Learn more about node shapes and styling from the official GraphViz documentation here.
Subgraphs​
Subgraphs are an important tool in GraphViz that are best used to illustrate clusters of nodes. Here's an example graph created by Josh Hayes-Sheen:
digraph {  subgraph cluster_0 {    label="Subgraph A";    a -> b;    b -> c;    c -> d;  }  subgraph cluster_1 {    label="Subgraph B";    a -> f;    f -> c;  }}

You can use a more elaborate subgraph to illustrate complex processes (from graphviz documentation):
digraph G {  subgraph cluster_0 {    style=filled;    color=lightgrey;    node [style=filled,color=white];    a0 -> a1 -> a2 -> a3;    label = "process #1";  }  subgraph cluster_1 {    node [style=filled];    b0 -> b1 -> b2 -> b3;    label = "process #2";    color=blue  }  start -> a0;  start -> b0;  a1 -> b3;  b2 -> a3;  a3 -> a0;  a3 -> end;  b3 -> end;  start [shape=Mdiamond];  end [shape=Msquare];}

Record-based nodes​
In contrast the polygon or shape based nodes we see above, you can create tabular "record" nodes that are split into several blocks.
Here's a simple example:
digraph structs {  node[shape=record]  struct1 [label="<f0> left|<f1> middle|<f2> right"];  struct2 [label="{<f0> one|<f1> two}" shape=Mrecord];  struct3 [label="hello\nworld |{ b |{c|<here> d|e}| f}| g | h"];  struct1:f1 -> struct2:f0;  struct1:f0 -> struct3:f1;}

HTML-like nodes​
Record nodes have fallen out of favor compared to HTML-like node labels, which allow you to put limited HTML markup in your graph description. Although it's much more verbose, it's more flexible than the record-based approach and yields more possibilities:
digraph G {  node [shape=plaintext]  a [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">            <TR><TD PORT="c" BGCOLOR="gray">first</TD></TR>            <TR><TD>second</TD></TR>            <TR><TD>third</TD></TR>       </TABLE>>];  b [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">            <TR><TD PORT="c" BGCOLOR="pink">first</TD></TR>            <TR><TD>second</TD></TR>            <TR><TD>third</TD></TR>       </TABLE>>];  a:c -> b:c;}
Pack this graph description into the /graphviz?format=png endpoint and we get the following:

Layout engines​
GraphViz is comprised by DOT, the language that describes the graph itself, and a set of programs that generate the graph layout. The default layout is also called dot, but there are many other layout programs available.
You can select a layout engine in the QuickChart API by adding a parameter layout=dot. Available layout engines include dot, fdp, neato, circo, twopi, and osage.
This section will use a simple example created by Rasmus Andersson to illustrate the difference between layout systems.
dot​
The DOT layout engine is generally used to show hierarchical structure in directed graphs.

fdp​
This is generally used for undirected graphs. It uses a spring model with a force-directed approach to determine the position of each node.
Here's the same graph as above except undirected, using the fdp layout engine, /graphviz?layout=fdp&graph=...:

neato​
Neato is another layout engine generally used for undirected graphs. It uses a spring model as well. The neato engine tends to do better than fdp engine when rendering clusters and cyclic subgraphs, spacing things out more evenly and making cycles stand out more.

circo​
The circo layout engine is for circular layout of graphs, as the name suggests. This is used to generate graphs that show cyclic structure and biconnected components. The algorithm attempts to minimize edge crossings within the circle by placing edges on the perimeter of the circle if possible.

twopi​
The twopi layout engine generates radial layouts, drawing nodes in concentric circles depending on their distance from a root node.
One node is chosen as the center (in this case, E) and is placed at the origin. All nodes of the same distance from the center are placed on the same concentric circle around the center.
This graph, for example, makes it easy to see that nodes A, H, and O are the farthest from E.

osage​
The osage layout engine is for large undirected graphed with multiple subgraphs. It separates the graph into "levels" (clusters) and lays out each level in a rectangle. The rectangles are then packed together. Within each rectangle, the subgraph/cluster is laid out.
This makes the separation and composition of graph clusters very distinct in the visualization.
Our example doesn't have subgraphs, so the effect of the osage layout engine is just that our nodes are arranged in a table, and the edges turn into a mess.

patchwork​
The patchwork layout engine for GraphViz draws the graph as a squarified treemap. The clusters on the graph are used to create the tree.
Here's our graph with the layout=patchwork parameter:

API parameters​
The https://quickchart.io/graphviz endpoint supports HTTP GET requests with the following parameters:

graph - the DOT graph description (required)
layout - the name of the graph layout engine (default dot)
format - the output format, either png or svg (default svg)
width - width of image, applicable to png only (defaults to fit)
height - height of image, applicable to png only (defaults to fit)

The API also supports HTTP POST requests with JSON payloads. Here's an example payload:
{  "graph": "digraph {a->b}",  "layout": "dot",  "format": "svg"}
Example requests​
You can hit the GET or POST endpoint using any HTTP client package available in your preferred programming language.
Here's an example of a POST request in node.js:
const fetch = require('node-fetch');const body = {  graph: 'digraph {a->b}',  layout: 'dot',  format: 'svg',};const response = await fetch('https://quickchart.io/graphviz', {  method: 'post',  body: JSON.stringify(body),  headers: { 'Content-Type': 'application/json' },});// Response contains an SVG. Write it to file or send it someplace else.const svg = await response.text();console.log(svg);
The same request in Python:
import requestsbody = {  "graph": "digraph {a->b}",  "layout": "dot",  "format": "svg"}r = requests.post('https://quickchart.io/graphviz', json=body)# r.text is sufficient for SVG. Use `r.raw` for png imagessvg = r.text
And finally, here's a generic equivalent using curl:
# In payload.json:{  "graph": "digraph {a->b}",  "layout": "dot",  "format": "png"}# Then run:curl -X POST 'https://quickchart.io/graphviz' -H 'Content-Type: application/json' -d @payload.json -o render.png
Give it a try now and reach out if you have any questions!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:graphvizEdit this page\n\nOn this pageUsing the QuickChart GraphViz APIGraphViz API


QuickChart is an open-source API that generates GraphViz charts. The API takes a graph description in the DOT language and renders it with the latest stable version of GraphViz, returning the output as PNG or SVG.
To get started, use the https://quickchart.io/graphviz endpoint. Here's a simple example:
https://quickchart.io/graphviz?graph=graph{a--b}

You'll notice that it defaults to SVG output. Let's change it to PNG and give it some dimensions so I can, for example, send it in an email:
https://quickchart.io/graphviz?format=png&width=100&height=150&graph=graph{a--b}

Examples​
Directed graphs​
Directed graphs or "digraphs" have edges that define a direction from one vertex to another. Here's our DOT definition for a straightforward directed graph:
digraph {  main->parse->execute;  main->init;  main->cleanup;  execute->make_string;  execute->printf  init->make_string;  main->printf;  execute->compare;}
Pack it into the URL:
https://quickchart.io/graphviz?graph=digraph{main->parse->execute;main->init;main->cleanup;execute->make_string;execute->printf;init->make_string;main->printf;execute->compare;}
And it will render like so:

Node shapes and colors​
GraphViz is incredibly flexible. There are 59 built-in node shapes available, and you can also edit colors and styles however you like:
digraph G {    size ="4,4";    main [shape=doubleoctagon];    main -> parse [weight=8];    parse -> execute;    main -> init [style=dotted];    main -> cleanup;    execute -> { make_string; printf}    init -> make_string;    edge [color=red];   // so is this    main -> printf [style=bold,label="100 times"];    make_string [label="make a\nstring"];    node [shape=star,style=filled,color=".7 .3 1.0"];    execute -> compare;}
Let's put the above graph description in our API url:
https://quickchart.io/graphviz?graph=digraph{...}
This URL returns the following image:

Note that when sending a GET request, you should always URL encode your graph parameter in the API request. For more complex charts, this is a requirement.
Learn more about node shapes and styling from the official GraphViz documentation here.
Subgraphs​
Subgraphs are an important tool in GraphViz that are best used to illustrate clusters of nodes. Here's an example graph created by Josh Hayes-Sheen:
digraph {  subgraph cluster_0 {    label="Subgraph A";    a -> b;    b -> c;    c -> d;  }  subgraph cluster_1 {    label="Subgraph B";    a -> f;    f -> c;  }}

You can use a more elaborate subgraph to illustrate complex processes (from graphviz documentation):
digraph G {  subgraph cluster_0 {    style=filled;    color=lightgrey;    node [style=filled,color=white];    a0 -> a1 -> a2 -> a3;    label = "process #1";  }  subgraph cluster_1 {    node [style=filled];    b0 -> b1 -> b2 -> b3;    label = "process #2";    color=blue  }  start -> a0;  start -> b0;  a1 -> b3;  b2 -> a3;  a3 -> a0;  a3 -> end;  b3 -> end;  start [shape=Mdiamond];  end [shape=Msquare];}

Record-based nodes​
In contrast the polygon or shape based nodes we see above, you can create tabular "record" nodes that are split into several blocks.
Here's a simple example:
digraph structs {  node[shape=record]  struct1 [label="<f0> left|<f1> middle|<f2> right"];  struct2 [label="{<f0> one|<f1> two}" shape=Mrecord];  struct3 [label="hello\nworld |{ b |{c|<here> d|e}| f}| g | h"];  struct1:f1 -> struct2:f0;  struct1:f0 -> struct3:f1;}

HTML-like nodes​
Record nodes have fallen out of favor compared to HTML-like node labels, which allow you to put limited HTML markup in your graph description. Although it's much more verbose, it's more flexible than the record-based approach and yields more possibilities:
digraph G {  node [shape=plaintext]  a [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">            <TR><TD PORT="c" BGCOLOR="gray">first</TD></TR>            <TR><TD>second</TD></TR>            <TR><TD>third</TD></TR>       </TABLE>>];  b [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">            <TR><TD PORT="c" BGCOLOR="pink">first</TD></TR>            <TR><TD>second</TD></TR>            <TR><TD>third</TD></TR>       </TABLE>>];  a:c -> b:c;}
Pack this graph description into the /graphviz?format=png endpoint and we get the following:

Layout engines​
GraphViz is comprised by DOT, the language that describes the graph itself, and a set of programs that generate the graph layout. The default layout is also called dot, but there are many other layout programs available.
You can select a layout engine in the QuickChart API by adding a parameter layout=dot. Available layout engines include dot, fdp, neato, circo, twopi, and osage.
This section will use a simple example created by Rasmus Andersson to illustrate the difference between layout systems.
dot​
The DOT layout engine is generally used to show hierarchical structure in directed graphs.

fdp​
This is generally used for undirected graphs. It uses a spring model with a force-directed approach to determine the position of each node.
Here's the same graph as above except undirected, using the fdp layout engine, /graphviz?layout=fdp&graph=...:

neato​
Neato is another layout engine generally used for undirected graphs. It uses a spring model as well. The neato engine tends to do better than fdp engine when rendering clusters and cyclic subgraphs, spacing things out more evenly and making cycles stand out more.

circo​
The circo layout engine is for circular layout of graphs, as the name suggests. This is used to generate graphs that show cyclic structure and biconnected components. The algorithm attempts to minimize edge crossings within the circle by placing edges on the perimeter of the circle if possible.

twopi​
The twopi layout engine generates radial layouts, drawing nodes in concentric circles depending on their distance from a root node.
One node is chosen as the center (in this case, E) and is placed at the origin. All nodes of the same distance from the center are placed on the same concentric circle around the center.
This graph, for example, makes it easy to see that nodes A, H, and O are the farthest from E.

osage​
The osage layout engine is for large undirected graphed with multiple subgraphs. It separates the graph into "levels" (clusters) and lays out each level in a rectangle. The rectangles are then packed together. Within each rectangle, the subgraph/cluster is laid out.
This makes the separation and composition of graph clusters very distinct in the visualization.
Our example doesn't have subgraphs, so the effect of the osage layout engine is just that our nodes are arranged in a table, and the edges turn into a mess.

patchwork​
The patchwork layout engine for GraphViz draws the graph as a squarified treemap. The clusters on the graph are used to create the tree.
Here's our graph with the layout=patchwork parameter:

API parameters​
The https://quickchart.io/graphviz endpoint supports HTTP GET requests with the following parameters:

graph - the DOT graph description (required)
layout - the name of the graph layout engine (default dot)
format - the output format, either png or svg (default svg)
width - width of image, applicable to png only (defaults to fit)
height - height of image, applicable to png only (defaults to fit)

The API also supports HTTP POST requests with JSON payloads. Here's an example payload:
{  "graph": "digraph {a->b}",  "layout": "dot",  "format": "svg"}
Example requests​
You can hit the GET or POST endpoint using any HTTP client package available in your preferred programming language.
Here's an example of a POST request in node.js:
const fetch = require('node-fetch');const body = {  graph: 'digraph {a->b}',  layout: 'dot',  format: 'svg',};const response = await fetch('https://quickchart.io/graphviz', {  method: 'post',  body: JSON.stringify(body),  headers: { 'Content-Type': 'application/json' },});// Response contains an SVG. Write it to file or send it someplace else.const svg = await response.text();console.log(svg);
The same request in Python:
import requestsbody = {  "graph": "digraph {a->b}",  "layout": "dot",  "format": "svg"}r = requests.post('https://quickchart.io/graphviz', json=body)# r.text is sufficient for SVG. Use `r.raw` for png imagessvg = r.text
And finally, here's a generic equivalent using curl:
# In payload.json:{  "graph": "digraph {a->b}",  "layout": "dot",  "format": "png"}# Then run:curl -X POST 'https://quickchart.io/graphviz' -H 'Content-Type: application/json' -d @payload.json -o render.png
Give it a try now and reach out if you have any questions!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:graphvizEdit this pagePreviousGoogle ChartsNextSparklinesExamplesDirected graphsNode shapes and colorsSubgraphsRecord-based nodesHTML-like nodesLayout enginesdotfdpneatocircotwopiosagepatchworkAPI parametersExample requests\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis Privacy Policy describes how your personal information is collected, used, and shared when you visit or make a purchase from https://quickchart.io (the “Site”). You may also be interested in our Data Security Policy and our Data Processing Agreement.

Personal information we collect
When you visit the Site, we automatically collect certain information about your device, including information about your web browser, IP address, time zone, and some of the cookies that are installed on your device. Additionally, as you browse the Site, we collect information about the individual web pages or products that you view, what websites or search terms referred you to the Site, and information about how you interact with the Site. We refer to this automatically-collected information as “Device Information.”
We collect Device Information using the following technologies:

“Cookies” are data files that are placed on your device or computer and often include an anonymous unique identifier. For more information about cookies, and how to disable cookies, visit http://www.allaboutcookies.org.
“Log files” track actions occurring on the Site, and collect data including your IP address, browser type, Internet service provider, referring/exit pages, and date/time stamps.
“Web beacons,” “tags,” and “pixels” are electronic files used to record information about how you browse the Site. This includes third-party analytics and services such as Google Analytics and Stripe.

Additionally when you make a purchase or attempt to make a purchase through the Site, we collect certain information from you, including your name, billing address, shipping address, payment information (including credit card numbers, email address, and phone number. We refer to this information as “Order Information.”
When you make a request to our API, we may record IP address and chart contents, although this is disabled by default. Access to these records is logged and permitted on an as-needed basis.
When we talk about “Personal Information” in this Privacy Policy, we are talking both about Device Information and Order Information.
How do we use your personal information?
We use the Order Information that we collect generally to fulfill any orders placed through the Site (including processing your payment information, delivering product information, and providing you with invoices and/or order confirmations). Additionally, we use this Order Information to communicate with you and screen our orders for potential risk or fraud.
We use the Device Information that we collect to help us screen for potential risk and fraud (in particular, your IP address), and more generally to improve and optimize our Site (for example, by generating analytics about how our customers browse and interact with the Site, and to assess the success of our marketing and advertising campaigns).
Sharing your personal information
We share your Personal Information with a small number of third parties necessary to charge you, keep the service running, and perform web usage analysis.
For example, we use Stripe to collect payment information (see their privacy policy here). We also use Google Analytics to help us understand how our customers use the Site–you can read more about how Google uses your Personal Information here. You can opt-out of Google Analytics here.
Finally, we may also share your Personal Information to comply with applicable laws and regulations, to respond to a subpoena, search warrant or other lawful request for information we receive, or to otherwise protect our rights.
Data retention
Images
Chart, QR, word cloud, and other images are never stored on our servers. The data they contain is never stored on our servers.
All images are rendered on-demand based on the contents of the request and immediately evicted from memory.
The only exception to this is if you explicitly opt in by creating a short URL.
HTTP logs
Web logs may be recorded if the customer specifically requests assistance (for example, to debug a technical issue). Logs are recorded on a temporary, as-needed basis and may contain your chart definition if you use GET instead of POST requests. Log access is monitored and audited. Logs are deleted automatically after 7 days.
Short URLs and Templates
If you opt into using short URLs, also known as Templates, we must store your chart definition so we can serve your chart for the duration of the short URL’s existence.
Order information
When you place an order through the Site, we will maintain your Order Information for our records unless and until you ask us to delete this information.
Do not track
Please note that we do not alter our Site’s data collection and use practices when we see a Do Not Track signal from your browser.
Your rights
If you are a European resident, you have the right to access personal information we hold about you and to ask that your personal information be corrected, updated, or deleted. If you would like to exercise this right, please contact us through the contact information below.
Additionally, if you are a European resident we note that we are processing your information in order to fulfill contracts we might have with you (for example if you make an order through the Site), or otherwise to pursue our legitimate business interests listed above. Additionally, please note that your information will be transferred outside of Europe, including to the United States.
Subprocessors
Data subprocessors used by the Site:

Stripe - payment processing and billing
Cloudflare - hosting, load balancing, and anonymous analytics
Digital Ocean - cloud hosting
Google Analytics - anonymous user analytics
Google Cloud Stackdriver - for logs analysis

Data Controller
The Data Controller is responsible for determining the purposes and means of processing personal data on our Site. The Data Controller for the personal data collected and processed through the Site is:
Alioth LLC d/b/a QuickChart
700 El Camino Real Ste 120 No 1116
Menlo Park, CA 94025, USA
[email protected]
If you have any questions or concerns regarding the processing of your personal data, please contact the Data Controller using the contact information provided above.
Data Protection Officer (DPO) and Representative
Our designated Data Protection Officer is Ian Webster. He can be contacted at [email protected].
Changes
We may update this privacy policy from time to time in order to reflect, for example, changes to our practices or for other operational, legal or regulatory reasons.
Contact us
We are Alioth LLC d/b/a QuickChart. For more information about our privacy practices, if you have questions, if you would like to make a complaint, or to request a copy or deletion of your information pursuant to GDPR regulations, please contact us by e-mail at [email protected].\n\nThis Privacy Policy describes how your personal information is collected, used, and shared when you visit or make a purchase from https://quickchart.io (the “Site”). You may also be interested in our Data Security Policy and our Data Processing Agreement.

Personal information we collect
When you visit the Site, we automatically collect certain information about your device, including information about your web browser, IP address, time zone, and some of the cookies that are installed on your device. Additionally, as you browse the Site, we collect information about the individual web pages or products that you view, what websites or search terms referred you to the Site, and information about how you interact with the Site. We refer to this automatically-collected information as “Device Information.”
We collect Device Information using the following technologies:

“Cookies” are data files that are placed on your device or computer and often include an anonymous unique identifier. For more information about cookies, and how to disable cookies, visit http://www.allaboutcookies.org.
“Log files” track actions occurring on the Site, and collect data including your IP address, browser type, Internet service provider, referring/exit pages, and date/time stamps.
“Web beacons,” “tags,” and “pixels” are electronic files used to record information about how you browse the Site. This includes third-party analytics and services such as Google Analytics and Stripe.

Additionally when you make a purchase or attempt to make a purchase through the Site, we collect certain information from you, including your name, billing address, shipping address, payment information (including credit card numbers, email address, and phone number. We refer to this information as “Order Information.”
When you make a request to our API, we may record IP address and chart contents, although this is disabled by default. Access to these records is logged and permitted on an as-needed basis.
When we talk about “Personal Information” in this Privacy Policy, we are talking both about Device Information and Order Information.
How do we use your personal information?
We use the Order Information that we collect generally to fulfill any orders placed through the Site (including processing your payment information, delivering product information, and providing you with invoices and/or order confirmations). Additionally, we use this Order Information to communicate with you and screen our orders for potential risk or fraud.
We use the Device Information that we collect to help us screen for potential risk and fraud (in particular, your IP address), and more generally to improve and optimize our Site (for example, by generating analytics about how our customers browse and interact with the Site, and to assess the success of our marketing and advertising campaigns).
Sharing your personal information
We share your Personal Information with a small number of third parties necessary to charge you, keep the service running, and perform web usage analysis.
For example, we use Stripe to collect payment information (see their privacy policy here). We also use Google Analytics to help us understand how our customers use the Site–you can read more about how Google uses your Personal Information here. You can opt-out of Google Analytics here.
Finally, we may also share your Personal Information to comply with applicable laws and regulations, to respond to a subpoena, search warrant or other lawful request for information we receive, or to otherwise protect our rights.
Data retention
Images
Chart, QR, word cloud, and other images are never stored on our servers. The data they contain is never stored on our servers.
All images are rendered on-demand based on the contents of the request and immediately evicted from memory.
The only exception to this is if you explicitly opt in by creating a short URL.
HTTP logs
Web logs may be recorded if the customer specifically requests assistance (for example, to debug a technical issue). Logs are recorded on a temporary, as-needed basis and may contain your chart definition if you use GET instead of POST requests. Log access is monitored and audited. Logs are deleted automatically after 7 days.
Short URLs and Templates
If you opt into using short URLs, also known as Templates, we must store your chart definition so we can serve your chart for the duration of the short URL’s existence.
Order information
When you place an order through the Site, we will maintain your Order Information for our records unless and until you ask us to delete this information.
Do not track
Please note that we do not alter our Site’s data collection and use practices when we see a Do Not Track signal from your browser.
Your rights
If you are a European resident, you have the right to access personal information we hold about you and to ask that your personal information be corrected, updated, or deleted. If you would like to exercise this right, please contact us through the contact information below.
Additionally, if you are a European resident we note that we are processing your information in order to fulfill contracts we might have with you (for example if you make an order through the Site), or otherwise to pursue our legitimate business interests listed above. Additionally, please note that your information will be transferred outside of Europe, including to the United States.
Subprocessors
Data subprocessors used by the Site:

Stripe - payment processing and billing
Cloudflare - hosting, load balancing, and anonymous analytics
Digital Ocean - cloud hosting
Google Analytics - anonymous user analytics
Google Cloud Stackdriver - for logs analysis

Data Controller
The Data Controller is responsible for determining the purposes and means of processing personal data on our Site. The Data Controller for the personal data collected and processed through the Site is:
Alioth LLC d/b/a QuickChart
700 El Camino Real Ste 120 No 1116
Menlo Park, CA 94025, USA
[email protected]
If you have any questions or concerns regarding the processing of your personal data, please contact the Data Controller using the contact information provided above.
Data Protection Officer (DPO) and Representative
Our designated Data Protection Officer is Ian Webster. He can be contacted at [email protected].
Changes
We may update this privacy policy from time to time in order to reflect, for example, changes to our practices or for other operational, legal or regulatory reasons.
Contact us
We are Alioth LLC d/b/a QuickChart. For more information about our privacy practices, if you have questions, if you would like to make a complaint, or to request a copy or deletion of your information pursuant to GDPR regulations, please contact us by e-mail at [email protected].

        
        
      
      
      
        
          Table of Contents
        
        
          
                
                    
                    Personal information we collect
            		

                    How do we use your personal information?
            		

                    Sharing your personal information
            		

                    Data retention
            
                
                    
                    Images
            		

                    HTTP logs
            		

                    Short URLs and Templates
            		

                    Order information
            		
                
            		

                    Do not track
            		

                    Your rights
            		

                    Subprocessors
            		

                    Data Controller
            		

                    Data Protection Officer (DPO) and Representative
            		

                    Changes
            		

                    Contact us\n\n\n\nPlease read these terms and conditions carefully before using Our Service.
Interpretation and Definitions
Interpretation
The words of which the initial letter is capitalized have meanings defined
under the following conditions. The following definitions shall have the same
meaning regardless of whether they appear in singular or in plural.
Definitions
For the purposes of these Terms and Conditions:


Affiliate means an entity that controls, is controlled by or is under
common control with a party, where “control” means ownership of 50% or
more of the shares, equity interest or other securities entitled to vote
for election of directors or other managing authority.


Account means a unique account created for You to access our Service or
parts of our Service.


Country refers to: California, United States


Company (referred to as either “the Company”, “We”, “Us” or “Our” in this
Agreement) refers to Alioth LLC, #1246 700 El Camino Real Suite 120, Menlo Park, CA 94025.


Content refers to content such as text, images, or other information that
can be posted, uploaded, linked to or otherwise made available by You,
regardless of the form of that content.


Device means any device that can access the Service such as a computer, a
cellphone or a digital tablet.


Service refers to the Website.


Subscriptions refer to the services or access to the Service offered on a
subscription basis by the Company to You.


Terms and Conditions (also referred as “Terms”) mean these Terms and
Conditions that form the entire agreement between You and the Company
regarding the use of the Service.


Third-party Social Media Service means any services or content (including
data, information, products or services) provided by a third-party that
may be displayed, included or made available by the Service.


Website refers to QuickChart, accessible from https://quickchart.io/


Password refers to a text password or API key.


You means the individual accessing or using the Service, or the company,
or other legal entity on behalf of which such individual is accessing or
using the Service, as applicable.


Acknowledgment
These are the Terms and Conditions governing the use of this Service and the
agreement that operates between You and the Company. These Terms and
Conditions set out the rights and obligations of all users regarding the use
of the Service.
Your access to and use of the Service is conditioned on Your acceptance of and
compliance with these Terms and Conditions. These Terms and Conditions apply
to all visitors, users and others who access or use the Service.
By accessing or using the Service You agree to be bound by these Terms and
Conditions. If You disagree with any part of these Terms and Conditions then
You may not access the Service.
You represent that you are over the age of 18. The Company does not permit
those under 18 to use the Service.
Your access to and use of the Service is also conditioned on Your acceptance
of and compliance with the Privacy Policy of the Company. Our Privacy Policy
describes Our policies and procedures on the collection, use and disclosure of
Your personal information when You use the Application or the Website and
tells You about Your privacy rights and how the law protects You. Please read
Our Privacy Policy carefully before using Our Service.
Subscriptions
Subscription period
The Service or some parts of the Service are available only with a paid
Subscription. You will be billed in advance on a recurring and periodic basis
(such as daily, weekly, monthly or annually), depending on the type of
Subscription plan you select when purchasing the Subscription.
At the end of each period, Your Subscription will automatically renew under
the exact same conditions unless You cancel it or the Company cancels it.
Subscription cancellations
You may cancel Your Subscription renewal either through Your Account settings
page or by contacting the Company. You will not receive a refund for the fees
You already paid for Your current Subscription period and You will be able to
access the Service until the end of Your current Subscription period.
Billing
You shall provide the Company with accurate and complete billing information
including full name, address, state, zip code, telephone number, and a valid
payment method information.
Should automatic billing fail to occur for any reason, the Company will issue
an electronic invoice indicating that you must proceed manually, within a
certain deadline date, with the full payment corresponding to the billing
period as indicated on the invoice.
Fee Changes
The Company, in its sole discretion and at any time, may modify the
Subscription fees. Any Subscription fee change will become effective at the
end of the then-current Subscription period.
The Company will provide You with reasonable prior notice of any change in
Subscription fees to give You an opportunity to terminate Your Subscription
before such change becomes effective.
Your continued use of the Service after the Subscription fee change comes into
effect constitutes Your agreement to pay the modified Subscription fee amount.
Refunds
Except when required by law, paid Subscription fees are non-refundable.
Certain refund requests for Subscriptions may be considered by the Company on
a case-by-case basis and granted at the sole discretion of the Company.
User Accounts
When You create an account with Us, You must provide Us information that is
accurate, complete, and current at all times. Failure to do so constitutes a
breach of the Terms, which may result in immediate termination of Your account
on Our Service.
You are responsible for safeguarding the Password that You use to access the
Service and for any activities or actions under Your Password, whether Your
Password is with Our Service or a Third-Party Social Media Service.
You agree not to disclose Your Password to any third party. You must notify Us
immediately upon becoming aware of any breach of security or unauthorized use
of Your account.
You may not use as a username the name of another person or entity or that is
not lawfully available for use, a name or trademark that is subject to any
rights of another person or entity other than You without appropriate
authorization, or a name that is otherwise offensive, vulgar or obscene.
Content
Your Right to Create Content
Our Service allows You to create Content. You are responsible for the Content
that You create with the Service, including its legality, reliability, and
appropriateness.
By creating Content with the Service, You retain any and all of Your rights to
any Content You submit, create or display on or through the Service and You are
responsible for protecting those rights.
You represent and warrant that: (i) the Content is Yours (You own it) or You
have the right to use it and grant Us the rights and license as provided in
these Terms, and (ii) the creation of Your Content on or through the Service
does not violate the privacy rights, publicity rights, copyrights, contract
rights or any other rights of any person.
Content Restrictions
The Company is not responsible for the content of the Service’s users. You
expressly understand and agree that You are solely responsible for the Content
and for all activity that occurs under your account, whether done so by You or
any third person using Your account.
You may not transmit any Content that is unlawful, offensive, upsetting,
intended to disgust, threatening, libelous, defamatory, obscene or otherwise
objectionable. Examples of such objectionable Content include, but are not
limited to, the following:

Unlawful or promoting unlawful activity.
Defamatory, discriminatory, or mean-spirited content, including references
or commentary about religion, race, sexual orientation, gender,
national/ethnic origin, or other targeted groups.
Spam, machine – or randomly – generated, constituting unauthorized or
unsolicited advertising, chain letters, any other form of unauthorized
solicitation, or any form of lottery or gambling.
Containing or installing any viruses, worms, malware, trojan horses, or
other content that is designed or intended to disrupt, damage, or limit
the functioning of any software, hardware or telecommunications equipment
or to damage or obtain unauthorized access to any data or other
information of a third person.
Infringing on any proprietary rights of any party, including patent,
trademark, trade secret, copyright, right of publicity or other rights.
Impersonating any person or entity including the Company and its employees
or representatives.
Violating the privacy of any third person.
False information and features.

The Company reserves the right, but not the obligation, to, in its sole
discretion, determine whether or not any Content is appropriate and complies
with this Terms, refuse or remove this Content. The Company further reserves
the right to make formatting and edits and change the manner any Content. The
Company can also limit or revoke the use of the Service if You post such
objectionable Content. As the Company cannot control all content posted by
users and/or third parties on the Service, you agree to use the Service at
your own risk. You understand that by using the Service You may be exposed to
content that You may find offensive, indecent, incorrect or objectionable, and
You agree that under no circumstances will the Company be liable in any way
for any content, including any errors or omissions in any content, or any loss
or damage of any kind incurred as a result of your use of any content.
Content Backups
Although regular backups of Content are performed, the Company do not
guarantee there will be no loss or corruption of data.
Corrupt or invalid backup points may be caused by, without limitation, Content
that is corrupted prior to being backed up or that changes during the time a
backup is performed.
The Company will provide support and attempt to troubleshoot any known or
discovered issues that may affect the backups of Content. But You acknowledge
that the Company has no liability related to the integrity of Content or the
failure to successfully restore Content to a usable state.
You agree to maintain a complete and accurate copy of any Content in a
location independent of the Service.
Copyright Policy
Intellectual Property Infringement
We respect the intellectual property rights of others. It is Our policy to
respond to any claim that Content posted on the Service infringes a copyright
or other intellectual property infringement of any person.
If You are a copyright owner, or authorized on behalf of one, and You believe
that the copyrighted work has been copied in a way that constitutes copyright
infringement that is taking place through the Service, You must submit Your
notice in writing to the attention of our copyright agent via email at
[email protected] and include in Your notice a detailed description of the
alleged infringement.
You may be held accountable for damages (including costs and attorneys’ fees)
for misrepresenting that any Content is infringing Your copyright.
DMCA Notice and DMCA Procedure for Copyright Infringement Claims
You may submit a notification pursuant to the Digital Millennium Copyright Act
(DMCA) by providing our Copyright Agent with the following information in
writing (see 17 U.S.C 512©(3) for further detail):

An electronic or physical signature of the person authorized to act on
behalf of the owner of the copyright’s interest.
A description of the copyrighted work that You claim has been infringed,
including the URL (i.e., web page address) of the location where the
copyrighted work exists or a copy of the copyrighted work.
Identification of the URL or other specific location on the Service where
the material that You claim is infringing is located.
Your address, telephone number, and email address.
A statement by You that You have a good faith belief that the disputed use
is not authorized by the copyright owner, its agent, or the law.
A statement by You, made under penalty of perjury, that the above
information in Your notice is accurate and that You are the copyright
owner or authorized to act on the copyright owner’s behalf.

You can contact our copyright agent via email at [email protected]. Upon
receipt of a notification, the Company will take whatever action, in its sole
discretion, it deems appropriate, including removal of the challenged content
from the Service.
Links to Other Websites
Our Service may contain links to third-party web sites or services that are
not owned or controlled by the Company.
The Company has no control over, and assumes no responsibility for, the
content, privacy policies, or practices of any third party web sites or
services. You further acknowledge and agree that the Company shall not be
responsible or liable, directly or indirectly, for any damage or loss caused
or alleged to be caused by or in connection with the use of or reliance on any
such content, goods or services available on or through any such web sites or
services.
We strongly advise You to read the terms and conditions and privacy policies
of any third-party web sites or services that You visit.
Termination
We may terminate or suspend Your Account immediately, without prior notice or
liability, for any reason whatsoever, including without limitation if You
breach these Terms and Conditions.
Upon termination, Your right to use the Service will cease immediately. If You
wish to terminate Your Account, You may simply discontinue using the Service.
Limitation of Liability
Notwithstanding any damages that You might incur, the entire liability of the
Company and any of its suppliers under any provision of this Terms and Your
exclusive remedy for all of the foregoing shall be limited to the amount
actually paid by You through the Service or 100 USD if You haven’t purchased
anything through the Service.
To the maximum extent permitted by applicable law, in no event shall the
Company or its suppliers be liable for any special, incidental, indirect, or
consequential damages whatsoever (including, but not limited to, damages for
loss of profits, loss of data or other information, for business interruption,
for personal injury, loss of privacy arising out of or in any way related to
the use of or inability to use the Service, third-party software and/or third-
party hardware used with the Service, or otherwise in connection with any
provision of this Terms), even if the Company or any supplier has been advised
of the possibility of such damages and even if the remedy fails of its
essential purpose.
Some states do not allow the exclusion of implied warranties or limitation of
liability for incidental or consequential damages, which means that some of
the above limitations may not apply. In these states, each party’s liability
will be limited to the greatest extent permitted by law.
“AS IS” and “AS AVAILABLE” Disclaimer
The Service is provided to You “AS IS” and “AS AVAILABLE” and with all faults
and defects without warranty of any kind. To the maximum extent permitted
under applicable law, the Company, on its own behalf and on behalf of its
Affiliates and its and their respective licensors and service providers,
expressly disclaims all warranties, whether express, implied, statutory or
otherwise, with respect to the Service, including all implied warranties of
merchantability, fitness for a particular purpose, title and non-infringement,
and warranties that may arise out of course of dealing, course of performance,
usage or trade practice. Without limitation to the foregoing, the Company
provides no warranty or undertaking, and makes no representation of any kind
that the Service will meet Your requirements, achieve any intended results, be
compatible or work with any other software, applications, systems or services,
operate without interruption, meet any performance or reliability standards or
be error free or that any errors or defects can or will be corrected.
Without limiting the foregoing, neither the Company nor any of the company’s
provider makes any representation or warranty of any kind, express or implied:
(i) as to the operation or availability of the Service, or the information,
content, and materials or products included thereon; (ii) that the Service
will be uninterrupted or error-free; (iii) as to the accuracy, reliability, or
currency of any information or content provided through the Service; or (iv)
that the Service, its servers, the content, or e-mails sent from or on behalf
of the Company are free of viruses, scripts, trojan horses, worms, malware,
timebombs or other harmful components.
Some jurisdictions do not allow the exclusion of certain types of warranties
or limitations on applicable statutory rights of a consumer, so some or all of
the above exclusions and limitations may not apply to You. But in such a case
the exclusions and limitations set forth in this section shall be applied to
the greatest extent enforceable under applicable law.
Governing Law
The laws of the Country, excluding its conflicts of law rules, shall govern
this Terms and Your use of the Service. Your use of the Application may also
be subject to other local, state, national, or international laws.
Disputes Resolution
If You have any concern or dispute about the Service, You agree to first try
to resolve the dispute informally by contacting the Company.
For European Union (EU) Users
If You are a European Union consumer, you will benefit from any mandatory
provisions of the law of the country in which you are resident in.
United States Federal Government End Use Provisions
If You are a U.S. federal government end user, our Service is a “Commercial
Item” as that term is defined at 48 C.F.R. §2.101.
United States Legal Compliance
You represent and warrant that (i) You are not located in a country that is
subject to the United States government embargo, or that has been designated
by the United States government as a “terrorist supporting” country, and (ii)
You are not listed on any United States government list of prohibited or
restricted parties.
Severability and Waiver
Severability
If any provision of these Terms is held to be unenforceable or invalid, such
provision will be changed and interpreted to accomplish the objectives of such
provision to the greatest extent possible under applicable law and the
remaining provisions will continue in full force and effect.
Waiver
Except as provided herein, the failure to exercise a right or to require
performance of an obligation under this Terms shall not effect a party’s
ability to exercise such right or require such performance at any time
thereafter nor shall be the waiver of a breach constitute a waiver of any
subsequent breach.
Translation Interpretation
These Terms and Conditions may have been translated if We have made them
available to You on our Service. You agree that the original English text
shall prevail in the case of a dispute.
Changes to These Terms and Conditions
We reserve the right, at Our sole discretion, to modify or replace these Terms
at any time. If a revision is material We will make reasonable efforts to
provide at least 30 days’ notice prior to any new terms taking effect. What
constitutes a material change will be determined at Our sole discretion.
By continuing to access or use Our Service after those revisions become
effective, You agree to be bound by the revised terms. If You do not agree to
the new terms, in whole or in part, please stop using the website and the
Service.
Data Processing Agreement
By using the QuickChart subscription services, you, as the Data Controller, agree to the terms and conditions set forth in the Data Processing Agreement (“DPA”) available at https://quickchart.io/privacy/data-processing-agreement. The DPA is incorporated into these Terms of Use by reference and forms an integral part of the agreement between you and Alioth LLC d/b/a QuickChart (“Data Processor”) with respect to the processing of Personal Data. In the event of any conflict or inconsistency between these Terms of Use and the DPA, the provisions of the DPA shall prevail to the extent of such conflict or inconsistency.
Contact Us
If you have any questions about these Terms and Conditions, You can contact
us:

By email: [email protected]\n\nPlease read these terms and conditions carefully before using Our Service.
Interpretation and Definitions
Interpretation
The words of which the initial letter is capitalized have meanings defined
under the following conditions. The following definitions shall have the same
meaning regardless of whether they appear in singular or in plural.
Definitions
For the purposes of these Terms and Conditions:


Affiliate means an entity that controls, is controlled by or is under
common control with a party, where “control” means ownership of 50% or
more of the shares, equity interest or other securities entitled to vote
for election of directors or other managing authority.


Account means a unique account created for You to access our Service or
parts of our Service.


Country refers to: California, United States


Company (referred to as either “the Company”, “We”, “Us” or “Our” in this
Agreement) refers to Alioth LLC, #1246 700 El Camino Real Suite 120, Menlo Park, CA 94025.


Content refers to content such as text, images, or other information that
can be posted, uploaded, linked to or otherwise made available by You,
regardless of the form of that content.


Device means any device that can access the Service such as a computer, a
cellphone or a digital tablet.


Service refers to the Website.


Subscriptions refer to the services or access to the Service offered on a
subscription basis by the Company to You.


Terms and Conditions (also referred as “Terms”) mean these Terms and
Conditions that form the entire agreement between You and the Company
regarding the use of the Service.


Third-party Social Media Service means any services or content (including
data, information, products or services) provided by a third-party that
may be displayed, included or made available by the Service.


Website refers to QuickChart, accessible from https://quickchart.io/


Password refers to a text password or API key.


You means the individual accessing or using the Service, or the company,
or other legal entity on behalf of which such individual is accessing or
using the Service, as applicable.


Acknowledgment
These are the Terms and Conditions governing the use of this Service and the
agreement that operates between You and the Company. These Terms and
Conditions set out the rights and obligations of all users regarding the use
of the Service.
Your access to and use of the Service is conditioned on Your acceptance of and
compliance with these Terms and Conditions. These Terms and Conditions apply
to all visitors, users and others who access or use the Service.
By accessing or using the Service You agree to be bound by these Terms and
Conditions. If You disagree with any part of these Terms and Conditions then
You may not access the Service.
You represent that you are over the age of 18. The Company does not permit
those under 18 to use the Service.
Your access to and use of the Service is also conditioned on Your acceptance
of and compliance with the Privacy Policy of the Company. Our Privacy Policy
describes Our policies and procedures on the collection, use and disclosure of
Your personal information when You use the Application or the Website and
tells You about Your privacy rights and how the law protects You. Please read
Our Privacy Policy carefully before using Our Service.
Subscriptions
Subscription period
The Service or some parts of the Service are available only with a paid
Subscription. You will be billed in advance on a recurring and periodic basis
(such as daily, weekly, monthly or annually), depending on the type of
Subscription plan you select when purchasing the Subscription.
At the end of each period, Your Subscription will automatically renew under
the exact same conditions unless You cancel it or the Company cancels it.
Subscription cancellations
You may cancel Your Subscription renewal either through Your Account settings
page or by contacting the Company. You will not receive a refund for the fees
You already paid for Your current Subscription period and You will be able to
access the Service until the end of Your current Subscription period.
Billing
You shall provide the Company with accurate and complete billing information
including full name, address, state, zip code, telephone number, and a valid
payment method information.
Should automatic billing fail to occur for any reason, the Company will issue
an electronic invoice indicating that you must proceed manually, within a
certain deadline date, with the full payment corresponding to the billing
period as indicated on the invoice.
Fee Changes
The Company, in its sole discretion and at any time, may modify the
Subscription fees. Any Subscription fee change will become effective at the
end of the then-current Subscription period.
The Company will provide You with reasonable prior notice of any change in
Subscription fees to give You an opportunity to terminate Your Subscription
before such change becomes effective.
Your continued use of the Service after the Subscription fee change comes into
effect constitutes Your agreement to pay the modified Subscription fee amount.
Refunds
Except when required by law, paid Subscription fees are non-refundable.
Certain refund requests for Subscriptions may be considered by the Company on
a case-by-case basis and granted at the sole discretion of the Company.
User Accounts
When You create an account with Us, You must provide Us information that is
accurate, complete, and current at all times. Failure to do so constitutes a
breach of the Terms, which may result in immediate termination of Your account
on Our Service.
You are responsible for safeguarding the Password that You use to access the
Service and for any activities or actions under Your Password, whether Your
Password is with Our Service or a Third-Party Social Media Service.
You agree not to disclose Your Password to any third party. You must notify Us
immediately upon becoming aware of any breach of security or unauthorized use
of Your account.
You may not use as a username the name of another person or entity or that is
not lawfully available for use, a name or trademark that is subject to any
rights of another person or entity other than You without appropriate
authorization, or a name that is otherwise offensive, vulgar or obscene.
Content
Your Right to Create Content
Our Service allows You to create Content. You are responsible for the Content
that You create with the Service, including its legality, reliability, and
appropriateness.
By creating Content with the Service, You retain any and all of Your rights to
any Content You submit, create or display on or through the Service and You are
responsible for protecting those rights.
You represent and warrant that: (i) the Content is Yours (You own it) or You
have the right to use it and grant Us the rights and license as provided in
these Terms, and (ii) the creation of Your Content on or through the Service
does not violate the privacy rights, publicity rights, copyrights, contract
rights or any other rights of any person.
Content Restrictions
The Company is not responsible for the content of the Service’s users. You
expressly understand and agree that You are solely responsible for the Content
and for all activity that occurs under your account, whether done so by You or
any third person using Your account.
You may not transmit any Content that is unlawful, offensive, upsetting,
intended to disgust, threatening, libelous, defamatory, obscene or otherwise
objectionable. Examples of such objectionable Content include, but are not
limited to, the following:

Unlawful or promoting unlawful activity.
Defamatory, discriminatory, or mean-spirited content, including references
or commentary about religion, race, sexual orientation, gender,
national/ethnic origin, or other targeted groups.
Spam, machine – or randomly – generated, constituting unauthorized or
unsolicited advertising, chain letters, any other form of unauthorized
solicitation, or any form of lottery or gambling.
Containing or installing any viruses, worms, malware, trojan horses, or
other content that is designed or intended to disrupt, damage, or limit
the functioning of any software, hardware or telecommunications equipment
or to damage or obtain unauthorized access to any data or other
information of a third person.
Infringing on any proprietary rights of any party, including patent,
trademark, trade secret, copyright, right of publicity or other rights.
Impersonating any person or entity including the Company and its employees
or representatives.
Violating the privacy of any third person.
False information and features.

The Company reserves the right, but not the obligation, to, in its sole
discretion, determine whether or not any Content is appropriate and complies
with this Terms, refuse or remove this Content. The Company further reserves
the right to make formatting and edits and change the manner any Content. The
Company can also limit or revoke the use of the Service if You post such
objectionable Content. As the Company cannot control all content posted by
users and/or third parties on the Service, you agree to use the Service at
your own risk. You understand that by using the Service You may be exposed to
content that You may find offensive, indecent, incorrect or objectionable, and
You agree that under no circumstances will the Company be liable in any way
for any content, including any errors or omissions in any content, or any loss
or damage of any kind incurred as a result of your use of any content.
Content Backups
Although regular backups of Content are performed, the Company do not
guarantee there will be no loss or corruption of data.
Corrupt or invalid backup points may be caused by, without limitation, Content
that is corrupted prior to being backed up or that changes during the time a
backup is performed.
The Company will provide support and attempt to troubleshoot any known or
discovered issues that may affect the backups of Content. But You acknowledge
that the Company has no liability related to the integrity of Content or the
failure to successfully restore Content to a usable state.
You agree to maintain a complete and accurate copy of any Content in a
location independent of the Service.
Copyright Policy
Intellectual Property Infringement
We respect the intellectual property rights of others. It is Our policy to
respond to any claim that Content posted on the Service infringes a copyright
or other intellectual property infringement of any person.
If You are a copyright owner, or authorized on behalf of one, and You believe
that the copyrighted work has been copied in a way that constitutes copyright
infringement that is taking place through the Service, You must submit Your
notice in writing to the attention of our copyright agent via email at
[email protected] and include in Your notice a detailed description of the
alleged infringement.
You may be held accountable for damages (including costs and attorneys’ fees)
for misrepresenting that any Content is infringing Your copyright.
DMCA Notice and DMCA Procedure for Copyright Infringement Claims
You may submit a notification pursuant to the Digital Millennium Copyright Act
(DMCA) by providing our Copyright Agent with the following information in
writing (see 17 U.S.C 512©(3) for further detail):

An electronic or physical signature of the person authorized to act on
behalf of the owner of the copyright’s interest.
A description of the copyrighted work that You claim has been infringed,
including the URL (i.e., web page address) of the location where the
copyrighted work exists or a copy of the copyrighted work.
Identification of the URL or other specific location on the Service where
the material that You claim is infringing is located.
Your address, telephone number, and email address.
A statement by You that You have a good faith belief that the disputed use
is not authorized by the copyright owner, its agent, or the law.
A statement by You, made under penalty of perjury, that the above
information in Your notice is accurate and that You are the copyright
owner or authorized to act on the copyright owner’s behalf.

You can contact our copyright agent via email at [email protected]. Upon
receipt of a notification, the Company will take whatever action, in its sole
discretion, it deems appropriate, including removal of the challenged content
from the Service.
Links to Other Websites
Our Service may contain links to third-party web sites or services that are
not owned or controlled by the Company.
The Company has no control over, and assumes no responsibility for, the
content, privacy policies, or practices of any third party web sites or
services. You further acknowledge and agree that the Company shall not be
responsible or liable, directly or indirectly, for any damage or loss caused
or alleged to be caused by or in connection with the use of or reliance on any
such content, goods or services available on or through any such web sites or
services.
We strongly advise You to read the terms and conditions and privacy policies
of any third-party web sites or services that You visit.
Termination
We may terminate or suspend Your Account immediately, without prior notice or
liability, for any reason whatsoever, including without limitation if You
breach these Terms and Conditions.
Upon termination, Your right to use the Service will cease immediately. If You
wish to terminate Your Account, You may simply discontinue using the Service.
Limitation of Liability
Notwithstanding any damages that You might incur, the entire liability of the
Company and any of its suppliers under any provision of this Terms and Your
exclusive remedy for all of the foregoing shall be limited to the amount
actually paid by You through the Service or 100 USD if You haven’t purchased
anything through the Service.
To the maximum extent permitted by applicable law, in no event shall the
Company or its suppliers be liable for any special, incidental, indirect, or
consequential damages whatsoever (including, but not limited to, damages for
loss of profits, loss of data or other information, for business interruption,
for personal injury, loss of privacy arising out of or in any way related to
the use of or inability to use the Service, third-party software and/or third-
party hardware used with the Service, or otherwise in connection with any
provision of this Terms), even if the Company or any supplier has been advised
of the possibility of such damages and even if the remedy fails of its
essential purpose.
Some states do not allow the exclusion of implied warranties or limitation of
liability for incidental or consequential damages, which means that some of
the above limitations may not apply. In these states, each party’s liability
will be limited to the greatest extent permitted by law.
“AS IS” and “AS AVAILABLE” Disclaimer
The Service is provided to You “AS IS” and “AS AVAILABLE” and with all faults
and defects without warranty of any kind. To the maximum extent permitted
under applicable law, the Company, on its own behalf and on behalf of its
Affiliates and its and their respective licensors and service providers,
expressly disclaims all warranties, whether express, implied, statutory or
otherwise, with respect to the Service, including all implied warranties of
merchantability, fitness for a particular purpose, title and non-infringement,
and warranties that may arise out of course of dealing, course of performance,
usage or trade practice. Without limitation to the foregoing, the Company
provides no warranty or undertaking, and makes no representation of any kind
that the Service will meet Your requirements, achieve any intended results, be
compatible or work with any other software, applications, systems or services,
operate without interruption, meet any performance or reliability standards or
be error free or that any errors or defects can or will be corrected.
Without limiting the foregoing, neither the Company nor any of the company’s
provider makes any representation or warranty of any kind, express or implied:
(i) as to the operation or availability of the Service, or the information,
content, and materials or products included thereon; (ii) that the Service
will be uninterrupted or error-free; (iii) as to the accuracy, reliability, or
currency of any information or content provided through the Service; or (iv)
that the Service, its servers, the content, or e-mails sent from or on behalf
of the Company are free of viruses, scripts, trojan horses, worms, malware,
timebombs or other harmful components.
Some jurisdictions do not allow the exclusion of certain types of warranties
or limitations on applicable statutory rights of a consumer, so some or all of
the above exclusions and limitations may not apply to You. But in such a case
the exclusions and limitations set forth in this section shall be applied to
the greatest extent enforceable under applicable law.
Governing Law
The laws of the Country, excluding its conflicts of law rules, shall govern
this Terms and Your use of the Service. Your use of the Application may also
be subject to other local, state, national, or international laws.
Disputes Resolution
If You have any concern or dispute about the Service, You agree to first try
to resolve the dispute informally by contacting the Company.
For European Union (EU) Users
If You are a European Union consumer, you will benefit from any mandatory
provisions of the law of the country in which you are resident in.
United States Federal Government End Use Provisions
If You are a U.S. federal government end user, our Service is a “Commercial
Item” as that term is defined at 48 C.F.R. §2.101.
United States Legal Compliance
You represent and warrant that (i) You are not located in a country that is
subject to the United States government embargo, or that has been designated
by the United States government as a “terrorist supporting” country, and (ii)
You are not listed on any United States government list of prohibited or
restricted parties.
Severability and Waiver
Severability
If any provision of these Terms is held to be unenforceable or invalid, such
provision will be changed and interpreted to accomplish the objectives of such
provision to the greatest extent possible under applicable law and the
remaining provisions will continue in full force and effect.
Waiver
Except as provided herein, the failure to exercise a right or to require
performance of an obligation under this Terms shall not effect a party’s
ability to exercise such right or require such performance at any time
thereafter nor shall be the waiver of a breach constitute a waiver of any
subsequent breach.
Translation Interpretation
These Terms and Conditions may have been translated if We have made them
available to You on our Service. You agree that the original English text
shall prevail in the case of a dispute.
Changes to These Terms and Conditions
We reserve the right, at Our sole discretion, to modify or replace these Terms
at any time. If a revision is material We will make reasonable efforts to
provide at least 30 days’ notice prior to any new terms taking effect. What
constitutes a material change will be determined at Our sole discretion.
By continuing to access or use Our Service after those revisions become
effective, You agree to be bound by the revised terms. If You do not agree to
the new terms, in whole or in part, please stop using the website and the
Service.
Data Processing Agreement
By using the QuickChart subscription services, you, as the Data Controller, agree to the terms and conditions set forth in the Data Processing Agreement (“DPA”) available at https://quickchart.io/privacy/data-processing-agreement. The DPA is incorporated into these Terms of Use by reference and forms an integral part of the agreement between you and Alioth LLC d/b/a QuickChart (“Data Processor”) with respect to the processing of Personal Data. In the event of any conflict or inconsistency between these Terms of Use and the DPA, the provisions of the DPA shall prevail to the extent of such conflict or inconsistency.
Contact Us
If you have any questions about these Terms and Conditions, You can contact
us:

By email: [email protected]


        
        
      
      
      
        
          Table of Contents
        
        
          
                
                    
                    Interpretation
            		

                    Definitions
            		

                    Subscription period
            		

                    Subscription cancellations
            		

                    Billing
            		

                    Fee Changes
            		

                    Refunds
            		

                    Your Right to Create Content
            		

                    Content Restrictions
            		

                    Content Backups
            		

                    Intellectual Property Infringement
            		

                    DMCA Notice and DMCA Procedure for Copyright Infringement Claims
            		

                    Severability
            		

                    Waiver\n\nContent\n\n\n\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nQuickChart
        
          
            Docs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nDocs
            Chart Gallery
            Chart Maker
            Pricing
            Open Source
            Support\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.
  
  
    Click an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.
  
  
    
      Chart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data
      
    
  
  
     
        Bar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable
        
    
  
  
    Some examples above are based on examples from the Chart.js project.\nEach chart shown below is a QuickChart image built with a Chart.js config.  These images can be sent in emails or embedded in any platform.\nClick an image below to view and edit the chart config.  These examples will help you get started with QuickChart and Chart.js.  Need help?  View documentation or get in touch.\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...
      
    
    
      Scales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...
      
    
    
      Customization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nChart types
      
        Bar
        Line
        Area
        Pie/Doughnut
        Financial
        More types...\nScales
      
        Linear
        Logarithmic
        Date & time
        Scale lines & labels
        More options...\nCustomization
      
        Legend
        Title
        Labels
        Patterns & Images
        External data\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels
        
     
     
        Line charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment
        
     
     
        Area charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants
        
     
     
        Other charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart
        
     
     
        Linear scale
        Hide section
        
           Step size
           Min & max (suggested)
        
     
     
        Logarithmic scale
        Hide section
        
           Line
           Scatter
        
     
     
        Time scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)
        
     
     
        Scale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position
        
     
     
        Legend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style
        
     
     
        Title
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center
        
     
     
       Labels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting
       
     
     
        Patterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images
        
     
     
        External data
        Hide section
        
           From Google Sheets
           From Airtable\nBar charts
        Hide section
        
           Vertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nVertical
           Horizontal
           Multi axis
           Stacked
           Stacked groups
           Floating
           Rounded Corners
           Hide axes, gridlines, and labels
           Combo bar/line
           Custom colors
           Complex mixed
           Total labels
           Horizontal bars with labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHide axes, gridlines, and labels\nHorizontal bars with labels\nHorizontal bars with labels\nHorizontal bars with labels\nLine charts
        Hide section
        
           Basic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nBasic
           Multi axis
           Stepped
           Line styles
           Point styles - circle
           Point styles - triangle
           Point styles - star
           Point sizes
           Sparkline
           Hide axes, gridlines, and labels + gradient
           Scatter point (x,y) line chart
           Exponential Smoothing
           Styled line segment\nPoint styles - circle\nPoint styles - circle\nPoint styles - circle\nPoint styles - triangle\nPoint styles - triangle\nPoint styles - triangle\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nHide axes, gridlines, and labels + gradient\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nScatter point (x,y) line chart\nExponential Smoothing\nExponential Smoothing\nExponential Smoothing\nArea charts
        Hide section
        
           Boundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill
           Boundaries (line) - fill origin
           Boundaries (line) - fill start
           Boundaries (line) - fill end
           Fill below value (Chart.js v2)
           Fill to value (Chart.js v3)
           Stacked (line)
           Radar
           Quadrants\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - no fill\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill origin\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill start\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nBoundaries (line) - fill end\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill below value (Chart.js v2)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nFill to value (Chart.js v3)\nOther charts
        Hide section
        
           Bubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nBubble
           Scatter
           Doughnut
           Doughnut with labels
           Complex doughnut
           Simple doughnut
           Pie
           Labeled pie
           Polar area
           Radar
           QR Codes
           GraphViz Charts
           Gauge charts
           Radial gauge
           Speedometer
           Progress bar
           Annotated progress bar
           Annotated progress bar 2
           Annotated progress bar 3
           Waterfall
           Sankey Diagram
           Marginal Abatement Cost Curve (MACC)
           Funnel chart/Pyramid chart\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 2\nAnnotated progress bar 3\nAnnotated progress bar 3\nAnnotated progress bar 3\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nMarginal Abatement Cost Curve (MACC)\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nFunnel chart/Pyramid chart\nLinear scale
        Hide section
        
           Step size
           Min & max (suggested)\nStep size
           Min & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nMin & max (suggested)\nLogarithmic scale
        Hide section
        
           Line
           Scatter\nLine
           Scatter\nTime scale
        Hide section
        
           Line
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nLine
           Line (point data)
           Combo
           Gantt/timeline
           Financial (Candlestick)
           Financial (OHLC)\nFinancial (Candlestick)\nFinancial (Candlestick)\nFinancial (Candlestick)\nScale options
        Hide section
        
           Grid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nGrid lines spacing
           Grid lines style
           Custom axis labels
           Formatted numbers
           Multiline labels
           Vertical axis labels
           Filtering labels
           Non numeric Y axis
           Label styles
           Scale position\nLegend
        Hide section
        
           Positioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nPositioning - top
           Positioning - right
           Positioning - bottom
           Positioning - left
           Point style\nTitle
        Hide section
        
           Alignment - position top align center
           Alignment - position left align center\nAlignment - position top align center
           Alignment - position left align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position top align center\nAlignment - position left align center\nAlignment - position left align center\nAlignment - position left align center\nLabels and Annotations
       Hide section
       
           Labels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nLabels and Annotations\nLabels inside
           Labels outside
           Custom font size
           Error bars
           Annotations & data labels
           Annotations & data labels (Chart.js v3)
           Tick mark formatting\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nAnnotations & data labels (Chart.js v3)\nPatterns and Images
        Hide section
        
           Patterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nPatterns - Bar
           Patterns - Pie
           Gradient fill - horizontal
           Gradient fill - vertical
           Gradient line
           Background image
           Image in the middle
           Image fill
           Point images
           Labels with images
           Pie Chart with Images\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - horizontal\nGradient fill - vertical\nGradient fill - vertical\nGradient fill - vertical\nPie Chart with Images\nPie Chart with Images\nPie Chart with Images\nExternal data
        Hide section
        
           From Google Sheets
           From Airtable\nFrom Google Sheets
           From Airtable\nSome examples above are based on examples from the Chart.js project.\n© Alioth LLC
      ·
      Privacy & Compliance
      ·
      Terms of Service
      ·
      Contact
      
        Back to top\n© Alioth LLC
      ·
      Privacy
      ·
      Terms of Service
      ·
      Contact\n\n\nPlease enable cookies.
    
      
        Email Protection
        You are unable to access this email address quickchart.io
      

      
        
          
            The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?
                    
                
              
            
          
        
      

      
  
    Cloudflare Ray ID: 93647557699105b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nPlease enable cookies.\nEmail Protection
        You are unable to access this email address quickchart.io
      

      
        
          
            The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?
                    
                
              
            
          
        
      

      
  
    Cloudflare Ray ID: 93647557699105b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nEmail Protection
        You are unable to access this email address quickchart.io\nYou are unable to access this email address quickchart.io\nYou are unable to access this email address\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.\nIf you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.\nsign up for Cloudflare\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?\nHow does Cloudflare protect email addresses on website from spammers?\nCan I sign up for Cloudflare?\nCan I sign up for Cloudflare?\nCloudflare Ray ID: 93647557699105b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nCloudflare Ray ID: 93647557699105b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nCloudflare Ray ID: 93647557699105b6\nYour IP:
      Click to reveal
      20.39.61.197
      •\nPerformance & security by Cloudflare\nPerformance & security by\n\n\nPlease enable cookies.
    
      
        Email Protection
        You are unable to access this email address quickchart.io
      

      
        
          
            The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?
                    
                
              
            
          
        
      

      
  
    Cloudflare Ray ID: 93647557799805b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nPlease enable cookies.\nEmail Protection
        You are unable to access this email address quickchart.io
      

      
        
          
            The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?
                    
                
              
            
          
        
      

      
  
    Cloudflare Ray ID: 93647557799805b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nEmail Protection
        You are unable to access this email address quickchart.io\nYou are unable to access this email address quickchart.io\nYou are unable to access this email address\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.\nIf you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.\nsign up for Cloudflare\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?\nHow does Cloudflare protect email addresses on website from spammers?\nCan I sign up for Cloudflare?\nCan I sign up for Cloudflare?\nCloudflare Ray ID: 93647557799805b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nCloudflare Ray ID: 93647557799805b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nCloudflare Ray ID: 93647557799805b6\nYour IP:
      Click to reveal
      20.39.61.197
      •\nPerformance & security by Cloudflare\nPerformance & security by\n\n\nContact us
Direct support: [email protected]
To download invoices and update payment methods: Billing portal
How to create and configure charts: Ask questions here!
Sales: [email protected]


About QuickChart
Founded in 2015, QuickChart (Alioth LLC) provides tools for developers who want to create charts, graphs, and other data visualizations. We are based in San Mateo, California.
As software engineers and marketers, we built QuickChart because other chart services left much to be desired in terms of function and customization. QuickChart was open-source from the beginning and it quickly became one of the most popular ways to provision a chart render API.
Our aims at QuickChart are simple and straightforward:

Best-in-class speed and reliability: Our engineers have experience scaling the world’s largest tech companies. QuickChart customers will always be hosted on infrastructure that scales automatically and is carefully monitored.
Secure and private: We ensure that your chart data is deleted as soon as it’s rendered.
Open-source: Our open-source model is better for developers and the businesses they support. We actively contribute to the open data visualization community and avoid vendor lock-in and proprietary formats.

Thanks for using QuickChart,


  
  
  Ian Webster, CEO
  
  
    
  
  [email protected]
  
  +1 (650) 332-4607\n\nContact us
Direct support: [email protected]
To download invoices and update payment methods: Billing portal
How to create and configure charts: Ask questions here!
Sales: [email protected]


About QuickChart
Founded in 2015, QuickChart (Alioth LLC) provides tools for developers who want to create charts, graphs, and other data visualizations. We are based in San Mateo, California.
As software engineers and marketers, we built QuickChart because other chart services left much to be desired in terms of function and customization. QuickChart was open-source from the beginning and it quickly became one of the most popular ways to provision a chart render API.
Our aims at QuickChart are simple and straightforward:

Best-in-class speed and reliability: Our engineers have experience scaling the world’s largest tech companies. QuickChart customers will always be hosted on infrastructure that scales automatically and is carefully monitored.
Secure and private: We ensure that your chart data is deleted as soon as it’s rendered.
Open-source: Our open-source model is better for developers and the businesses they support. We actively contribute to the open data visualization community and avoid vendor lock-in and proprietary formats.

Thanks for using QuickChart,


  
  
  Ian Webster, CEO
  
  
    
  
  [email protected]
  
  +1 (650) 332-4607\n\n\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this page\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this pagePreviousIntroductionNextPOST endpointSupported parameterschartwidthheightdevicePixelRatiobackgroundColorversionformatencodingPostman examples\n\n\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this page\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this pagePreviousIntroductionNextPOST endpointSupported parameterschartwidthheightdevicePixelRatiobackgroundColorversionformatencodingPostman examples\n\n\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this page\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this pagePreviousIntroductionNextPOST endpointSupported parameterschartwidthheightdevicePixelRatiobackgroundColorversionformatencodingPostman examples\n\n\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this page\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this pagePreviousIntroductionNextPOST endpointSupported parameterschartwidthheightdevicePixelRatiobackgroundColorversionformatencodingPostman examples\n\n\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this page\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this pagePreviousIntroductionNextPOST endpointSupported parameterschartwidthheightdevicePixelRatiobackgroundColorversionformatencodingPostman examples\n\n\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this page\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this pagePreviousIntroductionNextPOST endpointSupported parameterschartwidthheightdevicePixelRatiobackgroundColorversionformatencodingPostman examples\n\n\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this page\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this pagePreviousIntroductionNextPOST endpointSupported parameterschartwidthheightdevicePixelRatiobackgroundColorversionformatencodingPostman examples\n\n\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this page\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this pagePreviousIntroductionNextPOST endpointSupported parameterschartwidthheightdevicePixelRatiobackgroundColorversionformatencodingPostman examples\n\n\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this page\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this pagePreviousIntroductionNextPOST endpointSupported parameterschartwidthheightdevicePixelRatiobackgroundColorversionformatencodingPostman examples\n\n\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this page\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this pagePreviousIntroductionNextPOST endpointSupported parameterschartwidthheightdevicePixelRatiobackgroundColorversionformatencodingPostman examples\n\n\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this page\n\nOn this pageAPI parametersThe chart endpoint https://quickchart.io/chart accepts query parameters listed below.
Combine these parameters in your query string. For example:
https://quickchart.io/chart?width=500&height=300&chart={...}
If you prefer not to construct the URL yourself, client libraries are available in many programming languages.
Supported parameters​
chart​

Type: Javascript or JSON object
Required: yes
Parameter name: chart or c

Chart.js configuration object to render. This is the definition of the chart in Javascript or JSON format.
If you are sending a GET request, we recommend that you URL-encode your chart configuration. If not
encoded, you will run into problems with special characters or syntax errors in your program. You
may also use base64 encoding (see encoding).
width​

Type: integer
Default: 500
Parameter name: width or w

Width of the image in pixels.
height​

Type: integer
Default: 300
Parameter name: height or h

Height of the image in pixels.
devicePixelRatio​

Type: integer
Accepted values: 1 or 2
Default: 2

Device pixel ratio of the output. Image width and height are multiplied by this value. Defaults to 2.0 to ensure best image support on Retina devices.
infoThis setting defaults to 2, meaning all images will be 2x width and height! To get an image that
is exactly width*height, set devicePixelRatio to 1.
backgroundColor​

Type: string
Accepted values: rgb, hex, hsl, color names
Default: transparent
Parameter name: backgroundColor or bkg

Background of the chart canvas. Accepts rgb format (rgb(255,255,120)), colors (red), and URL-encoded hex values (%23ff00ff).
version​

Type: string
Accepted values: 2, 3, 4, or any valid Chart.js version string
Default: 2.9.4
Parameter name: version or v

Chart.js version. Setting version to 4 enables latest stable Chart.js v4 support. Defaults to latest version of Chart.js v2.
format​

Type: string
Accepted values: png, webp, jpg, svg, pdf, base64
Default: png
Parameter name: format or f

Format of your output.
encoding​

Type: string
Accepted values: url or base64
Default: url

Encoding of your chart parameter.
Postman examples​
We've put together a public Postman collection for the QuickChart API. View it here:
Edit this pagePreviousIntroductionNextPOST endpointSupported parameterschartwidthheightdevicePixelRatiobackgroundColorversionformatencodingPostman examples\n\n\n\nPOST endpointIf your chart is large or complicated, you may prefer to send a POST request rather than a GET request. This avoids limitations on URL length and means you don't have to worry about URL encoding. The /chart POST endpoint returns a chart. It takes the standard request parameters as a JSON object:
{  "version": "2",  "backgroundColor": "transparent",  "width": 500,  "height": 300,  "devicePixelRatio": 1.0,  "format": "png",  "chart": {...}}
tipTo include Javascript code in chart (e.g. to format labels), you must send chart as a string, not as a JSON object.For examples of this, see documentation on using JS Functions.

Here is the type specification of the POST data object:
{  width: string;                        // Pixel width  height: string;                       // Pixel height  devicePixelRatio: number;             // Pixel ratio (2.0 by default)  format: string;                       // png, svg, or webp  backgroundColor: string;              // Canvas background  version: string;                      // Chart.js version  key: string;                          // API key (optional)  chart: string | ChartConfiguration;   // Chart.js configuration}
ChartConfiguration is a Chart.js v2+ configuration object in JSON format.Edit this page\n\nPOST endpointIf your chart is large or complicated, you may prefer to send a POST request rather than a GET request. This avoids limitations on URL length and means you don't have to worry about URL encoding. The /chart POST endpoint returns a chart. It takes the standard request parameters as a JSON object:
{  "version": "2",  "backgroundColor": "transparent",  "width": 500,  "height": 300,  "devicePixelRatio": 1.0,  "format": "png",  "chart": {...}}
tipTo include Javascript code in chart (e.g. to format labels), you must send chart as a string, not as a JSON object.For examples of this, see documentation on using JS Functions.

Here is the type specification of the POST data object:
{  width: string;                        // Pixel width  height: string;                       // Pixel height  devicePixelRatio: number;             // Pixel ratio (2.0 by default)  format: string;                       // png, svg, or webp  backgroundColor: string;              // Canvas background  version: string;                      // Chart.js version  key: string;                          // API key (optional)  chart: string | ChartConfiguration;   // Chart.js configuration}
ChartConfiguration is a Chart.js v2+ configuration object in JSON format.Edit this pagePreviousAPI parametersNextShort URLs and Templates\n\n\n\nOn this pageUsing Javascript functions
Some chart configs include Javascript functions. This requires special treatment if you're sending a POST request.
Be sure to send the chart parameter as a string, not as a JSON object.
Example​
Here's an example of a POST request. Note that this payload is valid JSON and the chart object is a string containing Javascript or JSON:
{  "backgroundColor": "transparent",  "width": 500,  "height": 300,  "format": "png",  "chart": "{type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]}]},options:{scales:{yAxes:[{ticks:{callback:function(value){return'$'+value;}}}]}}}"}
You can send a POST request using any programming language. We could, for example, put the above JSON in a file called chart_request.json and send it via curl:
curl -X POST \   -H "Content-Type: application/json" \   -d @chart_request.json \   'https://quickchart.io/chart' > chart.png
Building chart objects in Javascript​
To illustrate the above, here are a few Javascript examples showing how to build a raw chart definition containing a function:
Option 1: Build the config as a string​
Build the config as a string, not an object. This is the most straightforward way, and will work in any programming language.
const chartStr = `{  type: 'bar',  data: {    labels: ['January', 'February', 'March', 'April', 'May'],    datasets: [{      label: 'Dogs',      data: [ 50, 60, 70, 180, 190 ]    }]  },  options: {    scales: {      yAxes: [{        ticks: {          callback: function(value) {            return '$' + value;          }        }      }],    },  },}`;console.log(encodeURIComponent(chartStr));
Option 2: Build the config as a JSON object​
Construct your chart as a JSON object. Later, substitute your Javascript function.
const chartObj = {  type: 'bar',  data: {    labels: ['January', 'February', 'March', 'April', 'May'],    datasets: [      {        label: 'Dogs',        data: [50, 60, 70, 180, 190],      },    ],  },  options: {    scales: {      yAxes: [        {          ticks: {            callback: '__CALLBACK_PLACEHOLDER__',          },        },      ],    },  },};const myFormatterFunction = function (value) {  return '$' + value;};const chartStr = JSON.stringify(chartObj).replace(  '"__CALLBACK_PLACEHOLDER__"',  myFormatterFunction.toString(),);console.log(encodeURIComponent(chartStr));
Option 3: Use quickchart-js​
quickchart-js uses javascript-stringify to serialize a normal Javascript object containing a function.
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart.setConfig({  type: 'bar',  data: {    labels: ['January', 'February', 'March', 'April', 'May'],    datasets: [      {        label: 'Dogs',        data: [50, 60, 70, 180, 190],      },    ],  },  options: {    scales: {      yAxes: [        {          ticks: {            callback: function (value) {              return '$' + value;            },          },        },      ],    },  },});console.log(myChart.getUrl());
Postman example​
Need a live example to play around with? Take a look at this Postman example of a chart that contains a Javascript function.Edit this page\n\nOn this pageUsing Javascript functions
Some chart configs include Javascript functions. This requires special treatment if you're sending a POST request.
Be sure to send the chart parameter as a string, not as a JSON object.
Example​
Here's an example of a POST request. Note that this payload is valid JSON and the chart object is a string containing Javascript or JSON:
{  "backgroundColor": "transparent",  "width": 500,  "height": 300,  "format": "png",  "chart": "{type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]}]},options:{scales:{yAxes:[{ticks:{callback:function(value){return'$'+value;}}}]}}}"}
You can send a POST request using any programming language. We could, for example, put the above JSON in a file called chart_request.json and send it via curl:
curl -X POST \   -H "Content-Type: application/json" \   -d @chart_request.json \   'https://quickchart.io/chart' > chart.png
Building chart objects in Javascript​
To illustrate the above, here are a few Javascript examples showing how to build a raw chart definition containing a function:
Option 1: Build the config as a string​
Build the config as a string, not an object. This is the most straightforward way, and will work in any programming language.
const chartStr = `{  type: 'bar',  data: {    labels: ['January', 'February', 'March', 'April', 'May'],    datasets: [{      label: 'Dogs',      data: [ 50, 60, 70, 180, 190 ]    }]  },  options: {    scales: {      yAxes: [{        ticks: {          callback: function(value) {            return '$' + value;          }        }      }],    },  },}`;console.log(encodeURIComponent(chartStr));
Option 2: Build the config as a JSON object​
Construct your chart as a JSON object. Later, substitute your Javascript function.
const chartObj = {  type: 'bar',  data: {    labels: ['January', 'February', 'March', 'April', 'May'],    datasets: [      {        label: 'Dogs',        data: [50, 60, 70, 180, 190],      },    ],  },  options: {    scales: {      yAxes: [        {          ticks: {            callback: '__CALLBACK_PLACEHOLDER__',          },        },      ],    },  },};const myFormatterFunction = function (value) {  return '$' + value;};const chartStr = JSON.stringify(chartObj).replace(  '"__CALLBACK_PLACEHOLDER__"',  myFormatterFunction.toString(),);console.log(encodeURIComponent(chartStr));
Option 3: Use quickchart-js​
quickchart-js uses javascript-stringify to serialize a normal Javascript object containing a function.
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart.setConfig({  type: 'bar',  data: {    labels: ['January', 'February', 'March', 'April', 'May'],    datasets: [      {        label: 'Dogs',        data: [50, 60, 70, 180, 190],      },    ],  },  options: {    scales: {      yAxes: [        {          ticks: {            callback: function (value) {              return '$' + value;            },          },        },      ],    },  },});console.log(myChart.getUrl());
Postman example​
Need a live example to play around with? Take a look at this Postman example of a chart that contains a Javascript function.Edit this pagePreviousAuthenticating API requestsNextAdding a watermarkExampleBuilding chart objects in JavascriptOption 1: Build the config as a stringOption 2: Build the config as a JSON objectOption 3: Use quickchart-jsPostman example\n\n\n\nOn this pageAdvanced API


Short URLs​
You may want to create a shorter URL for your charts, especially if you are sending them via email or SMS. To generate a short URL for your chart, send a POST request to https://quickchart.io/chart/create.
The endpoint takes the following JSON request body, identical to the /chart POST endpoint:
{  width: string;                        // Pixel width  height: string;                       // Pixel height  devicePixelRatio: number;             // Pixel ratio (2.0 by default)  format: string;                       // png, svg, or webp  backgroundColor: string;              // Canvas background  version: string;                      // Chart.js version  key: string;                          // API key (optional)  chart: string | ChartConfiguration;   // Chart.js configuration}
Here's an example using curl. You can use any library that sends an HTTP POST request:
curl -X POST \     -H 'Content-Type: application/json' \     -d '{"chart": {"type": "bar", "data": {"labels": ["Hello", "World"], "datasets": [{"label": "Foo", "data": [1, 2]}]}}}' \     https://quickchart.io/chart/create
Here's an equivalent request using Python:
import jsonimport requestsquickchart_url = 'https://quickchart.io/chart/create'post_data = {'chart': {'type': 'bar', 'data': {'labels': ['Hello', 'World'],             'datasets': [{'label': 'Foo', 'data': [1, 2]}]}}}response = requests.post(    quickchart_url,    json=post_data,)if (response.status_code != 200):    print('Error:', response.text)else:    chart_response = json.loads(response.text)    print(chart_response)
You will get a response that looks like this:
{  "success": true,  "url": "https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232"}
Go to the URL in the response to render your chart.
Please note the following limitations:

It can take a couple seconds for short URLs to become active globally.
Request inputs are not validated before the URL is created. The chart is only rendered when the URL is visited.
If your chart includes Javascript, you must supply your chart definition as a string (see using JS functions).
Saved charts expire after 3 days for free users, 6 months for paid users.

Templates​
If you want to generate many charts, but they only differ slightly, you may prefer to use chart templates. Any chart with a Short URL can also be used as a template.
Customize a template by adding URL parameters to the template URL. The following template parameters are supported:

title - The title of the chart
labels - Comma-separated labels for the label axis of a chart (usually the X axis)
data1, data2, ..., dataN - Comma-separated data values for each dataseries
label1, label2, ..., labelN - Comma-separated labels for each dataseries
backgroundColor1, ..., backgroundColorN - Comma-separated backgrounds for each dataseries
borderColor1, ..., borderColorN - Comma-separated border colors for each dataseries

For example, this URL will take template zf-abc-123 and update its title to "New title":
https://quickchart.io/chart/render/zf-abc-123?title=New title
We can add a labels URL parameter:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
Or even override multiple datasets:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8
In addition to plain numbers, templates also accept (x, y) data values and arbitrary JSON objects.
An example walkthrough with a live template can be viewed here.
IFrames​
By default, short URLs/templates render as images and are not interactive. If you'd like to display a chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the short URL:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe src="demo_iframe.htm" frameborder="0" height="500" width="300" title="Iframe Example"></iframe>
Expiration​
Expiration of short URLs and templates varies based on whether you've created them using the /chart/create API endpoint, or via the Chart Maker.
Free TierProfessional PlanAPI3 days6 months  Can be extended by contacting supportAdvanced Chart Editor (Sandbox)3 days6 months  Can be extended by contacting supportChart Maker60+ days  Expiration is reset when rendered6+ months  Expiration is reset when rendered
An expired short URL will return a 404 Not Found error.Edit this page\n\nOn this pageAdvanced API


Short URLs​
You may want to create a shorter URL for your charts, especially if you are sending them via email or SMS. To generate a short URL for your chart, send a POST request to https://quickchart.io/chart/create.
The endpoint takes the following JSON request body, identical to the /chart POST endpoint:
{  width: string;                        // Pixel width  height: string;                       // Pixel height  devicePixelRatio: number;             // Pixel ratio (2.0 by default)  format: string;                       // png, svg, or webp  backgroundColor: string;              // Canvas background  version: string;                      // Chart.js version  key: string;                          // API key (optional)  chart: string | ChartConfiguration;   // Chart.js configuration}
Here's an example using curl. You can use any library that sends an HTTP POST request:
curl -X POST \     -H 'Content-Type: application/json' \     -d '{"chart": {"type": "bar", "data": {"labels": ["Hello", "World"], "datasets": [{"label": "Foo", "data": [1, 2]}]}}}' \     https://quickchart.io/chart/create
Here's an equivalent request using Python:
import jsonimport requestsquickchart_url = 'https://quickchart.io/chart/create'post_data = {'chart': {'type': 'bar', 'data': {'labels': ['Hello', 'World'],             'datasets': [{'label': 'Foo', 'data': [1, 2]}]}}}response = requests.post(    quickchart_url,    json=post_data,)if (response.status_code != 200):    print('Error:', response.text)else:    chart_response = json.loads(response.text)    print(chart_response)
You will get a response that looks like this:
{  "success": true,  "url": "https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232"}
Go to the URL in the response to render your chart.
Please note the following limitations:

It can take a couple seconds for short URLs to become active globally.
Request inputs are not validated before the URL is created. The chart is only rendered when the URL is visited.
If your chart includes Javascript, you must supply your chart definition as a string (see using JS functions).
Saved charts expire after 3 days for free users, 6 months for paid users.

Templates​
If you want to generate many charts, but they only differ slightly, you may prefer to use chart templates. Any chart with a Short URL can also be used as a template.
Customize a template by adding URL parameters to the template URL. The following template parameters are supported:

title - The title of the chart
labels - Comma-separated labels for the label axis of a chart (usually the X axis)
data1, data2, ..., dataN - Comma-separated data values for each dataseries
label1, label2, ..., labelN - Comma-separated labels for each dataseries
backgroundColor1, ..., backgroundColorN - Comma-separated backgrounds for each dataseries
borderColor1, ..., borderColorN - Comma-separated border colors for each dataseries

For example, this URL will take template zf-abc-123 and update its title to "New title":
https://quickchart.io/chart/render/zf-abc-123?title=New title
We can add a labels URL parameter:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
Or even override multiple datasets:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8
In addition to plain numbers, templates also accept (x, y) data values and arbitrary JSON objects.
An example walkthrough with a live template can be viewed here.
IFrames​
By default, short URLs/templates render as images and are not interactive. If you'd like to display a chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the short URL:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe src="demo_iframe.htm" frameborder="0" height="500" width="300" title="Iframe Example"></iframe>
Expiration​
Expiration of short URLs and templates varies based on whether you've created them using the /chart/create API endpoint, or via the Chart Maker.
Free TierProfessional PlanAPI3 days6 months  Can be extended by contacting supportAdvanced Chart Editor (Sandbox)3 days6 months  Can be extended by contacting supportChart Maker60+ days  Expiration is reset when rendered6+ months  Expiration is reset when rendered
An expired short URL will return a 404 Not Found error.Edit this pagePreviousPOST endpointNextClient librariesShort URLsTemplatesIFramesExpiration\n\n\n\nOn this pageAdvanced API


Short URLs​
You may want to create a shorter URL for your charts, especially if you are sending them via email or SMS. To generate a short URL for your chart, send a POST request to https://quickchart.io/chart/create.
The endpoint takes the following JSON request body, identical to the /chart POST endpoint:
{  width: string;                        // Pixel width  height: string;                       // Pixel height  devicePixelRatio: number;             // Pixel ratio (2.0 by default)  format: string;                       // png, svg, or webp  backgroundColor: string;              // Canvas background  version: string;                      // Chart.js version  key: string;                          // API key (optional)  chart: string | ChartConfiguration;   // Chart.js configuration}
Here's an example using curl. You can use any library that sends an HTTP POST request:
curl -X POST \     -H 'Content-Type: application/json' \     -d '{"chart": {"type": "bar", "data": {"labels": ["Hello", "World"], "datasets": [{"label": "Foo", "data": [1, 2]}]}}}' \     https://quickchart.io/chart/create
Here's an equivalent request using Python:
import jsonimport requestsquickchart_url = 'https://quickchart.io/chart/create'post_data = {'chart': {'type': 'bar', 'data': {'labels': ['Hello', 'World'],             'datasets': [{'label': 'Foo', 'data': [1, 2]}]}}}response = requests.post(    quickchart_url,    json=post_data,)if (response.status_code != 200):    print('Error:', response.text)else:    chart_response = json.loads(response.text)    print(chart_response)
You will get a response that looks like this:
{  "success": true,  "url": "https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232"}
Go to the URL in the response to render your chart.
Please note the following limitations:

It can take a couple seconds for short URLs to become active globally.
Request inputs are not validated before the URL is created. The chart is only rendered when the URL is visited.
If your chart includes Javascript, you must supply your chart definition as a string (see using JS functions).
Saved charts expire after 3 days for free users, 6 months for paid users.

Templates​
If you want to generate many charts, but they only differ slightly, you may prefer to use chart templates. Any chart with a Short URL can also be used as a template.
Customize a template by adding URL parameters to the template URL. The following template parameters are supported:

title - The title of the chart
labels - Comma-separated labels for the label axis of a chart (usually the X axis)
data1, data2, ..., dataN - Comma-separated data values for each dataseries
label1, label2, ..., labelN - Comma-separated labels for each dataseries
backgroundColor1, ..., backgroundColorN - Comma-separated backgrounds for each dataseries
borderColor1, ..., borderColorN - Comma-separated border colors for each dataseries

For example, this URL will take template zf-abc-123 and update its title to "New title":
https://quickchart.io/chart/render/zf-abc-123?title=New title
We can add a labels URL parameter:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
Or even override multiple datasets:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8
In addition to plain numbers, templates also accept (x, y) data values and arbitrary JSON objects.
An example walkthrough with a live template can be viewed here.
IFrames​
By default, short URLs/templates render as images and are not interactive. If you'd like to display a chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the short URL:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe src="demo_iframe.htm" frameborder="0" height="500" width="300" title="Iframe Example"></iframe>
Expiration​
Expiration of short URLs and templates varies based on whether you've created them using the /chart/create API endpoint, or via the Chart Maker.
Free TierProfessional PlanAPI3 days6 months  Can be extended by contacting supportAdvanced Chart Editor (Sandbox)3 days6 months  Can be extended by contacting supportChart Maker60+ days  Expiration is reset when rendered6+ months  Expiration is reset when rendered
An expired short URL will return a 404 Not Found error.Edit this page\n\nOn this pageAdvanced API


Short URLs​
You may want to create a shorter URL for your charts, especially if you are sending them via email or SMS. To generate a short URL for your chart, send a POST request to https://quickchart.io/chart/create.
The endpoint takes the following JSON request body, identical to the /chart POST endpoint:
{  width: string;                        // Pixel width  height: string;                       // Pixel height  devicePixelRatio: number;             // Pixel ratio (2.0 by default)  format: string;                       // png, svg, or webp  backgroundColor: string;              // Canvas background  version: string;                      // Chart.js version  key: string;                          // API key (optional)  chart: string | ChartConfiguration;   // Chart.js configuration}
Here's an example using curl. You can use any library that sends an HTTP POST request:
curl -X POST \     -H 'Content-Type: application/json' \     -d '{"chart": {"type": "bar", "data": {"labels": ["Hello", "World"], "datasets": [{"label": "Foo", "data": [1, 2]}]}}}' \     https://quickchart.io/chart/create
Here's an equivalent request using Python:
import jsonimport requestsquickchart_url = 'https://quickchart.io/chart/create'post_data = {'chart': {'type': 'bar', 'data': {'labels': ['Hello', 'World'],             'datasets': [{'label': 'Foo', 'data': [1, 2]}]}}}response = requests.post(    quickchart_url,    json=post_data,)if (response.status_code != 200):    print('Error:', response.text)else:    chart_response = json.loads(response.text)    print(chart_response)
You will get a response that looks like this:
{  "success": true,  "url": "https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232"}
Go to the URL in the response to render your chart.
Please note the following limitations:

It can take a couple seconds for short URLs to become active globally.
Request inputs are not validated before the URL is created. The chart is only rendered when the URL is visited.
If your chart includes Javascript, you must supply your chart definition as a string (see using JS functions).
Saved charts expire after 3 days for free users, 6 months for paid users.

Templates​
If you want to generate many charts, but they only differ slightly, you may prefer to use chart templates. Any chart with a Short URL can also be used as a template.
Customize a template by adding URL parameters to the template URL. The following template parameters are supported:

title - The title of the chart
labels - Comma-separated labels for the label axis of a chart (usually the X axis)
data1, data2, ..., dataN - Comma-separated data values for each dataseries
label1, label2, ..., labelN - Comma-separated labels for each dataseries
backgroundColor1, ..., backgroundColorN - Comma-separated backgrounds for each dataseries
borderColor1, ..., borderColorN - Comma-separated border colors for each dataseries

For example, this URL will take template zf-abc-123 and update its title to "New title":
https://quickchart.io/chart/render/zf-abc-123?title=New title
We can add a labels URL parameter:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
Or even override multiple datasets:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8
In addition to plain numbers, templates also accept (x, y) data values and arbitrary JSON objects.
An example walkthrough with a live template can be viewed here.
IFrames​
By default, short URLs/templates render as images and are not interactive. If you'd like to display a chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the short URL:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe src="demo_iframe.htm" frameborder="0" height="500" width="300" title="Iframe Example"></iframe>
Expiration​
Expiration of short URLs and templates varies based on whether you've created them using the /chart/create API endpoint, or via the Chart Maker.
Free TierProfessional PlanAPI3 days6 months  Can be extended by contacting supportAdvanced Chart Editor (Sandbox)3 days6 months  Can be extended by contacting supportChart Maker60+ days  Expiration is reset when rendered6+ months  Expiration is reset when rendered
An expired short URL will return a 404 Not Found error.Edit this pagePreviousPOST endpointNextClient librariesShort URLsTemplatesIFramesExpiration\n\n\n\nOn this pageAdvanced API


Short URLs​
You may want to create a shorter URL for your charts, especially if you are sending them via email or SMS. To generate a short URL for your chart, send a POST request to https://quickchart.io/chart/create.
The endpoint takes the following JSON request body, identical to the /chart POST endpoint:
{  width: string;                        // Pixel width  height: string;                       // Pixel height  devicePixelRatio: number;             // Pixel ratio (2.0 by default)  format: string;                       // png, svg, or webp  backgroundColor: string;              // Canvas background  version: string;                      // Chart.js version  key: string;                          // API key (optional)  chart: string | ChartConfiguration;   // Chart.js configuration}
Here's an example using curl. You can use any library that sends an HTTP POST request:
curl -X POST \     -H 'Content-Type: application/json' \     -d '{"chart": {"type": "bar", "data": {"labels": ["Hello", "World"], "datasets": [{"label": "Foo", "data": [1, 2]}]}}}' \     https://quickchart.io/chart/create
Here's an equivalent request using Python:
import jsonimport requestsquickchart_url = 'https://quickchart.io/chart/create'post_data = {'chart': {'type': 'bar', 'data': {'labels': ['Hello', 'World'],             'datasets': [{'label': 'Foo', 'data': [1, 2]}]}}}response = requests.post(    quickchart_url,    json=post_data,)if (response.status_code != 200):    print('Error:', response.text)else:    chart_response = json.loads(response.text)    print(chart_response)
You will get a response that looks like this:
{  "success": true,  "url": "https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232"}
Go to the URL in the response to render your chart.
Please note the following limitations:

It can take a couple seconds for short URLs to become active globally.
Request inputs are not validated before the URL is created. The chart is only rendered when the URL is visited.
If your chart includes Javascript, you must supply your chart definition as a string (see using JS functions).
Saved charts expire after 3 days for free users, 6 months for paid users.

Templates​
If you want to generate many charts, but they only differ slightly, you may prefer to use chart templates. Any chart with a Short URL can also be used as a template.
Customize a template by adding URL parameters to the template URL. The following template parameters are supported:

title - The title of the chart
labels - Comma-separated labels for the label axis of a chart (usually the X axis)
data1, data2, ..., dataN - Comma-separated data values for each dataseries
label1, label2, ..., labelN - Comma-separated labels for each dataseries
backgroundColor1, ..., backgroundColorN - Comma-separated backgrounds for each dataseries
borderColor1, ..., borderColorN - Comma-separated border colors for each dataseries

For example, this URL will take template zf-abc-123 and update its title to "New title":
https://quickchart.io/chart/render/zf-abc-123?title=New title
We can add a labels URL parameter:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
Or even override multiple datasets:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8
In addition to plain numbers, templates also accept (x, y) data values and arbitrary JSON objects.
An example walkthrough with a live template can be viewed here.
IFrames​
By default, short URLs/templates render as images and are not interactive. If you'd like to display a chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the short URL:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe src="demo_iframe.htm" frameborder="0" height="500" width="300" title="Iframe Example"></iframe>
Expiration​
Expiration of short URLs and templates varies based on whether you've created them using the /chart/create API endpoint, or via the Chart Maker.
Free TierProfessional PlanAPI3 days6 months  Can be extended by contacting supportAdvanced Chart Editor (Sandbox)3 days6 months  Can be extended by contacting supportChart Maker60+ days  Expiration is reset when rendered6+ months  Expiration is reset when rendered
An expired short URL will return a 404 Not Found error.Edit this page\n\nOn this pageAdvanced API


Short URLs​
You may want to create a shorter URL for your charts, especially if you are sending them via email or SMS. To generate a short URL for your chart, send a POST request to https://quickchart.io/chart/create.
The endpoint takes the following JSON request body, identical to the /chart POST endpoint:
{  width: string;                        // Pixel width  height: string;                       // Pixel height  devicePixelRatio: number;             // Pixel ratio (2.0 by default)  format: string;                       // png, svg, or webp  backgroundColor: string;              // Canvas background  version: string;                      // Chart.js version  key: string;                          // API key (optional)  chart: string | ChartConfiguration;   // Chart.js configuration}
Here's an example using curl. You can use any library that sends an HTTP POST request:
curl -X POST \     -H 'Content-Type: application/json' \     -d '{"chart": {"type": "bar", "data": {"labels": ["Hello", "World"], "datasets": [{"label": "Foo", "data": [1, 2]}]}}}' \     https://quickchart.io/chart/create
Here's an equivalent request using Python:
import jsonimport requestsquickchart_url = 'https://quickchart.io/chart/create'post_data = {'chart': {'type': 'bar', 'data': {'labels': ['Hello', 'World'],             'datasets': [{'label': 'Foo', 'data': [1, 2]}]}}}response = requests.post(    quickchart_url,    json=post_data,)if (response.status_code != 200):    print('Error:', response.text)else:    chart_response = json.loads(response.text)    print(chart_response)
You will get a response that looks like this:
{  "success": true,  "url": "https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232"}
Go to the URL in the response to render your chart.
Please note the following limitations:

It can take a couple seconds for short URLs to become active globally.
Request inputs are not validated before the URL is created. The chart is only rendered when the URL is visited.
If your chart includes Javascript, you must supply your chart definition as a string (see using JS functions).
Saved charts expire after 3 days for free users, 6 months for paid users.

Templates​
If you want to generate many charts, but they only differ slightly, you may prefer to use chart templates. Any chart with a Short URL can also be used as a template.
Customize a template by adding URL parameters to the template URL. The following template parameters are supported:

title - The title of the chart
labels - Comma-separated labels for the label axis of a chart (usually the X axis)
data1, data2, ..., dataN - Comma-separated data values for each dataseries
label1, label2, ..., labelN - Comma-separated labels for each dataseries
backgroundColor1, ..., backgroundColorN - Comma-separated backgrounds for each dataseries
borderColor1, ..., borderColorN - Comma-separated border colors for each dataseries

For example, this URL will take template zf-abc-123 and update its title to "New title":
https://quickchart.io/chart/render/zf-abc-123?title=New title
We can add a labels URL parameter:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
Or even override multiple datasets:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8
In addition to plain numbers, templates also accept (x, y) data values and arbitrary JSON objects.
An example walkthrough with a live template can be viewed here.
IFrames​
By default, short URLs/templates render as images and are not interactive. If you'd like to display a chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the short URL:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe src="demo_iframe.htm" frameborder="0" height="500" width="300" title="Iframe Example"></iframe>
Expiration​
Expiration of short URLs and templates varies based on whether you've created them using the /chart/create API endpoint, or via the Chart Maker.
Free TierProfessional PlanAPI3 days6 months  Can be extended by contacting supportAdvanced Chart Editor (Sandbox)3 days6 months  Can be extended by contacting supportChart Maker60+ days  Expiration is reset when rendered6+ months  Expiration is reset when rendered
An expired short URL will return a 404 Not Found error.Edit this pagePreviousPOST endpointNextClient librariesShort URLsTemplatesIFramesExpiration\n\n\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this page\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this pagePreviousChart TypesNextReferenceCreate a chart templateAdd dataCustomize look & feelDynamic datasourcesSave the templateUse the no-code chart APIReal exampleCustomizable propertiesEmbedding an interactive chartAdvanced API featuresNeed help?\n\n\n\nOn this pageAdvanced API


Short URLs​
You may want to create a shorter URL for your charts, especially if you are sending them via email or SMS. To generate a short URL for your chart, send a POST request to https://quickchart.io/chart/create.
The endpoint takes the following JSON request body, identical to the /chart POST endpoint:
{  width: string;                        // Pixel width  height: string;                       // Pixel height  devicePixelRatio: number;             // Pixel ratio (2.0 by default)  format: string;                       // png, svg, or webp  backgroundColor: string;              // Canvas background  version: string;                      // Chart.js version  key: string;                          // API key (optional)  chart: string | ChartConfiguration;   // Chart.js configuration}
Here's an example using curl. You can use any library that sends an HTTP POST request:
curl -X POST \     -H 'Content-Type: application/json' \     -d '{"chart": {"type": "bar", "data": {"labels": ["Hello", "World"], "datasets": [{"label": "Foo", "data": [1, 2]}]}}}' \     https://quickchart.io/chart/create
Here's an equivalent request using Python:
import jsonimport requestsquickchart_url = 'https://quickchart.io/chart/create'post_data = {'chart': {'type': 'bar', 'data': {'labels': ['Hello', 'World'],             'datasets': [{'label': 'Foo', 'data': [1, 2]}]}}}response = requests.post(    quickchart_url,    json=post_data,)if (response.status_code != 200):    print('Error:', response.text)else:    chart_response = json.loads(response.text)    print(chart_response)
You will get a response that looks like this:
{  "success": true,  "url": "https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232"}
Go to the URL in the response to render your chart.
Please note the following limitations:

It can take a couple seconds for short URLs to become active globally.
Request inputs are not validated before the URL is created. The chart is only rendered when the URL is visited.
If your chart includes Javascript, you must supply your chart definition as a string (see using JS functions).
Saved charts expire after 3 days for free users, 6 months for paid users.

Templates​
If you want to generate many charts, but they only differ slightly, you may prefer to use chart templates. Any chart with a Short URL can also be used as a template.
Customize a template by adding URL parameters to the template URL. The following template parameters are supported:

title - The title of the chart
labels - Comma-separated labels for the label axis of a chart (usually the X axis)
data1, data2, ..., dataN - Comma-separated data values for each dataseries
label1, label2, ..., labelN - Comma-separated labels for each dataseries
backgroundColor1, ..., backgroundColorN - Comma-separated backgrounds for each dataseries
borderColor1, ..., borderColorN - Comma-separated border colors for each dataseries

For example, this URL will take template zf-abc-123 and update its title to "New title":
https://quickchart.io/chart/render/zf-abc-123?title=New title
We can add a labels URL parameter:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
Or even override multiple datasets:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8
In addition to plain numbers, templates also accept (x, y) data values and arbitrary JSON objects.
An example walkthrough with a live template can be viewed here.
IFrames​
By default, short URLs/templates render as images and are not interactive. If you'd like to display a chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the short URL:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe src="demo_iframe.htm" frameborder="0" height="500" width="300" title="Iframe Example"></iframe>
Expiration​
Expiration of short URLs and templates varies based on whether you've created them using the /chart/create API endpoint, or via the Chart Maker.
Free TierProfessional PlanAPI3 days6 months  Can be extended by contacting supportAdvanced Chart Editor (Sandbox)3 days6 months  Can be extended by contacting supportChart Maker60+ days  Expiration is reset when rendered6+ months  Expiration is reset when rendered
An expired short URL will return a 404 Not Found error.Edit this page\n\nOn this pageAdvanced API


Short URLs​
You may want to create a shorter URL for your charts, especially if you are sending them via email or SMS. To generate a short URL for your chart, send a POST request to https://quickchart.io/chart/create.
The endpoint takes the following JSON request body, identical to the /chart POST endpoint:
{  width: string;                        // Pixel width  height: string;                       // Pixel height  devicePixelRatio: number;             // Pixel ratio (2.0 by default)  format: string;                       // png, svg, or webp  backgroundColor: string;              // Canvas background  version: string;                      // Chart.js version  key: string;                          // API key (optional)  chart: string | ChartConfiguration;   // Chart.js configuration}
Here's an example using curl. You can use any library that sends an HTTP POST request:
curl -X POST \     -H 'Content-Type: application/json' \     -d '{"chart": {"type": "bar", "data": {"labels": ["Hello", "World"], "datasets": [{"label": "Foo", "data": [1, 2]}]}}}' \     https://quickchart.io/chart/create
Here's an equivalent request using Python:
import jsonimport requestsquickchart_url = 'https://quickchart.io/chart/create'post_data = {'chart': {'type': 'bar', 'data': {'labels': ['Hello', 'World'],             'datasets': [{'label': 'Foo', 'data': [1, 2]}]}}}response = requests.post(    quickchart_url,    json=post_data,)if (response.status_code != 200):    print('Error:', response.text)else:    chart_response = json.loads(response.text)    print(chart_response)
You will get a response that looks like this:
{  "success": true,  "url": "https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232"}
Go to the URL in the response to render your chart.
Please note the following limitations:

It can take a couple seconds for short URLs to become active globally.
Request inputs are not validated before the URL is created. The chart is only rendered when the URL is visited.
If your chart includes Javascript, you must supply your chart definition as a string (see using JS functions).
Saved charts expire after 3 days for free users, 6 months for paid users.

Templates​
If you want to generate many charts, but they only differ slightly, you may prefer to use chart templates. Any chart with a Short URL can also be used as a template.
Customize a template by adding URL parameters to the template URL. The following template parameters are supported:

title - The title of the chart
labels - Comma-separated labels for the label axis of a chart (usually the X axis)
data1, data2, ..., dataN - Comma-separated data values for each dataseries
label1, label2, ..., labelN - Comma-separated labels for each dataseries
backgroundColor1, ..., backgroundColorN - Comma-separated backgrounds for each dataseries
borderColor1, ..., borderColorN - Comma-separated border colors for each dataseries

For example, this URL will take template zf-abc-123 and update its title to "New title":
https://quickchart.io/chart/render/zf-abc-123?title=New title
We can add a labels URL parameter:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
Or even override multiple datasets:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8
In addition to plain numbers, templates also accept (x, y) data values and arbitrary JSON objects.
An example walkthrough with a live template can be viewed here.
IFrames​
By default, short URLs/templates render as images and are not interactive. If you'd like to display a chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the short URL:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe src="demo_iframe.htm" frameborder="0" height="500" width="300" title="Iframe Example"></iframe>
Expiration​
Expiration of short URLs and templates varies based on whether you've created them using the /chart/create API endpoint, or via the Chart Maker.
Free TierProfessional PlanAPI3 days6 months  Can be extended by contacting supportAdvanced Chart Editor (Sandbox)3 days6 months  Can be extended by contacting supportChart Maker60+ days  Expiration is reset when rendered6+ months  Expiration is reset when rendered
An expired short URL will return a 404 Not Found error.Edit this pagePreviousPOST endpointNextClient librariesShort URLsTemplatesIFramesExpiration\n\n\n\nOn this pageAdvanced API


Short URLs​
You may want to create a shorter URL for your charts, especially if you are sending them via email or SMS. To generate a short URL for your chart, send a POST request to https://quickchart.io/chart/create.
The endpoint takes the following JSON request body, identical to the /chart POST endpoint:
{  width: string;                        // Pixel width  height: string;                       // Pixel height  devicePixelRatio: number;             // Pixel ratio (2.0 by default)  format: string;                       // png, svg, or webp  backgroundColor: string;              // Canvas background  version: string;                      // Chart.js version  key: string;                          // API key (optional)  chart: string | ChartConfiguration;   // Chart.js configuration}
Here's an example using curl. You can use any library that sends an HTTP POST request:
curl -X POST \     -H 'Content-Type: application/json' \     -d '{"chart": {"type": "bar", "data": {"labels": ["Hello", "World"], "datasets": [{"label": "Foo", "data": [1, 2]}]}}}' \     https://quickchart.io/chart/create
Here's an equivalent request using Python:
import jsonimport requestsquickchart_url = 'https://quickchart.io/chart/create'post_data = {'chart': {'type': 'bar', 'data': {'labels': ['Hello', 'World'],             'datasets': [{'label': 'Foo', 'data': [1, 2]}]}}}response = requests.post(    quickchart_url,    json=post_data,)if (response.status_code != 200):    print('Error:', response.text)else:    chart_response = json.loads(response.text)    print(chart_response)
You will get a response that looks like this:
{  "success": true,  "url": "https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232"}
Go to the URL in the response to render your chart.
Please note the following limitations:

It can take a couple seconds for short URLs to become active globally.
Request inputs are not validated before the URL is created. The chart is only rendered when the URL is visited.
If your chart includes Javascript, you must supply your chart definition as a string (see using JS functions).
Saved charts expire after 3 days for free users, 6 months for paid users.

Templates​
If you want to generate many charts, but they only differ slightly, you may prefer to use chart templates. Any chart with a Short URL can also be used as a template.
Customize a template by adding URL parameters to the template URL. The following template parameters are supported:

title - The title of the chart
labels - Comma-separated labels for the label axis of a chart (usually the X axis)
data1, data2, ..., dataN - Comma-separated data values for each dataseries
label1, label2, ..., labelN - Comma-separated labels for each dataseries
backgroundColor1, ..., backgroundColorN - Comma-separated backgrounds for each dataseries
borderColor1, ..., borderColorN - Comma-separated border colors for each dataseries

For example, this URL will take template zf-abc-123 and update its title to "New title":
https://quickchart.io/chart/render/zf-abc-123?title=New title
We can add a labels URL parameter:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
Or even override multiple datasets:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8
In addition to plain numbers, templates also accept (x, y) data values and arbitrary JSON objects.
An example walkthrough with a live template can be viewed here.
IFrames​
By default, short URLs/templates render as images and are not interactive. If you'd like to display a chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the short URL:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe src="demo_iframe.htm" frameborder="0" height="500" width="300" title="Iframe Example"></iframe>
Expiration​
Expiration of short URLs and templates varies based on whether you've created them using the /chart/create API endpoint, or via the Chart Maker.
Free TierProfessional PlanAPI3 days6 months  Can be extended by contacting supportAdvanced Chart Editor (Sandbox)3 days6 months  Can be extended by contacting supportChart Maker60+ days  Expiration is reset when rendered6+ months  Expiration is reset when rendered
An expired short URL will return a 404 Not Found error.Edit this page\n\nOn this pageAdvanced API


Short URLs​
You may want to create a shorter URL for your charts, especially if you are sending them via email or SMS. To generate a short URL for your chart, send a POST request to https://quickchart.io/chart/create.
The endpoint takes the following JSON request body, identical to the /chart POST endpoint:
{  width: string;                        // Pixel width  height: string;                       // Pixel height  devicePixelRatio: number;             // Pixel ratio (2.0 by default)  format: string;                       // png, svg, or webp  backgroundColor: string;              // Canvas background  version: string;                      // Chart.js version  key: string;                          // API key (optional)  chart: string | ChartConfiguration;   // Chart.js configuration}
Here's an example using curl. You can use any library that sends an HTTP POST request:
curl -X POST \     -H 'Content-Type: application/json' \     -d '{"chart": {"type": "bar", "data": {"labels": ["Hello", "World"], "datasets": [{"label": "Foo", "data": [1, 2]}]}}}' \     https://quickchart.io/chart/create
Here's an equivalent request using Python:
import jsonimport requestsquickchart_url = 'https://quickchart.io/chart/create'post_data = {'chart': {'type': 'bar', 'data': {'labels': ['Hello', 'World'],             'datasets': [{'label': 'Foo', 'data': [1, 2]}]}}}response = requests.post(    quickchart_url,    json=post_data,)if (response.status_code != 200):    print('Error:', response.text)else:    chart_response = json.loads(response.text)    print(chart_response)
You will get a response that looks like this:
{  "success": true,  "url": "https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232"}
Go to the URL in the response to render your chart.
Please note the following limitations:

It can take a couple seconds for short URLs to become active globally.
Request inputs are not validated before the URL is created. The chart is only rendered when the URL is visited.
If your chart includes Javascript, you must supply your chart definition as a string (see using JS functions).
Saved charts expire after 3 days for free users, 6 months for paid users.

Templates​
If you want to generate many charts, but they only differ slightly, you may prefer to use chart templates. Any chart with a Short URL can also be used as a template.
Customize a template by adding URL parameters to the template URL. The following template parameters are supported:

title - The title of the chart
labels - Comma-separated labels for the label axis of a chart (usually the X axis)
data1, data2, ..., dataN - Comma-separated data values for each dataseries
label1, label2, ..., labelN - Comma-separated labels for each dataseries
backgroundColor1, ..., backgroundColorN - Comma-separated backgrounds for each dataseries
borderColor1, ..., borderColorN - Comma-separated border colors for each dataseries

For example, this URL will take template zf-abc-123 and update its title to "New title":
https://quickchart.io/chart/render/zf-abc-123?title=New title
We can add a labels URL parameter:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
Or even override multiple datasets:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8
In addition to plain numbers, templates also accept (x, y) data values and arbitrary JSON objects.
An example walkthrough with a live template can be viewed here.
IFrames​
By default, short URLs/templates render as images and are not interactive. If you'd like to display a chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the short URL:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe src="demo_iframe.htm" frameborder="0" height="500" width="300" title="Iframe Example"></iframe>
Expiration​
Expiration of short URLs and templates varies based on whether you've created them using the /chart/create API endpoint, or via the Chart Maker.
Free TierProfessional PlanAPI3 days6 months  Can be extended by contacting supportAdvanced Chart Editor (Sandbox)3 days6 months  Can be extended by contacting supportChart Maker60+ days  Expiration is reset when rendered6+ months  Expiration is reset when rendered
An expired short URL will return a 404 Not Found error.Edit this pagePreviousPOST endpointNextClient librariesShort URLsTemplatesIFramesExpiration\n\n\n\nOn this pageClient libraries
We maintain client libraries for your convenience:

quickchart-js - Javascript
quickchart-python - Python
quickchart-ruby - Ruby
quickchart-php - PHP
quickchart-csharp - C#
quickchart-java - Java
quickchart-go - Go (third-party)
chartjs-to-image - Javascript package for Chart.js images
Postman - Tool for building API requests

You don't necessarily need a library to use QuickChart. To use QuickChart without a library, simply build a QuickChart URL as described in API parameters.
Javascript/Node​
Run npm install quickchart-js to install the QuickChart dependency. Use it like so:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: {      labels: ['Hello world', 'Foo bar'],      datasets: [{ label: 'Foo', data: [1, 2] }],    },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');// Print the chart URLconsole.log(myChart.getUrl());
Get more details on the quickchart-js project page.
Python​
Run pip install quickchart.io to install the QuickChart dependency. Use it like so:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print the chart URLprint(qc.get_url())
Read the full Python tutorial or see details on the quickchart-python project page.
Ruby​
Run gem install quickchart to install the QuickChart Ruby gem:
require 'quickchart'qc = QuickChart.new(  {    type: "bar",    data: {      labels: ["Hello world", "Test"],      datasets: [{        label: "Foo",        data: [1, 2]      }]    }  },  width: 600,  height: 300,  device_pixel_ratio: 2.0,)# Print the chart URLputs qc.get_url
Learn more about chart generation in Ruby at the quickchart-ruby repository.
PHP​
Run composer require ianw/quickchart to install the QuickChart PHP library:
require 'quickchart'$qc = new QuickChart(array(  'width' => 600,  'height' => 300,));$qc->setConfig('{  type: "bar",  data: {    labels: ["Hello world", "Test"],    datasets: [{      label: "Foo",      data: [1, 2]    }]  }}');// Print the chart URLecho $qc->getUrl();
See the PHP QuickChart client at the quickchart-php repository.
C#​
Add the QuickChart package from NuGet. Then use the Chart object provided by the QuickChart namespace:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Hello world', 'Test'],                datasets: [{                  label: 'Foo',                  data: [1, 2]                }]              }            }"            Console.WriteLine(qc.GetUrl());        }    }}
The C# QuickChart client is available on NuGet and at the quickchart-csharp repository.
Java​
Add the QuickChart package from Maven Central. If you use Maven or Gradle, you can add it to your config (view details).
This library provides an io.quickchart package that contains a QuickChart class:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("{"                + "    type: 'bar',"                + "    data: {"                + "        labels: ['Q1', 'Q2', 'Q3', 'Q4'],"                + "        datasets: [{"                + "            label: 'Users',"                + "            data: [50, 60, 70, 180]"                + "        }]"                + "    }"                + "}"        );        System.out.println(chart.getUrl());    }}
The Java library is open-source and accessible on Github.
Go​
A third-party QuickChart Go library is available on Github. It can be used like so:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";fmt.Println(qc.GetUrl());
Other programming languages​
QuickChart is not limited to the libraries listed above. You can create a QuickChart URL in any language by building a URL string. Because building a URL string is a matter of string concatenation, this can be done in any language.
See the API Parameters documentation to learn how to build a URL that renders a chart image.
If you need help, please reach out and we will help you implement in your preferred programming language.Edit this page\n\nOn this pageClient libraries
We maintain client libraries for your convenience:

quickchart-js - Javascript
quickchart-python - Python
quickchart-ruby - Ruby
quickchart-php - PHP
quickchart-csharp - C#
quickchart-java - Java
quickchart-go - Go (third-party)
chartjs-to-image - Javascript package for Chart.js images
Postman - Tool for building API requests

You don't necessarily need a library to use QuickChart. To use QuickChart without a library, simply build a QuickChart URL as described in API parameters.
Javascript/Node​
Run npm install quickchart-js to install the QuickChart dependency. Use it like so:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: {      labels: ['Hello world', 'Foo bar'],      datasets: [{ label: 'Foo', data: [1, 2] }],    },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');// Print the chart URLconsole.log(myChart.getUrl());
Get more details on the quickchart-js project page.
Python​
Run pip install quickchart.io to install the QuickChart dependency. Use it like so:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print the chart URLprint(qc.get_url())
Read the full Python tutorial or see details on the quickchart-python project page.
Ruby​
Run gem install quickchart to install the QuickChart Ruby gem:
require 'quickchart'qc = QuickChart.new(  {    type: "bar",    data: {      labels: ["Hello world", "Test"],      datasets: [{        label: "Foo",        data: [1, 2]      }]    }  },  width: 600,  height: 300,  device_pixel_ratio: 2.0,)# Print the chart URLputs qc.get_url
Learn more about chart generation in Ruby at the quickchart-ruby repository.
PHP​
Run composer require ianw/quickchart to install the QuickChart PHP library:
require 'quickchart'$qc = new QuickChart(array(  'width' => 600,  'height' => 300,));$qc->setConfig('{  type: "bar",  data: {    labels: ["Hello world", "Test"],    datasets: [{      label: "Foo",      data: [1, 2]    }]  }}');// Print the chart URLecho $qc->getUrl();
See the PHP QuickChart client at the quickchart-php repository.
C#​
Add the QuickChart package from NuGet. Then use the Chart object provided by the QuickChart namespace:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Hello world', 'Test'],                datasets: [{                  label: 'Foo',                  data: [1, 2]                }]              }            }"            Console.WriteLine(qc.GetUrl());        }    }}
The C# QuickChart client is available on NuGet and at the quickchart-csharp repository.
Java​
Add the QuickChart package from Maven Central. If you use Maven or Gradle, you can add it to your config (view details).
This library provides an io.quickchart package that contains a QuickChart class:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("{"                + "    type: 'bar',"                + "    data: {"                + "        labels: ['Q1', 'Q2', 'Q3', 'Q4'],"                + "        datasets: [{"                + "            label: 'Users',"                + "            data: [50, 60, 70, 180]"                + "        }]"                + "    }"                + "}"        );        System.out.println(chart.getUrl());    }}
The Java library is open-source and accessible on Github.
Go​
A third-party QuickChart Go library is available on Github. It can be used like so:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";fmt.Println(qc.GetUrl());
Other programming languages​
QuickChart is not limited to the libraries listed above. You can create a QuickChart URL in any language by building a URL string. Because building a URL string is a matter of string concatenation, this can be done in any language.
See the API Parameters documentation to learn how to build a URL that renders a chart image.
If you need help, please reach out and we will help you implement in your preferred programming language.Edit this pagePreviousShort URLs and TemplatesNextNo-code chartsJavascript/NodePythonRubyPHPC#JavaGoOther programming languages\n\n\n\nOn this pageClient libraries
We maintain client libraries for your convenience:

quickchart-js - Javascript
quickchart-python - Python
quickchart-ruby - Ruby
quickchart-php - PHP
quickchart-csharp - C#
quickchart-java - Java
quickchart-go - Go (third-party)
chartjs-to-image - Javascript package for Chart.js images
Postman - Tool for building API requests

You don't necessarily need a library to use QuickChart. To use QuickChart without a library, simply build a QuickChart URL as described in API parameters.
Javascript/Node​
Run npm install quickchart-js to install the QuickChart dependency. Use it like so:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: {      labels: ['Hello world', 'Foo bar'],      datasets: [{ label: 'Foo', data: [1, 2] }],    },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');// Print the chart URLconsole.log(myChart.getUrl());
Get more details on the quickchart-js project page.
Python​
Run pip install quickchart.io to install the QuickChart dependency. Use it like so:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print the chart URLprint(qc.get_url())
Read the full Python tutorial or see details on the quickchart-python project page.
Ruby​
Run gem install quickchart to install the QuickChart Ruby gem:
require 'quickchart'qc = QuickChart.new(  {    type: "bar",    data: {      labels: ["Hello world", "Test"],      datasets: [{        label: "Foo",        data: [1, 2]      }]    }  },  width: 600,  height: 300,  device_pixel_ratio: 2.0,)# Print the chart URLputs qc.get_url
Learn more about chart generation in Ruby at the quickchart-ruby repository.
PHP​
Run composer require ianw/quickchart to install the QuickChart PHP library:
require 'quickchart'$qc = new QuickChart(array(  'width' => 600,  'height' => 300,));$qc->setConfig('{  type: "bar",  data: {    labels: ["Hello world", "Test"],    datasets: [{      label: "Foo",      data: [1, 2]    }]  }}');// Print the chart URLecho $qc->getUrl();
See the PHP QuickChart client at the quickchart-php repository.
C#​
Add the QuickChart package from NuGet. Then use the Chart object provided by the QuickChart namespace:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Hello world', 'Test'],                datasets: [{                  label: 'Foo',                  data: [1, 2]                }]              }            }"            Console.WriteLine(qc.GetUrl());        }    }}
The C# QuickChart client is available on NuGet and at the quickchart-csharp repository.
Java​
Add the QuickChart package from Maven Central. If you use Maven or Gradle, you can add it to your config (view details).
This library provides an io.quickchart package that contains a QuickChart class:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("{"                + "    type: 'bar',"                + "    data: {"                + "        labels: ['Q1', 'Q2', 'Q3', 'Q4'],"                + "        datasets: [{"                + "            label: 'Users',"                + "            data: [50, 60, 70, 180]"                + "        }]"                + "    }"                + "}"        );        System.out.println(chart.getUrl());    }}
The Java library is open-source and accessible on Github.
Go​
A third-party QuickChart Go library is available on Github. It can be used like so:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";fmt.Println(qc.GetUrl());
Other programming languages​
QuickChart is not limited to the libraries listed above. You can create a QuickChart URL in any language by building a URL string. Because building a URL string is a matter of string concatenation, this can be done in any language.
See the API Parameters documentation to learn how to build a URL that renders a chart image.
If you need help, please reach out and we will help you implement in your preferred programming language.Edit this page\n\nOn this pageClient libraries
We maintain client libraries for your convenience:

quickchart-js - Javascript
quickchart-python - Python
quickchart-ruby - Ruby
quickchart-php - PHP
quickchart-csharp - C#
quickchart-java - Java
quickchart-go - Go (third-party)
chartjs-to-image - Javascript package for Chart.js images
Postman - Tool for building API requests

You don't necessarily need a library to use QuickChart. To use QuickChart without a library, simply build a QuickChart URL as described in API parameters.
Javascript/Node​
Run npm install quickchart-js to install the QuickChart dependency. Use it like so:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: {      labels: ['Hello world', 'Foo bar'],      datasets: [{ label: 'Foo', data: [1, 2] }],    },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');// Print the chart URLconsole.log(myChart.getUrl());
Get more details on the quickchart-js project page.
Python​
Run pip install quickchart.io to install the QuickChart dependency. Use it like so:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print the chart URLprint(qc.get_url())
Read the full Python tutorial or see details on the quickchart-python project page.
Ruby​
Run gem install quickchart to install the QuickChart Ruby gem:
require 'quickchart'qc = QuickChart.new(  {    type: "bar",    data: {      labels: ["Hello world", "Test"],      datasets: [{        label: "Foo",        data: [1, 2]      }]    }  },  width: 600,  height: 300,  device_pixel_ratio: 2.0,)# Print the chart URLputs qc.get_url
Learn more about chart generation in Ruby at the quickchart-ruby repository.
PHP​
Run composer require ianw/quickchart to install the QuickChart PHP library:
require 'quickchart'$qc = new QuickChart(array(  'width' => 600,  'height' => 300,));$qc->setConfig('{  type: "bar",  data: {    labels: ["Hello world", "Test"],    datasets: [{      label: "Foo",      data: [1, 2]    }]  }}');// Print the chart URLecho $qc->getUrl();
See the PHP QuickChart client at the quickchart-php repository.
C#​
Add the QuickChart package from NuGet. Then use the Chart object provided by the QuickChart namespace:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Hello world', 'Test'],                datasets: [{                  label: 'Foo',                  data: [1, 2]                }]              }            }"            Console.WriteLine(qc.GetUrl());        }    }}
The C# QuickChart client is available on NuGet and at the quickchart-csharp repository.
Java​
Add the QuickChart package from Maven Central. If you use Maven or Gradle, you can add it to your config (view details).
This library provides an io.quickchart package that contains a QuickChart class:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("{"                + "    type: 'bar',"                + "    data: {"                + "        labels: ['Q1', 'Q2', 'Q3', 'Q4'],"                + "        datasets: [{"                + "            label: 'Users',"                + "            data: [50, 60, 70, 180]"                + "        }]"                + "    }"                + "}"        );        System.out.println(chart.getUrl());    }}
The Java library is open-source and accessible on Github.
Go​
A third-party QuickChart Go library is available on Github. It can be used like so:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";fmt.Println(qc.GetUrl());
Other programming languages​
QuickChart is not limited to the libraries listed above. You can create a QuickChart URL in any language by building a URL string. Because building a URL string is a matter of string concatenation, this can be done in any language.
See the API Parameters documentation to learn how to build a URL that renders a chart image.
If you need help, please reach out and we will help you implement in your preferred programming language.Edit this pagePreviousShort URLs and TemplatesNextNo-code chartsJavascript/NodePythonRubyPHPC#JavaGoOther programming languages\n\n\n\nOn this pageClient libraries
We maintain client libraries for your convenience:

quickchart-js - Javascript
quickchart-python - Python
quickchart-ruby - Ruby
quickchart-php - PHP
quickchart-csharp - C#
quickchart-java - Java
quickchart-go - Go (third-party)
chartjs-to-image - Javascript package for Chart.js images
Postman - Tool for building API requests

You don't necessarily need a library to use QuickChart. To use QuickChart without a library, simply build a QuickChart URL as described in API parameters.
Javascript/Node​
Run npm install quickchart-js to install the QuickChart dependency. Use it like so:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: {      labels: ['Hello world', 'Foo bar'],      datasets: [{ label: 'Foo', data: [1, 2] }],    },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');// Print the chart URLconsole.log(myChart.getUrl());
Get more details on the quickchart-js project page.
Python​
Run pip install quickchart.io to install the QuickChart dependency. Use it like so:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print the chart URLprint(qc.get_url())
Read the full Python tutorial or see details on the quickchart-python project page.
Ruby​
Run gem install quickchart to install the QuickChart Ruby gem:
require 'quickchart'qc = QuickChart.new(  {    type: "bar",    data: {      labels: ["Hello world", "Test"],      datasets: [{        label: "Foo",        data: [1, 2]      }]    }  },  width: 600,  height: 300,  device_pixel_ratio: 2.0,)# Print the chart URLputs qc.get_url
Learn more about chart generation in Ruby at the quickchart-ruby repository.
PHP​
Run composer require ianw/quickchart to install the QuickChart PHP library:
require 'quickchart'$qc = new QuickChart(array(  'width' => 600,  'height' => 300,));$qc->setConfig('{  type: "bar",  data: {    labels: ["Hello world", "Test"],    datasets: [{      label: "Foo",      data: [1, 2]    }]  }}');// Print the chart URLecho $qc->getUrl();
See the PHP QuickChart client at the quickchart-php repository.
C#​
Add the QuickChart package from NuGet. Then use the Chart object provided by the QuickChart namespace:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Hello world', 'Test'],                datasets: [{                  label: 'Foo',                  data: [1, 2]                }]              }            }"            Console.WriteLine(qc.GetUrl());        }    }}
The C# QuickChart client is available on NuGet and at the quickchart-csharp repository.
Java​
Add the QuickChart package from Maven Central. If you use Maven or Gradle, you can add it to your config (view details).
This library provides an io.quickchart package that contains a QuickChart class:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("{"                + "    type: 'bar',"                + "    data: {"                + "        labels: ['Q1', 'Q2', 'Q3', 'Q4'],"                + "        datasets: [{"                + "            label: 'Users',"                + "            data: [50, 60, 70, 180]"                + "        }]"                + "    }"                + "}"        );        System.out.println(chart.getUrl());    }}
The Java library is open-source and accessible on Github.
Go​
A third-party QuickChart Go library is available on Github. It can be used like so:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";fmt.Println(qc.GetUrl());
Other programming languages​
QuickChart is not limited to the libraries listed above. You can create a QuickChart URL in any language by building a URL string. Because building a URL string is a matter of string concatenation, this can be done in any language.
See the API Parameters documentation to learn how to build a URL that renders a chart image.
If you need help, please reach out and we will help you implement in your preferred programming language.Edit this page\n\nOn this pageClient libraries
We maintain client libraries for your convenience:

quickchart-js - Javascript
quickchart-python - Python
quickchart-ruby - Ruby
quickchart-php - PHP
quickchart-csharp - C#
quickchart-java - Java
quickchart-go - Go (third-party)
chartjs-to-image - Javascript package for Chart.js images
Postman - Tool for building API requests

You don't necessarily need a library to use QuickChart. To use QuickChart without a library, simply build a QuickChart URL as described in API parameters.
Javascript/Node​
Run npm install quickchart-js to install the QuickChart dependency. Use it like so:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: {      labels: ['Hello world', 'Foo bar'],      datasets: [{ label: 'Foo', data: [1, 2] }],    },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');// Print the chart URLconsole.log(myChart.getUrl());
Get more details on the quickchart-js project page.
Python​
Run pip install quickchart.io to install the QuickChart dependency. Use it like so:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print the chart URLprint(qc.get_url())
Read the full Python tutorial or see details on the quickchart-python project page.
Ruby​
Run gem install quickchart to install the QuickChart Ruby gem:
require 'quickchart'qc = QuickChart.new(  {    type: "bar",    data: {      labels: ["Hello world", "Test"],      datasets: [{        label: "Foo",        data: [1, 2]      }]    }  },  width: 600,  height: 300,  device_pixel_ratio: 2.0,)# Print the chart URLputs qc.get_url
Learn more about chart generation in Ruby at the quickchart-ruby repository.
PHP​
Run composer require ianw/quickchart to install the QuickChart PHP library:
require 'quickchart'$qc = new QuickChart(array(  'width' => 600,  'height' => 300,));$qc->setConfig('{  type: "bar",  data: {    labels: ["Hello world", "Test"],    datasets: [{      label: "Foo",      data: [1, 2]    }]  }}');// Print the chart URLecho $qc->getUrl();
See the PHP QuickChart client at the quickchart-php repository.
C#​
Add the QuickChart package from NuGet. Then use the Chart object provided by the QuickChart namespace:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Hello world', 'Test'],                datasets: [{                  label: 'Foo',                  data: [1, 2]                }]              }            }"            Console.WriteLine(qc.GetUrl());        }    }}
The C# QuickChart client is available on NuGet and at the quickchart-csharp repository.
Java​
Add the QuickChart package from Maven Central. If you use Maven or Gradle, you can add it to your config (view details).
This library provides an io.quickchart package that contains a QuickChart class:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("{"                + "    type: 'bar',"                + "    data: {"                + "        labels: ['Q1', 'Q2', 'Q3', 'Q4'],"                + "        datasets: [{"                + "            label: 'Users',"                + "            data: [50, 60, 70, 180]"                + "        }]"                + "    }"                + "}"        );        System.out.println(chart.getUrl());    }}
The Java library is open-source and accessible on Github.
Go​
A third-party QuickChart Go library is available on Github. It can be used like so:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";fmt.Println(qc.GetUrl());
Other programming languages​
QuickChart is not limited to the libraries listed above. You can create a QuickChart URL in any language by building a URL string. Because building a URL string is a matter of string concatenation, this can be done in any language.
See the API Parameters documentation to learn how to build a URL that renders a chart image.
If you need help, please reach out and we will help you implement in your preferred programming language.Edit this pagePreviousShort URLs and TemplatesNextNo-code chartsJavascript/NodePythonRubyPHPC#JavaGoOther programming languages\n\n\n\nOn this pageHow to create a chart image with Python


QuickChart is an open-source web service that generates chart images. You can use it to generate charts in your Python application and export them as PNG.
This is especially useful if you already have a Chart.js configuration object on the frontend, but you want to generate it on the backend (e.g. for an email).
To get started, first make sure that you understand how to create a chart. QuickChart accepts Chart.js objects and renders them as PNG, and you can test your charts in the online chart editor.
A simple PNG chart image generated in Python
Using quickchart-python​
quickchart-python supports both Python 2 and 3. Install the library using pip:
pip install quickchart.io
The library provides a QuickChart class. Import and instantiate it. Then set properties on it and specify a Chart.js config:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print a chart URLprint(qc.get_url())# Print a short chart URLprint(qc.get_short_url())
This URL will display your chart when loaded:
https://quickchart.io/chart?bkg=white&c=%7B%0A%20%20%20%20%22type%22%3A%20%22bar%22%2C%0A%20%20%20%20%22data%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22labels%22%3A%20%5B%22Hello%20world%22%2C%20%22Test%22%5D%2C%0A%20%20%20%20%20%20%20%20%22datasets%22%3A%20%5B%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22label%22%3A%20%22Foo%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22data%22%3A%20%5B1%2C%202%5D%0A%20%20%20%20%20%20%20%20%7D%5D%0A%20%20%20%20%7D%0A%7D
URLs can sometimes get very long, so QuickChart also includes a "short URL" option. This option produces a fixed-length URL using a URL shortener.
Here's an example shortened URL:
https://quickchart.io/chart/render/f-a1d3e804-dfea-442c-88b0-9801b9808401
Why would anyone prefer a long URL over a short URL? Short URLs eventually expire because they depend on a URL shortener, so if you need your chart to be around forever (or you don't want to depend on a URL shortener) you should use its full URL.
Both URLs will render an image of a chart:

You can also write the chart image to a file, or get the image bytes and manipulate them in your Python program:
# Write a fileqc.to_file('/tmp/mychart.png')# Get image dataimg = qc.to_bytes()
QuickChart is completely open source. Learn more at the quickchart-python Github project.
Using requests​
You don't need to use the quickchart.io dependency if you don't want to. Because the chart URL encodes a chart in its entirety, all you need to do is join the parameters into a URL.
This will print a URL that loads a chart as specified (see the documentation for all options):
import jsonfrom urllib.parse import urlencode  # python 3# from urllib import urlencode      # python 2config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}params = {    'chart': json.dumps(config)    'width': 500,    'height': 300,    'backgroundColor': 'white',}print('https://quickchart.io/chart?%s' % urlencode(params))
To generate a short URL, send an HTTP POST request to https://quickchart.io/chart/create:
import requestspostdata = {  'chart': json.dumps(config),  'width': 500,  'height': 300,  'backgroundColor': 'transparent',}resp = requests.post('https://quickchart.io/chart/create', json=postdata)parsed = json.loads(resp.text)print(parsed['url'])
This short URL generates the same image as all the other URLs we've generated in this tutorial:
Tags:pythonEdit this page\n\nOn this pageHow to create a chart image with Python


QuickChart is an open-source web service that generates chart images. You can use it to generate charts in your Python application and export them as PNG.
This is especially useful if you already have a Chart.js configuration object on the frontend, but you want to generate it on the backend (e.g. for an email).
To get started, first make sure that you understand how to create a chart. QuickChart accepts Chart.js objects and renders them as PNG, and you can test your charts in the online chart editor.
A simple PNG chart image generated in Python
Using quickchart-python​
quickchart-python supports both Python 2 and 3. Install the library using pip:
pip install quickchart.io
The library provides a QuickChart class. Import and instantiate it. Then set properties on it and specify a Chart.js config:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print a chart URLprint(qc.get_url())# Print a short chart URLprint(qc.get_short_url())
This URL will display your chart when loaded:
https://quickchart.io/chart?bkg=white&c=%7B%0A%20%20%20%20%22type%22%3A%20%22bar%22%2C%0A%20%20%20%20%22data%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22labels%22%3A%20%5B%22Hello%20world%22%2C%20%22Test%22%5D%2C%0A%20%20%20%20%20%20%20%20%22datasets%22%3A%20%5B%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%22label%22%3A%20%22Foo%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%22data%22%3A%20%5B1%2C%202%5D%0A%20%20%20%20%20%20%20%20%7D%5D%0A%20%20%20%20%7D%0A%7D
URLs can sometimes get very long, so QuickChart also includes a "short URL" option. This option produces a fixed-length URL using a URL shortener.
Here's an example shortened URL:
https://quickchart.io/chart/render/f-a1d3e804-dfea-442c-88b0-9801b9808401
Why would anyone prefer a long URL over a short URL? Short URLs eventually expire because they depend on a URL shortener, so if you need your chart to be around forever (or you don't want to depend on a URL shortener) you should use its full URL.
Both URLs will render an image of a chart:

You can also write the chart image to a file, or get the image bytes and manipulate them in your Python program:
# Write a fileqc.to_file('/tmp/mychart.png')# Get image dataimg = qc.to_bytes()
QuickChart is completely open source. Learn more at the quickchart-python Github project.
Using requests​
You don't need to use the quickchart.io dependency if you don't want to. Because the chart URL encodes a chart in its entirety, all you need to do is join the parameters into a URL.
This will print a URL that loads a chart as specified (see the documentation for all options):
import jsonfrom urllib.parse import urlencode  # python 3# from urllib import urlencode      # python 2config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}params = {    'chart': json.dumps(config)    'width': 500,    'height': 300,    'backgroundColor': 'white',}print('https://quickchart.io/chart?%s' % urlencode(params))
To generate a short URL, send an HTTP POST request to https://quickchart.io/chart/create:
import requestspostdata = {  'chart': json.dumps(config),  'width': 500,  'height': 300,  'backgroundColor': 'transparent',}resp = requests.post('https://quickchart.io/chart/create', json=postdata)parsed = json.loads(resp.text)print(parsed['url'])
This short URL generates the same image as all the other URLs we've generated in this tutorial:
Tags:pythonEdit this pagePreviousProgress bar customizationNextSupported fontsUsing quickchart-pythonUsing requests\n\n\n\nOn this pageClient libraries
We maintain client libraries for your convenience:

quickchart-js - Javascript
quickchart-python - Python
quickchart-ruby - Ruby
quickchart-php - PHP
quickchart-csharp - C#
quickchart-java - Java
quickchart-go - Go (third-party)
chartjs-to-image - Javascript package for Chart.js images
Postman - Tool for building API requests

You don't necessarily need a library to use QuickChart. To use QuickChart without a library, simply build a QuickChart URL as described in API parameters.
Javascript/Node​
Run npm install quickchart-js to install the QuickChart dependency. Use it like so:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: {      labels: ['Hello world', 'Foo bar'],      datasets: [{ label: 'Foo', data: [1, 2] }],    },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');// Print the chart URLconsole.log(myChart.getUrl());
Get more details on the quickchart-js project page.
Python​
Run pip install quickchart.io to install the QuickChart dependency. Use it like so:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print the chart URLprint(qc.get_url())
Read the full Python tutorial or see details on the quickchart-python project page.
Ruby​
Run gem install quickchart to install the QuickChart Ruby gem:
require 'quickchart'qc = QuickChart.new(  {    type: "bar",    data: {      labels: ["Hello world", "Test"],      datasets: [{        label: "Foo",        data: [1, 2]      }]    }  },  width: 600,  height: 300,  device_pixel_ratio: 2.0,)# Print the chart URLputs qc.get_url
Learn more about chart generation in Ruby at the quickchart-ruby repository.
PHP​
Run composer require ianw/quickchart to install the QuickChart PHP library:
require 'quickchart'$qc = new QuickChart(array(  'width' => 600,  'height' => 300,));$qc->setConfig('{  type: "bar",  data: {    labels: ["Hello world", "Test"],    datasets: [{      label: "Foo",      data: [1, 2]    }]  }}');// Print the chart URLecho $qc->getUrl();
See the PHP QuickChart client at the quickchart-php repository.
C#​
Add the QuickChart package from NuGet. Then use the Chart object provided by the QuickChart namespace:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Hello world', 'Test'],                datasets: [{                  label: 'Foo',                  data: [1, 2]                }]              }            }"            Console.WriteLine(qc.GetUrl());        }    }}
The C# QuickChart client is available on NuGet and at the quickchart-csharp repository.
Java​
Add the QuickChart package from Maven Central. If you use Maven or Gradle, you can add it to your config (view details).
This library provides an io.quickchart package that contains a QuickChart class:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("{"                + "    type: 'bar',"                + "    data: {"                + "        labels: ['Q1', 'Q2', 'Q3', 'Q4'],"                + "        datasets: [{"                + "            label: 'Users',"                + "            data: [50, 60, 70, 180]"                + "        }]"                + "    }"                + "}"        );        System.out.println(chart.getUrl());    }}
The Java library is open-source and accessible on Github.
Go​
A third-party QuickChart Go library is available on Github. It can be used like so:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";fmt.Println(qc.GetUrl());
Other programming languages​
QuickChart is not limited to the libraries listed above. You can create a QuickChart URL in any language by building a URL string. Because building a URL string is a matter of string concatenation, this can be done in any language.
See the API Parameters documentation to learn how to build a URL that renders a chart image.
If you need help, please reach out and we will help you implement in your preferred programming language.Edit this page\n\nOn this pageClient libraries
We maintain client libraries for your convenience:

quickchart-js - Javascript
quickchart-python - Python
quickchart-ruby - Ruby
quickchart-php - PHP
quickchart-csharp - C#
quickchart-java - Java
quickchart-go - Go (third-party)
chartjs-to-image - Javascript package for Chart.js images
Postman - Tool for building API requests

You don't necessarily need a library to use QuickChart. To use QuickChart without a library, simply build a QuickChart URL as described in API parameters.
Javascript/Node​
Run npm install quickchart-js to install the QuickChart dependency. Use it like so:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: {      labels: ['Hello world', 'Foo bar'],      datasets: [{ label: 'Foo', data: [1, 2] }],    },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');// Print the chart URLconsole.log(myChart.getUrl());
Get more details on the quickchart-js project page.
Python​
Run pip install quickchart.io to install the QuickChart dependency. Use it like so:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print the chart URLprint(qc.get_url())
Read the full Python tutorial or see details on the quickchart-python project page.
Ruby​
Run gem install quickchart to install the QuickChart Ruby gem:
require 'quickchart'qc = QuickChart.new(  {    type: "bar",    data: {      labels: ["Hello world", "Test"],      datasets: [{        label: "Foo",        data: [1, 2]      }]    }  },  width: 600,  height: 300,  device_pixel_ratio: 2.0,)# Print the chart URLputs qc.get_url
Learn more about chart generation in Ruby at the quickchart-ruby repository.
PHP​
Run composer require ianw/quickchart to install the QuickChart PHP library:
require 'quickchart'$qc = new QuickChart(array(  'width' => 600,  'height' => 300,));$qc->setConfig('{  type: "bar",  data: {    labels: ["Hello world", "Test"],    datasets: [{      label: "Foo",      data: [1, 2]    }]  }}');// Print the chart URLecho $qc->getUrl();
See the PHP QuickChart client at the quickchart-php repository.
C#​
Add the QuickChart package from NuGet. Then use the Chart object provided by the QuickChart namespace:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Hello world', 'Test'],                datasets: [{                  label: 'Foo',                  data: [1, 2]                }]              }            }"            Console.WriteLine(qc.GetUrl());        }    }}
The C# QuickChart client is available on NuGet and at the quickchart-csharp repository.
Java​
Add the QuickChart package from Maven Central. If you use Maven or Gradle, you can add it to your config (view details).
This library provides an io.quickchart package that contains a QuickChart class:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("{"                + "    type: 'bar',"                + "    data: {"                + "        labels: ['Q1', 'Q2', 'Q3', 'Q4'],"                + "        datasets: [{"                + "            label: 'Users',"                + "            data: [50, 60, 70, 180]"                + "        }]"                + "    }"                + "}"        );        System.out.println(chart.getUrl());    }}
The Java library is open-source and accessible on Github.
Go​
A third-party QuickChart Go library is available on Github. It can be used like so:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";fmt.Println(qc.GetUrl());
Other programming languages​
QuickChart is not limited to the libraries listed above. You can create a QuickChart URL in any language by building a URL string. Because building a URL string is a matter of string concatenation, this can be done in any language.
See the API Parameters documentation to learn how to build a URL that renders a chart image.
If you need help, please reach out and we will help you implement in your preferred programming language.Edit this pagePreviousShort URLs and TemplatesNextNo-code chartsJavascript/NodePythonRubyPHPC#JavaGoOther programming languages\n\n\n\nOn this pageClient libraries
We maintain client libraries for your convenience:

quickchart-js - Javascript
quickchart-python - Python
quickchart-ruby - Ruby
quickchart-php - PHP
quickchart-csharp - C#
quickchart-java - Java
quickchart-go - Go (third-party)
chartjs-to-image - Javascript package for Chart.js images
Postman - Tool for building API requests

You don't necessarily need a library to use QuickChart. To use QuickChart without a library, simply build a QuickChart URL as described in API parameters.
Javascript/Node​
Run npm install quickchart-js to install the QuickChart dependency. Use it like so:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: {      labels: ['Hello world', 'Foo bar'],      datasets: [{ label: 'Foo', data: [1, 2] }],    },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');// Print the chart URLconsole.log(myChart.getUrl());
Get more details on the quickchart-js project page.
Python​
Run pip install quickchart.io to install the QuickChart dependency. Use it like so:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print the chart URLprint(qc.get_url())
Read the full Python tutorial or see details on the quickchart-python project page.
Ruby​
Run gem install quickchart to install the QuickChart Ruby gem:
require 'quickchart'qc = QuickChart.new(  {    type: "bar",    data: {      labels: ["Hello world", "Test"],      datasets: [{        label: "Foo",        data: [1, 2]      }]    }  },  width: 600,  height: 300,  device_pixel_ratio: 2.0,)# Print the chart URLputs qc.get_url
Learn more about chart generation in Ruby at the quickchart-ruby repository.
PHP​
Run composer require ianw/quickchart to install the QuickChart PHP library:
require 'quickchart'$qc = new QuickChart(array(  'width' => 600,  'height' => 300,));$qc->setConfig('{  type: "bar",  data: {    labels: ["Hello world", "Test"],    datasets: [{      label: "Foo",      data: [1, 2]    }]  }}');// Print the chart URLecho $qc->getUrl();
See the PHP QuickChart client at the quickchart-php repository.
C#​
Add the QuickChart package from NuGet. Then use the Chart object provided by the QuickChart namespace:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Hello world', 'Test'],                datasets: [{                  label: 'Foo',                  data: [1, 2]                }]              }            }"            Console.WriteLine(qc.GetUrl());        }    }}
The C# QuickChart client is available on NuGet and at the quickchart-csharp repository.
Java​
Add the QuickChart package from Maven Central. If you use Maven or Gradle, you can add it to your config (view details).
This library provides an io.quickchart package that contains a QuickChart class:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("{"                + "    type: 'bar',"                + "    data: {"                + "        labels: ['Q1', 'Q2', 'Q3', 'Q4'],"                + "        datasets: [{"                + "            label: 'Users',"                + "            data: [50, 60, 70, 180]"                + "        }]"                + "    }"                + "}"        );        System.out.println(chart.getUrl());    }}
The Java library is open-source and accessible on Github.
Go​
A third-party QuickChart Go library is available on Github. It can be used like so:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";fmt.Println(qc.GetUrl());
Other programming languages​
QuickChart is not limited to the libraries listed above. You can create a QuickChart URL in any language by building a URL string. Because building a URL string is a matter of string concatenation, this can be done in any language.
See the API Parameters documentation to learn how to build a URL that renders a chart image.
If you need help, please reach out and we will help you implement in your preferred programming language.Edit this page\n\nOn this pageClient libraries
We maintain client libraries for your convenience:

quickchart-js - Javascript
quickchart-python - Python
quickchart-ruby - Ruby
quickchart-php - PHP
quickchart-csharp - C#
quickchart-java - Java
quickchart-go - Go (third-party)
chartjs-to-image - Javascript package for Chart.js images
Postman - Tool for building API requests

You don't necessarily need a library to use QuickChart. To use QuickChart without a library, simply build a QuickChart URL as described in API parameters.
Javascript/Node​
Run npm install quickchart-js to install the QuickChart dependency. Use it like so:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: {      labels: ['Hello world', 'Foo bar'],      datasets: [{ label: 'Foo', data: [1, 2] }],    },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');// Print the chart URLconsole.log(myChart.getUrl());
Get more details on the quickchart-js project page.
Python​
Run pip install quickchart.io to install the QuickChart dependency. Use it like so:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print the chart URLprint(qc.get_url())
Read the full Python tutorial or see details on the quickchart-python project page.
Ruby​
Run gem install quickchart to install the QuickChart Ruby gem:
require 'quickchart'qc = QuickChart.new(  {    type: "bar",    data: {      labels: ["Hello world", "Test"],      datasets: [{        label: "Foo",        data: [1, 2]      }]    }  },  width: 600,  height: 300,  device_pixel_ratio: 2.0,)# Print the chart URLputs qc.get_url
Learn more about chart generation in Ruby at the quickchart-ruby repository.
PHP​
Run composer require ianw/quickchart to install the QuickChart PHP library:
require 'quickchart'$qc = new QuickChart(array(  'width' => 600,  'height' => 300,));$qc->setConfig('{  type: "bar",  data: {    labels: ["Hello world", "Test"],    datasets: [{      label: "Foo",      data: [1, 2]    }]  }}');// Print the chart URLecho $qc->getUrl();
See the PHP QuickChart client at the quickchart-php repository.
C#​
Add the QuickChart package from NuGet. Then use the Chart object provided by the QuickChart namespace:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Hello world', 'Test'],                datasets: [{                  label: 'Foo',                  data: [1, 2]                }]              }            }"            Console.WriteLine(qc.GetUrl());        }    }}
The C# QuickChart client is available on NuGet and at the quickchart-csharp repository.
Java​
Add the QuickChart package from Maven Central. If you use Maven or Gradle, you can add it to your config (view details).
This library provides an io.quickchart package that contains a QuickChart class:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("{"                + "    type: 'bar',"                + "    data: {"                + "        labels: ['Q1', 'Q2', 'Q3', 'Q4'],"                + "        datasets: [{"                + "            label: 'Users',"                + "            data: [50, 60, 70, 180]"                + "        }]"                + "    }"                + "}"        );        System.out.println(chart.getUrl());    }}
The Java library is open-source and accessible on Github.
Go​
A third-party QuickChart Go library is available on Github. It can be used like so:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";fmt.Println(qc.GetUrl());
Other programming languages​
QuickChart is not limited to the libraries listed above. You can create a QuickChart URL in any language by building a URL string. Because building a URL string is a matter of string concatenation, this can be done in any language.
See the API Parameters documentation to learn how to build a URL that renders a chart image.
If you need help, please reach out and we will help you implement in your preferred programming language.Edit this pagePreviousShort URLs and TemplatesNextNo-code chartsJavascript/NodePythonRubyPHPC#JavaGoOther programming languages\n\n\n\nOn this pageClient libraries
We maintain client libraries for your convenience:

quickchart-js - Javascript
quickchart-python - Python
quickchart-ruby - Ruby
quickchart-php - PHP
quickchart-csharp - C#
quickchart-java - Java
quickchart-go - Go (third-party)
chartjs-to-image - Javascript package for Chart.js images
Postman - Tool for building API requests

You don't necessarily need a library to use QuickChart. To use QuickChart without a library, simply build a QuickChart URL as described in API parameters.
Javascript/Node​
Run npm install quickchart-js to install the QuickChart dependency. Use it like so:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: {      labels: ['Hello world', 'Foo bar'],      datasets: [{ label: 'Foo', data: [1, 2] }],    },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');// Print the chart URLconsole.log(myChart.getUrl());
Get more details on the quickchart-js project page.
Python​
Run pip install quickchart.io to install the QuickChart dependency. Use it like so:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print the chart URLprint(qc.get_url())
Read the full Python tutorial or see details on the quickchart-python project page.
Ruby​
Run gem install quickchart to install the QuickChart Ruby gem:
require 'quickchart'qc = QuickChart.new(  {    type: "bar",    data: {      labels: ["Hello world", "Test"],      datasets: [{        label: "Foo",        data: [1, 2]      }]    }  },  width: 600,  height: 300,  device_pixel_ratio: 2.0,)# Print the chart URLputs qc.get_url
Learn more about chart generation in Ruby at the quickchart-ruby repository.
PHP​
Run composer require ianw/quickchart to install the QuickChart PHP library:
require 'quickchart'$qc = new QuickChart(array(  'width' => 600,  'height' => 300,));$qc->setConfig('{  type: "bar",  data: {    labels: ["Hello world", "Test"],    datasets: [{      label: "Foo",      data: [1, 2]    }]  }}');// Print the chart URLecho $qc->getUrl();
See the PHP QuickChart client at the quickchart-php repository.
C#​
Add the QuickChart package from NuGet. Then use the Chart object provided by the QuickChart namespace:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Hello world', 'Test'],                datasets: [{                  label: 'Foo',                  data: [1, 2]                }]              }            }"            Console.WriteLine(qc.GetUrl());        }    }}
The C# QuickChart client is available on NuGet and at the quickchart-csharp repository.
Java​
Add the QuickChart package from Maven Central. If you use Maven or Gradle, you can add it to your config (view details).
This library provides an io.quickchart package that contains a QuickChart class:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("{"                + "    type: 'bar',"                + "    data: {"                + "        labels: ['Q1', 'Q2', 'Q3', 'Q4'],"                + "        datasets: [{"                + "            label: 'Users',"                + "            data: [50, 60, 70, 180]"                + "        }]"                + "    }"                + "}"        );        System.out.println(chart.getUrl());    }}
The Java library is open-source and accessible on Github.
Go​
A third-party QuickChart Go library is available on Github. It can be used like so:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";fmt.Println(qc.GetUrl());
Other programming languages​
QuickChart is not limited to the libraries listed above. You can create a QuickChart URL in any language by building a URL string. Because building a URL string is a matter of string concatenation, this can be done in any language.
See the API Parameters documentation to learn how to build a URL that renders a chart image.
If you need help, please reach out and we will help you implement in your preferred programming language.Edit this page\n\nOn this pageClient libraries
We maintain client libraries for your convenience:

quickchart-js - Javascript
quickchart-python - Python
quickchart-ruby - Ruby
quickchart-php - PHP
quickchart-csharp - C#
quickchart-java - Java
quickchart-go - Go (third-party)
chartjs-to-image - Javascript package for Chart.js images
Postman - Tool for building API requests

You don't necessarily need a library to use QuickChart. To use QuickChart without a library, simply build a QuickChart URL as described in API parameters.
Javascript/Node​
Run npm install quickchart-js to install the QuickChart dependency. Use it like so:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: {      labels: ['Hello world', 'Foo bar'],      datasets: [{ label: 'Foo', data: [1, 2] }],    },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');// Print the chart URLconsole.log(myChart.getUrl());
Get more details on the quickchart-js project page.
Python​
Run pip install quickchart.io to install the QuickChart dependency. Use it like so:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print the chart URLprint(qc.get_url())
Read the full Python tutorial or see details on the quickchart-python project page.
Ruby​
Run gem install quickchart to install the QuickChart Ruby gem:
require 'quickchart'qc = QuickChart.new(  {    type: "bar",    data: {      labels: ["Hello world", "Test"],      datasets: [{        label: "Foo",        data: [1, 2]      }]    }  },  width: 600,  height: 300,  device_pixel_ratio: 2.0,)# Print the chart URLputs qc.get_url
Learn more about chart generation in Ruby at the quickchart-ruby repository.
PHP​
Run composer require ianw/quickchart to install the QuickChart PHP library:
require 'quickchart'$qc = new QuickChart(array(  'width' => 600,  'height' => 300,));$qc->setConfig('{  type: "bar",  data: {    labels: ["Hello world", "Test"],    datasets: [{      label: "Foo",      data: [1, 2]    }]  }}');// Print the chart URLecho $qc->getUrl();
See the PHP QuickChart client at the quickchart-php repository.
C#​
Add the QuickChart package from NuGet. Then use the Chart object provided by the QuickChart namespace:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Hello world', 'Test'],                datasets: [{                  label: 'Foo',                  data: [1, 2]                }]              }            }"            Console.WriteLine(qc.GetUrl());        }    }}
The C# QuickChart client is available on NuGet and at the quickchart-csharp repository.
Java​
Add the QuickChart package from Maven Central. If you use Maven or Gradle, you can add it to your config (view details).
This library provides an io.quickchart package that contains a QuickChart class:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("{"                + "    type: 'bar',"                + "    data: {"                + "        labels: ['Q1', 'Q2', 'Q3', 'Q4'],"                + "        datasets: [{"                + "            label: 'Users',"                + "            data: [50, 60, 70, 180]"                + "        }]"                + "    }"                + "}"        );        System.out.println(chart.getUrl());    }}
The Java library is open-source and accessible on Github.
Go​
A third-party QuickChart Go library is available on Github. It can be used like so:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";fmt.Println(qc.GetUrl());
Other programming languages​
QuickChart is not limited to the libraries listed above. You can create a QuickChart URL in any language by building a URL string. Because building a URL string is a matter of string concatenation, this can be done in any language.
See the API Parameters documentation to learn how to build a URL that renders a chart image.
If you need help, please reach out and we will help you implement in your preferred programming language.Edit this pagePreviousShort URLs and TemplatesNextNo-code chartsJavascript/NodePythonRubyPHPC#JavaGoOther programming languages\n\n\n\nOn this pageClient libraries
We maintain client libraries for your convenience:

quickchart-js - Javascript
quickchart-python - Python
quickchart-ruby - Ruby
quickchart-php - PHP
quickchart-csharp - C#
quickchart-java - Java
quickchart-go - Go (third-party)
chartjs-to-image - Javascript package for Chart.js images
Postman - Tool for building API requests

You don't necessarily need a library to use QuickChart. To use QuickChart without a library, simply build a QuickChart URL as described in API parameters.
Javascript/Node​
Run npm install quickchart-js to install the QuickChart dependency. Use it like so:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: {      labels: ['Hello world', 'Foo bar'],      datasets: [{ label: 'Foo', data: [1, 2] }],    },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');// Print the chart URLconsole.log(myChart.getUrl());
Get more details on the quickchart-js project page.
Python​
Run pip install quickchart.io to install the QuickChart dependency. Use it like so:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print the chart URLprint(qc.get_url())
Read the full Python tutorial or see details on the quickchart-python project page.
Ruby​
Run gem install quickchart to install the QuickChart Ruby gem:
require 'quickchart'qc = QuickChart.new(  {    type: "bar",    data: {      labels: ["Hello world", "Test"],      datasets: [{        label: "Foo",        data: [1, 2]      }]    }  },  width: 600,  height: 300,  device_pixel_ratio: 2.0,)# Print the chart URLputs qc.get_url
Learn more about chart generation in Ruby at the quickchart-ruby repository.
PHP​
Run composer require ianw/quickchart to install the QuickChart PHP library:
require 'quickchart'$qc = new QuickChart(array(  'width' => 600,  'height' => 300,));$qc->setConfig('{  type: "bar",  data: {    labels: ["Hello world", "Test"],    datasets: [{      label: "Foo",      data: [1, 2]    }]  }}');// Print the chart URLecho $qc->getUrl();
See the PHP QuickChart client at the quickchart-php repository.
C#​
Add the QuickChart package from NuGet. Then use the Chart object provided by the QuickChart namespace:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Hello world', 'Test'],                datasets: [{                  label: 'Foo',                  data: [1, 2]                }]              }            }"            Console.WriteLine(qc.GetUrl());        }    }}
The C# QuickChart client is available on NuGet and at the quickchart-csharp repository.
Java​
Add the QuickChart package from Maven Central. If you use Maven or Gradle, you can add it to your config (view details).
This library provides an io.quickchart package that contains a QuickChart class:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("{"                + "    type: 'bar',"                + "    data: {"                + "        labels: ['Q1', 'Q2', 'Q3', 'Q4'],"                + "        datasets: [{"                + "            label: 'Users',"                + "            data: [50, 60, 70, 180]"                + "        }]"                + "    }"                + "}"        );        System.out.println(chart.getUrl());    }}
The Java library is open-source and accessible on Github.
Go​
A third-party QuickChart Go library is available on Github. It can be used like so:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";fmt.Println(qc.GetUrl());
Other programming languages​
QuickChart is not limited to the libraries listed above. You can create a QuickChart URL in any language by building a URL string. Because building a URL string is a matter of string concatenation, this can be done in any language.
See the API Parameters documentation to learn how to build a URL that renders a chart image.
If you need help, please reach out and we will help you implement in your preferred programming language.Edit this page\n\nOn this pageClient libraries
We maintain client libraries for your convenience:

quickchart-js - Javascript
quickchart-python - Python
quickchart-ruby - Ruby
quickchart-php - PHP
quickchart-csharp - C#
quickchart-java - Java
quickchart-go - Go (third-party)
chartjs-to-image - Javascript package for Chart.js images
Postman - Tool for building API requests

You don't necessarily need a library to use QuickChart. To use QuickChart without a library, simply build a QuickChart URL as described in API parameters.
Javascript/Node​
Run npm install quickchart-js to install the QuickChart dependency. Use it like so:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: {      labels: ['Hello world', 'Foo bar'],      datasets: [{ label: 'Foo', data: [1, 2] }],    },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');// Print the chart URLconsole.log(myChart.getUrl());
Get more details on the quickchart-js project page.
Python​
Run pip install quickchart.io to install the QuickChart dependency. Use it like so:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print the chart URLprint(qc.get_url())
Read the full Python tutorial or see details on the quickchart-python project page.
Ruby​
Run gem install quickchart to install the QuickChart Ruby gem:
require 'quickchart'qc = QuickChart.new(  {    type: "bar",    data: {      labels: ["Hello world", "Test"],      datasets: [{        label: "Foo",        data: [1, 2]      }]    }  },  width: 600,  height: 300,  device_pixel_ratio: 2.0,)# Print the chart URLputs qc.get_url
Learn more about chart generation in Ruby at the quickchart-ruby repository.
PHP​
Run composer require ianw/quickchart to install the QuickChart PHP library:
require 'quickchart'$qc = new QuickChart(array(  'width' => 600,  'height' => 300,));$qc->setConfig('{  type: "bar",  data: {    labels: ["Hello world", "Test"],    datasets: [{      label: "Foo",      data: [1, 2]    }]  }}');// Print the chart URLecho $qc->getUrl();
See the PHP QuickChart client at the quickchart-php repository.
C#​
Add the QuickChart package from NuGet. Then use the Chart object provided by the QuickChart namespace:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Hello world', 'Test'],                datasets: [{                  label: 'Foo',                  data: [1, 2]                }]              }            }"            Console.WriteLine(qc.GetUrl());        }    }}
The C# QuickChart client is available on NuGet and at the quickchart-csharp repository.
Java​
Add the QuickChart package from Maven Central. If you use Maven or Gradle, you can add it to your config (view details).
This library provides an io.quickchart package that contains a QuickChart class:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("{"                + "    type: 'bar',"                + "    data: {"                + "        labels: ['Q1', 'Q2', 'Q3', 'Q4'],"                + "        datasets: [{"                + "            label: 'Users',"                + "            data: [50, 60, 70, 180]"                + "        }]"                + "    }"                + "}"        );        System.out.println(chart.getUrl());    }}
The Java library is open-source and accessible on Github.
Go​
A third-party QuickChart Go library is available on Github. It can be used like so:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";fmt.Println(qc.GetUrl());
Other programming languages​
QuickChart is not limited to the libraries listed above. You can create a QuickChart URL in any language by building a URL string. Because building a URL string is a matter of string concatenation, this can be done in any language.
See the API Parameters documentation to learn how to build a URL that renders a chart image.
If you need help, please reach out and we will help you implement in your preferred programming language.Edit this pagePreviousShort URLs and TemplatesNextNo-code chartsJavascript/NodePythonRubyPHPC#JavaGoOther programming languages\n\n\n\nOn this pageClient libraries
We maintain client libraries for your convenience:

quickchart-js - Javascript
quickchart-python - Python
quickchart-ruby - Ruby
quickchart-php - PHP
quickchart-csharp - C#
quickchart-java - Java
quickchart-go - Go (third-party)
chartjs-to-image - Javascript package for Chart.js images
Postman - Tool for building API requests

You don't necessarily need a library to use QuickChart. To use QuickChart without a library, simply build a QuickChart URL as described in API parameters.
Javascript/Node​
Run npm install quickchart-js to install the QuickChart dependency. Use it like so:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: {      labels: ['Hello world', 'Foo bar'],      datasets: [{ label: 'Foo', data: [1, 2] }],    },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');// Print the chart URLconsole.log(myChart.getUrl());
Get more details on the quickchart-js project page.
Python​
Run pip install quickchart.io to install the QuickChart dependency. Use it like so:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print the chart URLprint(qc.get_url())
Read the full Python tutorial or see details on the quickchart-python project page.
Ruby​
Run gem install quickchart to install the QuickChart Ruby gem:
require 'quickchart'qc = QuickChart.new(  {    type: "bar",    data: {      labels: ["Hello world", "Test"],      datasets: [{        label: "Foo",        data: [1, 2]      }]    }  },  width: 600,  height: 300,  device_pixel_ratio: 2.0,)# Print the chart URLputs qc.get_url
Learn more about chart generation in Ruby at the quickchart-ruby repository.
PHP​
Run composer require ianw/quickchart to install the QuickChart PHP library:
require 'quickchart'$qc = new QuickChart(array(  'width' => 600,  'height' => 300,));$qc->setConfig('{  type: "bar",  data: {    labels: ["Hello world", "Test"],    datasets: [{      label: "Foo",      data: [1, 2]    }]  }}');// Print the chart URLecho $qc->getUrl();
See the PHP QuickChart client at the quickchart-php repository.
C#​
Add the QuickChart package from NuGet. Then use the Chart object provided by the QuickChart namespace:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Hello world', 'Test'],                datasets: [{                  label: 'Foo',                  data: [1, 2]                }]              }            }"            Console.WriteLine(qc.GetUrl());        }    }}
The C# QuickChart client is available on NuGet and at the quickchart-csharp repository.
Java​
Add the QuickChart package from Maven Central. If you use Maven or Gradle, you can add it to your config (view details).
This library provides an io.quickchart package that contains a QuickChart class:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("{"                + "    type: 'bar',"                + "    data: {"                + "        labels: ['Q1', 'Q2', 'Q3', 'Q4'],"                + "        datasets: [{"                + "            label: 'Users',"                + "            data: [50, 60, 70, 180]"                + "        }]"                + "    }"                + "}"        );        System.out.println(chart.getUrl());    }}
The Java library is open-source and accessible on Github.
Go​
A third-party QuickChart Go library is available on Github. It can be used like so:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";fmt.Println(qc.GetUrl());
Other programming languages​
QuickChart is not limited to the libraries listed above. You can create a QuickChart URL in any language by building a URL string. Because building a URL string is a matter of string concatenation, this can be done in any language.
See the API Parameters documentation to learn how to build a URL that renders a chart image.
If you need help, please reach out and we will help you implement in your preferred programming language.Edit this page\n\nOn this pageClient libraries
We maintain client libraries for your convenience:

quickchart-js - Javascript
quickchart-python - Python
quickchart-ruby - Ruby
quickchart-php - PHP
quickchart-csharp - C#
quickchart-java - Java
quickchart-go - Go (third-party)
chartjs-to-image - Javascript package for Chart.js images
Postman - Tool for building API requests

You don't necessarily need a library to use QuickChart. To use QuickChart without a library, simply build a QuickChart URL as described in API parameters.
Javascript/Node​
Run npm install quickchart-js to install the QuickChart dependency. Use it like so:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: {      labels: ['Hello world', 'Foo bar'],      datasets: [{ label: 'Foo', data: [1, 2] }],    },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');// Print the chart URLconsole.log(myChart.getUrl());
Get more details on the quickchart-js project page.
Python​
Run pip install quickchart.io to install the QuickChart dependency. Use it like so:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print the chart URLprint(qc.get_url())
Read the full Python tutorial or see details on the quickchart-python project page.
Ruby​
Run gem install quickchart to install the QuickChart Ruby gem:
require 'quickchart'qc = QuickChart.new(  {    type: "bar",    data: {      labels: ["Hello world", "Test"],      datasets: [{        label: "Foo",        data: [1, 2]      }]    }  },  width: 600,  height: 300,  device_pixel_ratio: 2.0,)# Print the chart URLputs qc.get_url
Learn more about chart generation in Ruby at the quickchart-ruby repository.
PHP​
Run composer require ianw/quickchart to install the QuickChart PHP library:
require 'quickchart'$qc = new QuickChart(array(  'width' => 600,  'height' => 300,));$qc->setConfig('{  type: "bar",  data: {    labels: ["Hello world", "Test"],    datasets: [{      label: "Foo",      data: [1, 2]    }]  }}');// Print the chart URLecho $qc->getUrl();
See the PHP QuickChart client at the quickchart-php repository.
C#​
Add the QuickChart package from NuGet. Then use the Chart object provided by the QuickChart namespace:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Hello world', 'Test'],                datasets: [{                  label: 'Foo',                  data: [1, 2]                }]              }            }"            Console.WriteLine(qc.GetUrl());        }    }}
The C# QuickChart client is available on NuGet and at the quickchart-csharp repository.
Java​
Add the QuickChart package from Maven Central. If you use Maven or Gradle, you can add it to your config (view details).
This library provides an io.quickchart package that contains a QuickChart class:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("{"                + "    type: 'bar',"                + "    data: {"                + "        labels: ['Q1', 'Q2', 'Q3', 'Q4'],"                + "        datasets: [{"                + "            label: 'Users',"                + "            data: [50, 60, 70, 180]"                + "        }]"                + "    }"                + "}"        );        System.out.println(chart.getUrl());    }}
The Java library is open-source and accessible on Github.
Go​
A third-party QuickChart Go library is available on Github. It can be used like so:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";fmt.Println(qc.GetUrl());
Other programming languages​
QuickChart is not limited to the libraries listed above. You can create a QuickChart URL in any language by building a URL string. Because building a URL string is a matter of string concatenation, this can be done in any language.
See the API Parameters documentation to learn how to build a URL that renders a chart image.
If you need help, please reach out and we will help you implement in your preferred programming language.Edit this pagePreviousShort URLs and TemplatesNextNo-code chartsJavascript/NodePythonRubyPHPC#JavaGoOther programming languages\n\n\n\nOn this pageClient libraries
We maintain client libraries for your convenience:

quickchart-js - Javascript
quickchart-python - Python
quickchart-ruby - Ruby
quickchart-php - PHP
quickchart-csharp - C#
quickchart-java - Java
quickchart-go - Go (third-party)
chartjs-to-image - Javascript package for Chart.js images
Postman - Tool for building API requests

You don't necessarily need a library to use QuickChart. To use QuickChart without a library, simply build a QuickChart URL as described in API parameters.
Javascript/Node​
Run npm install quickchart-js to install the QuickChart dependency. Use it like so:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: {      labels: ['Hello world', 'Foo bar'],      datasets: [{ label: 'Foo', data: [1, 2] }],    },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');// Print the chart URLconsole.log(myChart.getUrl());
Get more details on the quickchart-js project page.
Python​
Run pip install quickchart.io to install the QuickChart dependency. Use it like so:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print the chart URLprint(qc.get_url())
Read the full Python tutorial or see details on the quickchart-python project page.
Ruby​
Run gem install quickchart to install the QuickChart Ruby gem:
require 'quickchart'qc = QuickChart.new(  {    type: "bar",    data: {      labels: ["Hello world", "Test"],      datasets: [{        label: "Foo",        data: [1, 2]      }]    }  },  width: 600,  height: 300,  device_pixel_ratio: 2.0,)# Print the chart URLputs qc.get_url
Learn more about chart generation in Ruby at the quickchart-ruby repository.
PHP​
Run composer require ianw/quickchart to install the QuickChart PHP library:
require 'quickchart'$qc = new QuickChart(array(  'width' => 600,  'height' => 300,));$qc->setConfig('{  type: "bar",  data: {    labels: ["Hello world", "Test"],    datasets: [{      label: "Foo",      data: [1, 2]    }]  }}');// Print the chart URLecho $qc->getUrl();
See the PHP QuickChart client at the quickchart-php repository.
C#​
Add the QuickChart package from NuGet. Then use the Chart object provided by the QuickChart namespace:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Hello world', 'Test'],                datasets: [{                  label: 'Foo',                  data: [1, 2]                }]              }            }"            Console.WriteLine(qc.GetUrl());        }    }}
The C# QuickChart client is available on NuGet and at the quickchart-csharp repository.
Java​
Add the QuickChart package from Maven Central. If you use Maven or Gradle, you can add it to your config (view details).
This library provides an io.quickchart package that contains a QuickChart class:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("{"                + "    type: 'bar',"                + "    data: {"                + "        labels: ['Q1', 'Q2', 'Q3', 'Q4'],"                + "        datasets: [{"                + "            label: 'Users',"                + "            data: [50, 60, 70, 180]"                + "        }]"                + "    }"                + "}"        );        System.out.println(chart.getUrl());    }}
The Java library is open-source and accessible on Github.
Go​
A third-party QuickChart Go library is available on Github. It can be used like so:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";fmt.Println(qc.GetUrl());
Other programming languages​
QuickChart is not limited to the libraries listed above. You can create a QuickChart URL in any language by building a URL string. Because building a URL string is a matter of string concatenation, this can be done in any language.
See the API Parameters documentation to learn how to build a URL that renders a chart image.
If you need help, please reach out and we will help you implement in your preferred programming language.Edit this page\n\nOn this pageClient libraries
We maintain client libraries for your convenience:

quickchart-js - Javascript
quickchart-python - Python
quickchart-ruby - Ruby
quickchart-php - PHP
quickchart-csharp - C#
quickchart-java - Java
quickchart-go - Go (third-party)
chartjs-to-image - Javascript package for Chart.js images
Postman - Tool for building API requests

You don't necessarily need a library to use QuickChart. To use QuickChart without a library, simply build a QuickChart URL as described in API parameters.
Javascript/Node​
Run npm install quickchart-js to install the QuickChart dependency. Use it like so:
const QuickChart = require('quickchart-js');const myChart = new QuickChart();myChart  .setConfig({    type: 'bar',    data: {      labels: ['Hello world', 'Foo bar'],      datasets: [{ label: 'Foo', data: [1, 2] }],    },  })  .setWidth(800)  .setHeight(400)  .setBackgroundColor('transparent');// Print the chart URLconsole.log(myChart.getUrl());
Get more details on the quickchart-js project page.
Python​
Run pip install quickchart.io to install the QuickChart dependency. Use it like so:
from quickchart import QuickChartqc = QuickChart()qc.width = 500qc.height = 300qc.device_pixel_ratio = 2.0qc.config = {    "type": "bar",    "data": {        "labels": ["Hello world", "Test"],        "datasets": [{            "label": "Foo",            "data": [1, 2]        }]    }}# Print the chart URLprint(qc.get_url())
Read the full Python tutorial or see details on the quickchart-python project page.
Ruby​
Run gem install quickchart to install the QuickChart Ruby gem:
require 'quickchart'qc = QuickChart.new(  {    type: "bar",    data: {      labels: ["Hello world", "Test"],      datasets: [{        label: "Foo",        data: [1, 2]      }]    }  },  width: 600,  height: 300,  device_pixel_ratio: 2.0,)# Print the chart URLputs qc.get_url
Learn more about chart generation in Ruby at the quickchart-ruby repository.
PHP​
Run composer require ianw/quickchart to install the QuickChart PHP library:
require 'quickchart'$qc = new QuickChart(array(  'width' => 600,  'height' => 300,));$qc->setConfig('{  type: "bar",  data: {    labels: ["Hello world", "Test"],    datasets: [{      label: "Foo",      data: [1, 2]    }]  }}');// Print the chart URLecho $qc->getUrl();
See the PHP QuickChart client at the quickchart-php repository.
C#​
Add the QuickChart package from NuGet. Then use the Chart object provided by the QuickChart namespace:
namespace QuickChartExample{    public class SimpleExample    {        static void Main(string[] args) {            Chart qc = new Chart();            qc.Width = 500;            qc.Height = 300;            qc.Config = @"{              type: 'bar',              data: {                labels: ['Hello world', 'Test'],                datasets: [{                  label: 'Foo',                  data: [1, 2]                }]              }            }"            Console.WriteLine(qc.GetUrl());        }    }}
The C# QuickChart client is available on NuGet and at the quickchart-csharp repository.
Java​
Add the QuickChart package from Maven Central. If you use Maven or Gradle, you can add it to your config (view details).
This library provides an io.quickchart package that contains a QuickChart class:
import io.quickchart.QuickChart;public class PrintUrlExample {    public static void main(String[] args) {        QuickChart chart = new QuickChart();        chart.setWidth(500);        chart.setHeight(300);        chart.setConfig("{"                + "    type: 'bar',"                + "    data: {"                + "        labels: ['Q1', 'Q2', 'Q3', 'Q4'],"                + "        datasets: [{"                + "            label: 'Users',"                + "            data: [50, 60, 70, 180]"                + "        }]"                + "    }"                + "}"        );        System.out.println(chart.getUrl());    }}
The Java library is open-source and accessible on Github.
Go​
A third-party QuickChart Go library is available on Github. It can be used like so:
qc := quickchartgo.New()qc.Config = chartConfigqc.Config := `{  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{    label: 'Users',    data: [50, 60, 70, 180]    }]  }}`qc.Width = 500;qc.Height = 300;qc.Version = "2.9.4";fmt.Println(qc.GetUrl());
Other programming languages​
QuickChart is not limited to the libraries listed above. You can create a QuickChart URL in any language by building a URL string. Because building a URL string is a matter of string concatenation, this can be done in any language.
See the API Parameters documentation to learn how to build a URL that renders a chart image.
If you need help, please reach out and we will help you implement in your preferred programming language.Edit this pagePreviousShort URLs and TemplatesNextNo-code chartsJavascript/NodePythonRubyPHPC#JavaGoOther programming languages\n\n\n\nPlease enable cookies.
    
      
        Email Protection
        You are unable to access this email address quickchart.io
      

      
        
          
            The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?
                    
                
              
            
          
        
      

      
  
    Cloudflare Ray ID: 93647560890405b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nPlease enable cookies.\nEmail Protection
        You are unable to access this email address quickchart.io
      

      
        
          
            The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?
                    
                
              
            
          
        
      

      
  
    Cloudflare Ray ID: 93647560890405b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nEmail Protection
        You are unable to access this email address quickchart.io\nYou are unable to access this email address quickchart.io\nYou are unable to access this email address\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.\nIf you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.\nsign up for Cloudflare\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?\nHow does Cloudflare protect email addresses on website from spammers?\nCan I sign up for Cloudflare?\nCan I sign up for Cloudflare?\nCloudflare Ray ID: 93647560890405b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nCloudflare Ray ID: 93647560890405b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nCloudflare Ray ID: 93647560890405b6\nYour IP:
      Click to reveal
      20.39.61.197
      •\nPerformance & security by Cloudflare\nPerformance & security by\n\n\nNo-code charts
If you prefer not to edit a Chart.js configuration directly, use the Chart Maker to create a chart without code.

Design a chart & customize its look and feel to match your brand
Save & share the chart
Use this chart as a template to generate other charts based on dynamic data
Embed generated charts anywhere

tipTo learn more about no-code chart APIs and templates, see the chart maker
documentation.
The no-code chart builder generates a special endpoint that generates charts based on your specification.Edit this page\n\nNo-code charts
If you prefer not to edit a Chart.js configuration directly, use the Chart Maker to create a chart without code.

Design a chart & customize its look and feel to match your brand
Save & share the chart
Use this chart as a template to generate other charts based on dynamic data
Embed generated charts anywhere

tipTo learn more about no-code chart APIs and templates, see the chart maker
documentation.
The no-code chart builder generates a special endpoint that generates charts based on your specification.Edit this pagePreviousClient librariesNextError handling\n\n\n\nOn this pageError handling400 Bad Request​
Errors that prevent the chart from rendering will return a non-200 HTTP status code, most commonly 400 Bad Request. In most cases, the error will be rendered in the requested image format. If an error is rendered in an image, it is also included as a string in the X-quickchart-error HTTP header.
An example error due to invalid chart config - not URL encoded.
Invalid or unexpected token​
Invalid Chart.js configurations may return errors similar to this one. The most common cause of this error is that the caller forgot to URL-encode the chart variable. The next most common cause is invalid JSON/Javascript syntax in the chart configuration.
Cannot read property <X> of undefined​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
<X> is not a function​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
Request header or cookie too large​
The URL length limitation is imposed by web browsers and hosting providers, so we cannot change it.  Here are two ways you can solve this problem:


Consolidate the request payload.
Charts: Reduce the number of datapoints, or reduce the precision of datapoints.  For example, shorten "2.0003" to just "2".  You can also reduce the amount of text required to define your datapoints by using a map function (example).
Word clouds: Use the word list format to combine repeat words with their counts.  You can enable this by setting useWordList=1 in the URL.  Here's an example text payload: "understanding:5,companies:1,freedom:10"


Use the POST API.  By sending an HTTP POST request instead of a GET, you'll be able to include much more data.  See documentation on POST endpoint.


Certificate errors​
If you are receiving a certificate error message while using or accessing QuickChart, or notice of an expired certificate, this likely means that you have an outdated root certificate. To fix, you must update your local CA bundle.
The root cause of this is that a root certificate IdentTrust DST Root CA X3 expired. Those with outdated systems still have this certificate.

Learn more here
Relevant news article
Edit this page\n\nOn this pageError handling400 Bad Request​
Errors that prevent the chart from rendering will return a non-200 HTTP status code, most commonly 400 Bad Request. In most cases, the error will be rendered in the requested image format. If an error is rendered in an image, it is also included as a string in the X-quickchart-error HTTP header.
An example error due to invalid chart config - not URL encoded.
Invalid or unexpected token​
Invalid Chart.js configurations may return errors similar to this one. The most common cause of this error is that the caller forgot to URL-encode the chart variable. The next most common cause is invalid JSON/Javascript syntax in the chart configuration.
Cannot read property <X> of undefined​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
<X> is not a function​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
Request header or cookie too large​
The URL length limitation is imposed by web browsers and hosting providers, so we cannot change it.  Here are two ways you can solve this problem:


Consolidate the request payload.
Charts: Reduce the number of datapoints, or reduce the precision of datapoints.  For example, shorten "2.0003" to just "2".  You can also reduce the amount of text required to define your datapoints by using a map function (example).
Word clouds: Use the word list format to combine repeat words with their counts.  You can enable this by setting useWordList=1 in the URL.  Here's an example text payload: "understanding:5,companies:1,freedom:10"


Use the POST API.  By sending an HTTP POST request instead of a GET, you'll be able to include much more data.  See documentation on POST endpoint.


Certificate errors​
If you are receiving a certificate error message while using or accessing QuickChart, or notice of an expired certificate, this likely means that you have an outdated root certificate. To fix, you must update your local CA bundle.
The root cause of this is that a root certificate IdentTrust DST Root CA X3 expired. Those with outdated systems still have this certificate.

Learn more here
Relevant news article
Edit this pagePreviousNo-code chartsNextChart Types400 Bad RequestInvalid or unexpected tokenCannot read property <X> of undefined<X> is not a functionRequest header or cookie too largeCertificate errors\n\n\n\nOn this pageError handling400 Bad Request​
Errors that prevent the chart from rendering will return a non-200 HTTP status code, most commonly 400 Bad Request. In most cases, the error will be rendered in the requested image format. If an error is rendered in an image, it is also included as a string in the X-quickchart-error HTTP header.
An example error due to invalid chart config - not URL encoded.
Invalid or unexpected token​
Invalid Chart.js configurations may return errors similar to this one. The most common cause of this error is that the caller forgot to URL-encode the chart variable. The next most common cause is invalid JSON/Javascript syntax in the chart configuration.
Cannot read property <X> of undefined​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
<X> is not a function​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
Request header or cookie too large​
The URL length limitation is imposed by web browsers and hosting providers, so we cannot change it.  Here are two ways you can solve this problem:


Consolidate the request payload.
Charts: Reduce the number of datapoints, or reduce the precision of datapoints.  For example, shorten "2.0003" to just "2".  You can also reduce the amount of text required to define your datapoints by using a map function (example).
Word clouds: Use the word list format to combine repeat words with their counts.  You can enable this by setting useWordList=1 in the URL.  Here's an example text payload: "understanding:5,companies:1,freedom:10"


Use the POST API.  By sending an HTTP POST request instead of a GET, you'll be able to include much more data.  See documentation on POST endpoint.


Certificate errors​
If you are receiving a certificate error message while using or accessing QuickChart, or notice of an expired certificate, this likely means that you have an outdated root certificate. To fix, you must update your local CA bundle.
The root cause of this is that a root certificate IdentTrust DST Root CA X3 expired. Those with outdated systems still have this certificate.

Learn more here
Relevant news article
Edit this page\n\nOn this pageError handling400 Bad Request​
Errors that prevent the chart from rendering will return a non-200 HTTP status code, most commonly 400 Bad Request. In most cases, the error will be rendered in the requested image format. If an error is rendered in an image, it is also included as a string in the X-quickchart-error HTTP header.
An example error due to invalid chart config - not URL encoded.
Invalid or unexpected token​
Invalid Chart.js configurations may return errors similar to this one. The most common cause of this error is that the caller forgot to URL-encode the chart variable. The next most common cause is invalid JSON/Javascript syntax in the chart configuration.
Cannot read property <X> of undefined​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
<X> is not a function​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
Request header or cookie too large​
The URL length limitation is imposed by web browsers and hosting providers, so we cannot change it.  Here are two ways you can solve this problem:


Consolidate the request payload.
Charts: Reduce the number of datapoints, or reduce the precision of datapoints.  For example, shorten "2.0003" to just "2".  You can also reduce the amount of text required to define your datapoints by using a map function (example).
Word clouds: Use the word list format to combine repeat words with their counts.  You can enable this by setting useWordList=1 in the URL.  Here's an example text payload: "understanding:5,companies:1,freedom:10"


Use the POST API.  By sending an HTTP POST request instead of a GET, you'll be able to include much more data.  See documentation on POST endpoint.


Certificate errors​
If you are receiving a certificate error message while using or accessing QuickChart, or notice of an expired certificate, this likely means that you have an outdated root certificate. To fix, you must update your local CA bundle.
The root cause of this is that a root certificate IdentTrust DST Root CA X3 expired. Those with outdated systems still have this certificate.

Learn more here
Relevant news article
Edit this pagePreviousNo-code chartsNextChart Types400 Bad RequestInvalid or unexpected tokenCannot read property <X> of undefined<X> is not a functionRequest header or cookie too largeCertificate errors\n\n\n\nOn this pageError handling400 Bad Request​
Errors that prevent the chart from rendering will return a non-200 HTTP status code, most commonly 400 Bad Request. In most cases, the error will be rendered in the requested image format. If an error is rendered in an image, it is also included as a string in the X-quickchart-error HTTP header.
An example error due to invalid chart config - not URL encoded.
Invalid or unexpected token​
Invalid Chart.js configurations may return errors similar to this one. The most common cause of this error is that the caller forgot to URL-encode the chart variable. The next most common cause is invalid JSON/Javascript syntax in the chart configuration.
Cannot read property <X> of undefined​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
<X> is not a function​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
Request header or cookie too large​
The URL length limitation is imposed by web browsers and hosting providers, so we cannot change it.  Here are two ways you can solve this problem:


Consolidate the request payload.
Charts: Reduce the number of datapoints, or reduce the precision of datapoints.  For example, shorten "2.0003" to just "2".  You can also reduce the amount of text required to define your datapoints by using a map function (example).
Word clouds: Use the word list format to combine repeat words with their counts.  You can enable this by setting useWordList=1 in the URL.  Here's an example text payload: "understanding:5,companies:1,freedom:10"


Use the POST API.  By sending an HTTP POST request instead of a GET, you'll be able to include much more data.  See documentation on POST endpoint.


Certificate errors​
If you are receiving a certificate error message while using or accessing QuickChart, or notice of an expired certificate, this likely means that you have an outdated root certificate. To fix, you must update your local CA bundle.
The root cause of this is that a root certificate IdentTrust DST Root CA X3 expired. Those with outdated systems still have this certificate.

Learn more here
Relevant news article
Edit this page\n\nOn this pageError handling400 Bad Request​
Errors that prevent the chart from rendering will return a non-200 HTTP status code, most commonly 400 Bad Request. In most cases, the error will be rendered in the requested image format. If an error is rendered in an image, it is also included as a string in the X-quickchart-error HTTP header.
An example error due to invalid chart config - not URL encoded.
Invalid or unexpected token​
Invalid Chart.js configurations may return errors similar to this one. The most common cause of this error is that the caller forgot to URL-encode the chart variable. The next most common cause is invalid JSON/Javascript syntax in the chart configuration.
Cannot read property <X> of undefined​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
<X> is not a function​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
Request header or cookie too large​
The URL length limitation is imposed by web browsers and hosting providers, so we cannot change it.  Here are two ways you can solve this problem:


Consolidate the request payload.
Charts: Reduce the number of datapoints, or reduce the precision of datapoints.  For example, shorten "2.0003" to just "2".  You can also reduce the amount of text required to define your datapoints by using a map function (example).
Word clouds: Use the word list format to combine repeat words with their counts.  You can enable this by setting useWordList=1 in the URL.  Here's an example text payload: "understanding:5,companies:1,freedom:10"


Use the POST API.  By sending an HTTP POST request instead of a GET, you'll be able to include much more data.  See documentation on POST endpoint.


Certificate errors​
If you are receiving a certificate error message while using or accessing QuickChart, or notice of an expired certificate, this likely means that you have an outdated root certificate. To fix, you must update your local CA bundle.
The root cause of this is that a root certificate IdentTrust DST Root CA X3 expired. Those with outdated systems still have this certificate.

Learn more here
Relevant news article
Edit this pagePreviousNo-code chartsNextChart Types400 Bad RequestInvalid or unexpected tokenCannot read property <X> of undefined<X> is not a functionRequest header or cookie too largeCertificate errors\n\n\n\nOn this pageError handling400 Bad Request​
Errors that prevent the chart from rendering will return a non-200 HTTP status code, most commonly 400 Bad Request. In most cases, the error will be rendered in the requested image format. If an error is rendered in an image, it is also included as a string in the X-quickchart-error HTTP header.
An example error due to invalid chart config - not URL encoded.
Invalid or unexpected token​
Invalid Chart.js configurations may return errors similar to this one. The most common cause of this error is that the caller forgot to URL-encode the chart variable. The next most common cause is invalid JSON/Javascript syntax in the chart configuration.
Cannot read property <X> of undefined​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
<X> is not a function​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
Request header or cookie too large​
The URL length limitation is imposed by web browsers and hosting providers, so we cannot change it.  Here are two ways you can solve this problem:


Consolidate the request payload.
Charts: Reduce the number of datapoints, or reduce the precision of datapoints.  For example, shorten "2.0003" to just "2".  You can also reduce the amount of text required to define your datapoints by using a map function (example).
Word clouds: Use the word list format to combine repeat words with their counts.  You can enable this by setting useWordList=1 in the URL.  Here's an example text payload: "understanding:5,companies:1,freedom:10"


Use the POST API.  By sending an HTTP POST request instead of a GET, you'll be able to include much more data.  See documentation on POST endpoint.


Certificate errors​
If you are receiving a certificate error message while using or accessing QuickChart, or notice of an expired certificate, this likely means that you have an outdated root certificate. To fix, you must update your local CA bundle.
The root cause of this is that a root certificate IdentTrust DST Root CA X3 expired. Those with outdated systems still have this certificate.

Learn more here
Relevant news article
Edit this page\n\nOn this pageError handling400 Bad Request​
Errors that prevent the chart from rendering will return a non-200 HTTP status code, most commonly 400 Bad Request. In most cases, the error will be rendered in the requested image format. If an error is rendered in an image, it is also included as a string in the X-quickchart-error HTTP header.
An example error due to invalid chart config - not URL encoded.
Invalid or unexpected token​
Invalid Chart.js configurations may return errors similar to this one. The most common cause of this error is that the caller forgot to URL-encode the chart variable. The next most common cause is invalid JSON/Javascript syntax in the chart configuration.
Cannot read property <X> of undefined​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
<X> is not a function​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
Request header or cookie too large​
The URL length limitation is imposed by web browsers and hosting providers, so we cannot change it.  Here are two ways you can solve this problem:


Consolidate the request payload.
Charts: Reduce the number of datapoints, or reduce the precision of datapoints.  For example, shorten "2.0003" to just "2".  You can also reduce the amount of text required to define your datapoints by using a map function (example).
Word clouds: Use the word list format to combine repeat words with their counts.  You can enable this by setting useWordList=1 in the URL.  Here's an example text payload: "understanding:5,companies:1,freedom:10"


Use the POST API.  By sending an HTTP POST request instead of a GET, you'll be able to include much more data.  See documentation on POST endpoint.


Certificate errors​
If you are receiving a certificate error message while using or accessing QuickChart, or notice of an expired certificate, this likely means that you have an outdated root certificate. To fix, you must update your local CA bundle.
The root cause of this is that a root certificate IdentTrust DST Root CA X3 expired. Those with outdated systems still have this certificate.

Learn more here
Relevant news article
Edit this pagePreviousNo-code chartsNextChart Types400 Bad RequestInvalid or unexpected tokenCannot read property <X> of undefined<X> is not a functionRequest header or cookie too largeCertificate errors\n\n\n\nPlease enable cookies.
    
      
        Email Protection
        You are unable to access this email address quickchart.io
      

      
        
          
            The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?
                    
                
              
            
          
        
      

      
  
    Cloudflare Ray ID: 93647565dcb605b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nPlease enable cookies.\nEmail Protection
        You are unable to access this email address quickchart.io
      

      
        
          
            The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?
                    
                
              
            
          
        
      

      
  
    Cloudflare Ray ID: 93647565dcb605b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nEmail Protection
        You are unable to access this email address quickchart.io\nYou are unable to access this email address quickchart.io\nYou are unable to access this email address\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.\nIf you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.\nsign up for Cloudflare\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?\nHow does Cloudflare protect email addresses on website from spammers?\nCan I sign up for Cloudflare?\nCan I sign up for Cloudflare?\nCloudflare Ray ID: 93647565dcb605b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nCloudflare Ray ID: 93647565dcb605b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nCloudflare Ray ID: 93647565dcb605b6\nYour IP:
      Click to reveal
      20.39.61.197
      •\nPerformance & security by Cloudflare\nPerformance & security by\n\n\nOn this pageError handling400 Bad Request​
Errors that prevent the chart from rendering will return a non-200 HTTP status code, most commonly 400 Bad Request. In most cases, the error will be rendered in the requested image format. If an error is rendered in an image, it is also included as a string in the X-quickchart-error HTTP header.
An example error due to invalid chart config - not URL encoded.
Invalid or unexpected token​
Invalid Chart.js configurations may return errors similar to this one. The most common cause of this error is that the caller forgot to URL-encode the chart variable. The next most common cause is invalid JSON/Javascript syntax in the chart configuration.
Cannot read property <X> of undefined​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
<X> is not a function​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
Request header or cookie too large​
The URL length limitation is imposed by web browsers and hosting providers, so we cannot change it.  Here are two ways you can solve this problem:


Consolidate the request payload.
Charts: Reduce the number of datapoints, or reduce the precision of datapoints.  For example, shorten "2.0003" to just "2".  You can also reduce the amount of text required to define your datapoints by using a map function (example).
Word clouds: Use the word list format to combine repeat words with their counts.  You can enable this by setting useWordList=1 in the URL.  Here's an example text payload: "understanding:5,companies:1,freedom:10"


Use the POST API.  By sending an HTTP POST request instead of a GET, you'll be able to include much more data.  See documentation on POST endpoint.


Certificate errors​
If you are receiving a certificate error message while using or accessing QuickChart, or notice of an expired certificate, this likely means that you have an outdated root certificate. To fix, you must update your local CA bundle.
The root cause of this is that a root certificate IdentTrust DST Root CA X3 expired. Those with outdated systems still have this certificate.

Learn more here
Relevant news article
Edit this page\n\nOn this pageError handling400 Bad Request​
Errors that prevent the chart from rendering will return a non-200 HTTP status code, most commonly 400 Bad Request. In most cases, the error will be rendered in the requested image format. If an error is rendered in an image, it is also included as a string in the X-quickchart-error HTTP header.
An example error due to invalid chart config - not URL encoded.
Invalid or unexpected token​
Invalid Chart.js configurations may return errors similar to this one. The most common cause of this error is that the caller forgot to URL-encode the chart variable. The next most common cause is invalid JSON/Javascript syntax in the chart configuration.
Cannot read property <X> of undefined​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
<X> is not a function​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
Request header or cookie too large​
The URL length limitation is imposed by web browsers and hosting providers, so we cannot change it.  Here are two ways you can solve this problem:


Consolidate the request payload.
Charts: Reduce the number of datapoints, or reduce the precision of datapoints.  For example, shorten "2.0003" to just "2".  You can also reduce the amount of text required to define your datapoints by using a map function (example).
Word clouds: Use the word list format to combine repeat words with their counts.  You can enable this by setting useWordList=1 in the URL.  Here's an example text payload: "understanding:5,companies:1,freedom:10"


Use the POST API.  By sending an HTTP POST request instead of a GET, you'll be able to include much more data.  See documentation on POST endpoint.


Certificate errors​
If you are receiving a certificate error message while using or accessing QuickChart, or notice of an expired certificate, this likely means that you have an outdated root certificate. To fix, you must update your local CA bundle.
The root cause of this is that a root certificate IdentTrust DST Root CA X3 expired. Those with outdated systems still have this certificate.

Learn more here
Relevant news article
Edit this pagePreviousNo-code chartsNextChart Types400 Bad RequestInvalid or unexpected tokenCannot read property <X> of undefined<X> is not a functionRequest header or cookie too largeCertificate errors\n\n\n\nPlease enable cookies.
    
      
        Email Protection
        You are unable to access this email address quickchart.io
      

      
        
          
            The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?
                    
                
              
            
          
        
      

      
  
    Cloudflare Ray ID: 936475660cd005b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nPlease enable cookies.\nEmail Protection
        You are unable to access this email address quickchart.io
      

      
        
          
            The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?
                    
                
              
            
          
        
      

      
  
    Cloudflare Ray ID: 936475660cd005b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nEmail Protection
        You are unable to access this email address quickchart.io\nYou are unable to access this email address quickchart.io\nYou are unable to access this email address\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.\nIf you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.\nsign up for Cloudflare\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?\nHow does Cloudflare protect email addresses on website from spammers?\nCan I sign up for Cloudflare?\nCan I sign up for Cloudflare?\nCloudflare Ray ID: 936475660cd005b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nCloudflare Ray ID: 936475660cd005b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nCloudflare Ray ID: 936475660cd005b6\nYour IP:
      Click to reveal
      20.39.61.197
      •\nPerformance & security by Cloudflare\nPerformance & security by\n\n\nOn this pageError handling400 Bad Request​
Errors that prevent the chart from rendering will return a non-200 HTTP status code, most commonly 400 Bad Request. In most cases, the error will be rendered in the requested image format. If an error is rendered in an image, it is also included as a string in the X-quickchart-error HTTP header.
An example error due to invalid chart config - not URL encoded.
Invalid or unexpected token​
Invalid Chart.js configurations may return errors similar to this one. The most common cause of this error is that the caller forgot to URL-encode the chart variable. The next most common cause is invalid JSON/Javascript syntax in the chart configuration.
Cannot read property <X> of undefined​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
<X> is not a function​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
Request header or cookie too large​
The URL length limitation is imposed by web browsers and hosting providers, so we cannot change it.  Here are two ways you can solve this problem:


Consolidate the request payload.
Charts: Reduce the number of datapoints, or reduce the precision of datapoints.  For example, shorten "2.0003" to just "2".  You can also reduce the amount of text required to define your datapoints by using a map function (example).
Word clouds: Use the word list format to combine repeat words with their counts.  You can enable this by setting useWordList=1 in the URL.  Here's an example text payload: "understanding:5,companies:1,freedom:10"


Use the POST API.  By sending an HTTP POST request instead of a GET, you'll be able to include much more data.  See documentation on POST endpoint.


Certificate errors​
If you are receiving a certificate error message while using or accessing QuickChart, or notice of an expired certificate, this likely means that you have an outdated root certificate. To fix, you must update your local CA bundle.
The root cause of this is that a root certificate IdentTrust DST Root CA X3 expired. Those with outdated systems still have this certificate.

Learn more here
Relevant news article
Edit this page\n\nOn this pageError handling400 Bad Request​
Errors that prevent the chart from rendering will return a non-200 HTTP status code, most commonly 400 Bad Request. In most cases, the error will be rendered in the requested image format. If an error is rendered in an image, it is also included as a string in the X-quickchart-error HTTP header.
An example error due to invalid chart config - not URL encoded.
Invalid or unexpected token​
Invalid Chart.js configurations may return errors similar to this one. The most common cause of this error is that the caller forgot to URL-encode the chart variable. The next most common cause is invalid JSON/Javascript syntax in the chart configuration.
Cannot read property <X> of undefined​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
<X> is not a function​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
Request header or cookie too large​
The URL length limitation is imposed by web browsers and hosting providers, so we cannot change it.  Here are two ways you can solve this problem:


Consolidate the request payload.
Charts: Reduce the number of datapoints, or reduce the precision of datapoints.  For example, shorten "2.0003" to just "2".  You can also reduce the amount of text required to define your datapoints by using a map function (example).
Word clouds: Use the word list format to combine repeat words with their counts.  You can enable this by setting useWordList=1 in the URL.  Here's an example text payload: "understanding:5,companies:1,freedom:10"


Use the POST API.  By sending an HTTP POST request instead of a GET, you'll be able to include much more data.  See documentation on POST endpoint.


Certificate errors​
If you are receiving a certificate error message while using or accessing QuickChart, or notice of an expired certificate, this likely means that you have an outdated root certificate. To fix, you must update your local CA bundle.
The root cause of this is that a root certificate IdentTrust DST Root CA X3 expired. Those with outdated systems still have this certificate.

Learn more here
Relevant news article
Edit this pagePreviousNo-code chartsNextChart Types400 Bad RequestInvalid or unexpected tokenCannot read property <X> of undefined<X> is not a functionRequest header or cookie too largeCertificate errors\n\n\n\nOn this pageError handling400 Bad Request​
Errors that prevent the chart from rendering will return a non-200 HTTP status code, most commonly 400 Bad Request. In most cases, the error will be rendered in the requested image format. If an error is rendered in an image, it is also included as a string in the X-quickchart-error HTTP header.
An example error due to invalid chart config - not URL encoded.
Invalid or unexpected token​
Invalid Chart.js configurations may return errors similar to this one. The most common cause of this error is that the caller forgot to URL-encode the chart variable. The next most common cause is invalid JSON/Javascript syntax in the chart configuration.
Cannot read property <X> of undefined​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
<X> is not a function​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
Request header or cookie too large​
The URL length limitation is imposed by web browsers and hosting providers, so we cannot change it.  Here are two ways you can solve this problem:


Consolidate the request payload.
Charts: Reduce the number of datapoints, or reduce the precision of datapoints.  For example, shorten "2.0003" to just "2".  You can also reduce the amount of text required to define your datapoints by using a map function (example).
Word clouds: Use the word list format to combine repeat words with their counts.  You can enable this by setting useWordList=1 in the URL.  Here's an example text payload: "understanding:5,companies:1,freedom:10"


Use the POST API.  By sending an HTTP POST request instead of a GET, you'll be able to include much more data.  See documentation on POST endpoint.


Certificate errors​
If you are receiving a certificate error message while using or accessing QuickChart, or notice of an expired certificate, this likely means that you have an outdated root certificate. To fix, you must update your local CA bundle.
The root cause of this is that a root certificate IdentTrust DST Root CA X3 expired. Those with outdated systems still have this certificate.

Learn more here
Relevant news article
Edit this page\n\nOn this pageError handling400 Bad Request​
Errors that prevent the chart from rendering will return a non-200 HTTP status code, most commonly 400 Bad Request. In most cases, the error will be rendered in the requested image format. If an error is rendered in an image, it is also included as a string in the X-quickchart-error HTTP header.
An example error due to invalid chart config - not URL encoded.
Invalid or unexpected token​
Invalid Chart.js configurations may return errors similar to this one. The most common cause of this error is that the caller forgot to URL-encode the chart variable. The next most common cause is invalid JSON/Javascript syntax in the chart configuration.
Cannot read property <X> of undefined​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
<X> is not a function​
Access to certain Chart.js internals, used especially in plugins, is restricted due to potential for abuse. Contact us to get whitelisted for these features.
Request header or cookie too large​
The URL length limitation is imposed by web browsers and hosting providers, so we cannot change it.  Here are two ways you can solve this problem:


Consolidate the request payload.
Charts: Reduce the number of datapoints, or reduce the precision of datapoints.  For example, shorten "2.0003" to just "2".  You can also reduce the amount of text required to define your datapoints by using a map function (example).
Word clouds: Use the word list format to combine repeat words with their counts.  You can enable this by setting useWordList=1 in the URL.  Here's an example text payload: "understanding:5,companies:1,freedom:10"


Use the POST API.  By sending an HTTP POST request instead of a GET, you'll be able to include much more data.  See documentation on POST endpoint.


Certificate errors​
If you are receiving a certificate error message while using or accessing QuickChart, or notice of an expired certificate, this likely means that you have an outdated root certificate. To fix, you must update your local CA bundle.
The root cause of this is that a root certificate IdentTrust DST Root CA X3 expired. Those with outdated systems still have this certificate.

Learn more here
Relevant news article
Edit this pagePreviousNo-code chartsNextChart Types400 Bad RequestInvalid or unexpected tokenCannot read property <X> of undefined<X> is not a functionRequest header or cookie too largeCertificate errors\n\n\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this page\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this pagePreviousError handlingNextChart MakerBar chartLine graphRadar chartPie chartDoughnut chartPolar chartScatter PlotBubble chartRadial Gauge / "Meter" ChartsSpeedometer ChartsBox Plots and Violin ChartsFunnel ChartsFinancial ChartsSparklinesSankeysProgress barsMixed chartsMore examples\n\n\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this page\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this pagePreviousError handlingNextChart MakerBar chartLine graphRadar chartPie chartDoughnut chartPolar chartScatter PlotBubble chartRadial Gauge / "Meter" ChartsSpeedometer ChartsBox Plots and Violin ChartsFunnel ChartsFinancial ChartsSparklinesSankeysProgress barsMixed chartsMore examples\n\n\n\n\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this page\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this pagePreviousError handlingNextChart MakerBar chartLine graphRadar chartPie chartDoughnut chartPolar chartScatter PlotBubble chartRadial Gauge / "Meter" ChartsSpeedometer ChartsBox Plots and Violin ChartsFunnel ChartsFinancial ChartsSparklinesSankeysProgress barsMixed chartsMore examples\n\n\n\n\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this page\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this pagePreviousError handlingNextChart MakerBar chartLine graphRadar chartPie chartDoughnut chartPolar chartScatter PlotBubble chartRadial Gauge / "Meter" ChartsSpeedometer ChartsBox Plots and Violin ChartsFunnel ChartsFinancial ChartsSparklinesSankeysProgress barsMixed chartsMore examples\n\n\n\n\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this page\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this pagePreviousError handlingNextChart MakerBar chartLine graphRadar chartPie chartDoughnut chartPolar chartScatter PlotBubble chartRadial Gauge / "Meter" ChartsSpeedometer ChartsBox Plots and Violin ChartsFunnel ChartsFinancial ChartsSparklinesSankeysProgress barsMixed chartsMore examples\n\n\n\nOn this pageCustom pie and doughnut chart labels in Chart.jsIt's easy to build a pie or doughnut chart in Chart.js. Follow the Chart.js documentation to create a basic chart config:
{  type: 'pie',  data: {    labels: ['January', 'February', 'March', 'April', 'May'],    datasets: [{      data: [50, 60, 70, 180, 190]    }]  }}
Let's render it using QuickChart. Pack it into the URL:
https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February', 'March','April', 'May'], datasets:[{data:[50,60,70,180,190]}]}}
This URL produces the following chart:
Edit this example
Using the Datalabels plugin​
QuickChart's pie charts include data labels, unlike vanilla Chart.js. This is because we automatically include the Chart.js datalabels plugin. To customize the color, size, and other aspects of data labels, view the datalabels documentation.
Here's a simple example. Note how we're specifying the position of the data labels, as well as the background color, border, and font size:
Chart URL: https://quickchart.io/chart?c={  type: 'pie',  data: {    labels: ['January', 'February', 'March', 'April', 'May'],    datasets: [      {        data: [50, 60, 70, 1...Open in full editor
The data labels plugin has a ton of options available for the positioning and styling of data labels. Check out the documentation to learn more.
Note that the datalabels plugin also works for doughnut charts. Here's an example of a percentage doughnut chart that uses the formatter option to display a percentage:
Chart URL: https://quickchart.io/chart?c={  type: 'doughnut',  data: {    datasets: [      {        data: [10, 20, 15, 5, 50],        backgroundColor: [          'rgb(255, 99, ...Open in full editor
Hiding data labels​
Returning null or empty string in the formatter property will hide the data label. We'll modify the above example to hide values less than 15%:
Chart URL: https://quickchart.io/chart?c={  type: 'doughnut',  data: {    datasets: [      {        data: [10, 20, 15, 5, 50],        backgroundColor: [          'rgb(255, 99, ...Open in full editor
Custom formatting​
Use the formatter property to determine exactly what shows as a label. For example, the configuration below will display labels that show the series name rather than the value. It will also format the number using Intl.NumberFormat.
To learn more about the formatter field, read the plugin documentation.
Chart URL: https://quickchart.io/chart?c={  type: 'doughnut',  data: {    labels: ['January', 'February', 'March', 'April', 'May'],    datasets: [      {        data: [50, 60, ...Open in full editor
Multiple labels​
Using the datalabels plugin, it is possible to set up to 3 different labels for each dataset.  The datalabels plugin calls this "multiple labels", and each series can set an index, name, and value label.
Use this feature to create more than one label for each slice of your chart.
In the example below, we use:

index: Draw chart labels outside the pie/doughnut chart, and display the chart labels.
name: Draw a label inside the chart, top aligned, with the dataset number.  Color the text dynamically based on the data's background color.
value: Draw the actual value of the data.

Chart URL: https://quickchart.io/chart?c={  type: 'doughnut',  data: {    labels: ['January', 'February', 'March', 'April', 'May'],    datasets: [      {        data: [50, 60, ...Open in full editor
Using the doughnutlabel plugin​
In addition to the datalabels plugin, we include the Chart.js doughnutlabel plugin, which lets you put text in the center of your doughnut. You can combine this with Chart.js datalabel options for full customization.
Here's a quick example that includes a center doughnut labels and custom data labels:
Chart URL: https://quickchart.io/chart?c={  type: 'doughnut',  data: {    labels: ['January', 'February', 'March', 'April', 'May'],    datasets: [      {        data: [50, 60, ...Open in full editor
Note that this plugin is available for Chart.js v2 only.
Using the outlabeledPie plugin​
The Chart.js piechart outlabels plugin draws labels in their own boxes, with lines that connect to the corresponding pie slice. To learn more about how to customize the styling and formatting of these labels, read the documentation.
Outlabels can help improve label readability, and provide labeling for slices that are too small to draw text on directly. Here's an example of the outlabledPie chart type:
Chart URL: https://quickchart.io/chart?c={  type: 'outlabeledPie',  data: {    labels: ['ONE', 'TWO', 'THREE', 'FOUR', 'FIVE'],    datasets: [      {        backgroundColor: [ ...Open in full editor
Note that this plugin is available for Chart.js v2 only.
Conclusion​
That's all for now. Try out your own Chart.js configs in the interactive sandbox and ask us if you have any questions!Edit this page\n\nOn this pageCustom pie and doughnut chart labels in Chart.jsIt's easy to build a pie or doughnut chart in Chart.js. Follow the Chart.js documentation to create a basic chart config:
{  type: 'pie',  data: {    labels: ['January', 'February', 'March', 'April', 'May'],    datasets: [{      data: [50, 60, 70, 180, 190]    }]  }}
Let's render it using QuickChart. Pack it into the URL:
https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February', 'March','April', 'May'], datasets:[{data:[50,60,70,180,190]}]}}
This URL produces the following chart:
Edit this example
Using the Datalabels plugin​
QuickChart's pie charts include data labels, unlike vanilla Chart.js. This is because we automatically include the Chart.js datalabels plugin. To customize the color, size, and other aspects of data labels, view the datalabels documentation.
Here's a simple example. Note how we're specifying the position of the data labels, as well as the background color, border, and font size:
Chart URL: https://quickchart.io/chart?c={  type: 'pie',  data: {    labels: ['January', 'February', 'March', 'April', 'May'],    datasets: [      {        data: [50, 60, 70, 1...Open in full editor
The data labels plugin has a ton of options available for the positioning and styling of data labels. Check out the documentation to learn more.
Note that the datalabels plugin also works for doughnut charts. Here's an example of a percentage doughnut chart that uses the formatter option to display a percentage:
Chart URL: https://quickchart.io/chart?c={  type: 'doughnut',  data: {    datasets: [      {        data: [10, 20, 15, 5, 50],        backgroundColor: [          'rgb(255, 99, ...Open in full editor
Hiding data labels​
Returning null or empty string in the formatter property will hide the data label. We'll modify the above example to hide values less than 15%:
Chart URL: https://quickchart.io/chart?c={  type: 'doughnut',  data: {    datasets: [      {        data: [10, 20, 15, 5, 50],        backgroundColor: [          'rgb(255, 99, ...Open in full editor
Custom formatting​
Use the formatter property to determine exactly what shows as a label. For example, the configuration below will display labels that show the series name rather than the value. It will also format the number using Intl.NumberFormat.
To learn more about the formatter field, read the plugin documentation.
Chart URL: https://quickchart.io/chart?c={  type: 'doughnut',  data: {    labels: ['January', 'February', 'March', 'April', 'May'],    datasets: [      {        data: [50, 60, ...Open in full editor
Multiple labels​
Using the datalabels plugin, it is possible to set up to 3 different labels for each dataset.  The datalabels plugin calls this "multiple labels", and each series can set an index, name, and value label.
Use this feature to create more than one label for each slice of your chart.
In the example below, we use:

index: Draw chart labels outside the pie/doughnut chart, and display the chart labels.
name: Draw a label inside the chart, top aligned, with the dataset number.  Color the text dynamically based on the data's background color.
value: Draw the actual value of the data.

Chart URL: https://quickchart.io/chart?c={  type: 'doughnut',  data: {    labels: ['January', 'February', 'March', 'April', 'May'],    datasets: [      {        data: [50, 60, ...Open in full editor
Using the doughnutlabel plugin​
In addition to the datalabels plugin, we include the Chart.js doughnutlabel plugin, which lets you put text in the center of your doughnut. You can combine this with Chart.js datalabel options for full customization.
Here's a quick example that includes a center doughnut labels and custom data labels:
Chart URL: https://quickchart.io/chart?c={  type: 'doughnut',  data: {    labels: ['January', 'February', 'March', 'April', 'May'],    datasets: [      {        data: [50, 60, ...Open in full editor
Note that this plugin is available for Chart.js v2 only.
Using the outlabeledPie plugin​
The Chart.js piechart outlabels plugin draws labels in their own boxes, with lines that connect to the corresponding pie slice. To learn more about how to customize the styling and formatting of these labels, read the documentation.
Outlabels can help improve label readability, and provide labeling for slices that are too small to draw text on directly. Here's an example of the outlabledPie chart type:
Chart URL: https://quickchart.io/chart?c={  type: 'outlabeledPie',  data: {    labels: ['ONE', 'TWO', 'THREE', 'FOUR', 'FIVE'],    datasets: [      {        backgroundColor: [ ...Open in full editor
Note that this plugin is available for Chart.js v2 only.
Conclusion​
That's all for now. Try out your own Chart.js configs in the interactive sandbox and ask us if you have any questions!Edit this pagePreviousChart.js tutorialsNextFormatting tick marksUsing the Datalabels pluginHiding data labelsCustom formattingMultiple labelsUsing the doughnutlabel pluginUsing the outlabeledPie pluginConclusion\n\n\n\n\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this page\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this pagePreviousError handlingNextChart MakerBar chartLine graphRadar chartPie chartDoughnut chartPolar chartScatter PlotBubble chartRadial Gauge / "Meter" ChartsSpeedometer ChartsBox Plots and Violin ChartsFunnel ChartsFinancial ChartsSparklinesSankeysProgress barsMixed chartsMore examples\n\n\n\n\n\n\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this page\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this pagePreviousError handlingNextChart MakerBar chartLine graphRadar chartPie chartDoughnut chartPolar chartScatter PlotBubble chartRadial Gauge / "Meter" ChartsSpeedometer ChartsBox Plots and Violin ChartsFunnel ChartsFinancial ChartsSparklinesSankeysProgress barsMixed chartsMore examples\n\n\n\n\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this page\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this pagePreviousError handlingNextChart MakerBar chartLine graphRadar chartPie chartDoughnut chartPolar chartScatter PlotBubble chartRadial Gauge / "Meter" ChartsSpeedometer ChartsBox Plots and Violin ChartsFunnel ChartsFinancial ChartsSparklinesSankeysProgress barsMixed chartsMore examples\n\n\n\n\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this page\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this pagePreviousError handlingNextChart MakerBar chartLine graphRadar chartPie chartDoughnut chartPolar chartScatter PlotBubble chartRadial Gauge / "Meter" ChartsSpeedometer ChartsBox Plots and Violin ChartsFunnel ChartsFinancial ChartsSparklinesSankeysProgress barsMixed chartsMore examples\n\n\n\n\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this page\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this pagePreviousError handlingNextChart MakerBar chartLine graphRadar chartPie chartDoughnut chartPolar chartScatter PlotBubble chartRadial Gauge / "Meter" ChartsSpeedometer ChartsBox Plots and Violin ChartsFunnel ChartsFinancial ChartsSparklinesSankeysProgress barsMixed chartsMore examples\n\n\n\n\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this page\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this pagePreviousError handlingNextChart MakerBar chartLine graphRadar chartPie chartDoughnut chartPolar chartScatter PlotBubble chartRadial Gauge / "Meter" ChartsSpeedometer ChartsBox Plots and Violin ChartsFunnel ChartsFinancial ChartsSparklinesSankeysProgress barsMixed chartsMore examples\n\n\n\n\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this page\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this pagePreviousError handlingNextChart MakerBar chartLine graphRadar chartPie chartDoughnut chartPolar chartScatter PlotBubble chartRadial Gauge / "Meter" ChartsSpeedometer ChartsBox Plots and Violin ChartsFunnel ChartsFinancial ChartsSparklinesSankeysProgress barsMixed chartsMore examples\n\n\n\n\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this page\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this pagePreviousError handlingNextChart MakerBar chartLine graphRadar chartPie chartDoughnut chartPolar chartScatter PlotBubble chartRadial Gauge / "Meter" ChartsSpeedometer ChartsBox Plots and Violin ChartsFunnel ChartsFinancial ChartsSparklinesSankeysProgress barsMixed chartsMore examples\n\n\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this page\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this pagePreviousError handlingNextChart MakerBar chartLine graphRadar chartPie chartDoughnut chartPolar chartScatter PlotBubble chartRadial Gauge / "Meter" ChartsSpeedometer ChartsBox Plots and Violin ChartsFunnel ChartsFinancial ChartsSparklinesSankeysProgress barsMixed chartsMore examples\n\n\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this page\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this pagePreviousError handlingNextChart MakerBar chartLine graphRadar chartPie chartDoughnut chartPolar chartScatter PlotBubble chartRadial Gauge / "Meter" ChartsSpeedometer ChartsBox Plots and Violin ChartsFunnel ChartsFinancial ChartsSparklinesSankeysProgress barsMixed chartsMore examples\n\n\n\nOn this pageUsing the QuickChart Sparkline API


QuickChart provides an API that lets you generate sparklines as PNG images. The API is simple and can generate sparklines with a single unauthenticated request.
Generated sparkline images can be embedded in almost any format. They will work on webpages, in platforms like Salesforce and Excel, in emails, PDFs, and more.
An example of QuickChart sparklines embedded in an application.
Getting started​
The sparkline API endpoint is available at https://quickchart.io/chart. It works by accepting a Chart.js-style configuration object in Javascript or JSON format.
Here's an example configuration:
{  type: 'sparkline',  data: {    datasets: [{      data: [140, 60, 274, 370, 199]    }]  }}
Let's pack this sparkline configuration into a URL:
https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}
This URL can be embedded as an image anywhere, for example by using an image tag:
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}" />
Producing the following image of a sparkline:

API parameters​
Here are the parameters that you can pass to the /chart endpoint:

chart: Javascript/JSON definition of the chart. Use a Chart.js configuration object. Abbreviated as "c"
width=500: Width of the image. Abbreviated as "w"
height=300: Height of the image. Abbreviated as "h"
devicePixelRatio=2.0: Device pixel ratio of the output (defaults to retina=2.0). Width and height are multiplied by this value.
backgroundColor=transparent: Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as "bkg"

Note that if your chart configuration contains special characters, you must URL encode it. This capability is built into almost every programming language. If not encoded, you may run into problems with special characters (such as # or %) or syntax errors in your program.
Custom colors​
To customize colors, use backgroundColor and borderColor. Set these attributes to any valid color, hex, or rgb/rgba string:
{  type: 'sparkline',  data: {    datasets: [{      backgroundColor: 'rgba(255, 0, 0, 0.2)',      borderColor: 'red',      data: [140, 60, 274, 370, 199]    }]  }}
Pack it into the URL:
https://quickchart.io/chart?bkg=white&c={type:'sparkline',data:{datasets:[{backgroundColor:'rgba(255,0,0,0.2)',borderColor:'red',data:[140,60,274,370,199]}]}}
The URL displays this image:

Custom border/fill​
To remove the fill and only have a line, set fill: false in your dataset:
{  type: 'sparkline',  data: {    datasets: [{      fill: false,      data: [140, 60, 274, 370, 199]    }]  }}
In URL form:
https://quickchart.io/chart?bkg=white&c={type:'sparkline',data:{datasets:[{fill:false,data:[140,60,274,370,199]}]}}
Which produces this image:

Or, if you want to have only fill and no border, set borderColor to transparent or the same as backgroundColor.
Multiple lines​
You can display multiple lines by adding to the list of datasets. For example:
{  type: 'sparkline',  data: {    datasets: [{      data: [140, 60, 274, 370, 199],      fill: false    }, {      data: [40, 165, 74, 70, 99],      fill: false    }]  }}

Other customizations​
All of the Chart.js line chart customizations are available for you to use. The Chart.js format offers a great deal of customization.
This example displays the data points and uses a thicker dotted line with smoothed curves:
{  type: 'sparkline',  data: {    datasets: [{      pointRadius: 3,      borderWidth: 3,      borderDash: [10, 2],      lineTension: 0.3,      fill: false,      data: [140, 60, 274, 370, 199]    }]  }}

You can also use various plugins and features of QuickChart. For example, to add a gradient fill:
{  type: 'sparkline',  data: {    datasets: [{      pointRadius: 3,      borderWidth: 3,      lineTension: 0.3,      backgroundColor: getGradientFillHelper('vertical', ['#6287a2', '#e9ecf4']),      data: [140, 60, 274, 370, 199]    }]  }}

Full customization​
For more flexibility, change the chart type to "line" to access the full set of Chart.js line chart options. For the sparkline look, you can hide axes manually by adding an options object to your chart configuration:
{  type: 'line',  data: { ... },  options: {    scales: {      xAxes: [{        display: false      }],      yAxes: [{        display: false      }]    }  }}
From there, have a look at the various line chart customizations available in the gallery or documentation.
SDKs & Client libraries​
QuickChart does not require a client library, but if you don't want to build the URL yourself, you can use our open-source Javascript, Python, Ruby, PHP, C#, and Java libraries. See all libraries here.
Need help?​
Chart.js can be tricky when you're getting the hang of it. Use the Sandbox Editor to test your charts. If you're interested in charts other than sparklines, check out our gallery and main documentation.
Feeling stuck? Feel free to reach out - my contact information is below.
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:sparklineEdit this page\n\nOn this pageUsing the QuickChart Sparkline API


QuickChart provides an API that lets you generate sparklines as PNG images. The API is simple and can generate sparklines with a single unauthenticated request.
Generated sparkline images can be embedded in almost any format. They will work on webpages, in platforms like Salesforce and Excel, in emails, PDFs, and more.
An example of QuickChart sparklines embedded in an application.
Getting started​
The sparkline API endpoint is available at https://quickchart.io/chart. It works by accepting a Chart.js-style configuration object in Javascript or JSON format.
Here's an example configuration:
{  type: 'sparkline',  data: {    datasets: [{      data: [140, 60, 274, 370, 199]    }]  }}
Let's pack this sparkline configuration into a URL:
https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}
This URL can be embedded as an image anywhere, for example by using an image tag:
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}" />
Producing the following image of a sparkline:

API parameters​
Here are the parameters that you can pass to the /chart endpoint:

chart: Javascript/JSON definition of the chart. Use a Chart.js configuration object. Abbreviated as "c"
width=500: Width of the image. Abbreviated as "w"
height=300: Height of the image. Abbreviated as "h"
devicePixelRatio=2.0: Device pixel ratio of the output (defaults to retina=2.0). Width and height are multiplied by this value.
backgroundColor=transparent: Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as "bkg"

Note that if your chart configuration contains special characters, you must URL encode it. This capability is built into almost every programming language. If not encoded, you may run into problems with special characters (such as # or %) or syntax errors in your program.
Custom colors​
To customize colors, use backgroundColor and borderColor. Set these attributes to any valid color, hex, or rgb/rgba string:
{  type: 'sparkline',  data: {    datasets: [{      backgroundColor: 'rgba(255, 0, 0, 0.2)',      borderColor: 'red',      data: [140, 60, 274, 370, 199]    }]  }}
Pack it into the URL:
https://quickchart.io/chart?bkg=white&c={type:'sparkline',data:{datasets:[{backgroundColor:'rgba(255,0,0,0.2)',borderColor:'red',data:[140,60,274,370,199]}]}}
The URL displays this image:

Custom border/fill​
To remove the fill and only have a line, set fill: false in your dataset:
{  type: 'sparkline',  data: {    datasets: [{      fill: false,      data: [140, 60, 274, 370, 199]    }]  }}
In URL form:
https://quickchart.io/chart?bkg=white&c={type:'sparkline',data:{datasets:[{fill:false,data:[140,60,274,370,199]}]}}
Which produces this image:

Or, if you want to have only fill and no border, set borderColor to transparent or the same as backgroundColor.
Multiple lines​
You can display multiple lines by adding to the list of datasets. For example:
{  type: 'sparkline',  data: {    datasets: [{      data: [140, 60, 274, 370, 199],      fill: false    }, {      data: [40, 165, 74, 70, 99],      fill: false    }]  }}

Other customizations​
All of the Chart.js line chart customizations are available for you to use. The Chart.js format offers a great deal of customization.
This example displays the data points and uses a thicker dotted line with smoothed curves:
{  type: 'sparkline',  data: {    datasets: [{      pointRadius: 3,      borderWidth: 3,      borderDash: [10, 2],      lineTension: 0.3,      fill: false,      data: [140, 60, 274, 370, 199]    }]  }}

You can also use various plugins and features of QuickChart. For example, to add a gradient fill:
{  type: 'sparkline',  data: {    datasets: [{      pointRadius: 3,      borderWidth: 3,      lineTension: 0.3,      backgroundColor: getGradientFillHelper('vertical', ['#6287a2', '#e9ecf4']),      data: [140, 60, 274, 370, 199]    }]  }}

Full customization​
For more flexibility, change the chart type to "line" to access the full set of Chart.js line chart options. For the sparkline look, you can hide axes manually by adding an options object to your chart configuration:
{  type: 'line',  data: { ... },  options: {    scales: {      xAxes: [{        display: false      }],      yAxes: [{        display: false      }]    }  }}
From there, have a look at the various line chart customizations available in the gallery or documentation.
SDKs & Client libraries​
QuickChart does not require a client library, but if you don't want to build the URL yourself, you can use our open-source Javascript, Python, Ruby, PHP, C#, and Java libraries. See all libraries here.
Need help?​
Chart.js can be tricky when you're getting the hang of it. Use the Sandbox Editor to test your charts. If you're interested in charts other than sparklines, check out our gallery and main documentation.
Feeling stuck? Feel free to reach out - my contact information is below.
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:sparklineEdit this pagePreviousGraphVizNextTable ImagesGetting startedAPI parametersCustom colorsCustom border/fillMultiple linesOther customizationsFull customizationSDKs & Client librariesNeed help?\n\n\n\n\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this page\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this pagePreviousError handlingNextChart MakerBar chartLine graphRadar chartPie chartDoughnut chartPolar chartScatter PlotBubble chartRadial Gauge / "Meter" ChartsSpeedometer ChartsBox Plots and Violin ChartsFunnel ChartsFinancial ChartsSparklinesSankeysProgress barsMixed chartsMore examples\n\n\n\n\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this page\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this pagePreviousError handlingNextChart MakerBar chartLine graphRadar chartPie chartDoughnut chartPolar chartScatter PlotBubble chartRadial Gauge / "Meter" ChartsSpeedometer ChartsBox Plots and Violin ChartsFunnel ChartsFinancial ChartsSparklinesSankeysProgress barsMixed chartsMore examples\n\n\n\n\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this page\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this pagePreviousError handlingNextChart MakerBar chartLine graphRadar chartPie chartDoughnut chartPolar chartScatter PlotBubble chartRadial Gauge / "Meter" ChartsSpeedometer ChartsBox Plots and Violin ChartsFunnel ChartsFinancial ChartsSparklinesSankeysProgress barsMixed chartsMore examples\n\n\n\n\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this page\n\nOn this pageChart Types


For a variety of useful editable examples, see the chart gallery.
Changing chart types can be very simple. By changing type: bar to type: line, for example, we can instantly produce an equivalent line graph:
Bar chart​
See Bar Chart documentation
Edit this example
infoSet type to horizontalBar for a horizontal bar chart.
Line graph​
See Line chart documentation
<img src="https://quickchart.io/chart?c={type:'line',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190],fill:false,borderColor:'blue'},{label:'Cats',data:[100,200,300,400,500],fill:false,borderColor:'green'}]}}">Edit this example
Radar chart​
See Chart.js radar chart documentation
<img src="https://quickchart.io/chart?c={type:'radar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]}]}}">Edit this example
Pie chart​
See Pie chart documentation. This chart also uses the datalabels plugin.
Learn how to customize pie chart labels.
<img src="https://quickchart.io/chart?c={type:'pie',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Doughnut chart​
See Doughnut Chart documentation. You can also use options from the Chart.js doughnutlabel plugin, in addition to the datalabels plugin.
Learn how to customize doughnut chart labels.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]},options:{plugins:{doughnutlabel:{labels:[{text:'550',font:{size:20}},{text:'total'}]}}}}">Edit this example
The doughnut chart type is very flexible.  For example, you can use a half-doughnut to make a gauge-style chart.
<img src="https://quickchart.io/chart?c={type:'doughnut',data:{datasets:[{data:[24,66],backgroundColor:['green','#eee'],label:'Dataset1',borderWidth:0}],labels:['A','C']},options:{circumference:Math.PI,rotation:Math.PI,cutoutPercentage:75,layout:{padding:40},legend:{display:false},plugins:{datalabels:{color:'#404040',anchor:'end',align:'end',formatter:(val)=>val+'%',font:{size:25,weight:'bold'}},doughnutlabel:{labels:[{text:'\nYourstatusis',font:{size:20}},{text:'\nhealthy',color:'#000',font:{size:25,weight:'bold'}}]}}}}">Edit this example
Polar chart​
Polar charts are like pie and doughnut charts, except each segment has the same angle and the radius of the segments varies based on the value. See Polar Area Chart documentation.
<img src="https://quickchart.io/chart?c={type:'polarArea',data:{labels:['January','February','March','April','May'],datasets:[{data:[50,60,70,180,190]}]}}">Edit this example
Scatter Plot​
See Scatter chart documentation
<img src="https://quickchart.io/chart?c={type:'scatter',data:{datasets:[{label:'Data1',data:[{x:2,y:4},{x:3,y:3},{x:-10,y:0},{x:0,y:10},{x:10,y:5}]}]}}">Edit this example
Bubble chart​
Bubble is similar to Scatter, except the r variable defines bubble radius in pixels. Bubble Chart documentation
<img src="https://quickchart.io/chart?c={type:'bubble',data:{datasets:[{label:'Data1',data:[{x:1,y:4,r:9},{x:2,y:4,r:6},{x:3,y:8,r:30},{x:0,y:10,r:1},{x:10,y:5,r:5}]}]}}">Edit this example
Radial Gauge / "Meter" Charts​
View the options at chartjs-radial-gauge for customization details.
<img src="https://quickchart.io/chart?c={type:'radialGauge',data:{datasets:[{data:[70],backgroundColor:'green'}]}}">Edit this example
Speedometer Charts​
See customization options at chartjs-gauge.
<img src="https://quickchart.io/chart?c={type:'gauge',data:{datasets:[{value:50,data:[20,40,60],backgroundColor:['green','orange','red'],borderWidth:2}]},options:{valueLabel:{fontSize:22,backgroundColor:'transparent',color:'#000',formatter:function(value,context){returnvalue+'mph';},bottomMarginPercentage:10}}}">Edit this example
Box Plots and Violin Charts​
You can use violin, boxplot, horizontalBoxPlot, and horizontalViolin chart types. View the options at chartjs-chart-box-and-violin-plot for customization details.
<img src="https://quickchart.io/chart?c={type:'violin',data:{labels:[2012,2013,2014,2015],datasets:[{label:'Data',data:[[12,6,3,4],[1,8,8,15],[1,1,1,2,3,5,9,8],[19,-3,18,8,5,9,9]],backgroundColor:'rgba(56,123,45,0.2)',borderColor:'rgba(56,123,45,1.9)'}]}}">Edit this example
tipFor best results, add a scatter plot to your box or violin chart.
Funnel Charts​
QuickChart supports funnel charts (aka pyramid charts) using chartjs-chart-funnel for Chart.js version 3+.  See an example configuration.

Financial Charts​
QuickChart supports Candlestick and OHLC charts using the chartjs-chart-financial plugin. These are commonly used for technical analysis and stock charts.
Note that you'll have to select Chart.js version 3+ to use these plugins. View example configuration

Sparklines​
A sparkline is a special case of line graph with axes and other labeling removed. All line graph options can be applied. Read more about the sparkline API.
<img src="https://quickchart.io/chart?c={type:'sparkline',data:{datasets:[{data:[140,60,274,370,199]}]}}">Edit this example
Sankeys​
A sankey diagram is a flow diagram that illustrates the proportions between various stages of a flow. To learn more, see chartjs-chart-sankey documentation.
<img src="https://quickchart.io/chart?c={type:'sankey',data:{datasets:[{data:[{from:'StepA',to:'StepB',flow:10},{from:'StepA',to:'StepC',flow:5},{from:'StepB',to:'StepC',flow:10},{from:'StepD',to:'StepC',flow:7}]}]}}">Edit this example
A more elaborate sankey example with custom colors and position is available here.
Progress bars​
A progress bar is a special case of a horizontal bar chart with axes and other labeling removed. All bar options can be applied.
The first dataset specifies the number shown. By default, this number is a percentage and the total value is 100. If your data is not out of 100, add a second dataset to override the total.
<img src="https://quickchart.io/chart?c={type:'progressBar',data:{datasets:[{data:[50]}]}}">Edit this example
Mixed charts​
Combine charts together by specifying multiple types:
<img src="https://quickchart.io/chart?c={type:'bar',data:{labels:['January','February','March','April','May'],datasets:[{label:'Dogs',data:[50,60,70,180,190]},{label:'Cats',data:[100,200,300,400,500]},{type:'line',fill:false,label:'Potatoes',data:[100,400,200,400,700]}]}}">Edit this example
More examples​
Additional chart examples are available in the Chart Gallery.Edit this pagePreviousError handlingNextChart MakerBar chartLine graphRadar chartPie chartDoughnut chartPolar chartScatter PlotBubble chartRadial Gauge / "Meter" ChartsSpeedometer ChartsBox Plots and Violin ChartsFunnel ChartsFinancial ChartsSparklinesSankeysProgress barsMixed chartsMore examples\n\n\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this page\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this pagePreviousChart TypesNextReferenceCreate a chart templateAdd dataCustomize look & feelDynamic datasourcesSave the templateUse the no-code chart APIReal exampleCustomizable propertiesEmbedding an interactive chartAdvanced API featuresNeed help?\n\n\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this page\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this pagePreviousChart TypesNextReferenceCreate a chart templateAdd dataCustomize look & feelDynamic datasourcesSave the templateUse the no-code chart APIReal exampleCustomizable propertiesEmbedding an interactive chartAdvanced API featuresNeed help?\n\n\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this page\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this pagePreviousChart TypesNextReferenceCreate a chart templateAdd dataCustomize look & feelDynamic datasourcesSave the templateUse the no-code chart APIReal exampleCustomizable propertiesEmbedding an interactive chartAdvanced API featuresNeed help?\n\n\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this page\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this pagePreviousChart TypesNextReferenceCreate a chart templateAdd dataCustomize look & feelDynamic datasourcesSave the templateUse the no-code chart APIReal exampleCustomizable propertiesEmbedding an interactive chartAdvanced API featuresNeed help?\n\n\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this page\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this pagePreviousChart TypesNextReferenceCreate a chart templateAdd dataCustomize look & feelDynamic datasourcesSave the templateUse the no-code chart APIReal exampleCustomizable propertiesEmbedding an interactive chartAdvanced API featuresNeed help?\n\n\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this page\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this pagePreviousChart TypesNextReferenceCreate a chart templateAdd dataCustomize look & feelDynamic datasourcesSave the templateUse the no-code chart APIReal exampleCustomizable propertiesEmbedding an interactive chartAdvanced API featuresNeed help?\n\n\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this page\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this pagePreviousChart TypesNextReferenceCreate a chart templateAdd dataCustomize look & feelDynamic datasourcesSave the templateUse the no-code chart APIReal exampleCustomizable propertiesEmbedding an interactive chartAdvanced API featuresNeed help?\n\n\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this page\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this pagePreviousChart TypesNextReferenceCreate a chart templateAdd dataCustomize look & feelDynamic datasourcesSave the templateUse the no-code chart APIReal exampleCustomizable propertiesEmbedding an interactive chartAdvanced API featuresNeed help?\n\n\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this page\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this pagePreviousChart TypesNextReferenceCreate a chart templateAdd dataCustomize look & feelDynamic datasourcesSave the templateUse the no-code chart APIReal exampleCustomizable propertiesEmbedding an interactive chartAdvanced API featuresNeed help?\n\n\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this page\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this pagePreviousChart TypesNextReferenceCreate a chart templateAdd dataCustomize look & feelDynamic datasourcesSave the templateUse the no-code chart APIReal exampleCustomizable propertiesEmbedding an interactive chartAdvanced API featuresNeed help?\n\n\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this page\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this pagePreviousChart TypesNextReferenceCreate a chart templateAdd dataCustomize look & feelDynamic datasourcesSave the templateUse the no-code chart APIReal exampleCustomizable propertiesEmbedding an interactive chartAdvanced API featuresNeed help?\n\n\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this page\n\nOn this pageAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.
In this guide, you will learn how to:

Create and customize a chart template without any code.
Save the chart as a URL (API endpoint) that you can use in emails, Excel, Salesforce, and any other formats.
Set the chart's data by providing special parameters in the URL.



Create a chart template​
To create charts online, first go to the chart maker. Use the interface to build a chart template. This chart will be the basis of the charts you generate automatically in the future.
Add data​
To get started, add some dummy or example data. The chart preview will update so you can get an idea of how your visualization will work.
Enter data as comma-separated values (e.g. 10,20,30,40). Each data value maps to a label (e.g. Jan, Feb, Mar, Apr). Edit "Labels" at the top of the Data settings to change this mapping.
Edit labels and data on the left-hand side of the chart maker
Using coordinates​

For more advanced use cases, you may provide your data as (x, y) coordinates.
An example of category-based coordinates: (Jan, 10), (Feb, 20), (Mar, 30), (Apr, 40). These coordinates will give you more power over how your line or scatter plot is displayed.
Numeric coordinates are also accepted: (1, 50), (10, 40), (12, 20), (8, 10). This format is most commonly used for scatter plots, and requires you to change your Axes to linear or logarithmic under settings. In this case, you should clear the "Labels" setting at the top of the Data settings - labels will be automatically generated.
Time series use coordinates too. For example: (2020-01-01, 50), (2020-03-15, 12), (2020-06-05, 40). To display time series, change the X-axis to time type and clear the "Labels" setting in Data settings, as labels will be generated automatically.

Customize look & feel​
Now that your data is set, time to make the chart look however you want.
Close the data menu to customize your chart's axes, ticks, legend, and its overall layout.
Customize the chart by expanding different sections
Looking for inspiration? Head over to the chart gallery - most examples are editable in the chart maker.
Dynamic datasources​
The Chart Maker includes built-in support for pulling data from external datasources. If you choose to configure one of these datasources, the chart will update automatically when the datasource is updated.
How to configure Google Sheets

Create a Google Sheet and copy your data into it. Here's an example sheet.


Configure the sharing setting so that outsiders can have access to it. This will allow the Chart Maker to access your data. To do this, click the green "Share" button and change the setting to "Anyone with the link":

How to configure Google Sheets sharing settings (click for larger)
In the Chart Maker, open Integrations > Google Sheets plugin settings. Paste your sheet URL and enter the names of the columns.

If you've filled everything out correctly, your data will appear!

How to configure Airtable1. Create a base and put your data in it.  Create a table or view with 1 column containing labels and 1+ data columns.  Here's an example table.2. Generate an API key. Go to https://airtable.com/account and grab your Airtable API key (or generate a new one).Quick note on securityYour Airtable API key is protected and not revealed to anyone who views or edits your chart.When you provide your Airtable API key, we generate a "masked" secret that allows access only to the specific table you provided to the Chart Maker. This lets chart viewers pull data from your table without revealing your account API key. The chart does, in theory, have access to the table, so you should make sure there is no other sensitive information in the table.
Configure the Chart Maker. Switching back to the Chart Maker, open the Integrations > Airtable plugin settings. Paste your API key and the URL to your Airtable base.

If you've filled everything out correctly, your data will appear!

Save the template​
Click Save as API Template in the top right.
You'll be presented with an API endpoint. This is the base URL of your chart. If you go to it, you will see a chart image. The URL can be further customized to override properties of your chart.
Saving as an API template gives you an endpoint you can use to generate unlimited charts.
Use the no-code chart API​
In the following examples, we use custom values to override three chart properties:

Chart title
Dataset labels
Data

These customizations are passed as URL parameters. For example, to override chart title, take the base URL and add the following:
https://quickchart.io/chart/render/zf-abc-123?title=New title
You can join URL parameters together using the & symbol. For example:
https://quickchart.io/chart/render/zf-abc-123?title=New title&labels=Q1,Q2,Q3,Q4
To override data, use data1, data2, data3, ..., for each dataset on the chart.
For example, to override the first (primary) dataset:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100
To override multiple datasets and the chart title:
https://quickchart.io/chart/render/zf-abc-123?data1=40,60,80,100&data2=5,6,7,8&title=Updated chart
Real example​
We have the following chart endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
It looks like this:

Let's override this chart's title:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart

And now let's add some more data and labels to the chart. This will override the data but keep the same style of chart that I created in the chart maker:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232?title=Updated chart&data1=50,60,80&labels=Jan,Feb,Mar

Customizable properties​
The following chart-level properties can be overridden:
Property NameDescriptionExampletitleChart titletitle=My chart titlelabelsDataset labelslabels=Series 1,Series 2,Series 3widthChart widthwidth=500heightChart heightheight=300backgroundColorChart backgroundbackgroundColor=rgba(122, 90, 122, 0.5)
The following series-level properties can be overridden. Replace N with the series number that you want to override:
Property NameDescriptionExampledataNSeries valuesdata1=1,2,3,4,5&data2=6,7,8,9,10backgroundColorNBackground color of seriesbackgroundColor1=red&backgroundColor2=blueborderColorNBorder color of seriesborderColor1=red&borderColor2=bluelabelNLabel of series¹label1=Foo&label2=bar
¹ These labels are applicable only to certain kinds of charts, such as radar charts. In most cases you should override the labels chart parameter.
tipWhen overriding properties, you must URL-encode special characters.  Your browser will do this for you automatically, but if you're using a no-code tool you may have to URL-encode property values.For example, the special character # is URL-encoded as %23. This means hex code #fa1f5b should be passed as %23fa1f5b.
Embedding an interactive chart​
To display the chart with interactive tooltips in an iframe, take the unique portion of the shortened URL and append it to the /chart-maker/view/ endpoint.
For example, given the API endpoint:
https://quickchart.io/chart/render/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
Here is the corresponding iframe URL:
https://quickchart.io/chart-maker/view/9a560ba4-ab71-4d1e-89ea-ce4741e9d232
You can embed it like a regular iframe. Be sure to set a frame width and height that is compatible with your chart. Here's an HTML example:
<iframe  src="demo_iframe.htm"  frameborder="0"  height="500"  width="300"  title="Iframe Example"></iframe>
Advanced API features​
If you are willing to dive into the JSON/Javascript configuration, get even more control over the appearance and behavior of your chart. See main API documentation for details.
Need help?​
The first step is to ask in our community, which we monitor every day. Feel free to contact me or contact support if you get stuck or have questions. We'll get back to you quickly!
About the authorIan Webster is a software engineer and former Googler based in San Mateo, California. He has helped Google, NASA, and governments around the world improve their data pipelines and visualizations. In 2018, Ian created QuickChart, a collection of open-source APIs that support data visualization efforts.Email · LinkedIn · TwitterTags:chart makerEdit this pagePreviousChart TypesNextReferenceCreate a chart templateAdd dataCustomize look & feelDynamic datasourcesSave the templateUse the no-code chart APIReal exampleCustomizable propertiesEmbedding an interactive chartAdvanced API featuresNeed help?\n\n\n\nPlease enable cookies.
    
      
        Email Protection
        You are unable to access this email address quickchart.io
      

      
        
          
            The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?
                    
                
              
            
          
        
      

      
  
    Cloudflare Ray ID: 93647582aad605b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nPlease enable cookies.\nEmail Protection
        You are unable to access this email address quickchart.io
      

      
        
          
            The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?
                    
                
              
            
          
        
      

      
  
    Cloudflare Ray ID: 93647582aad605b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nEmail Protection
        You are unable to access this email address quickchart.io\nYou are unable to access this email address quickchart.io\nYou are unable to access this email address\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.\nIf you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.\nsign up for Cloudflare\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?\nHow does Cloudflare protect email addresses on website from spammers?\nCan I sign up for Cloudflare?\nCan I sign up for Cloudflare?\nCloudflare Ray ID: 93647582aad605b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nCloudflare Ray ID: 93647582aad605b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nCloudflare Ray ID: 93647582aad605b6\nYour IP:
      Click to reveal
      20.39.61.197
      •\nPerformance & security by Cloudflare\nPerformance & security by\n\n\nPlease enable cookies.
    
      
        Email Protection
        You are unable to access this email address quickchart.io
      

      
        
          
            The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?
                    
                
              
            
          
        
      

      
  
    Cloudflare Ray ID: 93647582bad905b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nPlease enable cookies.\nEmail Protection
        You are unable to access this email address quickchart.io
      

      
        
          
            The website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?
                    
                
              
            
          
        
      

      
  
    Cloudflare Ray ID: 93647582bad905b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nEmail Protection
        You are unable to access this email address quickchart.io\nYou are unable to access this email address quickchart.io\nYou are unable to access this email address\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.
          

          
            
              
                  
                      
                        How does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.
            If you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.\nThe website from which you got to this page is protected by Cloudflare. Email addresses on that page have been hidden in order to keep them from being accessed by malicious bots. You must enable Javascript in your browser in order to decode the e-mail address.\nIf you have a website and are interested in protecting it in a similar way, you can sign up for Cloudflare.\nsign up for Cloudflare\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?
                        Can I sign up for Cloudflare?\nHow does Cloudflare protect email addresses on website from spammers?\nHow does Cloudflare protect email addresses on website from spammers?\nCan I sign up for Cloudflare?\nCan I sign up for Cloudflare?\nCloudflare Ray ID: 93647582bad905b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nCloudflare Ray ID: 93647582bad905b6
    •
    
      Your IP:
      Click to reveal
      20.39.61.197
      •
    
    Performance & security by Cloudflare\nCloudflare Ray ID: 93647582bad905b6\nYour IP:
      Click to reveal
      20.39.61.197
      •\nPerformance & security by Cloudflare\nPerformance & security by\n\n\nAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.\n\nOne doc tagged with "chart maker"View All TagsAutomate chart creation with Chart Maker (no code)QuickChart is a no-code solution to automatic chart generation. Create a chart template using the chart maker interface. Then use the template endpoint to customize and generate charts automatically.\n\n\n\n📄️ Chart titleThe chart title is a label that appears on the top, left, bottom, or right of the chart.📄️ Grid linesChart.js v2 (default)📄️ AxesThere are several types of chart axes: Linear, Logarithmic, Time, Categorical, and Radial. If you are looking to create a standard chart, chances are you want to use a linear or time axis.📄️ LabelsThere are several different types of labels: axis labels, tick labels, and data labels.📄️ LegendThe chart legend can be customized via the options.legend property (see chart legend in Chart.js v2 and chart legend in Chart.js v3+).📄️ FontsQuickChart supports all Google Noto fonts. Custom fonts are available upon request.📄️ Colors and backgroundsEvery aspect of chart coloration is customizable. All colors are taken as strings, in either hex, RGB, or by specifying a color name. To adjust opacity, set an RGBA value.📄️ Point stylePoints (also referred to as "markers") may appear in a line, sparkline, radar, or bubble chart. Point style can be configured globally using the options.elements.point object. See Chart.js point configuration for more details.📄️ Line styleYou can style lines by setting properties on the data.dataset object that defines your line series. See Chart.js line styling documentation for full details.📄️ Time seriesDate and time series axes automatically handle calendar dates. To create a time series axis, set its type to time:📄️ Smoothing & roundingLine charts📄️ Plugins & addonsPre-installed plugins📄️ Retina supportUse retina support to generate high quality images suitable for high-DPI displays. By default, QuickChart serves charts at 2x requested pixel size so that they appear sharp on retina displays.📄️ Chart titleThe chart title is a label that appears on the top, left, bottom, or right of the chart.📄️ Grid linesChart.js v2 (default)📄️ AxesThere are several types of chart axes: Linear, Logarithmic, Time, Categorical, and Radial. If you are looking to create a standard chart, chances are you want to use a linear or time axis.📄️ LabelsThere are several different types of labels: axis labels, tick labels, and data labels.📄️ LegendThe chart legend can be customized via the options.legend property (see chart legend in Chart.js v2 and chart legend in Chart.js v3+).📄️ FontsQuickChart supports all Google Noto fonts. Custom fonts are available upon request.📄️ Colors and backgroundsEvery aspect of chart coloration is customizable. All colors are taken as strings, in either hex, RGB, or by specifying a color name. To adjust opacity, set an RGBA value.📄️ Point stylePoints (also referred to as "markers") may appear in a line, sparkline, radar, or bubble chart. Point style can be configured globally using the options.elements.point object. See Chart.js point configuration for more details.📄️ Line styleYou can style lines by setting properties on the data.dataset object that defines your line series. See Chart.js line styling documentation for full details.📄️ Time seriesDate and time series axes automatically handle calendar dates. To create a time series axis, set its type to time:📄️ Smoothing & roundingLine charts📄️ Plugins & addonsPre-installed plugins📄️ Retina supportUse retina support to generate high quality images suitable for high-DPI displays. By default, QuickChart serves charts at 2x requested pixel size so that they appear sharp on retina displays.\n\nReference📄️ Chart titleThe chart title is a label that appears on the top, left, bottom, or right of the chart.📄️ Grid linesChart.js v2 (default)📄️ AxesThere are several types of chart axes: Linear, Logarithmic, Time, Categorical, and Radial. If you are looking to create a standard chart, chances are you want to use a linear or time axis.📄️ LabelsThere are several different types of labels: axis labels, tick labels, and data labels.📄️ LegendThe chart legend can be customized via the options.legend property (see chart legend in Chart.js v2 and chart legend in Chart.js v3+).📄️ FontsQuickChart supports all Google Noto fonts. Custom fonts are available upon request.📄️ Colors and backgroundsEvery aspect of chart coloration is customizable. All colors are taken as strings, in either hex, RGB, or by specifying a color name. To adjust opacity, set an RGBA value.📄️ Point stylePoints (also referred to as "markers") may appear in a line, sparkline, radar, or bubble chart. Point style can be configured globally using the options.elements.point object. See Chart.js point configuration for more details.📄️ Line styleYou can style lines by setting properties on the data.dataset object that defines your line series. See Chart.js line styling documentation for full details.📄️ Time seriesDate and time series axes automatically handle calendar dates. To create a time series axis, set its type to time:📄️ Smoothing & roundingLine charts📄️ Plugins & addonsPre-installed plugins📄️ Retina supportUse retina support to generate high quality images suitable for high-DPI displays. By default, QuickChart serves charts at 2x requested pixel size so that they appear sharp on retina displays.PreviousChart MakerNextChart title\n\n\n\nOn this pageChart title
The chart title is a label that appears on the top, left, bottom, or right of the chart.
Chart.js v2 (default)​
Customize your chart title by providing an options.title object.
You may specify a list of strings to show a multi-line title or subtitle. You may also set position, fontSize, fontFamily, fontColor, padding, and other attributes. See full Chart.js title documentation for more.
The example below sets options.title.display to true and options.title.text to "Basic chart title" in order to show a title at the top of the chart.
Chart URL: https://quickchart.io/chart?c={  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  ...Open in full editor
Chart.js v3 and v4​
In v3, the title object has moved into options.plugins. See title documentation.
Chart URL: https://quickchart.io/chart?c={  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  ...Open in full editorEdit this page\n\nOn this pageChart title
The chart title is a label that appears on the top, left, bottom, or right of the chart.
Chart.js v2 (default)​
Customize your chart title by providing an options.title object.
You may specify a list of strings to show a multi-line title or subtitle. You may also set position, fontSize, fontFamily, fontColor, padding, and other attributes. See full Chart.js title documentation for more.
The example below sets options.title.display to true and options.title.text to "Basic chart title" in order to show a title at the top of the chart.
Chart URL: https://quickchart.io/chart?c={  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  ...Open in full editor
Chart.js v3 and v4​
In v3, the title object has moved into options.plugins. See title documentation.
Chart URL: https://quickchart.io/chart?c={  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  ...Open in full editorEdit this pagePreviousReferenceNextGrid linesChart.js v2 (default)Chart.js v3 and v4\n\n\n\nOn this pageGrid lines


Chart.js v2 (default)​
Chart gridlines are customizable by setting attributes on options.scales.<xAxes/yAxes>.gridLines. This configuration is very flexible. For example, you can change the color, size, and style of gridlines (e.g. making them dotted or dashed). See full Gridlines documentation for more.
The example below removes gridlines by setting gridLines.display to false.
Chart URL: https://quickchart.io/chart?c={  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  ...Open in full editor
Chart.js v3 and v4​
Customize gridlines by setting attributes on options.scales.<scaleName>.grid. See the axes styling documentation for more.
The example below removes gridlines by setting grid.display to false.
Chart URL: https://quickchart.io/chart?c={  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  ...Open in full editorEdit this page\n\nOn this pageGrid lines


Chart.js v2 (default)​
Chart gridlines are customizable by setting attributes on options.scales.<xAxes/yAxes>.gridLines. This configuration is very flexible. For example, you can change the color, size, and style of gridlines (e.g. making them dotted or dashed). See full Gridlines documentation for more.
The example below removes gridlines by setting gridLines.display to false.
Chart URL: https://quickchart.io/chart?c={  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  ...Open in full editor
Chart.js v3 and v4​
Customize gridlines by setting attributes on options.scales.<scaleName>.grid. See the axes styling documentation for more.
The example below removes gridlines by setting grid.display to false.
Chart URL: https://quickchart.io/chart?c={  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [{      label: 'Users',      data: [50, 60, 70, 180]    }]  ...Open in full editorEdit this pagePreviousChart titleNextAxesChart.js v2 (default)Chart.js v3 and v4\n\n\n\nOn this pageAxes



There are several types of chart axes: Linear, Logarithmic, Time, Categorical, and Radial. If you are looking to create a standard chart, chances are you want to use a linear or time axis.
Axes are configured in the options.scales object. Learn more about chart axes, including attributes to customize those axes, here. Because a wide variety of customizations are possible, we've prepared a number of examples. Head over to the gallery to see some examples of custom axes and scales.
Setting the range​
Minimum and maximum values​
To set the range of chart values, use axis.ticks.min and axis.ticks.max. Use axis.ticks.stepSize to control the increment of each tick mark. For more information, see Chart.js ticks.
This example sets the start value to 0 and the end value to 100, with tick marks every 20:
Chart.js v2Chart.js v3+X or Y axis:{  // ...  options: {    scales: {      yAxes: [        {          ticks: {            min: 0,            max: 100,            stepSize: 20,          },        },      ];    }  }}Radial axis (used in radar and polar area charts):{  // ...  options: {    scale: {      ticks: {        min: 0,        max: 100,        stepSize: 20,      },    }  }}Linear axes (x and y):{  // ...  options: {    scales: {      y: {        min: 0,        max: 100,        ticks: {          stepSize: 20,        },      },    }  }}Radial axes (such as radar and polar area charts):{  // ...  options: {    scales: {      r: {        min: 0,        max: 100,        ticks: {          stepSize: 20,        },      },    }  }}
Starting ticks at 0​
By default, Chart.js will fit the axis range to a reasonable minimum and maximum. In some cases, you may prefer that the minimum is always 0. To do this, set beginAtZero on the ticks object:
Chart.js v2Chart.js v3+{  // ...  options: {    scales: {      yAxes: [        {          ticks: {            beginAtZero: true,          },        },      ];    }  }}{  // ...  options: {    scales: {      y: {        beginAtZero: true,      },    }  }}
Creating stacked charts​
You can use the axis object to create a stacked bar chart by setting stacked to true on each axis. Read more here.
The multiple axes example below includes a stacked bar chart.
Multiple axes​
It is possible to create two or more X or Y axes by providing multiple objects in the options.scales.xAxes or options.scales.yAxes lists. For each axis, set display to true and give it an id. Each dataset should reference this id as yAxisID or xAxisID.
This example uses Chart.js v2:
Chart URL: https://quickchart.io/chart?c={  type: 'bar',  data: {    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],    datasets: [      {        type...Open in full editorEdit this page\n\nOn this pageAxes



There are several types of chart axes: Linear, Logarithmic, Time, Categorical, and Radial. If you are looking to create a standard chart, chances are you want to use a linear or time axis.
Axes are configured in the options.scales object. Learn more about chart axes, including attributes to customize those axes, here. Because a wide variety of customizations are possible, we've prepared a number of examples. Head over to the gallery to see some examples of custom axes and scales.
Setting the range​
Minimum and maximum values​
To set the range of chart values, use axis.ticks.min and axis.ticks.max. Use axis.ticks.stepSize to control the increment of each tick mark. For more information, see Chart.js ticks.
This example sets the start value to 0 and the end value to 100, with tick marks every 20:
Chart.js v2Chart.js v3+X or Y axis:{  // ...  options: {    scales: {      yAxes: [        {          ticks: {            min: 0,            max: 100,            stepSize: 20,          },        },      ];    }  }}Radial axis (used in radar and polar area charts):{  // ...  options: {    scale: {      ticks: {        min: 0,        max: 100,        stepSize: 20,      },    }  }}Linear axes (x and y):{  // ...  options: {    scales: {      y: {        min: 0,        max: 100,        ticks: {          stepSize: 20,        },      },    }  }}Radial axes (such as radar and polar area charts):{  // ...  options: {    scales: {      r: {        min: 0,        max: 100,        ticks: {          stepSize: 20,        },      },    }  }}
Starting ticks at 0​
By default, Chart.js will fit the axis range to a reasonable minimum and maximum. In some cases, you may prefer that the minimum is always 0. To do this, set beginAtZero on the ticks object:
Chart.js v2Chart.js v3+{  // ...  options: {    scales: {      yAxes: [        {          ticks: {            beginAtZero: true,          },        },      ];    }  }}{  // ...  options: {    scales: {      y: {        beginAtZero: true,      },    }  }}
Creating stacked charts​
You can use the axis object to create a stacked bar chart by setting stacked to true on each axis. Read more here.
The multiple axes example below includes a stacked bar chart.
Multiple axes​
It is possible to create two or more X or Y axes by providing multiple objects in the options.scales.xAxes or options.scales.yAxes lists. For each axis, set display to true and give it an id. Each dataset should reference this id as yAxisID or xAxisID.
This example uses Chart.js v2:
Chart URL: https://quickchart.io/chart?c={  type: 'bar',  data: {    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],    datasets: [      {        type...Open in full editorEdit this pagePreviousGrid linesNextLabelsSetting the rangeMinimum and maximum valuesStarting ticks at 0Creating stacked chartsMultiple axes\n\n\n\nOn this pageLabels
There are several different types of labels: axis labels, tick labels, and data labels.
Customizing axis labels​
X axis tick labels are controlled by the data.labels array. This example chart uses the labels attribute to control the X axis display.
Y axis tick labels are automatically generated based on values unless you are using a categorical axis.
Scale labels​
The axis.scaleLabel property controls the text that appears alongside the axis. Here's an example config:
Chart URL: https://quickchart.io/chart?c={  type: 'bar',  data: {    labels: ['January', 'February', 'March', 'April', 'May'],    datasets: [      { label: 'Dogs', data: [50, 6...Open in full editor
Learn more about scale title configuration here.
Customizing tick labels​
"Ticks" are the data markings that run along the axis. To format tick label, use the options.scales.<xAxes/yAxes>.ticks property.
There are many ways to customize tick values. For further reading, see:

Chart.js custom tick formatting
Chart.js docs on configuring ticks

Chart "tick" attributes​
Attribute NameDescriptionminMinimum value for the scalemaxMaximum value for the scalesuggestedMinSoft minimum value for the scale. The chart will use this minimum by default, but the minimum will be overridden if data value is less than suggested value.suggestedMaxSoft maximum value for the scale. The chart will use this maximum by default, but the maximum will be overridden if data value is greater than suggested value.callbackA Javascript function that is passed the value of the tick. The return value is displayed on the graph.sampleSizeThe number of ticks to examine when deciding how many labels will fit. Setting a smaller value will render faster, but is less accurate in cases with large variance in label length. Defaults to sampling all ticks.autoSkipIf true, automatically calculates how many labels can be shown and hides labels that will overlap. Labels will be rotated up to maxRotation before skipping. Turn autoSkip off to show all labels no matter what. Defaults to true.autoSkipPaddingPadding between ticks on the horizontal axis when autoSkip is enabled. Defaults to 0labelOffsetDistance in pixels to offset the label from the center point of the tick. Defaults to 0maxRotationMaximum rotation for tick labels in degrees. Labels are rotated to make room for other labels. Only applies to horizontal scales. Defaults to 50minRotationMinimum rotation for tick labels. Only applies to horizontal scales. Defaults to 0.mirrorIf true, flips tick labels around the axis, displaying them inside the chart instead of outside. Only applicable to vertical scales. Defaults to false.paddingPadding between tick labels and the axis, in pixels. Defaults to 0.
Below is an example that formats Y axis ticks as currency. The callback function localizes the currency, adding commas (or other delimeter) to the thousands place. You can use this technique to add percentage symbols and other label formats to your chart:
Chart URL: https://quickchart.io/chart?c={  type: 'line',  data: {    labels: [2016, 2017, 2018, 2019, 2020],    datasets: [      {        label: 'Dollars',        data: [1000,...Open in full editor
tickFormat: A helper plugin for custom Tick Labels​
Writing a Javascript function can be a hassle. If your labels are not complex, the built-in tickFormat plugin allows you to apply common formatting needs without having to write Javascript. This can be simpler than writing the code yourself.
Use options.plugins.tickFormat to set options for formatting axis tick labels. The tickFormat object supports locale, prefix, suffix attributes, as well as all options supported by Javascript's Intl.NumberFormat.
tickFormat attributes​
Attribute NameDescriptionlocaleAn Intl.Locale string such as en-US (default), fr-FR, de-DE, en-GB. Full list hereprefixString to prepend to tick labelsuffixString to append to tick labelstyleThe formatting style to use. Default is decimal. decimal for plain number formatting currency for currency formatting percent for percent formatting unit for unit formattingcurrencyThe currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as USD for the US dollar or EUR for the euro. Requires style=currencyunitThe unit to use in unit formatting, such as kilometers, megabyte, percent, etc. Must be a supported unit. Requires style=unitminimumFractionDigitsThe minimum number of fraction digits to use. Useful to determine the number of decimals shown.useGroupingtrue to display grouping separators in numbers, such as the thousands separator. false to disable. Defaults true.applyToDataLabelswhether to apply the formatter to datalabels on the chartaxisIDwhich axis to apply the formatter to (default: all numeric axes)More optionsNumber formatting is highly configurable. View Intl.NumberFormat documentation for the full list of options, including ability to control significant digits, scientific and engineering notation, and so on.
In this example, we add thousands commas to numbers on the numeric axis:
// ... Add commas or decimalsoptions: {  plugins: {    tickFormat: {      locale: 'en-US',   // en-US is the default locale      useGrouping: true    }  }}
This example will put a dollar symbol before each value and display two decimals of precision:
// ... Show as currencyoptions: {  plugins: {    tickFormat: {      style: 'currency',      currency: 'USD',      minimumFractionDigits: 2,    }  }}
This tick formatter will append the letter "k" to every value:
// ... Add suffixoptions: {  plugins: {    tickFormat: {      suffix: 'k';    }  }}
Use tick callbacks to control visibility​
ticks.callback is a powerful attribute that allows you to control whether the tick and its corresponding gridline appear.
Because ticks.callback is a Javascript function, it allows you to perform any logic based on the tick value and its index. The value returned by the callback is displayed on the chart. If the returned value is undefined, the tick is not drawn.
This callback hides the first and last ticks:
ticks: {  callback: (val, idx, ticks) => (idx === 0 || idx === ticks.length - 1 ? undefined : val);}
Here we display every other tick:
ticks: {  callback: (val, idx) => (idx % 2 === 0 ? val : undefined);}
And in this full example below, we display ticks only at specific values:
Chart URL: https://quickchart.io/chart?c={  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [      {        label: 'Users',        data: [5, 60, 70, 40]...Open in full editor
Forcing ticks to display​
To ensure that all tick labels are displayed on your chart, set the autoSkip property to false in the ticks configuration of your axes.
By default, Chart.js will automatically calculate how many labels can be shown without overlap, and will skip labels as necessary.  The autoSkip property disables this behavior.
{  // ... scale options ...  ticks: {    autoSkip: false  }}
More details about autoSkip and other tick configurations can be found in the Chart.js documentation.
Data labels​
QuickChart supports the Chart.js data labels plugin for adding custom data labels in your chart area. Labels can be added to an assortment of chart types, including bar, line, and scatter.
Examples​
Here's an example configuration that displays labels above each bars using the datalabels plugin:
Chart URL: https://quickchart.io/chart?c={  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [      {        label: 'Users (thousands)',        data: [50...Open in full editor
The display and formatter properties of the datalabels plugin are very powerful.  In this next example, we use them to dynamically show/hide the labels and alter the text of the label.  We hide any labels that aren't the first, last, min, or max value:
Chart URL: https://quickchart.io/chart?c={  type: 'line',  data: {    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],    datasets: [      {        dat...Open in full editor
Learn more about datalabels
Positioning data labels
Formatting and styling data labels

Labels for pie and doughnut charts​
Pie and doughnut charts rely heavily on datalabels. By default, the tickFormat plugin applies to datalabels on charts that do not have any numeric axes. See more on how to customize labels on pie and doughnut charts.
Multi-line labels​
All labels support the newline character, \n. Use this character to introduce a line break.
Annotation and label plugins​
In order to extend annotation and labeling capabilities beyond Chart.js defaults, we provide three additional Chart.js plugins:

Data Labels - chartjs-plugin-datalabels
Annotations - chartjs-plugin-annotation
Outlabels - chartjs-plugin-piechart-outlabels

These plugins allow you to add various markup to your chart. Have a look at the documentation for each plugin to learn more about the possibilities.
Here's an example that uses Chart.js data labels and annotations:
Chart URL: https://quickchart.io/chart?c={  type: 'line',  data: {    labels: [1,2,3,4,5],    datasets: [{      label: 'Rainfall',      data: [ 200, 90, 120, 400, 500 ],      f...Open in full editor
Here's an example of a pie chart with outlabels, using the outlabeledPie type:
Chart URL: https://quickchart.io/chart?c={  "type": "outlabeledPie",  "data": {    "labels": ["ONE", "TWO", "THREE", "FOUR", "FIVE"],    "datasets": [{        "backgroundColor"...Open in full editorEdit this page\n\nOn this pageLabels
There are several different types of labels: axis labels, tick labels, and data labels.
Customizing axis labels​
X axis tick labels are controlled by the data.labels array. This example chart uses the labels attribute to control the X axis display.
Y axis tick labels are automatically generated based on values unless you are using a categorical axis.
Scale labels​
The axis.scaleLabel property controls the text that appears alongside the axis. Here's an example config:
Chart URL: https://quickchart.io/chart?c={  type: 'bar',  data: {    labels: ['January', 'February', 'March', 'April', 'May'],    datasets: [      { label: 'Dogs', data: [50, 6...Open in full editor
Learn more about scale title configuration here.
Customizing tick labels​
"Ticks" are the data markings that run along the axis. To format tick label, use the options.scales.<xAxes/yAxes>.ticks property.
There are many ways to customize tick values. For further reading, see:

Chart.js custom tick formatting
Chart.js docs on configuring ticks

Chart "tick" attributes​
Attribute NameDescriptionminMinimum value for the scalemaxMaximum value for the scalesuggestedMinSoft minimum value for the scale. The chart will use this minimum by default, but the minimum will be overridden if data value is less than suggested value.suggestedMaxSoft maximum value for the scale. The chart will use this maximum by default, but the maximum will be overridden if data value is greater than suggested value.callbackA Javascript function that is passed the value of the tick. The return value is displayed on the graph.sampleSizeThe number of ticks to examine when deciding how many labels will fit. Setting a smaller value will render faster, but is less accurate in cases with large variance in label length. Defaults to sampling all ticks.autoSkipIf true, automatically calculates how many labels can be shown and hides labels that will overlap. Labels will be rotated up to maxRotation before skipping. Turn autoSkip off to show all labels no matter what. Defaults to true.autoSkipPaddingPadding between ticks on the horizontal axis when autoSkip is enabled. Defaults to 0labelOffsetDistance in pixels to offset the label from the center point of the tick. Defaults to 0maxRotationMaximum rotation for tick labels in degrees. Labels are rotated to make room for other labels. Only applies to horizontal scales. Defaults to 50minRotationMinimum rotation for tick labels. Only applies to horizontal scales. Defaults to 0.mirrorIf true, flips tick labels around the axis, displaying them inside the chart instead of outside. Only applicable to vertical scales. Defaults to false.paddingPadding between tick labels and the axis, in pixels. Defaults to 0.
Below is an example that formats Y axis ticks as currency. The callback function localizes the currency, adding commas (or other delimeter) to the thousands place. You can use this technique to add percentage symbols and other label formats to your chart:
Chart URL: https://quickchart.io/chart?c={  type: 'line',  data: {    labels: [2016, 2017, 2018, 2019, 2020],    datasets: [      {        label: 'Dollars',        data: [1000,...Open in full editor
tickFormat: A helper plugin for custom Tick Labels​
Writing a Javascript function can be a hassle. If your labels are not complex, the built-in tickFormat plugin allows you to apply common formatting needs without having to write Javascript. This can be simpler than writing the code yourself.
Use options.plugins.tickFormat to set options for formatting axis tick labels. The tickFormat object supports locale, prefix, suffix attributes, as well as all options supported by Javascript's Intl.NumberFormat.
tickFormat attributes​
Attribute NameDescriptionlocaleAn Intl.Locale string such as en-US (default), fr-FR, de-DE, en-GB. Full list hereprefixString to prepend to tick labelsuffixString to append to tick labelstyleThe formatting style to use. Default is decimal. decimal for plain number formatting currency for currency formatting percent for percent formatting unit for unit formattingcurrencyThe currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as USD for the US dollar or EUR for the euro. Requires style=currencyunitThe unit to use in unit formatting, such as kilometers, megabyte, percent, etc. Must be a supported unit. Requires style=unitminimumFractionDigitsThe minimum number of fraction digits to use. Useful to determine the number of decimals shown.useGroupingtrue to display grouping separators in numbers, such as the thousands separator. false to disable. Defaults true.applyToDataLabelswhether to apply the formatter to datalabels on the chartaxisIDwhich axis to apply the formatter to (default: all numeric axes)More optionsNumber formatting is highly configurable. View Intl.NumberFormat documentation for the full list of options, including ability to control significant digits, scientific and engineering notation, and so on.
In this example, we add thousands commas to numbers on the numeric axis:
// ... Add commas or decimalsoptions: {  plugins: {    tickFormat: {      locale: 'en-US',   // en-US is the default locale      useGrouping: true    }  }}
This example will put a dollar symbol before each value and display two decimals of precision:
// ... Show as currencyoptions: {  plugins: {    tickFormat: {      style: 'currency',      currency: 'USD',      minimumFractionDigits: 2,    }  }}
This tick formatter will append the letter "k" to every value:
// ... Add suffixoptions: {  plugins: {    tickFormat: {      suffix: 'k';    }  }}
Use tick callbacks to control visibility​
ticks.callback is a powerful attribute that allows you to control whether the tick and its corresponding gridline appear.
Because ticks.callback is a Javascript function, it allows you to perform any logic based on the tick value and its index. The value returned by the callback is displayed on the chart. If the returned value is undefined, the tick is not drawn.
This callback hides the first and last ticks:
ticks: {  callback: (val, idx, ticks) => (idx === 0 || idx === ticks.length - 1 ? undefined : val);}
Here we display every other tick:
ticks: {  callback: (val, idx) => (idx % 2 === 0 ? val : undefined);}
And in this full example below, we display ticks only at specific values:
Chart URL: https://quickchart.io/chart?c={  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [      {        label: 'Users',        data: [5, 60, 70, 40]...Open in full editor
Forcing ticks to display​
To ensure that all tick labels are displayed on your chart, set the autoSkip property to false in the ticks configuration of your axes.
By default, Chart.js will automatically calculate how many labels can be shown without overlap, and will skip labels as necessary.  The autoSkip property disables this behavior.
{  // ... scale options ...  ticks: {    autoSkip: false  }}
More details about autoSkip and other tick configurations can be found in the Chart.js documentation.
Data labels​
QuickChart supports the Chart.js data labels plugin for adding custom data labels in your chart area. Labels can be added to an assortment of chart types, including bar, line, and scatter.
Examples​
Here's an example configuration that displays labels above each bars using the datalabels plugin:
Chart URL: https://quickchart.io/chart?c={  type: 'bar',  data: {    labels: ['Q1', 'Q2', 'Q3', 'Q4'],    datasets: [      {        label: 'Users (thousands)',        data: [50...Open in full editor
The display and formatter properties of the datalabels plugin are very powerful.  In this next example, we use them to dynamically show/hide the labels and alter the text of the label.  We hide any labels that aren't the first, last, min, or max value:
Chart URL: https://quickchart.io/chart?c={  type: 'line',  data: {    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],    datasets: [      {        dat...Open in full editor
Learn more about datalabels
Positioning data labels
Formatting and styling data labels

Labels for pie and doughnut charts​
Pie and doughnut charts rely heavily on datalabels. By default, the tickFormat plugin applies to datalabels on charts that do not have any numeric axes. See more on how to customize labels on pie and doughnut charts.
Multi-line labels​
All labels support the newline character, \n. Use this character to introduce a line break.
Annotation and label plugins​
In order to extend annotation and labeling capabilities beyond Chart.js defaults, we provide three additional Chart.js plugins:

Data Labels - chartjs-plugin-datalabels
Annotations - chartjs-plugin-annotation
Outlabels - chartjs-plugin-piechart-outlabels

These plugins allow you to add various markup to your chart. Have a look at the documentation for each plugin to learn more about the possibilities.
Here's an example that uses Chart.js data labels and annotations:
Chart URL: https://quickchart.io/chart?c={  type: 'line',  data: {    labels: [1,2,3,4,5],    datasets: [{      label: 'Rainfall',      data: [ 200, 90, 120, 400, 500 ],      f...Open in full editor
Here's an example of a pie chart with outlabels, using the outlabeledPie type:
Chart URL: https://quickchart.io/chart?c={  "type": "outlabeledPie",  "data": {    "labels": ["ONE", "TWO", "THREE", "FOUR", "FIVE"],    "datasets": [{        "backgroundColor"...Open in full editorEdit this pagePreviousAxesNextLegendCustomizing axis labelsScale labelsCustomizing tick labelsChart "tick" attributestickFormat: A helper plugin for custom Tick LabelsUse tick callbacks to control visibilityForcing ticks to displayData labelsExamplesLabels for pie and doughnut chartsMulti-line labelsAnnotation and label plugins\n\n\n\n