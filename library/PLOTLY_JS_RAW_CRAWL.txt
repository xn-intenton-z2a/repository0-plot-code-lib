Copyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            

            

            

            
            
            
        
    
    


                
                


    
        
        

            
                Plotly JavaScript Open Source Graphing Library
                
                    Built on top of d3.js and stack.gl, Plotly.js is a high-level, declarative charting library. plotly.js ships with over 40 chart types, including 3D charts, statistical graphs, and SVG maps.
                    plotly.js is free and open source and you can view the source, report issues or contribute on GitHub.
                
            
        
        
          
            

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




            
            
                Read more about plotly.js features
                

                

                    
                        Sophisticated chart types
                    
                    
                        plotly.js abstracts the types of statistical and scientific charts that you would find in packages like matplotlib, ggplot2, or MATLAB.
                    

                    
                    
                        
                    
                    d3.json('https://plotly.com/~DanielCarrera/13.json', function(figure){
                  var trace = {
                    x: figure.data[0].x, y: figure.data[0].y, z: figure.data[0].z,
                    type: 'contour', autocolorscale: false,
                    colorscale: [[0,"rgb(  0,  0,  0)"],[0.3,"rgb(230,  0,  0)"],[0.6,"rgb(255,210,  0)"],[1,"rgb(255,255,255)"]],
                    reversescale: true, zmax: 2.5, zmin: -2.5
                  };
                  var layout = {
                    title: {
                      text: 'turbulence simulation'
                  },
                    xaxis: {
                      title: {
                          text: 'radial direction'
                      },
                      showline: true,
                      mirror: 'allticks',
                      ticks: 'inside'
                    },
                    yaxis: {
                        title: {
                            text: 'vertical direction'
                        },
                        showline: true,
                        mirror: 'allticks',
                        ticks: 'inside'
                    },
                    margin: {l: 40, b: 40, t: 60},
                    annotations: [{
                      showarrow: false,
                      text: 'Credit: Daniel Carrera',
                      x: 0, y: 0, xref: 'paper', yref: 'paper'
                    }]
                  }
                  Plotly.newPlot(document.getElementById('contour-plot'), [trace], layout, {showLink: false});
                });



                    Fully customizable
                    
                        plotly.js charts are described declaratively as JSON objects. Every aspect of the charts, such as colors, grid lines, and the legend, has a corresponding set of JSON attributes.
                        
                            view all of the available attributes
                        
                    

                    d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv', function(rows){
                    var trace = {
                      type: 'scatter',                    // set the chart type
                      mode: 'lines',                      // connect points with lines
                      x: rows.map(function(row){          // set the x-data
                        return row['Time'];
                      }),
                      y: rows.map(function(row){          // set the x-data
                        return row['10 Min Sampled Avg'];
                      }),
                      line: {                             // set the width of the line.
                        width: 1
                      },
                      error_y: {
                        array: rows.map(function(row){    // set the height of the error bars
                          return row['10 Min Std Dev'];
                        }),
                        thickness: 0.5,                   // set the thickness of the error bars
                        width: 0
                      }
                    };

                    var layout = {
                      yaxis: {
                        title: {
                          text: "Wind Speed"
                        }
                      },       // set the y axis title
                      xaxis: {
                        showgrid: false,                  // remove the x-axis grid lines
                        tickformat: "%B, %Y"              // customize the date format to "month, day"
                      },
                      margin: {                           // update the left, bottom, right, top margin
                        l: 40, b: 10, r: 10, t: 20
                      }
                    };

                    Plotly.newPlot(document.getElementById('wind-speed'), [trace], layout, {showLink: false});
                });



                    High performance
                    
                        
                            Most plotly graphs are drawn with SVG. This offers great compatibility across browsers and publication-quality vector image export. Unfortunately, there are inherent performance limitations with the number of SVG elements that you can draw in the DOM.
                            plotly.js uses stack.gl for high performance 2D and 3D charting.
                        
                        
                            
                                
                            
                            
                                This chart was drawn with the plotly.js chart type scattergl. scattergl charts render an order of magnitude faster than their SVG counterparts.
                            
                        
                        
                            
                                
                                
                                
                            
                            
                                All 3D charts in plotly.js are rendered with WebGL, leveraging the power of the GPU for fast interactivity.
                                view the interactive version
                            
                        
                    
                    Universal
                    
                        By abstracting charts to a declarative JSON structure, plotly.js is used as a browser-based charting library for Python, R, MATLAB.
                    

                
                
            
          


        
    


















    
        Fundamentals

        
        More Fundamentals »
        
    
    
        

            
                    
                    

    
        Configuration Options
        
            View Tutorial
            
        
    


                
                    
                    

    
        Responsive / Fluid Layouts
        
            View Tutorial
            
        
    


                
                    
                    

    
        uirevision in Plotly.react
        
            View Tutorial
            
        
    


                
                    
                    

    
        React Plotly.js
        
            View Tutorial
            
        
    


                
                    
                    

    
        Analytical Apps with Dash
        
            View Tutorial
            
        
    


                
    










    
        Basic Charts

        
        More Basic Charts »
        
    
    
        

            

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Scatter Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Line Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bar Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Pie Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bubble Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
    





    
        Statistical Charts

        
        More Statistical Charts »
        
    
    
        

            
                    
                    

    
        Error Bars
        
            View Tutorial
            
        
    


                
                    
                    

    
        Box Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        2d Density Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Continuous Error Bars
        
            View Tutorial
            
        
    


                
    





    
        Scientific Charts

        
        More Scientific Charts »
        
    
    
        

            
                    
                    

    
        Contour Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Heatmaps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ternary Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Parallel Coordinates Plot
        
            View Tutorial
            
        
    


                
                    
                    

    
        Log Plots
        
            View Tutorial
            
        
    


                
    





    
        Financial Charts

        
        More Financial Charts »
        
    
    
        

            
                    
                    

    
        Waterfall Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Indicators
        
            View Tutorial
            
        
    


                
                    
                    

    
        Candlestick Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Funnel and Funnelarea Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Time Series
        
            View Tutorial
            
        
    


                
    





    
        Maps

        
        More Maps »
        
    
    
        

            
                    
                    

    
        Migrate to Maplibre
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Map Layers
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Density Heatmap
        
            View Tutorial
            
        
    


                
                    
                    

    
        Choropleth Tile Map
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lines on Maps
        
            View Tutorial
            
        
    


                
    










    
        3D Charts

        
        More 3D Charts »
        
    
    
        

            
                    
                    

    
        3D Scatter Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ribbon Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Surface Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Mesh Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Line Plots
        
            View Tutorial
            
        
    


                
    





    
        Subplots

        
        More Subplots »
        
    
    
        

            
                    
                    

    
        Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Inset Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Mixed Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Table Subplots
        
            View Tutorial
            
        
    


                
    









    
        Custom Chart Events

        
    
    
        

            
                    
                    

    
        Click Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Hover Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Zoom Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Disable Zoom Events
        
            View Tutorial
            
        
    


                
    





    
        Add Custom Controls

        
        More Controls »
        
    
    
        

            
                    
                    

    
        Dropdown Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Button Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Slider Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lasso Selection
        
            View Tutorial
            
        
    


                
                    
                    

    
        Range Slider and Selector
        
            View Tutorial
            
        
    


                
    





    
        Animations

        
    
    
        

            
                    
                    

    
        Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Adding Sliders to Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Filled-Area Animation
        
            View Tutorial
            
        
    


                
                    
                    

    
        Map Animation
        
            View Tutorial\n\n\n\nGET PRICINGGet custom pricing for Plotly Dash EnterpriseDiscover how leading businesses like yours are putting data and AI to work, through production data applications. Talk to our team about use cases that achieve real business impact such as:A biopharmaceutical company saving $10 million per clinical program through accelerated trial enrolmentA materials manufacturing company reducing hazard exposure by 94% over four months at a customer siteAn energy company saving $150,000 by replacing vendors with Plotly for real-time drilling data monitoringGet a custom quote from a Plotly expert. Learn how your team can build secure, flexible data apps with Plotly Dash Enterprise.You’re in good company. Our customers are amongst the Fortune 500, in Finance, Energy, Healthcare, Defense, Retail, and more.Let's take the next step!To receive a custom price-quote, fill out this form and a member of our team will contact you.ProfessionalStudentFirst Name*Last Name*Business Email*PhoneCompany Name*Role* Data ScientistData EngineerDevOpsFull Stack DeveloperSystem ArchitectProduct ManagerQuantitative AnalystScientific ResearcherExecutiveOtherAre you using Plotly/Dash Open Source?* I created a Dash app.I use Plotly graphing libraries, not Dash.I use another Python data app framework.Not sure/none of the above.Do you need to take a Python data app to production?* Yes, I have an immediate need.Possibly in the future.No, I have a different need.Not sure.Additional CommentsBy submitting this form, you give Plotly permission to contact you by email. You may unsubscribe at anytime. For more info, view our Privacy Policy.SPEAK WITH PLOTLY*required\n\n\n\nIntroducing Plotly AISee how you can build smarter, safer data apps in the AI era with Plotly Dash Enterprise 5.7.WATCH THE LAUNCH  WATCH THE DEMOView customer stories →adoption of drilling apps by 150+ userscost savings replacing vendors with Plotlyfaster time-to-delivery for 6+ custom data apps“I am not from a developer background, and one thing I appreciated about Plotly was how easy it was to pick up and get started. The resources available were great and I was able to quickly build my first production application in less than 2-3 months.”Jay Luna, SCADA specialistExpand EnergyRead the S&P Global story“In an external application going to clients, everything from the engineering, to the models, to the UI, to performance testing requires a lot of effort and building. Dash Enterprise effectively allows us to accelerate the process.”Onik Kurktchian, Head of S&P Global Marketplace WorkbenchS&P GlobalRead the Uniper story"Time-to-market is crucial in our ever-changing market environment. With help of Dash Enterprise, we were able to accelerate deployment of new apps from weeks to minutes without compromising on governance aspects and security."Volodymyr Sorokoumov - Digital Trading - Lead Platform Design & OperationsUniperRead the Intuit story"Dash Enterprise marries the strengths of many tools into one — design beautiful dashboards and apply statistical algorithms behind the scenes. Adopting Dash Enterprise allows us to create tools and services that everyone at the company can leverage without the typical development cycle."Russ Zaliznyak - Principal Data Scientist and Experimentation Team LeadIntuitBeautiful data visualizations to stunning data apps with AI 4M+ monthly users choose Plotly Dash to create amazing data visualizations and interactive data apps in Python. Plotly Dash Enterprise boosts your Dash capabilities by accelerating Dash app development, deployment, securing and scaling of production-grade data apps. With Dash Enterprise, you can leverage AI-assisted app development, enjoy one-click deployment, and implement robust security measures, transforming your Plotly Dash expertise into actionable business solutions.Choose your pathPlotly Open Source With Dash Open Source, you can create data apps on your laptop in pure Python, no JavaScript required.If it’s free, it’s for me →Dash EnterpriseSelf-HostedThe platform provides deployment, rapid  AI-assisted development with App Studio, and authentication within your secure, air-gapped environments.LEARN MOREDash EnterpriseManaged ServiceThe platform provides all the capabilities of Dash Enterprise as a managed service hosted by Plotly in AWS, GCP, and Azure with private links to your data sources.DISCOVER\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nPlotly Open Source Graphing Libraries
            
              
                Interactive charts and maps for Python, R, Julia, Javascript, ggplot2, F#, MATLAB®, and Dash.
              
              
            
          
        
      

      
        
          
            
              

                
                  
                  
                  
                    Plotly PythonOpen SourceGraphing Library
                    
                  
                  
                    
                    
                  
                
              
            
            
              
                
                  
                  
                  
                    Plotly ROpen SourceGraphing Library
                    
                    
                    
                    
                  
                  
                    
                    
                  
                
              
            
            
              
                
                  
                  
                  
                    Plotly JuliaOpen SourceGraphing Library
                    
                    
                    
                    
                  
                  
                    
                    
                  
                

              
            

            
              
                
                  
                  
                  
                    Plotly JavascriptOpen SourceGraphing Library
                    
                    
                    
                    
                  
                  
                    
                    
                  
                

              
            
            
              

                
                  
                  
                  
                    Plotly ggplot2Open SourceGraphing Library
                    
                    
                    
                    
                  
                  
                    
                    
                  
                

              
            

            
              
                
                  
                  
                  
                    Plotly F#Open SourceGraphing Library
                    
                    
                    
                    
                  
                  
                    
                    
                  
                

              
            

            
              
                
                  
                  
                  
                    Plotly MATLAB®Open SourceGraphing Library
                    
                    
                    
                    
                  
                  
                    
                    
                  
                

              
            

            
              
                
                  
                    
                    
                  
                  
                    Plotly DashOpen Source Analytical App Framework\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    
                    
                        API Reference
                    
                    
                        Dash
                    
                    

                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    
                    
                        AI and ML
                    
                    

                    
                    
                        Visualizing Biological Data
                    
                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    

                    
                    
                        Animations
                    
                    

                    
                    
                        Advanced
                    
                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            

            

            

            
            
            
        
    
    


                
                
  
    
    
      
        Plotly Open Source Graphing Library for Python
        
          Plotly's Python graphing library makes interactive, publication-quality graphs. Examples of how to make line plots, scatter plots, area charts, bar charts, error bars, box plots, histograms, heatmaps, subplots, multiple-axes, polar charts, and bubble charts. Plotly.py is
          free and open source and you can
          view the source, report issues or contribute on GitHub.
        
        
        

  Deploy Python AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




      
    
  


 














    
        Fundamentals

        
        More Fundamentals »
        
    
    
        

            
                    
                    

    
        The Figure Data Structure
        
            View Tutorial
            
        
    


                
                    
                    

    
        Creating and Updating Figures
        
            View Tutorial
            
        
    


                
                    
                    

    
        Displaying Figures
        
            View Tutorial
            
        
    


                
                    
                    

    
        Plotly Express
        
            View Tutorial
            
        
    


                
                    
                    

    
        Analytical Apps with Dash
        
            View Tutorial
            
        
    


                
    










    
        Basic Charts

        
        More Basic Charts »
        
    
    
        

            

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Scatter Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Line Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bar Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Pie Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bubble Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
    





    
        Statistical Charts

        
        More Statistical Charts »
        
    
    
        

            
                    
                    

    
        Error Bars
        
            View Tutorial
            
        
    


                
                    
                    

    
        Box Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        Distplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        2D Histograms
        
            View Tutorial
            
        
    


                
    





    
        Scientific Charts

        
        More Scientific Charts »
        
    
    
        

            
                    
                    

    
        Contour Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Heatmaps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Imshow
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ternary Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Log Plots
        
            View Tutorial
            
        
    


                
    





    
        Financial Charts

        
        More Financial Charts »
        
    
    
        

            
                    
                    

    
        Time Series and Date Axes
        
            View Tutorial
            
        
    


                
                    
                    

    
        Candlestick Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Waterfall Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Funnel Chart
        
            View Tutorial
            
        
    


                
                    
                    

    
        OHLC Charts
        
            View Tutorial
            
        
    


                
    





    
        Maps

        
        More Maps »
        
    
    
        

            
                    
                    

    
        MapLibre Migration
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Choropleth Maps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lines on Tile Maps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Filled Area on Tile Maps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Bubble Maps
        
            View Tutorial
            
        
    


                
    





    
        Artificial Intelligence and Machine Learning

        
        More AI and ML »
        
    
    
        

            
                    
                    

    
        ML Regression
        
            View Tutorial
            
        
    


                
                    
                    

    
        kNN Classification
        
            View Tutorial
            
        
    


                
                    
                    

    
        ROC and PR Curves
        
            View Tutorial
            
        
    


                
                    
                    

    
        PCA Visualization
        
            View Tutorial
            
        
    


                
                    
                    

    
        AI/ML Apps with Dash
        
            View Tutorial
            
        
    


                
    







    Bioinformatics
        More Bioinformatics »
    
    
        


            

    
        Volcano Plot
        
            View Tutorial
            
        
    


            


            

    
        Manhattan Plot
        
            View Tutorial
            
        
    


            


            

    
        Clustergram
        
            View Tutorial
            
        
    


            


            

    
        Alignment Chart
        
            View Tutorial
            
        
    


            
        More Bioinformatics »
    




    
        3D Charts

        
        More 3D Charts »
        
    
    
        

            
                    
                    

    
        3D Axes
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Scatter Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Surface Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Camera Controls
        
            View Tutorial
            
        
    


                
    





    
        Subplots

        
    
    
        

            
                    
                    

    
        Mixed Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Map Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Table and Chart Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Figure Factory Subplots
        
            View Tutorial
            
        
    


                
    





    
        Jupyter Widgets Interaction

        
    
    
        

            
                    
                    

    
        Plotly FigureWidget Overview
        
            View Tutorial
            
        
    


                
                    
                    

    
        Jupyter Lab with FigureWidget
        
            View Tutorial
            
        
    


                
                    
                    

    
        Interactive Data Analysis with FigureWidget ipywidgets
        
            View Tutorial
            
        
    


                
                    
                    

    
        Click Events
        
            View Tutorial
            
        
    


                
    









    
        Add Custom Controls

        
    
    
        

            
                    
                    

    
        Custom Buttons
        
            View Tutorial
            
        
    


                
                    
                    

    
        Sliders
        
            View Tutorial
            
        
    


                
                    
                    

    
        Dropdown Menus
        
            View Tutorial
            
        
    


                
                    
                    

    
        Range Slider and Selector
        
            View Tutorial
            
        
    


                
    





    
        Animations

        
    
    
        

            
                    
                    

    
        Intro to Animations
        
            View Tutorial
            
        
    


                
    







    
        Advanced
    
    
        

            
                    
                    
                        
                            Plot CSV Data
                        
                    
                
                    
                    
                        
                            Random Walk
                        
                    
                
                    
                    
                        
                            Peak Finding
                        
                    
                
                    
                    
                        
                            Smoothing
                        
                    
                
                    
                    
                        
                            LaTeX\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    

                    
                    
                    
                        ggplot2 integration
                    
                    
                        Dash for R
                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    
                    
                        AI and ML
                    
                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    

                    
                    
                        Animations
                    
                    

                    
                    
                        Advanced
                    
                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            

            

            

            
            
            
        
    
    


                
                
  
    
    
        
                    
                

      
        Plotly R Open Source Graphing Library
        Plotly's R graphing library makes interactive, publication-quality graphs. Examples of how to make line plots, scatter plots, area charts, bar charts, error bars, box plots, histograms, heatmaps, subplots, multiple-axes, and 3D (WebGL based) charts.
                            Plotly.R is free and open source
                    and you can view the source, report issues or contribute on GitHub.

        
                

  Deploy R AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




      
    
  



    
        Fundamentals

        
        More Fundamentals »
        
    
    
        

            
                    
                    

    
        The Figure Data Structure
        
            View Tutorial
            
        
    


                
                    
                    

    
        Creating and Updating Figures
        
            View Tutorial
            
        
    


                
                    
                    

    
        Displaying Figures
        
            View Tutorial
            
        
    


                
                    
                    

    
        Exporting Graphs as Static Images
        
            View Tutorial
            
        
    


                
                    
                    

    
        Configuration
        
            View Tutorial
            
        
    


                
    



    
        Basic Charts

        
        More Basic Charts »
        
    
    
        

            

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Scatter and Line Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Line Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bar Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Pie Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bubble Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
    



    
        Statistical Charts

        
        More Statistical Charts »
        
    
    
        

            
                    
                    

    
        2D Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        Box Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        Error Bars
        
            View Tutorial
            
        
    


                
                    
                    

    
        Violin Plots
        
            View Tutorial
            
        
    


                
    



    
        Scientific Charts

        
        More Scientific Charts »
        
    
    
        

            
                    
                    

    
        Log Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Contour Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Heatmaps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Network Graph
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ternary Contour Plot
        
            View Tutorial
            
        
    


                
    



    
        Financial Charts

        
        More Financial Charts »
        
    
    
        

            
                    
                    

    
        Time Series and Date Axes
        
            View Tutorial
            
        
    


                
                    
                    

    
        Candlestick Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        OHLC Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Waterfall Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Funnel Charts
        
            View Tutorial
            
        
    


                
    



    
        Maps

        
        More Maps »
        
    
    
        

            
                    
                    

    
        Choropleth Maps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Scatter Plots on Maps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Mapbox Density
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lines on Maps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Mapbox Layers
        
            View Tutorial
            
        
    


                
    



    
        Artificial Intelligence and Machine Learning

        
        More AI and ML »
        
    
    
        

            
                    
                    

    
        ML Regression
        
            View Tutorial
            
        
    


                
                    
                    

    
        kNN Classification
        
            View Tutorial
            
        
    


                
                    
                    

    
        ROC and PR Curves
        
            View Tutorial
            
        
    


                
                    
                    

    
        PCA Visualization
        
            View Tutorial
            
        
    


                
                    
                    

    
        t-SNE and UMAP projections
        
            View Tutorial
            
        
    


                
    



    
        3D Charts

        
        More 3D Charts »
        
    
    
        

            
                    
                    

    
        3D Scatter Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Line Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Surface Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Mesh Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Cone Plots
        
            View Tutorial
            
        
    


                
    



    
        Subplots

        
    
    
        

            
                    
                    

    
        Map Subplots And Small Multiples
        
            View Tutorial
            
        
    


                
                    
                    

    
        Inset Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Subplots
        
            View Tutorial
            
        
    


                
    



    
        Add Custom Controls

        
    
    
        

            
                    
                    

    
        Buttons
        
            View Tutorial
            
        
    


                
                    
                    

    
        Dropdown Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Range Sliders and Selectors
        
            View Tutorial
            
        
    


                
                    
                    

    
        Sliders
        
            View Tutorial
            
        
    


                
    



    
        Animations

        
    
    
        

            
                    
                    

    
        Intro to Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Cumulative Animations
        
            View Tutorial
            
        
    


                
    



    
        Advanced
    
    
        

            
                    
                    
                        
                            Plot CSV Data\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    
                    
                        AI and ML
                    
                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    

                    

                    
                    
                        Advanced
                    
                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            

            

            

            
            
            
        
    
    


                
                
  
    
      
        
      
      
        Plotly Julia Library
        Plotly's Julia graphing library makes interactive, publication-quality graphs online. Examples of how to make line plots, scatter plots, area charts, bar charts, error bars, box plots, histograms, heatmaps, subplots, multiple-axes, polar charts and bubble charts.
      
    
  


 














    
        Fundamentals

        
        More Fundamentals »
        
    
    
        

            
                    
                    

    
        Configuration
        
            View Tutorial
            
        
    


                
                    
                    

    
        Setting Graph Size
        
            View Tutorial
            
        
    


                
                    
                    

    
        Formatting Ticks
        
            View Tutorial
            
        
    


                
                    
                    

    
        Setting the Font, Title, Legend Entries, and Axis Titles
        
            View Tutorial
            
        
    


                
                    
                    

    
        Axes
        
            View Tutorial
            
        
    


                
    










    
        Basic Charts

        
        More Basic Charts »
        
    
    
        

            

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Scatter Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Line Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bar Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bubble Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Dot Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
    





    
        Statistical Charts

        
        More Statistical Charts »
        
    
    
        

            
                    
                    

    
        Error Bars
        
            View Tutorial
            
        
    


                
                    
                    

    
        Box Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        2D Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        2D Histogram Contour
        
            View Tutorial
            
        
    


                
    





    
        Scientific Charts

        
        More Scientific Charts »
        
    
    
        

            
                    
                    

    
        Contour Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Heatmaps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Log Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Network Graphs
        
            View Tutorial
            
        
    


                
                    
                    

    
        Carpet Contour Plot
        
            View Tutorial
            
        
    


                
    





    
        Financial Charts

        
        More Financial Charts »
        
    
    
        

            
                    
                    

    
        Time Series and Date Axes
        
            View Tutorial
            
        
    


                
                    
                    

    
        Candlestick Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Indicators
        
            View Tutorial
            
        
    


                
                    
                    

    
        Gauge Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Bullet Charts
        
            View Tutorial
            
        
    


                
    







    
        Artificial Intelligence and Machine Learning

        
    
    
        

            
                    
                    

    
        PCA Visualization
        
            View Tutorial
            
        
    


                
    








    
        3D Charts

        
        More 3D Charts »
        
    
    
        

            
                    
                    

    
        3D Axes
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Scatter Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Surface Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Camera Controls
        
            View Tutorial
            
        
    


                
    





    
        Subplots

        
    
    
        

            
                    
                    

    
        Mixed Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Inset Plots
        
            View Tutorial
            
        
    


                
    











    
        Add Custom Controls

        
    
    
        

            
                    
                    

    
        Custom Buttons
        
            View Tutorial
            
        
    


                
                    
                    

    
        Dropdown Menus
        
            View Tutorial
            
        
    


                
    









    
        Advanced
    
    
        

            
                    
                    
                        
                            LaTeX\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    

                    

                    

                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    
                    
                        AI and ML
                    
                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    

                    
                    
                        Animations
                    
                    

                    
                    
                        Advanced
                    
                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            

            

            

            
            
            
        
    
    


                
                
  
    
      
        
      
      
        Plotly ggplot2 Open Source Graphing Library
        
          With ggplotly() by Plotly, you can convert your ggplot2 figures into interactive ones powered by plotly.js, ready for embedding into Dash applications. ggplotly is
          free and open source and you can
          view the source, report issues or contribute on GitHub. Head over to the
          community forum
          to ask questions and get help.
        
        
        

  Deploy Ggplot2 AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




      
    
  


 














    
        Fundamentals

        
        More Fundamentals »
        
    
    
        

            
                    
                    

    
        Configuration Options For Embedded Chart Studio Graphs
        
            View Tutorial
            
        
    


                
                    
                    

    
        Setting Graph Size
        
            View Tutorial
            
        
    


                
                    
                    

    
        Formatting Ticks
        
            View Tutorial
            
        
    


                
                    
                    

    
        Setting the Font, Title, Legend Entries, and Axis Titles
        
            View Tutorial
            
        
    


                
                    
                    

    
        Axes
        
            View Tutorial
            
        
    


                
    










    
        Basic Charts

        
        More Basic Charts »
        
    
    
        

            

                

                

                

                
                    
                    

    
        Dumbbell Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Scatter Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bar Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bubble Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                
                    
                    

    
        Dot Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
    





    
        Statistical Charts

        
        More Statistical Charts »
        
    
    
        

            
                    
                    

    
        Error Bars
        
            View Tutorial
            
        
    


                
                    
                    

    
        Heatmaps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Box Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        Distplots
        
            View Tutorial
            
        
    


                
    





    
        Scientific Charts

        
        More Scientific Charts »
        
    
    
        

            
                    
                    

    
        Contour Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Log Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Dendrograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        Parallel Coordinates Plot
        
            View Tutorial
            
        
    


                
                    
                    

    
        Quiver Plots
        
            View Tutorial
            
        
    


                
    





    
        Financial Charts

        
        More Financial Charts »
        
    
    
        

            
                    
                    

    
        Time Series and Date Axes
        
            View Tutorial
            
        
    


                
                    
                    

    
        Waterfall Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Funnel Chart
        
            View Tutorial
            
        
    


                
                    
                    

    
        OHLC Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Bullet Charts
        
            View Tutorial
            
        
    


                
    





    
        Maps

        
    
    
        

            
                    
                    

    
        Bubble Maps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Choropleth Maps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Simple Features in Maps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Scatter Plots on Maps
        
            View Tutorial
            
        
    


                
    





    
        Artificial Intelligence and Machine Learning

        
    
    
        

            
                    
                    

    
        ML Regression
        
            View Tutorial
            
        
    


                
                    
                    

    
        kNN Classification
        
            View Tutorial
            
        
    


                
                    
                    

    
        ROC and PR Curves
        
            View Tutorial
            
        
    


                
                    
                    

    
        PCA Visualization
        
            View Tutorial
            
        
    


                
    




















    
        Animations

        
    
    
        

            
                    
                    

    
        Intro to Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Cumulative Animations
        
            View Tutorial
            
        
    


                
    







    
        Advanced
    
    
        

            
                    
                    
                        
                            Plot CSV Data
                        
                    
                
                    
                    
                        
                            Random Walk
                        
                    
                
                    
                    
                        
                            Smoothing\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    

                    
                    

                    
                    

                    
                    
                    
                        User Guide
                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    
                    
                        AI and ML
                    
                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    

                    

                    
                    
                        Advanced
                    
                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            

            

            

            
            
            
        
    
    


                
                
  
    
      
        
      
      
        Plotly MATLAB® Open Source Graphing Library
        
          Create interactive charts in your web browser with MATLAB® and Plotly. Plotly_matlab is
          free and open source and you can
          view the source, report issues or contribute on GitHub. Head over to the
          community forum
          to ask questions and get help.
        
        
        

  Deploy Matlab AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




      
    
  


 














    
        Fundamentals

        
        More Fundamentals »
        
    
    
        

            
                    
                    

    
        Axes
        
            View Tutorial
            
        
    


                
                    
                    

    
        Legends
        
            View Tutorial
            
        
    


                
                    
                    

    
        Setting Graph Size
        
            View Tutorial
            
        
    


                
                    
                    

    
        Formatting Ticks
        
            View Tutorial
            
        
    


                
                    
                    

    
        Setting the Font, Title, Legend Entries, and Axis Titles
        
            View Tutorial
            
        
    


                
    










    
        Basic Charts

        
        More Basic Charts »
        
    
    
        

            

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Scatter Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Line Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bar Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Pie Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Filled Area
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
    





    
        Statistical Charts

        
        More Statistical Charts »
        
    
    
        

            
                    
                    

    
        Error Bars
        
            View Tutorial
            
        
    


                
                    
                    

    
        Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        Distplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        2D Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        Scatterplot Matrix
        
            View Tutorial
            
        
    


                
    





    
        Scientific Charts

        
        More Scientific Charts »
        
    
    
        

            
                    
                    

    
        Contour Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Heatmaps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Imshow
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ternary Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Log Plots
        
            View Tutorial
            
        
    


                
    





    
        Financial Charts

        
        More Financial Charts »
        
    
    
        

            
                    
                    

    
        Time Series and Date Axes
        
            View Tutorial
            
        
    


                
                    
                    

    
        Box Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Waterfall Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        OHLC Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Pareto Plots
        
            View Tutorial
            
        
    


                
    





    
        Maps

        
    
    
        

            
                    
                    

    
        Choropleth Maps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lines on Maps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Scatter Plots on Maps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Bubble Maps
        
            View Tutorial
            
        
    


                
    





    
        Artificial Intelligence and Machine Learning

        
    
    
        

            
                    
                    

    
        ML Regression
        
            View Tutorial
            
        
    


                
                    
                    

    
        PCA Visualization
        
            View Tutorial
            
        
    


                
                    
                    

    
        t-SNE projections
        
            View Tutorial
            
        
    


                
    








    
        3D Charts

        
        More 3D Charts »
        
    
    
        

            
                    
                    

    
        3D Line Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Scatter Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Surface Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Trisurf Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Mesh Plots
        
            View Tutorial
            
        
    


                
    





    
        Subplots

        
    
    
        

            
                    
                    

    
        Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Mixed Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Subplots
        
            View Tutorial
            
        
    


                
    

















    
        Advanced
    
    
        

            
                    
                    
                        
                            LaTeX
                        
                    
                
    









  MATLAB® is a registered trademark of The MathWorks, Inc.\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    

                    
                    

                    

                    

                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    
                    
                        AI and ML
                    
                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    

                    
                    
                        Animations
                    
                    

                    
                    
                        Advanced
                    
                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            

            

            

            
            
            
        
    
    


                
                
  
    
      
        
      
      
        Plotly F# Library
        Plotly's F# graphing library makes interactive, publication-quality graphs online. Examples of how to make line plots, scatter plots, area charts, bar charts, error bars, box plots, histograms, heatmaps, subplots, multiple-axes, polar charts and bubble charts.
      
    
  


 














    
        Fundamentals

        
        More Fundamentals »
        
    
    
        

            
                    
                    

    
        The Figure Data Structure
        
            View Tutorial
            
        
    


                
                    
                    

    
        Creating and Updating Figures
        
            View Tutorial
            
        
    


                
                    
                    

    
        Displaying Figures
        
            View Tutorial
            
        
    


                
                    
                    

    
        Static Image Export
        
            View Tutorial
            
        
    


                
                    
                    

    
        Setting Graph Size
        
            View Tutorial
            
        
    


                
    










    
        Basic Charts

        
        More Basic Charts »
        
    
    
        

            

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Scatter Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Line Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bar Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                
                    
                    

    
        Pie Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bubble Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
    





    
        Statistical Charts

        
        More Statistical Charts »
        
    
    
        

            
                    
                    

    
        Error Bars
        
            View Tutorial
            
        
    


                
                    
                    

    
        Box Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        2D Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        Scatterplot Matrix
        
            View Tutorial
            
        
    


                
    





    
        Scientific Charts

        
        More Scientific Charts »
        
    
    
        

            
                    
                    

    
        Contour Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Heatmaps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ternary Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Log Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Network Graphs
        
            View Tutorial
            
        
    


                
    





    
        Financial Charts

        
        More Financial Charts »
        
    
    
        

            
                    
                    

    
        Time Series and Date Axes
        
            View Tutorial
            
        
    


                
                    
                    

    
        Candlestick Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Waterfall Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Funnel Chart
        
            View Tutorial
            
        
    


                
                    
                    

    
        OHLC Charts
        
            View Tutorial
            
        
    


                
    





    
        Maps

        
        More Maps »
        
    
    
        

            
                    
                    

    
        Mapbox Choropleth Maps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lines on Mapbox
        
            View Tutorial
            
        
    


                
                    
                    

    
        Filled Area on Maps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Mapbox Density Heatmap
        
            View Tutorial
            
        
    


                
                    
                    

    
        Choropleth Maps
        
            View Tutorial
            
        
    


                
    





    
        Artificial Intelligence and Machine Learning

        
    
    
        

            
                    
                    

    
        ML Regression
        
            View Tutorial
            
        
    


                
                    
                    

    
        kNN Classification
        
            View Tutorial
            
        
    


                
                    
                    

    
        ROC and PR Curves
        
            View Tutorial
            
        
    


                
    








    
        3D Charts

        
        More 3D Charts »
        
    
    
        

            
                    
                    

    
        3D Scatter Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Streamtube Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Mesh Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Cone Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Bubble Charts
        
            View Tutorial
            
        
    


                
    















    
        Animations

        
    
    
        

            
                    
                    

    
        Intro to Animations
        
            View Tutorial
            
        
    


                
    







    
        Advanced
    
    
        

            
                    
                    
                        
                            Plot CSV Data\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
            
                > Getting Started
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Getting Started
                  
                  in 
                  JavaScript
                  
                  
                
                Getting Started with plotly 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






              
        NPM
        
            
                You can install Plotly.js from NPM via npm install plotly.js-dist or yarn install plotly.js-dist
            

    

    
        plotly.js CDN
        
            
                You can also use the ultrafast plotly.js CDN link. This CDN is graciously provided by the incredible team at Fastly.
            

        <head>
               <script src="https://cdn.plot.ly/plotly-3.0.1.min.js" charset="utf-8"></script>
</head>

        
    

    
        Download
        
            
                Download the minified plotly.js source code and dependencies.
            

            
                Include the downloaded scripts before the end of the </head> tag in your HTML document:
            

<head>
	<script src="plotly-3.0.1.min.js" charset="utf-8"></script>
</head>


        

        
  			
				 Download plotly.js
		

    

    
        Start plotting!
        
            
                In your HTML document, create an empty DIV to draw the graph in:
            

            <div id="tester" style="width:600px;height:250px;"></div>

            
                Now you can make interactive plotly.js charts  using Plotly.newPlot().
            
<script>
	TESTER = document.getElementById('tester');
	Plotly.newPlot( TESTER, [{
	x: [1, 2, 3, 4, 5],
	y: [1, 2, 4, 8, 16] }], {
	margin: { t: 0 } } );
</script>

            
                Now you can pass Plotly.newPlot() either the ID of the DIV ("tester") or the DIV DOM element (TESTER).
            

        
    

    
        Hello World Example
        
            
        
    


	more examples



    Distribution powered by\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
            
                > Is Plotly.js Free?
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Is Plotly.js Free?
                  
                
                Plotly's open-source graphing libraries are free to use, work offline and don't require any account registration. Plotly also has a commercial offering called Dash Enterprise. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          Is Plotly.js Free?

     Yes.   Plotly.js is free and open-source software, licensed under the MIT license. It costs nothing to install and use. You can view the source, report issues or contribute using our Github repository.

Can I use Plotly.js without signing up to any service?

     Yes.   You can use Plotly.js to make, view, and distribute charts and maps without registering for any service,
obtaining any token, or creating any account. The one exception is that to view tile maps
which use tiles from the Mapbox service (which is optional, as you can use other tile servers), you will need to have a Mapbox token.

Can I use Plotly.js offline, without being connected to the internet?

     Yes.   You can use Plotly.js to make, view, and distribute  graphics totally offline. The one exception is that to view tile maps
which use tiles from a cloud-hosted service, such as Open Street Maps or Mapbox, you will need a connection to that service. You can view tile maps totally offline if  you run your own local tile server and use its tiles.

Is Dash free?

     Yes.   Plotly's Dash analytics application framework is also free and open-source software, licensed under the MIT license.

Does Plotly also make commercial software?

     Yes.   Plotly has commercial offerings such as Dash Enterprise.\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nSimple Traces
  
    
      
        Scatter
      

      
        Scatter GL
      

      
        Bar
      

      
        Pie
      

      
        Heatmap
      

      
        Heatmap GL
      

      
        Image
      

      
        Contour
      

      
        Table
      
    
  



  Distribution Traces
  
    
      
        Box
      

      
        Violin
      

      
        Histogram
      

      
        Histogram 2D
      

      
        Histogram 2D Contour
      
    
  



  Finance Traces
  
    
      
        OHLC
      

      
        Candlestick
      

      
        Waterfall
      

      
        Funnel
      

      
        Funnel Area
      

      
        Indicator
      
    
  



  3D Traces
  
    
      
        Scatter 3D
      

      
        Surface
      

      
        Mesh
      

      
        Cone
      

      
        Streamtube
      

      
        Volume
      

      
        Isosurface
      
    
  



  Map Traces
  
    
      
        Scatter Geo
      

      
        Choropleth
      

      
        Scatter Map
      

      
        Scatter Mapbox
      

      
        Choropleth Map
      

      
        Choropleth Mapbox
      

      
        Density Map
      

      
        Density Mapbox
      
    
  



  Specialized Traces
  
    
      
        Scatter Polar
      

      
        Scatter Polar GL
      

      
        Bar Polar
      

      
        Scatter Ternary
      

      
        Scatter Smith
      

      
        Sunburst
      

      
        Treemap
      

      
        Icicle
      

      
        Sankey
      

      
        SPLOM
      

      
        Parallel Coordinates
      

      
        Parallel Categories
      

      
        Carpet
      

      
        Scatter Carpet
      

      
        Contour Carpet
      
    
  





  Layout
  
    
      
        Title
      
      
        Legend
      
      
        Margins
      
      
        Size
      
      
        Fonts
      
      
        Colors
      
    
  



  Axes and Subplots
  
    
      
        X Axis
      
      
        Y Axis
      
      
        Ternary
      
      
        Smith
      
      
        3D Scene
      
      
        Geo
      
      
        Mapbox
      
      
        Polar
      
      
        Color Axis
      
    
  



  Layers
  
    
      
        Annotations
      
      
        Shapes
      
      
        Selections
      
      
        Images
      
      
        Sliders
      
      
        Update Menus
      
    
  



        
    

    
    
      
    




            
            
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
            
            
                > Figure Reference
                > Reference Index
            
        
    
    


                
                JavaScript Figure Reference


The pages linked in the sidebar together form the exhaustive reference for all of the attributes in the core figure data structure
that the plotly library operates on. They are automatically-generated from the
 machine-readable Plotly.js schema reference.

How are Plotly attributes organized?
    
        
            plotly.js charts are described declaratively as JSON objects. Every aspect of a plotly chart (the colors, the grids, the data, and so on) has a corresponding JSON attribute. This page contains an extensive list of these attributes.

            Plotly's graph description places attributes into two categories: traces (objects that describe a single series of data in a graph) and layout (attributes that apply to the rest of the chart, like the title, xaxis, or annotations). Traces are categorized by chart type (e.g. scatter, heatmap).

            Here is a simple example of a plotly chart inlined with links to each attribute's reference section.

        data = [
        {
            type: 'scatter',  // all "scatter" attributes: https://plotly.com/javascript/reference/#scatter
            x: [1, 2, 3],     // more about "x": #scatter-x
            y: [3, 1, 6],     // #scatter-y
            marker: {         // marker is an object, valid marker keys: #scatter-marker
                color: 'rgb(16, 32, 77)' // more about "marker.color": #scatter-marker-color
            }
        },
        {
            type: 'bar',      // all "bar" chart attributes: #bar
            x: [1, 2, 3],     // more about "x": #bar-x
            y: [3, 1, 6],     // #bar-y
            name: 'bar chart example' // #bar-name
        }
    ];

    layout = {                     // all "layout" attributes: #layout
        title: 'simple example',  // more about "layout.title": #layout-title
        xaxis: {                  // all "layout.xaxis" attributes: #layout-xaxis
            title: 'time'         // more about "layout.xaxis.title": #layout-xaxis-title
        },
        annotations: [            // all "annotation" attributes: #layout-annotations
            {
                text: 'simple annotation',    // #layout-annotations-text
                x: 0,                         // #layout-annotations-x
                xref: 'paper',                // #layout-annotations-xref
                y: 0,                         // #layout-annotations-y
                yref: 'paper'                 // #layout-annotations-yref
            }
        ]
    }\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
            
                > Function Reference
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Function Reference
                  
                  in 
                  JavaScript
                  
                  
                
                Plotly.js function reference. How to create, update, and modify graphs drawn with Plotly's JavaScript Graphing Library. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

Common parameters


  graphDiv
  The functions documented here all create or modify a plot that is drawn into a <div> element on the page, commonly referred to as graphDiv or plotDiv. The first argument to each function on this page is a reference to this element, and it can be either a DOM node, i.e. the output of document.getElementById(), or a string, in which case it will be treated as the id of the div. A note on sizing: You can either supply height and width in the layout object (see below), or give the <div> a height and width in CSS.

  data
  The data to be plotted is described in an array usually called data, whose elements are trace objects of various types (e.g. scatter, bar etc) as documented in the Full Reference.
  
  layout
  The layout of the plot – non-data-related visual attributes such as the title, annotations etc – is described in an object usually called layout, as documented in/ the Full Reference.
  
  config
  High-level configuration options for the plot, such as the scroll/zoom/hover behaviour, is described in an object usually called config, as documented here. The difference between config and layout is that layout relates to the content of the plot, whereas config relates to the context in which the plot is being shown.
  
  frames
  Animation frames are described in an object usually called frames as per the example here.
    They can contain data and layout objects, which define any changes to be animated, and a traces
    object that defines which traces to animate. Additionally, frames containing name and/or group
    attributes can be referenced by Plotly.animate
    after they are added by Plotly.addFrames
  



Plotly.newPlot

Draws a new plot in an <div> element, overwriting any existing plot. To update an existing plot in a <div>, it is much more efficient to use Plotly.react than to overwrite it.


Signature

  Plotly.newPlot(graphDiv, data, layout, config)
  
    
      graphDiv
      DOM node or string id of a DOM node
      data
      array of objects, see documentation (defaults to [])
      layout
      object, see documentation/ (defaults to {})
      config
      object, see documentation (defaults to {})
    
  
  Plotly.newPlot(graphDiv, obj)
  
    
      graphDiv
      DOM node or string id of a DOM node
      obj
      single object with keys for data, layout, config and frames, see above for contents (defaults to {data: [], layout: {}, config: {}, frames: []})
    
  





After plotting, the data or layout can always be retrieved from the <div> element in which the plot was drawn:

var graphDiv = document.getElementById('id_of_the_div')

var data = [{
  x: [1999, 2000, 2001, 2002],
  y: [10, 15, 13, 17],
  type: 'scatter'
}];

var layout = {
  title: {
    text: 'Sales Growth'
  },
  xaxis: {
    title: {
      text: 'Year'
    },
    showgrid: false,
    zeroline: false
  },
  yaxis: {
    title: {
      text: 'Percent'
    },
    showline: false
  }
};
Plotly.newPlot(graphDiv, data, layout);

...
var dataRetrievedLater = graphDiv.data;
var layoutRetrievedLater = graphDiv.layout;



Plotly.react

Plotly.react has the same signature as Plotly.newPlot above, and can be used in its place to create a plot, but when called again on the same <div> will update it far more efficiently than Plotly.newPlot, which would destroy and recreate the plot. Plotly.react is as fast as Plotly.restyle/Plotly.relayout documented below.

Important Note: In order to use this method to plot new items in arrays under data such as x or marker.color etc, these items must either have been added immutably (i.e. the identity of the parent array must have changed) or the value of layout.datarevision must have changed.

Plotly.restyle
This function has comparable performance to Plotly.react and is faster than redrawing the whole plot with Plotly.newPlot.

An efficient means of changing attributes in the data array in an existing plot. When restyling, you may choose to have the specified changes affect as many traces as desired. The update is given as a single object and the traces that are affected are given as a list of traces indices. Note, leaving the trace indices unspecified assumes that you want to restyle all the traces.



Signature

  Plotly.restyle(graphDiv, update [, traceIndices])
  
    
      graphDiv
      DOM node or string id of a DOM node
      update
      object, see below for examples (defaults to {})
      traceIndices
      array of integer indices into existing value of data (optional, default behaviour is to apply to all traces)
    
  





// restyle a single trace using attribute strings
var update = {
    opacity: 0.4,
    'marker.color': 'red'
};
Plotly.restyle(graphDiv, update, 0);

// restyle all traces using attribute strings
var update = {
    opacity: 0.4,
    'marker.color': 'red'
};
Plotly.restyle(graphDiv, update);

// restyle two traces using attribute strings
var update = {
    opacity: 0.4,
    'marker.color': 'red'
};
Plotly.restyle(graphDiv, update, [1, 2]);


See the Pen Plotly.restyle by plotly (@plotly) on CodePen.




The above examples have applied values across single or multiple traces. However, you can also specify arrays of values to apply to traces in turn.


// restyle the first trace's marker color 'red' and the second's 'green'
var update = {
    'marker.color': ['red', 'green']
};
Plotly.restyle(graphDiv, update, [0, 1])

// alternate between red and green for all traces (note omission of traces)
var update = {
    'marker.color': ['red', 'green']
};
Plotly.restyle(graphDiv, update)


See the Pen Plotly.restyle Traces in Turn by plotly (@plotly) on CodePen.



In restyle, arrays are assumed to be used in conjunction with the trace indices provided. Therefore, to apply an array as a value, you need to wrap it in an additional array. For example:


// update the color attribute of the first trace so that the markers within the same trace
// have different colors
var update = {
    'marker.color': [['red', 'green']]
}
Plotly.restyle(graphDiv, update, [0])

// update two traces with new z data
var update = {z: [[[1,2,3], [2,1,2], [1,1,1]], [[0,1,1], [0,2,1], [3,2,1]]]};
Plotly.restyle(graphDiv, update, [1, 2])


See the Pen Plotly.restyle Arrays  by plotly (@plotly) on CodePen.



The term attribute strings is used above to mean flattened (e.g., {marker: {color: 'red'}} vs. {'marker.color': red}). When you pass an attribute string to restyle inside the update object, it’s assumed to mean update only this attribute. Therefore, if you wish to replace and entire sub-object, you may simply specify one less level of nesting.


// replace the entire marker object with the one provided
var update = {
    marker: {color: 'red'}
};
Plotly.restyle(graphDiv, update, [0])


See the Pen Plotly.restyle Attribute strings  by plotly (@plotly) on CodePen.



Finally, you may wish to selectively reset or ignore certain properties when restyling. This may be useful when specifying multiple properties for multiple traces so that you can carefully target what is and is not affected. In general `null` resets a property to the default while `undefined` applies no change to the current state.


// Set the first trace's line to red, the second to the default, and ignore the third
Plotly.restyle(graphDiv, {
  'line.color': ['red', null, undefined]
}, [0, 1, 2])


See the Pen null vs. undefined in Plotly.restyle by plotly (@plotly) on CodePen.


Plotly.relayout
This function has comparable performance to Plotly.react and is faster than redrawing the whole plot with Plotly.newPlot.

An efficient means of updating the layout object of an existing plot. The call signature and arguments for relayout are similar (but simpler) to restyle. Because there are no indices to deal with, arrays need not be wrapped. Also, no argument specifying applicable trace indices is passed in.



Signature

  Plotly.relayout(graphDiv, update)
  
    
      graphDiv
      DOM node or string id of a DOM node
      update
      object, see below for examples (defaults to {})
    
  






// update only values within nested objects
var update = {
    title: {text: 'some new title'}, // updates the title
    'xaxis.range': [0, 5],   // updates the xaxis range
    'yaxis.range[1]': 15     // updates the end of the yaxis range
};
Plotly.relayout(graphDiv, update)


See the Pen Plotly.relayout by plotly (@plotly) on CodePen.


Plotly.update
This function has comparable performance to Plotly.react and is faster than redrawing the whole plot with Plotly.newPlot.

An  efficient means of updating both the data array and layout object in an existing plot, basically a combination of Plotly.restyle and Plotly.relayout.


Signature

  Plotly.update(graphDiv, data_update, layout_update, [, traceIndices])
  
    
      graphDiv
      DOM node or string id of a DOM node
      data_update
      object, see Plotly.restyle above (defaults to {})
      layout_update
      object, see Plotly.relayout above (defaults to {})
      traceIndices
      array of integer indices into existing value of data, see Plotly.restyle above (optional, default behaviour is to apply to all traces)
    
  





//update the layout and all the traces
var layout_update = {
    title: {text: 'some new title'}, // updates the title
};
var data_update = {
    'marker.color': 'red'
};
Plotly.update(graphDiv, data_update, layout_update)

//update the layout and a single trace
var layout_update = {
    title: {text: 'some new title'}, // updates the title
};
var data_update = {
    'marker.color': 'red'
};
Plotly.update(graphDiv, data_update, layout_update,0)

//update the layout and two specific traces
var layout_update = {
    title: {text: 'some new title'}, // updates the title
};
var data_update = {
    'marker.color': 'red'
};
Plotly.update(graphDiv, data_update, layout_update, [0,2])




See the Pen Plotly.update by plotly (@plotly) on CodePen.


Plotly.validate

Plotly.validate allows users to validate their input data array and layout object. This can be done on the data array and layout object passed into Plotly.newPlot or on an updated graphDiv with Plotly.validate(graphDiv.data, graphDiv.layout).


Signature

  Plotly.validate(data, layout)
  
    
      data
      array of objects
      layout
      object
    
  





var data = [{
  type: 'bar',
  y: [2, 1, 3, 2],
  orientation: 'horizontal'
}];

var out = Plotly.validate(data, layout);
console.log(out[0].msg)
// "In data trace 0, key orientation is set to an invalid value (horizontal)"


Plotly.makeTemplate

Plotly.makeTemplate copies the style information from a figure. It does this by returning a template object which can be passed to the layout.template attribute of another figure.


Signature

  Plotly.makeTemplate(figure)
  
    
      figure or DOM Node
      where figure is a plot object, with {data, layout} members. If a DOM node is used
      it must be a div element already containing a plot.
    
  





var figure = {
  data: [{
    type: 'bar',
    marker: {color: 'red'},
    y: [2, 1, 3, 2],
  }],
  layout:{
    title: {
      text: 'Quarterly Earnings'
    }
  }
};

var template = Plotly.makeTemplate(figure);

var newData = [{
  type:'bar',
  y:[3,2,5,8]
}]

var layout = {template:template}

Plotly.newPlot(graphDiv,newData,layout)



Plotly.validateTemplate

Plotly.validateTemplate allows users to Test for consistency between the given figure and a template,
either already included in the figure or given separately. Note that not every issue identified here is necessarily
a problem, it depends on what you're using the template for.


Signature

  Plotly.validateTemplate(figure, template)
  
    
      figure or DOM Node
      where figure is a plot object, with {data, layout} members.
      template
      the template, with its own {data, layout}, to test.
          If omitted, we will look for a template already attached as
        the plot's layout.template attribute.
    
  





var out = Plotly.validateTemplate(figure, template);
console.log(out[0].msg)
// "The template has 1 traces of type bar but there are none in the data."


Plotly.addTraces
This function has comparable performance to Plotly.react and is faster than redrawing the whole plot with Plotly.newPlot.

This allows you to add new traces to an existing graphDiv at any location in its data array. Every graphDiv object has a data component which is an array of JSON blobs that each describe one trace. The full list of trace types can be found in the Full Reference.



// add a single trace to an existing graphDiv
Plotly.addTraces(graphDiv, {y: [2,1,2]});

// add two traces
Plotly.addTraces(graphDiv, [{y: [2,1,2]}, {y: [4, 5, 7]}]);

// add a trace at the beginning of the data array
Plotly.addTraces(graphDiv, {y: [1, 5, 7]}, 0);


See the Pen Plotly.addtraces by plotly (@plotly) on CodePen.


Plotly.deleteTraces
This function has comparable performance to Plotly.react and is faster than redrawing the whole plot with Plotly.newPlot.
This allows you to remove traces from an existing graphDiv by specifying the indices of the traces to be removed.


// remove the first trace
Plotly.deleteTraces(graphDiv, 0);

// remove the last two traces
Plotly.deleteTraces(graphDiv, [-2, -1]);


See the Pen Plotly.deleteTraces by plotly (@plotly) on CodePen.


Plotly.moveTraces
This function has comparable performance to Plotly.react and is faster than redrawing the whole plot with Plotly.newPlot.
This allows you to reorder traces in an existing graphDiv. This will change the ordering of the layering and the legend.

All traces defined in graphDiv are ordered in an array. They are drawn one by one from first to last. Each time a new layer or trace is drawn to the canvas the new trace is drawn directly over the current canvas, replacing the colors of the traces and background. This algorithm to image stacking/drawing is known as the Painter's Algorithm. As its name implies the Painter's Algorithm is typically the manner in which a painter paints a landscape, starting from objects with the most perspective depth and progressively moving forward and layering over the background objects.


// move the first trace (at index 0) the the end of the data array
Plotly.moveTraces(graphDiv, 0);

// move selected traces (at indices [0, 3, 5]) to the end of the data array
Plotly.moveTraces(graphDiv, [0, 3, 5]);

// move last trace (at index -1) to the beginning of the data array (index 0)
Plotly.moveTraces(graphDiv, -1, 0);

// move selected traces (at indices [1, 4, 5]) to new indices [0, 3, 2]
Plotly.moveTraces(graphDiv, [1, 4, 5], [0, 3, 2]);


See the Pen Plotly.moveTraces by plotly (@plotly) on CodePen.


Plotly.extendTraces
This function has comparable performance to Plotly.react and is faster than redrawing the whole plot with Plotly.newPlot.
This allows you to add data to traces in an existing graphDiv.


// extend one trace
Plotly.extendTraces(graphDiv, {y: [[rand()]]}, [0])

// extend multiple traces
Plotly.extendTraces(graphDiv, {y: [[rand()], [rand()]]}, [0, 1])

// extend multiple traces up to a maximum of 10 points per trace
Plotly.extendTraces(graphDiv, {y: [[rand()], [rand()]]}, [0, 1], 10)


See the Pen Plotly.extendTraces by plotly (@plotly) on CodePen.


Plotly.prependTraces
This function has comparable performance to Plotly.react and is faster than redrawing the whole plot with Plotly.newPlot.
This allows you to prepend data to an existing trace graphDiv.


// prepend one trace
Plotly.prependTraces(graphDiv, {y: [[rand()]]}, [0])

// prepend multiple traces
Plotly.prependTraces(graphDiv, {y: [[rand()], [rand()]]}, [0, 1])

// prepend multiple traces up to a maximum of 10 points per trace
Plotly.prependTraces(graphDiv, {y: [[rand()], [rand()]]}, [0, 1], 10)


Plotly.addFrames
This function has comparable performance to Plotly.react and is faster than redrawing the whole plot with Plotly.newPlot.
This allows you to add animation frames to a graphDiv. The group or name attribute of a frame can
be used by Plotly.animate in place of a frame object (or array of
frame objects).
See example here.

Plotly.animate
Add dynamic behaviour to plotly graphs with Plotly.animate.



Signature


  Plotly.animate(graphDiv, frameOrGroupNameOrFrameList, animationAttributes)
  
    
      graphDiv
      DOM node or string id of a DOM node
      frameOrGroupNameOrFrameList
      A frame to be animated or an array of frames to be animated in sequence. Frames added by
      Plotly.addFrames which have a
      group attribute, can be animated by passing their group name here.
      Similarly, you can reference frames by an array of strings of frame name values.
      animationAttributes
      An object, see documentation for examples.
    
  






Plotly.newPlot('graph', [{
  x: [1, 2, 3],
  y: [0, 0.5, 1],
  line: {simplify: false},
}]);

function randomize() {
  Plotly.animate('graph', {
    data: [{y: [Math.random(), Math.random(), Math.random()]}],
    traces: [0],
    layout: {}
  }, {
    transition: {
      duration: 500,
      easing: 'cubic-in-out'
    },
	  frame: {
		  duration: 500
	  }
  })
}


See the Pen Plotly.animate by plotly (@plotly) on CodePen.



Plotly.purge

Using purge will clear the div, and remove any Plotly plots that have been placed in it.

// purge will be used on the div that you wish clear of Plotly plots
Plotly.purge(graphDiv);


See the Pen Plotly.purge by plotly (@plotly) on CodePen.


Plotly.toImage

toImage will generate a promise to an image of the plot in data URL format.

// Plotly.toImage will turn the plot in the given div into a data URL string
// toImage takes the div as the first argument and an object specifying image properties as the other
Plotly.toImage(graphDiv, {format: 'png', width: 800, height: 600}).then(function(dataUrl) {
    // use the dataUrl
})


See the Pen Plotly.toImage by plotly (@plotly) on CodePen.


Plotly.downloadImage

downloadImage will trigger a request to download the image of a Plotly plot.

// downloadImage will accept the div as the first argument and an object specifying image properties as the other
Plotly.downloadImage(graphDiv, {format: 'png', width: 800, height: 600, filename: 'newplot'});


See the Pen Plotly.toImage by plotly (@plotly) on CodePen.


Using events

Plots emit events prefixed with plotly_ when clicked or hovered over, and event handlers can be bound to events using the on method that is exposed by the plot div object. For more information and examples of how to use Plotly events see: https://plotly.com/javascript/plotlyjs-events/.\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
            
                > Event Handlers
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Event Handlers
                  
                  in 
                  JavaScript
                  
                  
                
                Definitions and examples of how to use Plotly.js event handlers to add additional interactive capabilities to Plotly charts. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Using Plotly.js Events
          
        

        
          
            
              Plotly graphs emit events prefixed with plotly_ (i.e. 'plotly_click', 'plotly_hover', 'plotly_relayout') when interacted with (clicked, hovered, zoomed). Event handlers can be bound to events using the .on method that is exposed by the plot div object.

In addition to the event handler, some events emit additional information about the point(s) or plot  interacted with. The following documentation organizes Plotly events based on the accessible information emitted with the event: event data, update data, or no additional data. The following page provides a description and example of each Plotly event as well as the structure of the data or update returned with the event.

            
            
              
                myDiv.on('plotly_event', function(){
    	// do something;
	});


              
            
            
          
          
        
    
    
      
        
          
            Simple Event Example
          
        

        
          
            
              Here's a simple example using a Plotly event. Click on a point on the chart below to see an alert triggered by the plotly_click event.

            
            
              
                var myPlot = document.getElementById('myDiv'),
    x = [1, 2, 3, 4, 5],
    y = [10, 20, 30, 20, 10],
    data = [{x:x, y:y, type:'scatter',
             mode:'markers', marker:{size:20}
            }],
    layout = {hovermode:'closest',
              title: {text: 'Click on Points'}
     };

Plotly.newPlot('myDiv', data, layout);

myPlot.on('plotly_click', function(){
    alert('You clicked this Plotly chart!');
});

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Event Data
          
        

        
          
            
              Many Plotly events emit event data when the event is triggered. Event data is information about the data point related to the event (i.e. the point clicked).
The following events emit event data: plotly_click, plotly_hover, plotly_unhover, plotly_selecting, and plotly_selected.
Event data differs depending on the type of plot the user is interacting with. The event data structure for Cartesian (2D) plots, 3D plots, and maps can be found below, along with examples of each event.

            
            
              
                // Cartesian
{
  points: [{
    curveNumber: 1,  // index in data of the trace associated with the selected point
    pointNumber: 1,  // index of the selected point
    x: 1,        // x value
    y: 1,      // y value
    data: {/* */},       // ref to the trace as sent to Plotly.newPlot associated with the selected point
    fullData: {/* */},   // ref to the trace including all of the default attributes
   xaxis: {/* */},   // ref to x-axis object (i.e layout.xaxis) associated with the selected point
   yaxis: {/* */}    // ref to y-axis object " "
  }, {
    /* similarly for other selected points */
  }]
}

// Cartesian Histograms
{
  points: [{
    curveNumber: 1,  // index in data of the trace associated with the selected point
    pointNumbers: [1, 5, 28, 33, 41, ...],  // Array of indices of the points aggregated into selected bin
    x: 1,        // x value
    y: 45,      // y value
    data: {/* */},       // ref to the trace as sent to Plotly.newPlot associated with the selected point
    fullData: {/* */},   // ref to the trace including all of the default attributes
   xaxis: {/* */},   // ref to x-axis object (i.e layout.xaxis) associated with the selected point
   yaxis: {/* */}    // ref to y-axis object " "
  }, {
    /* similarly for other selected points */
  }]
}

// 3D
{
  points: [{
    curveNumber: 2,  // index in data of the trace associated with the selected point
    pointNumber: 2,  // index of the selected point
    x: 5,        // x value
    y: 600,      // y value
    z: 12,       // z value
    data: {/* */},       // ref to the trace as sent to Plotly.newPlot associated with the selected point
    fullData: {/* */},   // ref to the trace including all of the default attributes
   xaxis: {/* */},   // ref to x-axis object (i.e layout.xaxis) associated with the selected point
   yaxis: {/* */}    // ref to y-axis object " "
   zaxis: {/* */}    // ref to z-axis object " "
  }, {
    /* similarly for other selected points */
  }]
}

// Maps
{
  points: [{
    curveNumber: 2,  // index in data of the trace associated with the selected point
    pointNumber: 2,  // index of the selected point
    lat: 50,        // latitude value
    lon: -12,      // longitude value
    data: {/* */},       // ref to the trace as sent to Plotly.newPlot associated with the selected point
    fullData: {/* */},   // ref to the trace including all of the default attributes
    location:       //
  }, {
    /* similarly for other selected points */
  }]
}

              
            
            
          
          
        
    
    
      
        
          
            Click Event
          
        

        
          
            
              Here's a simple example of using the data returned from the plotly_click event to restyle the graph. After creating a plot, we can change the color of the point clicked on by updating the marker.color array at the index of the point we clicked on then using Plotly.restyle() to apply the update. For more examples of using plotly_click events, see: https://plotly.com/javascript/click-events/

            
            
              
                var myPlot = document.getElementById('myDiv'),
    x = [1, 2, 3, 4, 5, 6],
    y = [1, 2, 3, 2, 3, 4],
    colors = ['#00000','#00000','#00000',
              '#00000','#00000','#00000'],
    data = [{x:x, y:y, type:'scatter',
             mode:'markers', marker:{size:16, color:colors}}],
    layout = {
        hovermode:'closest',
        title: {text: 'Click on a Point to Change Color<br>Double Click (anywhere) to Change it Back'}
     };

Plotly.newPlot('myDiv', data, layout);

myPlot.on('plotly_click', function(data){
  var pn='',
      tn='',
      colors=[];
  for(var i=0; i < data.points.length; i++){
    pn = data.points[i].pointNumber;
    tn = data.points[i].curveNumber;
    colors = data.points[i].data.marker.color;
  };
  colors[pn] = '#C54C82';

  var update = {'marker':{color: colors, size:16}};
  Plotly.restyle('myDiv', update, [tn]);
});

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Legend Click Events
          
        

        
          
            
              plotly_legendclick and plotly_legenddoubleclick allow customization of the plotly legend. The default behaviour of plotly_legendclick is to hide a trace and the default behavior of plotly_legenddoubleclick is to select one trace and hide all the others.
We can add to the default behaviour by creating a new plotly_legendclick event with a function of our choice. We can also disable the default behaviour by creating a function that returns false. In the example below, we do both in order to create a plotly_legendclick event which changes the marker color back to black instead of erasing the trace.

            
            
              
                var myPlot = document.getElementById('myDiv'),
    x = [1, 2, 3, 4, 5, 6],
    y = [1, 2, 3, 2, 3, 4],
    y2 = [1, 4, 7, 6, 1, 5],
    colors = [['#5C636E','#5C636E','#5C636E','#5C636E','#5C636E','#5C636E'],
              ['#393e46','#393e46','#393e46','#393e46','#393e46','#393e46']],
    data = [{x:x, y:y, type:'scatter',
             mode:'line', line:{ color:'#5C636E'},marker:{size:16, color:colors[0]}},
            {x:x, y:y2, type:'scatter',
             mode:'line',line:{ color:'#393e46'}, marker:{size:16, color:colors[1]}}],
    layout = {
        showlegend: true,
        hovermode:'closest',
        title: {text: 'Click on a Point to Change Color<br>Click on a Trace in the Legend to Change Back One Trace Only'}
     };

Plotly.newPlot('myDiv', data, layout);

myPlot.on('plotly_click', function(data){
  var pn='',
      tn='',
      colors=[];
  for(var i=0; i < data.points.length; i++){
    pn = data.points[i].pointNumber;
    tn = data.points[i].curveNumber;
    colors = data.points[i].data.marker.color;
  };
  colors[pn] = '#C54C82';
  var update = {'marker':{color: colors, size:16}};
  Plotly.restyle('myDiv', update,[tn]);
});

myPlot.on('plotly_legendclick', function(data){
  var trColors = [['#5C636E','#5C636E','#5C636E','#5C636E','#5C636E','#5C636E'],
              ['#393e46','#393e46','#393e46','#393e46','#393e46','#393e46']];
  var update = {'marker':{color: trColors[data.curveNumber], size:16}};
  Plotly.restyle('myDiv', update,[data.curveNumber]);
  return false;
});

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Hover Event
          
        

        
          
            
              Here's a simple example of using the data returned from the plotly_hover and plotly_unhover events to restyle the graph. After creating a plot, we can change the color of the point hovered on by updating the marker.color array at the index of the point we hovered on then using Plotly.restyle() to apply the update. Then we can use plotly_unhover to change the marker.color back to the original color. For more examples of using plotly_hover events, see: https://plotly.com/javascript/hover-events/

            
            
              
                var myPlot = document.getElementById('myDiv'),
    x = [1, 2, 3, 4, 5, 6, 7],
    y = [1, 2, 3, 2, 3, 4, 3],
    colors =['#00000','#00000','#00000',
             '#00000','#00000','#00000',
             '#00000'],
    data = [{x:x, y:y,
             type:'scatter',
             mode:'markers', marker:{size:16, color:colors}}],
    layout = {
        hovermode:'closest',
        title: {text: 'Hover on a Point<br>to Change Color'}
     };

Plotly.newPlot('myDiv', data, layout);

myPlot.on('plotly_hover', function(data){
  var pn='',
      tn='',
      colors=[];
  for(var i=0; i < data.points.length; i++){
    pn = data.points[i].pointNumber;
    tn = data.points[i].curveNumber;
    colors = data.points[i].data.marker.color;
  };
  colors[pn] = '#C54C82';

  var update = {'marker':{color: colors, size:16}};
  Plotly.restyle('myDiv', update, [tn]);
});

myPlot.on('plotly_unhover', function(data){
  var pn='',
      tn='',
      colors=[];
  for(var i=0; i < data.points.length; i++){
    pn = data.points[i].pointNumber;
    tn = data.points[i].curveNumber;
    colors = data.points[i].data.marker.color;
  };
  colors[pn] = '#00000';

  var update = {'marker':{color: colors, size:16}};
  Plotly.restyle('myDiv', update, [tn]);
});

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Select Event
          
        

        
          
            
              Here's a simple example using the data returned from the plotly_selected event. plotly_selected returns event data for all points selected simultaneously. After creating a scatter plot with random data and two histograms that display the x and y distributions of that random data, we can select points by clicking and dragging on the plot. Upon plotly_selected the histograms will update to display the distribution of the x and y values of the selected points. The color of the scatter plot will be updated as well to highlight the selected points. For more examples of using plotly_selected and plotly_selecting events, see: https://plotly.com/javascript/lasso-selection/

            
            
              
                var graphDiv = document.getElementById('myDiv');
var N = 1000;
var color1 = '#7b3294';
var color1Light = '#c2a5cf';
var colorX = '#ffa7b5';
var colorY = '#fdae61';

function randomArray() {
  var out = new Array(N);
  for(var i = 0; i < N; i++) {
    out[i] = Math.random();
  }
  return out;
}
var x = randomArray();
var y = randomArray();

Plotly.newPlot(graphDiv, [{
  type: 'scatter',
  mode: 'markers',
  x: x,
  y: y,
  xaxis: 'x',
  yaxis: 'y',
  name: 'random data',
  marker: {color: color1, size: 10}
}, {
  type: 'histogram',
  x: x,
  xaxis: 'x2',
  yaxis: 'y2',
  name: 'x coord dist.',
  marker: {color: colorX}
}, {
  type: 'histogram',
  x: y,
  xaxis: 'x3',
  yaxis: 'y3',
  name: 'y coord dist.',
  marker: {color: colorY}
}], {
  title: {
    text: 'Lasso around the scatter points to see sub-distributions'
  },
  dragmode: 'lasso',
  xaxis: {
    zeroline: false,
  },
  yaxis: {
    domain: [0.55, 1],
  },
  xaxis2: {
    domain: [0, 0.45],
    anchor: 'y2',
  },
  yaxis2: {
    domain: [0, 0.45],
    anchor: 'x2'
  },
  xaxis3: {
    domain: [0.55, 1],
    anchor: 'y3'
  },
  yaxis3: {
    domain: [0, 0.45],
    anchor: 'x3'
  }
});

graphDiv.on('plotly_selected', function(eventData) {
  var x = [];
  var y = [];

  var colors = [];
  for(var i = 0; i < N; i++) colors.push(color1Light);

  eventData.points.forEach(function(pt) {
    x.push(pt.x);
    y.push(pt.y);
    colors[pt.pointNumber] = color1;
  });

  Plotly.restyle(graphDiv, {
    x: [x, y],
    xbins: {}
  }, [1, 2]);

  Plotly.restyle(graphDiv, 'marker.color', [colors], [0]);
});

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Update Data
          
        

        
          
            
              The following Plotly events emit update information when the event is triggered: plotly_restyle and plotly_relayout.
The update emitted with plotly_restyle is similar across plot types and includes an array containing an object of the newly updated
attributes and an array of the trace numbers that were updated.

For Cartesian (2D) plots, plotly_relayout emits only the xaxis and yaxis ranges which were directly changed by the triggering event.
For 3D plots, layout.scene.camera data is similarly emitted.
See the full structures below:

            
            
              
                // plotly_restyle update
[
  {update},  // update object -- attribute updated: new value
  [0]       // array of traces updated
]

// plotly_relayout update: Cartesian
//// Upon resizing plot:
{
 xaxis.range[0]: , // new value if xaxis.range[0] was updated
 xaxis.range[1]: ,
 yaxis.range[0]: , // new value if yaxis.range[0] was updated
 yaxis.range[1]:
}
//// Upon autosizing plot:
{
 xaxis.autorange: true,
 yaxis.autorange: true
}

// plotly_relayout update: 3D
// a subset of the following data will be emitted depending on
// which attributes were changed by the triggering event.
{
  scene: {
    center: { // https://plotly.com/javascript/reference/layout/scene/#layout-scene-camera-center
      x: 0,
      y: 0,
      z: 0
    }
  },
  {
    eye: { // https://plotly.com/javascript/reference/layout/scene/#layout-scene-camera-eye
      x: 1.25,
      y: 1.25,
      z: 1.25
    }
  }.
  {
    up: { // https://plotly.com/javascript/reference/layout/scene/#layout-scene-camera-up
      x: 0,
      y: 0,
      z: 1
    }
  }
}

              
            
            
          
          
        
    
    
      
        
          
            Additional Events
          
        

        
          
            
              The following Plotly events do not emit additional data or update information: plotly_webglcontextlost, plotly_afterplot, plotly_autosize, plotly_deselect, plotly_doubleclick, plotly_redraw, and plotly_animated. These event handlers can be used to notify or trigger an additional event with the following syntax:

            
            
              
                function eventTriggeredHandler() {
   /*  add your event triggered handler here */
}

myDiv.on('plotly_event', eventTriggeredHandler);
              
            
            
          
          
        
    
    
      
        
          
            Webgl Context Lost Event
          
        

        
          
            
              Plotly graphs which use WebGL receive a "WebGL context" from the browser which gives them access to gpu resources.
A program may lose its WebGL context if the browser is overloaded with them and is forced to shut one down.
The event handler: plotly_webglcontextlost, can be used to trigger an event after a graph loses it's WebGL context.

            
            
            
          
          
        
    
    
      
        
          
            Afterplot Event
          
        

        
          
            
              The event handler: plotly_afterplot, can be used to trigger an event each time a chart is plotted. This also includes re-plotting after the restyling or relayout of a plot.
Users also have the option of adding a post-plot handler to the plot call with the following syntax: Plotly.newPlot('myDiv', data, layout, config).then(postPlotHandler);

The simple example below logs a console message each time the chart is plotted. Zoom or pan on the graph below to trigger the plotly_afterplot handler.

            
            
              
                var myPlot = document.getElementById('myDiv'),
    N = 20,
    x = d3.range(N),
    y = d3.range(N).map( d3.random.normal() ),
    data = [{x:x, y:y, type:'scatter',
            mode:'markers', marker:{size:14}}
           ];

Plotly.newPlot('myDiv', data);

myPlot.on('plotly_afterplot', function(){
    console.log('done plotting');
});

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Double Click Event
          
        

        
          
            
              In addition to plotly_click, plotly_doubleclick can be used as an event handle in Plotly charts as well. You may already be familiar with plotly_doubleclick if you regularly use Plotly's zoom and pan functionality, double clicking on the graph will restore the axes ranges after zooming into a specific area. Unlike plotly_click, a plotly_doubleclick is registered upon clicking anywhere on the graph (not just data points), therefore, plotly_doubleclick does not return data. In the following example, we'll build off of our plotly_click example, and reset the color of our data points upon double clicking anywhere on the graph.

            
            
              
                var myPlot = document.getElementById('myDiv'),
    x = [1, 2, 3, 4, 5, 6],
    y = [1, 2, 3, 2, 3, 4],
    colors = ['#00000','#00000','#00000',
              '#00000','#00000','#00000'],
    data = [{x:x, y:y, type:'scatter',
             mode:'markers', marker:{size:16, color:colors}}],
    layout = {
        hovermode:'closest',
        title: {text: 'Click on a Point to Change Color<br>Double Click (anywhere) to Change it Back'}
     };

Plotly.newPlot('myDiv', data, layout);

myPlot.on('plotly_click', function(data){
  var pn='',
      tn='',
      colors=[];
  for(var i=0; i < data.points.length; i++){
    pn = data.points[i].pointNumber;
    tn = data.points[i].curveNumber;
    colors = data.points[i].data.marker.color;
  };
  colors[pn] = '#C54C82';

  var update = {'marker':{color: colors, size:16}};
  Plotly.restyle('myDiv', update, [tn]);
});

myPlot.on('plotly_doubleclick', function(data){
  var orgColors = ['#00000','#00000','#00000',
                   '#00000','#00000','#00000'];
  var update = {'marker':{color: orgColors, size:16}};
  Plotly.restyle('myDiv', update);
});\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Fundamentals
            
            
                > Configuration Options
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Configuration Options
                  
                  in 
                  JavaScript
                  
                  
                
                How to set the configuration options for figures in JavaScript. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

The plotly.js config argument sets properties like the mode bar buttons and the interactivity in the chart.
It's the last argument in Plotly.newPlot calls.


View the full list of configuration options in the

plotly.js source code on GitHub
.




    
      
        
          
            Scroll and Zoom
          
        

        
          
            
            
              
                // mousewheel or two-finger scroll zooms the plot

var trace1 = {
    x:['2020-10-04', '2021-11-04', '2023-12-04'],
    y: [90, 40, 60],
    type: 'scatter'
};

var data = [trace1];

var layout = {
    title: {
        text: 'Scroll and Zoom'
    },
    showlegend: false
};

Plotly.newPlot('myDiv', data, layout, {scrollZoom: true});

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Editable Mode
          
        

        
          
            
              In editable mode, users can edit the chart title, axis labels and trace names in the legend.

            
            
              
                var trace1 = {
  x: [0, 1, 2, 3, 4],
  y: [1, 5, 3, 7, 5],
  mode: 'lines+markers',
  type: 'scatter'
};

var trace2 = {
  x: [1, 2, 3, 4, 5],
  y: [4, 0, 4, 6, 8],
  mode: 'lines+markers',
  type: 'scatter'
};

var data = [trace1, trace2];
var layout = {
  title: {
      text: 'Click Here<br>to Edit Chart Title'
  }
};

Plotly.newPlot('myDiv', data, layout, {editable: true});
              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Making a Static Chart
          
        

        
          
            
            
              
                var trace1 = {
    x: [0, 1, 2, 3, 4, 5, 6],
    y: [1, 9, 4, 7, 5, 2, 4],
    mode: 'markers',
    marker: {
        size: [20, 40, 25, 10, 60, 90, 30],
    }
};

var data = [trace1];

var layout = {
    title: {
        text: 'Create a Static Chart'
    },
    showlegend: false
};

Plotly.newPlot('myDiv', data, layout, {staticPlot: true});

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Customize Download Plot Options
          
        

        
          
            
            
              
                var trace1 = {
    x: [0, 1, 2, 3, 4, 5, 6],
    y: [1, 9, 4, 7, 5, 2, 4],
    mode: 'markers',
    marker: {
        size: [20, 40, 25, 10, 60, 90, 30],
    }
};

var data = [trace1];

var layout = {
  title: {
      text: 'Download Chart as SVG instead of PNG'
  },
  showlegend: false
};

var config = {
  toImageButtonOptions: {
    format: 'svg', // one of png, svg, jpeg, webp
    filename: 'custom_image',
    height: 500,
    width: 700,
    scale: 1 // Multiply title/legend/axis/canvas sizes by this factor
  }
};

Plotly.newPlot('myDiv', data, layout, config);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Force The Modebar to Always Be Visible
          
        

        
          
            
              When users hover over a figure generated with plotly.js, a modebar appears in the top-right of the figure. This presents users with several options for interacting with the figure.

By default, the modebar is only visible while the user is hovering over the chart. If you would like the modebar to always be visible regardless of whether or not the user is currently hovering over the figure, set the displayModeBar attribute in the config of your figure to true.

            
            
              
                var data = [{
    y:['Marc', 'Henrietta', 'Jean', 'Claude', 'Jeffrey', 'Jonathan', 'Jennifer', 'Zacharias'],
      x: [90, 40, 60, 80, 75, 92, 87, 73],
      type: 'bar',
      orientation: 'h'}]

var layout = {
    title: {
        text: 'Always Display the Modebar'
    },
    showlegend: false
}

Plotly.newPlot('myDiv', data, layout, {displayModeBar: true})

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Never Display The Modebar
          
        

        
          
            
              When users hover over a figure generated with plotly.js, a modebar appears in the top-right of the figure. This presents users with several options for interacting with the figure.

By default, the modebar is only visible while the user is hovering over the chart. If you would like the modebar to never be visible, then set the displayModeBar attribute in the config of your figure to false.

            
            
              
                var trace1 = {
    x:['Zebras', 'Lions', 'Pelicans'],
    y: [90, 40, 60],
    type: 'bar',
    name: 'New York Zoo'
};

var trace2 = {
    x:['Zebras', 'Lions', 'Pelicans'],
    y: [10, 80, 45],
    type: 'bar',
    name: 'San Francisco Zoo'
};

var data = [trace1, trace2];

var layout = {
    title: {
        text: 'Hide the Modebar'
    },
    showlegend: true
};

Plotly.newPlot('myDiv', data, layout, {displayModeBar: false});

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Remove ModeBar Buttons
          
        

        
          
            
              To delete buttons from the modebar, pass an array of strings containing the names of the buttons you want to remove to the modeBarButtonsToRemove attribute in the figure's configuration object. Note that different chart types have different default modebars. The following is a list of all the modebar buttons and the chart types they are associated with:
 
      -'2D', zoom2d, pan2d, select2d, lasso2d, zoomIn2d, zoomOut2d, autoScale2d, resetScale2d 
      -'3D', zoom3d, pan3d, orbitRotation, tableRotation, handleDrag3d, resetCameraDefault3d, resetCameraLastSave3d, hoverClosest3d 
      -'Cartesian', hoverClosestCartesian, hoverCompareCartesian 
      -'Geo', zoomInGeo, zoomOutGeo, resetGeo, hoverClosestGeo 
      -'Other', hoverClosestGl2d, hoverClosestPie, toggleHover, resetViews, toImage, sendDataToCloud, toggleSpikelines, resetViewMapbox 
 

            
            
              
                var data = [{
    x:['trees', 'flowers', 'hedges'],
    y: [90, 130, 40],
    type: 'bar'}]

var layout = {
    title: {
        text: 'Remove Modebar Buttons'
    },
    showlegend: false
}

Plotly.newPlot('myDiv', data, layout, {modeBarButtonsToRemove: ['toImage']})
              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Add Buttons to ModeBar
          
        

        
          
            
              The following example shows how to add a button to your modebar, either by using one of the Plotly icons or an arbitrary icon with a custom behaviour.

            
            
              
                var icon1 = {
  'width': 500,
  'height': 600,
  'path': 'M224 512c35.32 0 63.97-28.65 63.97-64H160.03c0 35.35 28.65 64 63.97 64zm215.39-149.71c-19.32-20.76-55.47-51.99-55.47-154.29 0-77.7-54.48-139.9-127.94-155.16V32c0-17.67-14.32-32-31.98-32s-31.98 14.33-31.98 32v20.84C118.56 68.1 64.08 130.3 64.08 208c0 102.3-36.15 133.53-55.47 154.29-6 6.45-8.66 14.16-8.61 21.71.11 16.4 12.98 32 32.1 32h383.8c19.12 0 32-15.6 32.1-32 .05-7.55-2.61-15.27-8.61-21.71z'
}

var colors = ['green', 'red', 'blue']
var data = [{
  mode: 'lines',
  y: [2, 1, 2],
  line: {color: colors[0], width: 3, shape: 'spline'}
}]

var layout = {
  title: {
    text: 'add mode bar button with custom icon'
  }
}

var config = {
  displayModeBar: true,
  modeBarButtonsToAdd: [
    {
      name: 'color toggler',
      icon: icon1,
      click: function(gd) {
        var newColor = colors[Math.floor(3 * Math.random())]
        Plotly.restyle(gd, 'line.color', newColor)
      }},
    {
      name: 'button1',
      icon: Plotly.Icons.pencil,
      direction: 'up',
      click: function(gd) {alert('button1')
    }}],
  modeBarButtonsToRemove: ['pan2d','select2d','lasso2d','resetScale2d','zoomOut2d']}

Plotly.newPlot('myDiv', data, layout, config)
              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Display the `Edit Chart` Link
          
        

        
          
            
              Note: showLink now defaults to false.

            
            
              
                var trace1 = {
  x: [0, 1, 2, 3, 4, 5, 6],
  y: [1, 9, 4, 7, 5, 2, 4],
  mode: 'lines+markers',
  type: 'scatter'
};

var data = [trace1];

var layout = {
  title: {
      text: 'Display the Edit Chart Link'
  }
};

var config = {
  showLink: true,
  plotlyServerURL: "https://chart-studio.plotly.com"
};

Plotly.newPlot('myDiv', data, layout, config);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Customize The `Edit Chart` Link Text
          
        

        
          
            
            
              
                var data = [{
  z: [[0, 1, 2, 3, 4, 5, 6],
      [1, 9, 4, 7, 5, 2, 4],
      [2, 4, 2, 1, 6, 9, 3]],
  type: 'heatmap'}]

var layout = {
  title: {
      text: 'Customize The Edit Chart Link Text'
  }
};

var config = {
  showLink: true,
  plotlyServerURL: "https://chart-studio.plotly.com",
  linkText: 'This text is custom!'
};

Plotly.newPlot('myDiv', data, layout, config)

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Display Edit in Chart Studio Modebar Button
          
        

        
          
            
            
              
                var data = [{
  values: [19, 26, 55],
  labels: ['Residential', 'Non-Residential', 'Utility'],
  type: 'pie'
}];

var layout = {
  title: {
      text: 'Show Edit in Chart Studio Modebar Button'
  }
};

var config = {
  showEditInChartStudio: true,
  plotlyServerURL: "https://chart-studio.plotly.com"
};

Plotly.newPlot('myDiv', data, layout, config);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Change the Default Locale
          
        

        
          
            
              Load and register a non-default locale by adding <script src="https://cdn.plot.ly/plotly-locale-YOUR-LOCALE-latest.js"></script>
to your HTML after the plotly.js tag and then reference the locale in the config. For Example, the codepen example below has
<script src="https://cdn.plot.ly/plotly-locale-fr-latest.js"></script> in its HTML.  For more information and a list of available locales, see
https://github.com/plotly/plotly.js/blob/master/dist/README.md#to-include-localization

            
            
              
                var trace1 = {
  type: "scatter",
  mode: "lines",
  x: ['2018-01-01', '2018-08-31'],
  y: [10, 5],
  line: {color: '#17BECF'}
};

var trace2 = {
  type: "scatter",
  mode: "lines",
  x: ['2018-01-01', '2018-08-31'],
  y: [3,7],
  line: {color: '#7F7F7F'}
};

var data = [trace1,trace2];

var layout = {
  title: {
    text: 'Custom Locale'
  }
};

var config = {locale: 'fr'};

Plotly.newPlot('myDiv', data, layout, config);
              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Hide the Plotly Logo on the Modebar
          
        

        
          
            
            
              
                var trace1 = {
    x:['trees', 'flowers', 'hedges'],
    y: [90, 130, 40],
    type: 'bar'
};

var data = [trace1];

var layout = {
    title: {
        text: 'Hide the Plotly Logo on the Modebar'
    },
    showlegend: false
};

Plotly.newPlot('myDiv', data, layout, {displaylogo: false});

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Making a Responsive Chart
          
        

        
          
            
            
              
                var trace1 = {
    type: 'bar',
    x: [1, 2, 3, 4],
    y: [5, 10, 2, 8],
    marker: {
        color: '#C8A2C8',
        line: {
            width: 2.5
        }
    }
};

var data = [ trace1 ];

var layout = {
    title: {
      text: 'Responsive to window size!'
    },
    font: {size: 18}
};

Plotly.newPlot('myDiv', data, layout, {responsive: true});

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Double Click Delay
          
        

        
          
            
              Sets the maximum delay between two consecutive clicks to be interpreted as a double-click in ms. This is the time interval between first mousedown, and' second mouseup. The default timing is 300 ms (less than half a second).
This setting propagates to all on-subplot double clicks, (except for geo, map, and mapbox).

            
            
              
                var data = [{
  type: "bar",
  y: [3, 5, 3, 2],
  x: ["2019-09-02", "2019-10-10", "2019-11-12", "2019-12-22"]
}];

var layout = {xaxis: {type: 'date'}};

var config = {doubleClickDelay: 1000}

Plotly.newPlot("myDiv", data, layout, config)\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Fundamentals
            
            
            
        
    
    


                
                
	
		
		

			
				Plotly.js Fundamentals
				Plotly.js makes interactive, publication-quality graphs online. Tutorials and tips about fundamental features of Plotly JS
				

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




			
		
	


		
        



































































    

        

    
    
        

            

    
        Configuration Options
        
            View Tutorial
            
        
    




            

            

    
        Responsive / Fluid Layouts
        
            View Tutorial
            
        
    




            

            

    
        uirevision in Plotly.react
        
            View Tutorial
            
        
    




            

            

    
        React Plotly.js
        
            View Tutorial
            
        
    




            

            

    
        Analytical Apps with Dash
        
            View Tutorial
            
        
    




            

            

    
        Colorscales
        
            View Tutorial
            
        
    




            

            

    
        Colorway
        
            View Tutorial
            
        
    




            

            

    
        Images
        
            View Tutorial
            
        
    




            

            

    
        LaTeX
        
            View Tutorial
            
        
    




            

            

    
        Styling Markers
        
            View Tutorial
            
        
    




            

            

    
        3D Axes
        
            View Tutorial
            
        
    




            

            

    
        3D Hover Options
        
            View Tutorial
            
        
    




            

            

    
        3D Surface Lighting
        
            View Tutorial
            
        
    




            

            

    
        Axes
        
            View Tutorial
            
        
    




            

            

    
        Horizontal Legends
        
            View Tutorial
            
        
    




            

            

    
        Hover Text and Formatting
        
            View Tutorial
            
        
    




            

            

    
        Setting the Title, Legend Entries, and Axis Titles
        
            View Tutorial
            
        
    




            

            

    
        Layout Template Examples
        
            View Tutorial
            
        
    




            

            

    
        Legends
        
            View Tutorial
            
        
    




            

            

    
        Setting Graph Size
        
            View Tutorial
            
        
    




            

            

    
        Formatting Ticks
        
            View Tutorial
            
        
    




            

            

    
        Shapes
        
            View Tutorial
            
        
    




            

            

    
        Text Template
        
            View Tutorial
            
        
    




            

            

    
        Static Image Export
        
            View Tutorial
            
        
    




            

            

    
        Text and Annotations
        
            View Tutorial
            
        
    




            

            

    
        Version 3 Changes
        
            View Tutorial\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Basic Charts
            
            
            
        
    
    


                
                
	
		
		

			
				Plotly.js Basic Charts
				Plotly.js makes interactive, publication-quality graphs online. Examples of how to make basic charts.
				

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




			
		
	


		
        

















































    
        

    
    
        


                        

    
        Scatter Plots
        
            View Tutorial
            
        
    




            


                        

    
        Line Charts
        
            View Tutorial
            
        
    




            


                        

    
        Bar Charts
        
            View Tutorial
            
        
    




            


                        

    
        Pie Charts
        
            View Tutorial
            
        
    




            


                        

    
        Bubble Charts
        
            View Tutorial
            
        
    




            


                        

    
        Dot Plots
        
            View Tutorial
            
        
    




            


                        

    
        Filled Area Plots
        
            View Tutorial
            
        
    




            


                        

    
        Horizontal Bar Charts
        
            View Tutorial
            
        
    




            


                        

    
        Sunburst Charts
        
            View Tutorial
            
        
    




            


                        

    
        Sankey Diagrams
        
            View Tutorial
            
        
    




            


                        

    
        Treemaps
        
            View Tutorial
            
        
    




            


                        

    
        Tables
        
            View Tutorial
            
        
    




            


                        

    
        Multiple Chart Types
        
            View Tutorial
            
        
    




            


                        

    
        WebGL vs SVG
        
            View Tutorial\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Statistical Charts
            
            
            
        
    
    


                
                
	
		
		

			
				Plotly.js Statistical Charts
				Plotly.js makes interactive, publication-quality graphs online. Examples of how to make statistical charts such as boxplots and histograms.
				

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




			
		
	


		
        













































    
        

    
    
        

                        

    
        Error Bars
        
            View Tutorial
            
        
    




            

                        

    
        Box Plots
        
            View Tutorial
            
        
    




            

                        

    
        Histograms
        
            View Tutorial
            
        
    




            

                        

    
        2d Density Plots
        
            View Tutorial
            
        
    




            

                        

    
        Continuous Error Bars
        
            View Tutorial
            
        
    




            

                        

    
        2D Histograms
        
            View Tutorial
            
        
    




            

                        

    
        SPC Control Charts
        
            View Tutorial
            
        
    




            

                        

    
        Violin Plot
        
            View Tutorial
            
        
    




            

                        

    
        Parallel Categories Diagram
        
            View Tutorial
            
        
    




            

                        

    
        Splom
        
            View Tutorial
            
        
    




            

                        

    
        2D Histogram Contour
        
            View Tutorial\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Scientific Charts
            
            
            
        
    
    


                
                
	
		
		

			
				Plotly.js Scientific Charts
				Plotly.js makes interactive, publication-quality graphs online. Examples of how to make scientific graphs such as heatmaps and contour plots.
				

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




			
		
	


		
        

















































    
        

    
    
        

                        

    
        Contour Plots
        
            View Tutorial
            
        
    




            

                        

    
        Heatmaps
        
            View Tutorial
            
        
    




            

                        

    
        Ternary Plots
        
            View Tutorial
            
        
    




            

                        

    
        Parallel Coordinates Plot
        
            View Tutorial
            
        
    




            

                        

    
        Log Plots
        
            View Tutorial
            
        
    




            

                        

    
        Wind Rose Charts
        
            View Tutorial
            
        
    




            

                        

    
        Ternary Contour Plots
        
            View Tutorial
            
        
    




            

                        

    
        Radar Charts
        
            View Tutorial
            
        
    




            

                        

    
        Carpet Plot
        
            View Tutorial
            
        
    




            

                        

    
        Carpet Scatter Plot
        
            View Tutorial
            
        
    




            

                        

    
        Carpet Contour Plot
        
            View Tutorial
            
        
    




            

                        

    
        Polar Charts
        
            View Tutorial\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Financial Charts
            
            
            
        
    
    


                
                
	
		
		

			
				Plotly.js Financial Charts
				Plotly.js makes interactive, publication-quality graphs online. Examples of how to make financial charts.
				

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




			
		
	


		
        











































    
        

    
    
        

                        

    
        Waterfall Charts
        
            View Tutorial
            
        
    




            

                        

    
        Indicators
        
            View Tutorial
            
        
    




            

                        

    
        Candlestick Charts
        
            View Tutorial
            
        
    




            

                        

    
        Funnel and Funnelarea Charts
        
            View Tutorial
            
        
    




            

                        

    
        Time Series
        
            View Tutorial
            
        
    




            

                        

    
        OHLC Charts
        
            View Tutorial
            
        
    




            

                        

    
        Gauge Charts
        
            View Tutorial
            
        
    




            

                        

    
        Bullet Charts
        
            View Tutorial\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Maps
            
            
            
        
    
    


                
                
	
		
		

			
				Plotly.js Maps
				Plotly.js makes interactive, publication-quality graphs online. Examples of how to make maps.
				

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




			
		
	


		
        

















































    
        

    
    
        

                        

    
        Migrate to Maplibre
        
            View Tutorial
            
        
    




            

                        

    
        Tile Map Layers
        
            View Tutorial
            
        
    




            

                        

    
        Tile Density Heatmap
        
            View Tutorial
            
        
    




            

                        

    
        Choropleth Tile Map
        
            View Tutorial
            
        
    




            

                        

    
        Lines on Maps
        
            View Tutorial
            
        
    




            

                        

    
        Bubble Maps
        
            View Tutorial
            
        
    




            

                        

    
        Scatter Plots on Maps
        
            View Tutorial
            
        
    




            

                        

    
        Scatter Plots on Tile Maps
        
            View Tutorial
            
        
    




            

                        

    
        Choropleth Maps
        
            View Tutorial
            
        
    




            

                        

    
        Filled Area on Tile Maps
        
            View Tutorial\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > 3D Charts
            
            
            
        
    
    


                
                
	
		
		

			
				Plotly.js 3D Charts
				Plotly.js makes interactive, publication-quality graphs online. Examples of how to make 3D graphs such as 3D scatter and surface charts.
				

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




			
		
	


		
        



















































    
        

    
    
        

                        

    
        3D Scatter Plots
        
            View Tutorial
            
        
    




            

                        

    
        Ribbon Plots
        
            View Tutorial
            
        
    




            

                        

    
        3D Surface Plots
        
            View Tutorial
            
        
    




            

                        

    
        3D Mesh Plots
        
            View Tutorial
            
        
    




            

                        

    
        3D Line Plots
        
            View Tutorial
            
        
    




            

                        

    
        Tri-Surf Plots
        
            View Tutorial
            
        
    




            

                        

    
        3D Cluster Graph
        
            View Tutorial
            
        
    




            

                        

    
        3D Cone Plots
        
            View Tutorial
            
        
    




            

                        

    
        3D Streamtube Plots
        
            View Tutorial
            
        
    




            

                        

    
        3D Isosurface Plots
        
            View Tutorial\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Subplots
            
            
            
        
    
    


                
                
	
		
		

			
				Plotly.js Subplots
				Plotly.js makes interactive, publication-quality graphs online. Examples of how to make subplots, insets, and multiple axes charts.
				

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




			
		
	


		
        













































    
        

    
    
        

                        

    
        Subplots
        
            View Tutorial
            
        
    




            

                        

    
        Inset Plots
        
            View Tutorial
            
        
    




            

                        

    
        3D Subplots
        
            View Tutorial
            
        
    




            

                        

    
        Mixed Subplots
        
            View Tutorial
            
        
    




            

                        

    
        Table Subplots
        
            View Tutorial
            
        
    




            

                        

    
        Multiple Axes
        
            View Tutorial\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            

            

            

            
            
            
        
    
    


                
                


    
        
        

            
                Plotly JavaScript Open Source Graphing Library
                
                    Built on top of d3.js and stack.gl, Plotly.js is a high-level, declarative charting library. plotly.js ships with over 40 chart types, including 3D charts, statistical graphs, and SVG maps.
                    plotly.js is free and open source and you can view the source, report issues or contribute on GitHub.
                
            
        
        
          
            

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




            
            
                Read more about plotly.js features
                

                

                    
                        Sophisticated chart types
                    
                    
                        plotly.js abstracts the types of statistical and scientific charts that you would find in packages like matplotlib, ggplot2, or MATLAB.
                    

                    
                    
                        
                    
                    d3.json('https://plotly.com/~DanielCarrera/13.json', function(figure){
                  var trace = {
                    x: figure.data[0].x, y: figure.data[0].y, z: figure.data[0].z,
                    type: 'contour', autocolorscale: false,
                    colorscale: [[0,"rgb(  0,  0,  0)"],[0.3,"rgb(230,  0,  0)"],[0.6,"rgb(255,210,  0)"],[1,"rgb(255,255,255)"]],
                    reversescale: true, zmax: 2.5, zmin: -2.5
                  };
                  var layout = {
                    title: {
                      text: 'turbulence simulation'
                  },
                    xaxis: {
                      title: {
                          text: 'radial direction'
                      },
                      showline: true,
                      mirror: 'allticks',
                      ticks: 'inside'
                    },
                    yaxis: {
                        title: {
                            text: 'vertical direction'
                        },
                        showline: true,
                        mirror: 'allticks',
                        ticks: 'inside'
                    },
                    margin: {l: 40, b: 40, t: 60},
                    annotations: [{
                      showarrow: false,
                      text: 'Credit: Daniel Carrera',
                      x: 0, y: 0, xref: 'paper', yref: 'paper'
                    }]
                  }
                  Plotly.newPlot(document.getElementById('contour-plot'), [trace], layout, {showLink: false});
                });



                    Fully customizable
                    
                        plotly.js charts are described declaratively as JSON objects. Every aspect of the charts, such as colors, grid lines, and the legend, has a corresponding set of JSON attributes.
                        
                            view all of the available attributes
                        
                    

                    d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv', function(rows){
                    var trace = {
                      type: 'scatter',                    // set the chart type
                      mode: 'lines',                      // connect points with lines
                      x: rows.map(function(row){          // set the x-data
                        return row['Time'];
                      }),
                      y: rows.map(function(row){          // set the x-data
                        return row['10 Min Sampled Avg'];
                      }),
                      line: {                             // set the width of the line.
                        width: 1
                      },
                      error_y: {
                        array: rows.map(function(row){    // set the height of the error bars
                          return row['10 Min Std Dev'];
                        }),
                        thickness: 0.5,                   // set the thickness of the error bars
                        width: 0
                      }
                    };

                    var layout = {
                      yaxis: {
                        title: {
                          text: "Wind Speed"
                        }
                      },       // set the y axis title
                      xaxis: {
                        showgrid: false,                  // remove the x-axis grid lines
                        tickformat: "%B, %Y"              // customize the date format to "month, day"
                      },
                      margin: {                           // update the left, bottom, right, top margin
                        l: 40, b: 10, r: 10, t: 20
                      }
                    };

                    Plotly.newPlot(document.getElementById('wind-speed'), [trace], layout, {showLink: false});
                });



                    High performance
                    
                        
                            Most plotly graphs are drawn with SVG. This offers great compatibility across browsers and publication-quality vector image export. Unfortunately, there are inherent performance limitations with the number of SVG elements that you can draw in the DOM.
                            plotly.js uses stack.gl for high performance 2D and 3D charting.
                        
                        
                            
                                
                            
                            
                                This chart was drawn with the plotly.js chart type scattergl. scattergl charts render an order of magnitude faster than their SVG counterparts.
                            
                        
                        
                            
                                
                                
                                
                            
                            
                                All 3D charts in plotly.js are rendered with WebGL, leveraging the power of the GPU for fast interactivity.
                                view the interactive version
                            
                        
                    
                    Universal
                    
                        By abstracting charts to a declarative JSON structure, plotly.js is used as a browser-based charting library for Python, R, MATLAB.
                    

                
                
            
          


        
    


















    
        Fundamentals

        
        More Fundamentals »
        
    
    
        

            
                    
                    

    
        Configuration Options
        
            View Tutorial
            
        
    


                
                    
                    

    
        Responsive / Fluid Layouts
        
            View Tutorial
            
        
    


                
                    
                    

    
        uirevision in Plotly.react
        
            View Tutorial
            
        
    


                
                    
                    

    
        React Plotly.js
        
            View Tutorial
            
        
    


                
                    
                    

    
        Analytical Apps with Dash
        
            View Tutorial
            
        
    


                
    










    
        Basic Charts

        
        More Basic Charts »
        
    
    
        

            

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Scatter Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Line Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bar Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Pie Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bubble Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
    





    
        Statistical Charts

        
        More Statistical Charts »
        
    
    
        

            
                    
                    

    
        Error Bars
        
            View Tutorial
            
        
    


                
                    
                    

    
        Box Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        2d Density Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Continuous Error Bars
        
            View Tutorial
            
        
    


                
    





    
        Scientific Charts

        
        More Scientific Charts »
        
    
    
        

            
                    
                    

    
        Contour Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Heatmaps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ternary Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Parallel Coordinates Plot
        
            View Tutorial
            
        
    


                
                    
                    

    
        Log Plots
        
            View Tutorial
            
        
    


                
    





    
        Financial Charts

        
        More Financial Charts »
        
    
    
        

            
                    
                    

    
        Waterfall Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Indicators
        
            View Tutorial
            
        
    


                
                    
                    

    
        Candlestick Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Funnel and Funnelarea Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Time Series
        
            View Tutorial
            
        
    


                
    





    
        Maps

        
        More Maps »
        
    
    
        

            
                    
                    

    
        Migrate to Maplibre
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Map Layers
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Density Heatmap
        
            View Tutorial
            
        
    


                
                    
                    

    
        Choropleth Tile Map
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lines on Maps
        
            View Tutorial
            
        
    


                
    










    
        3D Charts

        
        More 3D Charts »
        
    
    
        

            
                    
                    

    
        3D Scatter Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ribbon Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Surface Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Mesh Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Line Plots
        
            View Tutorial
            
        
    


                
    





    
        Subplots

        
        More Subplots »
        
    
    
        

            
                    
                    

    
        Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Inset Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Mixed Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Table Subplots
        
            View Tutorial
            
        
    


                
    









    
        Custom Chart Events

        
    
    
        

            
                    
                    

    
        Click Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Hover Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Zoom Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Disable Zoom Events
        
            View Tutorial
            
        
    


                
    





    
        Add Custom Controls

        
        More Controls »
        
    
    
        

            
                    
                    

    
        Dropdown Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Button Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Slider Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lasso Selection
        
            View Tutorial
            
        
    


                
                    
                    

    
        Range Slider and Selector
        
            View Tutorial
            
        
    


                
    





    
        Animations

        
    
    
        

            
                    
                    

    
        Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Adding Sliders to Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Filled-Area Animation
        
            View Tutorial
            
        
    


                
                    
                    

    
        Map Animation
        
            View Tutorial\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            

            

            

            
            
            
        
    
    


                
                


    
        
        

            
                Plotly JavaScript Open Source Graphing Library
                
                    Built on top of d3.js and stack.gl, Plotly.js is a high-level, declarative charting library. plotly.js ships with over 40 chart types, including 3D charts, statistical graphs, and SVG maps.
                    plotly.js is free and open source and you can view the source, report issues or contribute on GitHub.
                
            
        
        
          
            

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




            
            
                Read more about plotly.js features
                

                

                    
                        Sophisticated chart types
                    
                    
                        plotly.js abstracts the types of statistical and scientific charts that you would find in packages like matplotlib, ggplot2, or MATLAB.
                    

                    
                    
                        
                    
                    d3.json('https://plotly.com/~DanielCarrera/13.json', function(figure){
                  var trace = {
                    x: figure.data[0].x, y: figure.data[0].y, z: figure.data[0].z,
                    type: 'contour', autocolorscale: false,
                    colorscale: [[0,"rgb(  0,  0,  0)"],[0.3,"rgb(230,  0,  0)"],[0.6,"rgb(255,210,  0)"],[1,"rgb(255,255,255)"]],
                    reversescale: true, zmax: 2.5, zmin: -2.5
                  };
                  var layout = {
                    title: {
                      text: 'turbulence simulation'
                  },
                    xaxis: {
                      title: {
                          text: 'radial direction'
                      },
                      showline: true,
                      mirror: 'allticks',
                      ticks: 'inside'
                    },
                    yaxis: {
                        title: {
                            text: 'vertical direction'
                        },
                        showline: true,
                        mirror: 'allticks',
                        ticks: 'inside'
                    },
                    margin: {l: 40, b: 40, t: 60},
                    annotations: [{
                      showarrow: false,
                      text: 'Credit: Daniel Carrera',
                      x: 0, y: 0, xref: 'paper', yref: 'paper'
                    }]
                  }
                  Plotly.newPlot(document.getElementById('contour-plot'), [trace], layout, {showLink: false});
                });



                    Fully customizable
                    
                        plotly.js charts are described declaratively as JSON objects. Every aspect of the charts, such as colors, grid lines, and the legend, has a corresponding set of JSON attributes.
                        
                            view all of the available attributes
                        
                    

                    d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv', function(rows){
                    var trace = {
                      type: 'scatter',                    // set the chart type
                      mode: 'lines',                      // connect points with lines
                      x: rows.map(function(row){          // set the x-data
                        return row['Time'];
                      }),
                      y: rows.map(function(row){          // set the x-data
                        return row['10 Min Sampled Avg'];
                      }),
                      line: {                             // set the width of the line.
                        width: 1
                      },
                      error_y: {
                        array: rows.map(function(row){    // set the height of the error bars
                          return row['10 Min Std Dev'];
                        }),
                        thickness: 0.5,                   // set the thickness of the error bars
                        width: 0
                      }
                    };

                    var layout = {
                      yaxis: {
                        title: {
                          text: "Wind Speed"
                        }
                      },       // set the y axis title
                      xaxis: {
                        showgrid: false,                  // remove the x-axis grid lines
                        tickformat: "%B, %Y"              // customize the date format to "month, day"
                      },
                      margin: {                           // update the left, bottom, right, top margin
                        l: 40, b: 10, r: 10, t: 20
                      }
                    };

                    Plotly.newPlot(document.getElementById('wind-speed'), [trace], layout, {showLink: false});
                });



                    High performance
                    
                        
                            Most plotly graphs are drawn with SVG. This offers great compatibility across browsers and publication-quality vector image export. Unfortunately, there are inherent performance limitations with the number of SVG elements that you can draw in the DOM.
                            plotly.js uses stack.gl for high performance 2D and 3D charting.
                        
                        
                            
                                
                            
                            
                                This chart was drawn with the plotly.js chart type scattergl. scattergl charts render an order of magnitude faster than their SVG counterparts.
                            
                        
                        
                            
                                
                                
                                
                            
                            
                                All 3D charts in plotly.js are rendered with WebGL, leveraging the power of the GPU for fast interactivity.
                                view the interactive version
                            
                        
                    
                    Universal
                    
                        By abstracting charts to a declarative JSON structure, plotly.js is used as a browser-based charting library for Python, R, MATLAB.
                    

                
                
            
          


        
    


















    
        Fundamentals

        
        More Fundamentals »
        
    
    
        

            
                    
                    

    
        Configuration Options
        
            View Tutorial
            
        
    


                
                    
                    

    
        Responsive / Fluid Layouts
        
            View Tutorial
            
        
    


                
                    
                    

    
        uirevision in Plotly.react
        
            View Tutorial
            
        
    


                
                    
                    

    
        React Plotly.js
        
            View Tutorial
            
        
    


                
                    
                    

    
        Analytical Apps with Dash
        
            View Tutorial
            
        
    


                
    










    
        Basic Charts

        
        More Basic Charts »
        
    
    
        

            

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Scatter Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Line Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bar Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Pie Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bubble Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
    





    
        Statistical Charts

        
        More Statistical Charts »
        
    
    
        

            
                    
                    

    
        Error Bars
        
            View Tutorial
            
        
    


                
                    
                    

    
        Box Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        2d Density Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Continuous Error Bars
        
            View Tutorial
            
        
    


                
    





    
        Scientific Charts

        
        More Scientific Charts »
        
    
    
        

            
                    
                    

    
        Contour Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Heatmaps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ternary Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Parallel Coordinates Plot
        
            View Tutorial
            
        
    


                
                    
                    

    
        Log Plots
        
            View Tutorial
            
        
    


                
    





    
        Financial Charts

        
        More Financial Charts »
        
    
    
        

            
                    
                    

    
        Waterfall Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Indicators
        
            View Tutorial
            
        
    


                
                    
                    

    
        Candlestick Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Funnel and Funnelarea Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Time Series
        
            View Tutorial
            
        
    


                
    





    
        Maps

        
        More Maps »
        
    
    
        

            
                    
                    

    
        Migrate to Maplibre
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Map Layers
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Density Heatmap
        
            View Tutorial
            
        
    


                
                    
                    

    
        Choropleth Tile Map
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lines on Maps
        
            View Tutorial
            
        
    


                
    










    
        3D Charts

        
        More 3D Charts »
        
    
    
        

            
                    
                    

    
        3D Scatter Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ribbon Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Surface Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Mesh Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Line Plots
        
            View Tutorial
            
        
    


                
    





    
        Subplots

        
        More Subplots »
        
    
    
        

            
                    
                    

    
        Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Inset Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Mixed Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Table Subplots
        
            View Tutorial
            
        
    


                
    









    
        Custom Chart Events

        
    
    
        

            
                    
                    

    
        Click Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Hover Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Zoom Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Disable Zoom Events
        
            View Tutorial
            
        
    


                
    





    
        Add Custom Controls

        
        More Controls »
        
    
    
        

            
                    
                    

    
        Dropdown Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Button Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Slider Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lasso Selection
        
            View Tutorial
            
        
    


                
                    
                    

    
        Range Slider and Selector
        
            View Tutorial
            
        
    


                
    





    
        Animations

        
    
    
        

            
                    
                    

    
        Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Adding Sliders to Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Filled-Area Animation
        
            View Tutorial
            
        
    


                
                    
                    

    
        Map Animation
        
            View Tutorial\n\n\n\nTAKE A TOURFrom Raw Data to Dynamic Apps in MinutesTake a tour of Plotly Dash Enterprise, where you’ll see how to rapidly turn your data into rich visualizations shipped as shareable apps. Accelerate development with AI capabilities and achieve remarkable ROI.Access the full tour"Time-to-market is crucial in our ever-changing market environment. With help of Dash Enterprise, we were able to accelerate deployment of new apps from weeks to minutes without compromising on governance aspects and security."Volodymyr Sorokoumov - Digital Trading - Lead Platform Design & OperationsUniper"Deploying an application is a whole different ballgame from building one. Deploying and building from your workspace in Dash Enterprise is very easy because the platform handles a lot of the work. We can make a quick change and deploy within five minutes without disrupting the service."Andrew Schutte - Senior Data ScientistKansas City Chiefs"Dash Enterprise’s integration with best practice open source techniques enables the Data Science & Operational Research team to expedite our deployment of advanced bespoke Data Science applications to NHS staff."Andy Mayne - Chief Analytical ScientistSomerset NHS Foundation Trust“In an external application going to clients, everything from the engineering, to the models, to the UI, to performance testing requires a lot of effort and building. Dash Enterprise effectively allows us to accelerate the process.”Onik Kurktchian - Head of S&P Global Marketplace WorkbenchS&P Global MarketplaceBuild your first data app with AI, code, or clicks Spend less time coding and more time solving business problems. Dash Enterprise eliminates the front-end bottleneck so you can take your data app to production faster.Get a custom demo\n\n\n\nREQUEST A DEMOSee Plotly Dash Enterprise in action, tailored to youDiscover how leading businesses like yours are putting data and AI to work, through production data applications. Talk to our team about use cases that achieve real business impact such as:A power grid operator saving $100 million a year through optimized capacity planning.A financial services firm whose data team is getting to production 80-90% faster without IT expertise, saving dozens of analyst hours weeklyA biopharmaceutical company saving $10 million per clinical program through accelerated trial enrolmentGet a personalized walkthrough with a Plotly expert. Ask anything, and we’ll show you how Dash Enterprise can solve your challenges.You’re in good company. Our customers are amongst the Fortune 500, in Finance, Energy, Healthcare, Defense, Retail, and more.See Dash in action!Thank you for your interest in Dash Enterprise. We'll be in touch soon to schedule a demo.ProfessionalStudentFirst Name*Last Name*Business Email*PhoneCompany Name*Role* Data ScientistData EngineerDevOpsFull Stack DeveloperSystem ArchitectProduct ManagerQuantitative AnalystScientific ResearcherExecutiveOtherAre you using Plotly/Dash Open Source?* I created a Dash app.I use Plotly graphing libraries, not Dash.I use another Python data app framework.Not sure/none of the above.Do you need to take a Python data app to production?* Yes, I have an immediate need.Possibly in the future.No, I have a different need.Not sure.Additional CommentsBy submitting this form, you give Plotly permission to contact you by email. You may unsubscribe at anytime. For more info, view our Privacy Policy.SPEAK WITH PLOTLY*required\n\n\n\nDash EnterprisePlotly Dash Enterprise is the leading data app platform for data scientists and domain experts to create production-grade, interactive data applications in Python, assisted by AI.What’s new in Dash Enterprise 5.7Generate quality code, write docs, and get context-aware answers with the Plotly AI Code Assistant for 40% faster development cyclesExperience more intuitive and powerful data app development with significant improvements to App StudioStreamline deployment with Code Eject to easily modify your apps before deploymentWATCH THE LAUNCHBuild production-grade data apps in pure PythonDash Enterprise empowers data teams to build sophisticated analytical applications using Python without requiring front-end development expertise. You can customize data app development with familiar Python syntax, over 50 chart types, and direct integration with major data back ends.Through Dash Enterprise, experience faster and simpler data app development with AI for natural language data analysis and visualization, Dash Enterprise CLI, and aesthetic app themes.With features like one-click deployment and automated CI/CD pipelines, the platform ensures smooth production roll-out. Data professionals are empowered to maintain robust security through multiple authentication methods including LDAP, SAML, and SSO.Code, click, or chatPlotly's AI-enhanced App Studio helps you quickly build production-grade data applications through multiple development approaches: code mode, UI mode, and an AI-assisted development mode.Conduct advanced data analysis with natural language prompts and auto-generated Python code through Plotly AI. Now, building apps is accessible to both experienced developers and newcomers.With enterprise-level deployment features including one-click deployment, cloud platform scalability, and application embedding options, the platform eases the process of sharing and scaling data applications across organizations. AI-powered app development makes creation fun — without a line of CSS or HTML. You can also add AI to your own app with features like Smart Insights and a chat interface builder, while maintaining full access to the underlying Python code for maximum flexibility.Drive significant cost savingsDash Enterprise significantly reduces development costs by enabling a single data analyst to accomplish what traditionally requires a full team of specialized engineers.The platform dramatically accelerates development cycles, reducing update times from days to minutes while eliminating the need for multiple meetings and coordination. It gives your team a way to handle complex enterprise settings automatically, including authentication, job queues, database caching, and automated reporting, without requiring expertise in JavaScript, HTML, or CSS.Dash Enterprise includes built-in DevOps capabilities for deployment and scaling, offering your organization a way to save engineering costs that would typically be needed for building and maintaining these capabilities.Deploy your wayData applications across the enterprise have different needs for data security and deployment. Dash Enterprise provides deployment flexibility with two options: self-hosted and managed service. Dash Enterprise Self-Hosted Control the installation and operation of your Dash Enterprise platform on virtual machines in your secure on-premises, VPC, and air-gapped environments. Dash Enterprise Managed Service Avoid the time and expense of installing and operating the platform and move your data applications to production faster. Dash Enterprise Managed Service handles deployment and maintenance for you:Get all the benefits of Dash Enterprise with no backend infrastructure workChoose your cloud provider, region, and availability zones from AWS, Azure, and Google Cloud Platform (GCP)Secure private links to your enterprise data sourcesReady-to-use, isolated single-tenant environmentPlotly handles upgrades, monitoring, and maintenance in the backgroundDash Enterprise PlatformReliable and scalable platform for rapid Dash app deployment.Contact SalesAccelerate DevelopmentDeployment & ScalingEnterprise IT IntegrationTransform notebooks into data apps with Plotly App StudioDeploy your Streamlit, Django, and Dash apps in a unified platformConnect Dash apps to any databaseAdd AI-generated insights to your apps with Chatbot BuilderPoint-and-click control over all of aspects of your Dash deploymentsSimple install to all clouds and on-premCode Dash apps and Jupyter Notebooks in the browserBuild scalable Dash apps using background tasksDeliver new data app features faster with CI/CDDesign beautiful apps without CSS skillsEmbed charts into existing web apps or SaaS productsIntegrate apps with enterprise identity and authenticationShare Dash apps as URLs, PDFs or by emailAvoid network latency using local cachingBuild analytics apps on top of DatabricksAccelerate DevelopmentTransform notebooks into data apps with Plotly App StudioDeploy your Streamlit, Django, and Dash apps in a unified platformConnect Dash apps to any databaseAdd AI-generated insights to your apps with Chatbot BuilderPoint-and-click control over all of aspects of your Dash deploymentsSimple install to all clouds and on-premCode Dash apps and Jupyter Notebooks in the browserBuild scalable Dash apps using background tasksDeliver new data app features faster with CI/CDDesign beautiful apps without CSS skillsEmbed charts into existing web apps or SaaS productsIntegrate apps with enterprise identity and authenticationShare Dash apps as URLs, PDFs or by emailAvoid network latency using local cachingBuild analytics apps on top of DatabricksDeployment & ScalingTransform notebooks into data apps with Plotly App StudioDeploy your Streamlit, Django, and Dash apps in a unified platformConnect Dash apps to any databaseAdd AI-generated insights to your apps with Chatbot BuilderPoint-and-click control over all of aspects of your Dash deploymentsSimple install to all clouds and on-premCode Dash apps and Jupyter Notebooks in the browserBuild scalable Dash apps using background tasksDeliver new data app features faster with CI/CDDesign beautiful apps without CSS skillsEmbed charts into existing web apps or SaaS productsIntegrate apps with enterprise identity and authenticationShare Dash apps as URLs, PDFs or by emailAvoid network latency using local cachingBuild analytics apps on top of DatabricksEnterprise IT IntegrationTransform notebooks into data apps with Plotly App StudioDeploy your Streamlit, Django, and Dash apps in a unified platformConnect Dash apps to any databaseAdd AI-generated insights to your apps with Chatbot BuilderPoint-and-click control over all of aspects of your Dash deploymentsSimple install to all clouds and on-premCode Dash apps and Jupyter Notebooks in the browserBuild scalable Dash apps using background tasksDeliver new data app features faster with CI/CDDesign beautiful apps without CSS skillsEmbed charts into existing web apps or SaaS productsIntegrate apps with enterprise identity and authenticationShare Dash apps as URLs, PDFs or by emailAvoid network latency using local cachingBuild analytics apps on top of Databricks\n\nBuild production-grade data apps in pure PythonDash Enterprise empowers data teams to build sophisticated analytical applications using Python without requiring front-end development expertise. You can customize data app development with familiar Python syntax, over 50 chart types, and direct integration with major data back ends.Through Dash Enterprise, experience faster and simpler data app development with AI for natural language data analysis and visualization, Dash Enterprise CLI, and aesthetic app themes.With features like one-click deployment and automated CI/CD pipelines, the platform ensures smooth production roll-out. Data professionals are empowered to maintain robust security through multiple authentication methods including LDAP, SAML, and SSO.Code, click, or chatPlotly's AI-enhanced App Studio helps you quickly build production-grade data applications through multiple development approaches: code mode, UI mode, and an AI-assisted development mode.Conduct advanced data analysis with natural language prompts and auto-generated Python code through Plotly AI. Now, building apps is accessible to both experienced developers and newcomers.With enterprise-level deployment features including one-click deployment, cloud platform scalability, and application embedding options, the platform eases the process of sharing and scaling data applications across organizations. AI-powered app development makes creation fun — without a line of CSS or HTML. You can also add AI to your own app with features like Smart Insights and a chat interface builder, while maintaining full access to the underlying Python code for maximum flexibility.Drive significant cost savingsDash Enterprise significantly reduces development costs by enabling a single data analyst to accomplish what traditionally requires a full team of specialized engineers.The platform dramatically accelerates development cycles, reducing update times from days to minutes while eliminating the need for multiple meetings and coordination. It gives your team a way to handle complex enterprise settings automatically, including authentication, job queues, database caching, and automated reporting, without requiring expertise in JavaScript, HTML, or CSS.Dash Enterprise includes built-in DevOps capabilities for deployment and scaling, offering your organization a way to save engineering costs that would typically be needed for building and maintaining these capabilities.Deploy your wayData applications across the enterprise have different needs for data security and deployment. Dash Enterprise provides deployment flexibility with two options: self-hosted and managed service. Dash Enterprise Self-Hosted Control the installation and operation of your Dash Enterprise platform on virtual machines in your secure on-premises, VPC, and air-gapped environments. Dash Enterprise Managed Service Avoid the time and expense of installing and operating the platform and move your data applications to production faster. Dash Enterprise Managed Service handles deployment and maintenance for you:Get all the benefits of Dash Enterprise with no backend infrastructure workChoose your cloud provider, region, and availability zones from AWS, Azure, and Google Cloud Platform (GCP)Secure private links to your enterprise data sourcesReady-to-use, isolated single-tenant environmentPlotly handles upgrades, monitoring, and maintenance in the background\n\n\n\nPlotly Professional ServicesDash Enterprise is the low-code platform for data apps. Plotly Professional Services are the data app experts. Contact ServicesData App DevelopmentAnalytical Dash apps are the human interface layer for data, analytics, AI, and ML. Our clients choose Plotly for delivering data apps because we're unbeatable in 3 core areas.Speed and efficiency of delivery: Our customers are consistently blown away by our beautiful and responsive analytical apps delivered in days, not months.Expertise: We have worked on hundreds of projects in the finance, tech, oil & gas, manufacturing, and government sectors. Your project can’t be in better hands.Future Proof: We use open source technologies and utilize frameworks like Python and R that data scientists already use and understand. Software DevelopmentArchitectural ReviewUI/UX & Custom ComponentsAutomated ReportingPerformance OptimizationData PipeliningTraining & WorkshopsSoftware DevelopmentUsing the Dash Enterprise framework, we transform your models and ideas into polished apps that integrate into your organization's internal processes and systems.Sponsored FeaturesOver the last 7 years, organizations have stepped up to sponsor mission-critical features in our open source and enterprise products. Here are some of our favorites.Plotly.js OSSDash OSSDash EnterprisePlotly.js OSSA high-level, declarative charting library, Plotly.js ships with over 40 chart types, including 3D charts, statistical graphs, and SVG maps. It serves as the baseline for Dash. See what’s available for sponsorship!Shape DrawingCreate, modify, and transform new shapes like rectangles, lines, and freehand paths directly in the Plotly.js modebarMapbox IntegrationEasily plot Mapbox GL maps with Plotly.js, which supports image exports, streaming, hover text, default/custom mapbox styles and more.ParcoordsParallel coordinates (Parcoords) for multivariate data can be plotted with panel trellising and interactive slope diagrams.Sankey DiagramsWith interactive node grouping, Plotly.js Sankey Diagrams adjust with the user’s mouse selectionCarpet PlotsUsing 2D or 1D arrays, Carpet Plots are ideal for visualizing multiple independent variables and one or more dependent variable.World CalendarsWith support for Gregorian and non-Gregorian calendars, the Plotly.js world calendar component can be used globally without a hitch.Dash OSSDownloaded over 350,000 times per month, Dash is the most downloaded, trusted framework for building ML & data science web apps. Check out OSS features for sponsorship!Pleasant & Productive Development ExperienceHot reloading, unminified component bundles support, and detailed front-end error messages are now available for a seamless dev experience.DataTableThis interactive table component supports strings, numbers, and dates as data types; hidden columns; and easy exporting into excel/csv.TabsA first class Tabs component built from the ground up. Supports custom styling and class names, server side updates, and clientside caching.Confirmation ModalBefore a callback is fired, you can add an extra step in the UI containing text like “Are you sure?.Loading StatesEasily customize loading messages at the start of the callbacks to display a particular message or cite the component name or property.Callback DAG in UIDirected Acyclic Graph (DAG) trees are available in dev tools to help visualize callback chains.Dash EnterpriseA platform for rapid Dash app development. Operationalize data science, AI, and ML models and deliver at scale.Embedded MiddlewareEmbed Dash in existing web apps or products like Salesforce reports. Dash app embedding is the fastest way to add AI to any product or platforms.ReliabilityEnsure performance of Dash apps on Dash Enterprise’s architecture. No IT or Helm required.Snapshot EngineSave & share Dash app views as links or PDFs. Or, run a Python job through Dash and have Snapshot Engine email a report when the job is done.Dashboard EngineRecently sponsored this summer, the Dashboards Toolkit will bring drag and drop to Dash Enterprise to give end users ultimate flexibility.Plotly.js OSSPlotly.js OSSA high-level, declarative charting library, Plotly.js ships with over 40 chart types, including 3D charts, statistical graphs, and SVG maps. It serves as the baseline for Dash. See what’s available for sponsorship!Shape DrawingCreate, modify, and transform new shapes like rectangles, lines, and freehand paths directly in the Plotly.js modebarMapbox IntegrationEasily plot Mapbox GL maps with Plotly.js, which supports image exports, streaming, hover text, default/custom mapbox styles and more.ParcoordsParallel coordinates (Parcoords) for multivariate data can be plotted with panel trellising and interactive slope diagrams.Sankey DiagramsWith interactive node grouping, Plotly.js Sankey Diagrams adjust with the user’s mouse selectionCarpet PlotsUsing 2D or 1D arrays, Carpet Plots are ideal for visualizing multiple independent variables and one or more dependent variable.World CalendarsWith support for Gregorian and non-Gregorian calendars, the Plotly.js world calendar component can be used globally without a hitch.Dash OSSDash OSSDownloaded over 350,000 times per month, Dash is the most downloaded, trusted framework for building ML & data science web apps. Check out OSS features for sponsorship!Pleasant & Productive Development ExperienceHot reloading, unminified component bundles support, and detailed front-end error messages are now available for a seamless dev experience.DataTableThis interactive table component supports strings, numbers, and dates as data types; hidden columns; and easy exporting into excel/csv.TabsA first class Tabs component built from the ground up. Supports custom styling and class names, server side updates, and clientside caching.Confirmation ModalBefore a callback is fired, you can add an extra step in the UI containing text like “Are you sure?.Loading StatesEasily customize loading messages at the start of the callbacks to display a particular message or cite the component name or property.Callback DAG in UIDirected Acyclic Graph (DAG) trees are available in dev tools to help visualize callback chains.Dash EnterpriseDash EnterpriseA platform for rapid Dash app development. Operationalize data science, AI, and ML models and deliver at scale.Embedded MiddlewareEmbed Dash in existing web apps or products like Salesforce reports. Dash app embedding is the fastest way to add AI to any product or platforms.ReliabilityEnsure performance of Dash apps on Dash Enterprise’s architecture. No IT or Helm required.Snapshot EngineSave & share Dash app views as links or PDFs. Or, run a Python job through Dash and have Snapshot Engine email a report when the job is done.Dashboard EngineRecently sponsored this summer, the Dashboards Toolkit will bring drag and drop to Dash Enterprise to give end users ultimate flexibility.Meet some of our experts!Emily Kellison-LinnSolutions Project LeadEmily Kellison-LinnSolutions Project LeadAlex HsuSolutions ArchitectAlex HsuSolutions ArchitectCléa AumontSolutions ArchitectCléa AumontSolutions ArchitectAmira DoghriJunior Solutions ArchitectAmira DoghriJunior Solutions ArchitectRecent ProjectsDeep Dive on Sankey DiagramsRead the blog article →Plotly Professional Services walks through Sankey Diagram best practices and use cases, providing data structure background and starter code to gain valuable insights from data.How Polars Can Help You Build Fast Dash Apps for Large DatasetsDiscover the blog post →Discover the power of leveraging Polars in lightning-fast Dash apps for visualizing and analyzing large data sets in your production environment.Reflections from an Athlete — Dash feat. StravaRead the blog post →Follow along with Plotly Professional Services team member, Anna Riley, as she visualizes her personal Strava data with Dash. Anna extended her app to benefit the Strava community in just two weeks.Performance Optimizations for Geospatial Dash AppsCheck out the blog post →Plotly Professional Services Technical Project Lead, Hannah Ker, recently wrote an article about best ways to optimize performance for geospatial apps. She does a deep dive on vector, polygon data area boundaries which are used for countries, provinces, or states.Orica - BlastIQSee more in Dash Gallery →Orica was looking to improve the blasting and drilling processes at one of their customer's mining operations. They needed to better visualize the execution of actual vs design blast data. Plotly's Professional Services team delivered a Dash app that provided valuable information on the implementation against design tolerances to establish a benchmark for improvement.Dex Clothing - MNIST ExplorerSee more in Dash Gallery →Dex Clothing needed to optimize their garment-sorting process. Plotly's Professional Services helped Dex implement an AI visual search system to better categorize their garment images. The result of this Dash app was an automated image categorization process and streamlined supply chain operations.S&P - TrucostSee more in Dash Gallery →Plotly's Professional Services helped S&P transition to Python and build rich interactive reports through Dash Enterprise, streamlining their workflow.Major Canadian RetailerSee more in Dash Gallery →A major Canadian retailer wanted to elevate their inventory management system. They needed an automated way to analyze seasonality, location, and consumer buying behaviour. Plotly's Professional Services created a Dash app that utilizes Sankey data vis to solve the demand transference problem and optimize their retail operations.Databricks-DashWatch the video →Plotly Professional Services produced a video demonstrating how to build Dash apps with Databricks via the databricks-sql python connector and what the advantages are for integrating them.Dash Best PracticesWatch the webinar →In this webinar, Plotly Professional Services provided best practices and answered commonly asked questions related to UI/UX, data connections, compute, and performance.See Dash in action.Sign up for a live demo to learn more about our Dash Enterprise offering.ProfessionalStudentFirst Name*Last Name*Business Email*PhoneCompany Name*Role* Data ScientistData EngineerDevOpsFull Stack DeveloperSystem ArchitectProduct ManagerQuantitative AnalystScientific ResearcherExecutiveOtherAre you using Plotly/Dash Open Source?* I created a Dash app.I use Plotly graphing libraries, not Dash.I use another Python data app framework.Not sure/none of the above.Do you need to take a Python data app to production?* Yes, I have an immediate need.Possibly in the future.No, I have a different need.Not sure.Additional CommentsBy submitting this form, you give Plotly permission to contact you by email. You may unsubscribe at anytime. For more info, view our Privacy Policy.SPEAK WITH PLOTLY*required\n\n\n\nEdit chart
        
    

    
        
            
                
            
                
            
                
            
                
            
                
            
                
            
                
            
        
        Loading graph\n\nLoading...\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nSimple Traces
  
    
      
        Scatter
      

      
        Scatter GL
      

      
        Bar
      

      
        Pie
      

      
        Heatmap
      

      
        Heatmap GL
      

      
        Image
      

      
        Contour
      

      
        Table
      
    
  



  Distribution Traces
  
    
      
        Box
      

      
        Violin
      

      
        Histogram
      

      
        Histogram 2D
      

      
        Histogram 2D Contour
      
    
  



  Finance Traces
  
    
      
        OHLC
      

      
        Candlestick
      

      
        Waterfall
      

      
        Funnel
      

      
        Funnel Area
      

      
        Indicator
      
    
  



  3D Traces
  
    
      
        Scatter 3D
      

      
        Surface
      

      
        Mesh
      

      
        Cone
      

      
        Streamtube
      

      
        Volume
      

      
        Isosurface
      
    
  



  Map Traces
  
    
      
        Scatter Geo
      

      
        Choropleth
      

      
        Scatter Map
      

      
        Scatter Mapbox
      

      
        Choropleth Map
      

      
        Choropleth Mapbox
      

      
        Density Map
      

      
        Density Mapbox
      
    
  



  Specialized Traces
  
    
      
        Scatter Polar
      

      
        Scatter Polar GL
      

      
        Bar Polar
      

      
        Scatter Ternary
      

      
        Scatter Smith
      

      
        Sunburst
      

      
        Treemap
      

      
        Icicle
      

      
        Sankey
      

      
        SPLOM
      

      
        Parallel Coordinates
      

      
        Parallel Categories
      

      
        Carpet
      

      
        Scatter Carpet
      

      
        Contour Carpet
      
    
  





  Layout
  
    
      
        Title
      
      
        Legend
      
      
        Margins
      
      
        Size
      
      
        Fonts
      
      
        Colors
      
    
  



  Axes and Subplots
  
    
      
        X Axis
      
      
        Y Axis
      
      
        Ternary
      
      
        Smith
      
      
        3D Scene
      
      
        Geo
      
      
        Mapbox
      
      
        Polar
      
      
        Color Axis
      
    
  



  Layers
  
    
      
        Annotations
      
      
        Shapes
      
      
        Selections
      
      
        Images
      
      
        Sliders
      
      
        Update Menus
      
    
  



        
    

    
    
      
    




            
            
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
            
            
                > Figure Reference
                > Single-Page Reference
            
        
    
    


                
                JavaScript Figure Reference: Single-Page


    How are Plotly attributes organized?
    
        
            plotly.js charts are described declaratively as JSON objects. Every aspect of a plotly chart (the colors, the grids, the data, and so on) has a corresponding JSON attribute. This page contains an extensive list of these attributes.

            Plotly's graph description places attributes into two categories: traces (objects that describe a single series of data in a graph) and layout (attributes that apply to the rest of the chart, like the title, xaxis, or annotations). Traces are categorized by chart type (e.g. scatter, heatmap).

            Here is a simple example of a plotly chart inlined with links to each attribute's reference section.

        data = [
        {
            type: 'scatter',  // all "scatter" attributes: https://plotly.com/javascript/reference/#scatter
            x: [1, 2, 3],     // more about "x": #scatter-x
            y: [3, 1, 6],     // #scatter-y
            marker: {         // marker is an object, valid marker keys: #scatter-marker
                color: 'rgb(16, 32, 77)' // more about "marker.color": #scatter-marker-color
            }
        },
        {
            type: 'bar',      // all "bar" chart attributes: #bar
            x: [1, 2, 3],     // more about "x": #bar-x
            y: [3, 1, 6],     // #bar-y
            name: 'bar chart example' // #bar-name
        }
    ];

    layout = {                     // all "layout" attributes: #layout
        title: 'simple example',  // more about "layout.title": #layout-title
        xaxis: {                  // all "layout.xaxis" attributes: #layout-xaxis
            title: 'time'         // more about "layout.xaxis.title": #layout-xaxis-title
        },
        annotations: [            // all "annotation" attributes: #layout-annotations
            {
                text: 'simple annotation',    // #layout-annotations-text
                x: 0,                         // #layout-annotations-x
                xref: 'paper',                // #layout-annotations-xref
                y: 0,                         // #layout-annotations-y
                yref: 'paper'                 // #layout-annotations-yref
            }
        ]
    }
        
        
    







  
      

      scatter traces

      










 A scatter trace is an object with the key "type" equal to "scatter" (i.e. {"type": "scatter"}) and any of the keys listed below. The scatter trace type encompasses line charts, scatter charts, text charts, and bubble charts. The data visualized as scatter point or lines is set in `x` and `y`. Text (appearing either on the chart or on hover only) is via `text`. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to numerical arrays. 














   type  Parent: data[type=scatter]  Type: "scatter"    name  Parent: data[type=scatter]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=scatter]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=scatter]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=scatter]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=scatter]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=scatter]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=scatter] Type: object containing one or more of the keys listed below.    font  Parent: data[type=scatter].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=scatter].legendgrouptitle.font  Type: color    family  Parent: data[type=scatter].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatter].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatter].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatter].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=scatter].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatter].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatter].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatter].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=scatter].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=scatter]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=scatter]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    mode  Parent: data[type=scatter]  Type: flaglist string. Any combination of "lines", "markers", "text" joined with a "+" OR "none". Examples: "lines", "markers", "lines+markers", "lines+markers+text", "none" Determines the drawing mode for this scatter trace. If the provided `mode` includes "text" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is "lines+markers". Otherwise, "lines".    ids  Parent: data[type=scatter]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    zorder  Parent: data[type=scatter]  Type: integer Default: 0 Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.    x  Parent: data[type=scatter]  Type: data array Sets the x coordinates.    x0  Parent: data[type=scatter]  Type: number or categorical coordinate string Default: 0 Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.    dx  Parent: data[type=scatter]  Type: number Default: 1 Sets the x coordinate step. See `x0` for more info.    y  Parent: data[type=scatter]  Type: data array Sets the y coordinates.    y0  Parent: data[type=scatter]  Type: number or categorical coordinate string Default: 0 Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.    dy  Parent: data[type=scatter]  Type: number Default: 1 Sets the y coordinate step. See `y0` for more info.    text  Parent: data[type=scatter]  Type: string or array of strings Default: "" Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    textposition  Parent: data[type=scatter]  Type: enumerated or array of enumerateds , one of ( "top left" | "top center" | "top right" | "middle left" | "middle center" | "middle right" | "bottom left" | "bottom center" | "bottom right" ) Default: "middle center" Sets the positions of the `text` elements with respects to the (x,y) coordinates.    texttemplate  Parent: data[type=scatter]  Type: string or array of strings Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.     hovertext  Parent: data[type=scatter]  Type: string or array of strings Default: "" Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.    hoverinfo  Parent: data[type=scatter]  Type: flaglist string. Any combination of "x", "y", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=scatter]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    xhoverformat  Parent: data[type=scatter]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=scatter]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    meta  Parent: data[type=scatter]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=scatter]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    xaxis  Parent: data[type=scatter]  Type: subplotid Default: x Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.    yaxis  Parent: data[type=scatter]  Type: subplotid Default: y Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.    orientation  Parent: data[type=scatter]  Type: enumerated , one of ( "v" | "h" ) Only relevant in the following cases: 1. when `scattermode` is set to "group". 2. when `stackgroup` is used, and only the first `orientation` found in the `stackgroup` will be used - including if `visible` is "legendonly" but not if it is `false`. Sets the stacking direction. With "v" ("h"), the y (x) values of subsequent traces are added. Also affects the default value of `fill`.    groupnorm  Parent: data[type=scatter]  Type: enumerated , one of ( "" | "fraction" | "percent" ) Default: "" Only relevant when `stackgroup` is used, and only the first `groupnorm` found in the `stackgroup` will be used - including if `visible` is "legendonly" but not if it is `false`. Sets the normalization for the sum of this `stackgroup`. With "fraction", the value of each trace at each location is divided by the sum of all trace values at that location. "percent" is the same but multiplied by 100 to show percentages. If there are multiple subplots, or multiple `stackgroup`s on one subplot, each will be normalized within its own set.    alignmentgroup  Parent: data[type=scatter]  Type: string Default: "" Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.    offsetgroup  Parent: data[type=scatter]  Type: string Default: "" Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.    stackgroup  Parent: data[type=scatter]  Type: string Default: "" Set several scatter traces (on the same subplot) to the same stackgroup in order to add their y values (or their x values if `orientation` is "h"). If blank or omitted this trace will not be stacked. Stacking also turns `fill` on by default, using "tonexty" ("tonextx") if `orientation` is "h" ("v") and sets the default `mode` to "lines" irrespective of point count. You can only stack on a numeric (linear or log) axis. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.    xperiod  Parent: data[type=scatter]  Type: number or categorical coordinate string Default: 0 Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M<n>" on the x axis. Special values in the form of "M<n>" could be used to declare the number of months. In this case `n` must be a positive integer.    xperiodalignment  Parent: data[type=scatter]  Type: enumerated , one of ( "start" | "middle" | "end" ) Default: "middle" Only relevant when the axis `type` is "date". Sets the alignment of data points on the x axis.    xperiod0  Parent: data[type=scatter]  Type: number or categorical coordinate string Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.    yperiod  Parent: data[type=scatter]  Type: number or categorical coordinate string Default: 0 Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M<n>" on the y axis. Special values in the form of "M<n>" could be used to declare the number of months. In this case `n` must be a positive integer.    yperiodalignment  Parent: data[type=scatter]  Type: enumerated , one of ( "start" | "middle" | "end" ) Default: "middle" Only relevant when the axis `type` is "date". Sets the alignment of data points on the y axis.    yperiod0  Parent: data[type=scatter]  Type: number or categorical coordinate string Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.    marker  Parent: data[type=scatter] Type: object containing one or more of the keys listed below.    angle  Parent: data[type=scatter].marker  Type: angle Default: 0 Sets the marker angle in respect to `angleref`.    angleref  Parent: data[type=scatter].marker  Type: enumerated , one of ( "previous" | "up" ) Default: "up" Sets the reference for marker angle. With "previous", angle 0 points along the line from the previous point to this one. With "up", angle 0 points toward the top of the screen.    autocolorscale  Parent: data[type=scatter].marker  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=scatter].marker  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.    cmax  Parent: data[type=scatter].marker  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.    cmid  Parent: data[type=scatter].marker  Type: number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.    cmin  Parent: data[type=scatter].marker  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.    color  Parent: data[type=scatter].marker  Type: color or array of colors Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.    coloraxis  Parent: data[type=scatter].marker  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=scatter].marker Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=scatter].marker.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=scatter].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=scatter].marker.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=scatter].marker.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=scatter].marker.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=scatter].marker.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=scatter].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=scatter].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=scatter].marker.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=scatter].marker.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=scatter].marker.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=scatter].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=scatter].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=scatter].marker.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=scatter].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=scatter].marker.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=scatter].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=scatter].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=scatter].marker.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=scatter].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=scatter].marker.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=scatter].marker.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=scatter].marker.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=scatter].marker.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=scatter].marker.colorbar.tickfont  Type: color    family  Parent: data[type=scatter].marker.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatter].marker.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatter].marker.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatter].marker.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=scatter].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatter].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatter].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatter].marker.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=scatter].marker.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=scatter].marker.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=scatter].marker.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=scatter].marker.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=scatter].marker.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=scatter].marker.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=scatter].marker.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=scatter].marker.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=scatter].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=scatter].marker.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=scatter].marker.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=scatter].marker.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=scatter].marker.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=scatter].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=scatter].marker.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=scatter].marker.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=scatter].marker.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=scatter].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=scatter].marker.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=scatter].marker.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=scatter].marker.colorbar.title.font  Type: color    family  Parent: data[type=scatter].marker.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatter].marker.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatter].marker.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatter].marker.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=scatter].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatter].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatter].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatter].marker.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=scatter].marker.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=scatter].marker.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=scatter].marker.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=scatter].marker.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=scatter].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=scatter].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=scatter].marker.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=scatter].marker.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=scatter].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=scatter].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colorscale  Parent: data[type=scatter].marker  Type: colorscale Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    gradient  Parent: data[type=scatter].marker Type: object containing one or more of the keys listed below.    color  Parent: data[type=scatter].marker.gradient  Type: color or array of colors Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.    type  Parent: data[type=scatter].marker.gradient  Type: enumerated or array of enumerateds , one of ( "radial" | "horizontal" | "vertical" | "none" ) Default: "none" Sets the type of gradient used to fill the markers      line  Parent: data[type=scatter].marker Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=scatter].marker.line  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=scatter].marker.line  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.    cmax  Parent: data[type=scatter].marker.line  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.    cmid  Parent: data[type=scatter].marker.line  Type: number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.    cmin  Parent: data[type=scatter].marker.line  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.    color  Parent: data[type=scatter].marker.line  Type: color or array of colors Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.    coloraxis  Parent: data[type=scatter].marker.line  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorscale  Parent: data[type=scatter].marker.line  Type: colorscale Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    reversescale  Parent: data[type=scatter].marker.line  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.    width  Parent: data[type=scatter].marker.line  Type: number or array of numbers greater than or equal to 0 Sets the width (in px) of the lines bounding the marker points.      maxdisplayed  Parent: data[type=scatter].marker  Type: number greater than or equal to 0 Default: 0 Sets a maximum number of points to be drawn on the graph. "0" corresponds to no limit.    opacity  Parent: data[type=scatter].marker  Type: number or array of numbers between or equal to 0 and 1 Sets the marker opacity.    reversescale  Parent: data[type=scatter].marker  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.    showscale  Parent: data[type=scatter].marker  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.    size  Parent: data[type=scatter].marker  Type: number or array of numbers greater than or equal to 0 Default: 6 Sets the marker size (in px).    sizemin  Parent: data[type=scatter].marker  Type: number greater than or equal to 0 Default: 0 Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.    sizemode  Parent: data[type=scatter].marker  Type: enumerated , one of ( "diameter" | "area" ) Default: "diameter" Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.    sizeref  Parent: data[type=scatter].marker  Type: number Default: 1 Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.    standoff  Parent: data[type=scatter].marker  Type: number or array of numbers greater than or equal to 0 Default: 0 Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.    symbol  Parent: data[type=scatter].marker  Type: enumerated or array of enumerateds , one of ( "0" | "0" | "circle" | "100" | "100" | "circle-open" | "200" | "200" | "circle-dot" | "300" | "300" | "circle-open-dot" | "1" | "1" | "square" | "101" | "101" | "square-open" | "201" | "201" | "square-dot" | "301" | "301" | "square-open-dot" | "2" | "2" | "diamond" | "102" | "102" | "diamond-open" | "202" | "202" | "diamond-dot" | "302" | "302" | "diamond-open-dot" | "3" | "3" | "cross" | "103" | "103" | "cross-open" | "203" | "203" | "cross-dot" | "303" | "303" | "cross-open-dot" | "4" | "4" | "x" | "104" | "104" | "x-open" | "204" | "204" | "x-dot" | "304" | "304" | "x-open-dot" | "5" | "5" | "triangle-up" | "105" | "105" | "triangle-up-open" | "205" | "205" | "triangle-up-dot" | "305" | "305" | "triangle-up-open-dot" | "6" | "6" | "triangle-down" | "106" | "106" | "triangle-down-open" | "206" | "206" | "triangle-down-dot" | "306" | "306" | "triangle-down-open-dot" | "7" | "7" | "triangle-left" | "107" | "107" | "triangle-left-open" | "207" | "207" | "triangle-left-dot" | "307" | "307" | "triangle-left-open-dot" | "8" | "8" | "triangle-right" | "108" | "108" | "triangle-right-open" | "208" | "208" | "triangle-right-dot" | "308" | "308" | "triangle-right-open-dot" | "9" | "9" | "triangle-ne" | "109" | "109" | "triangle-ne-open" | "209" | "209" | "triangle-ne-dot" | "309" | "309" | "triangle-ne-open-dot" | "10" | "10" | "triangle-se" | "110" | "110" | "triangle-se-open" | "210" | "210" | "triangle-se-dot" | "310" | "310" | "triangle-se-open-dot" | "11" | "11" | "triangle-sw" | "111" | "111" | "triangle-sw-open" | "211" | "211" | "triangle-sw-dot" | "311" | "311" | "triangle-sw-open-dot" | "12" | "12" | "triangle-nw" | "112" | "112" | "triangle-nw-open" | "212" | "212" | "triangle-nw-dot" | "312" | "312" | "triangle-nw-open-dot" | "13" | "13" | "pentagon" | "113" | "113" | "pentagon-open" | "213" | "213" | "pentagon-dot" | "313" | "313" | "pentagon-open-dot" | "14" | "14" | "hexagon" | "114" | "114" | "hexagon-open" | "214" | "214" | "hexagon-dot" | "314" | "314" | "hexagon-open-dot" | "15" | "15" | "hexagon2" | "115" | "115" | "hexagon2-open" | "215" | "215" | "hexagon2-dot" | "315" | "315" | "hexagon2-open-dot" | "16" | "16" | "octagon" | "116" | "116" | "octagon-open" | "216" | "216" | "octagon-dot" | "316" | "316" | "octagon-open-dot" | "17" | "17" | "star" | "117" | "117" | "star-open" | "217" | "217" | "star-dot" | "317" | "317" | "star-open-dot" | "18" | "18" | "hexagram" | "118" | "118" | "hexagram-open" | "218" | "218" | "hexagram-dot" | "318" | "318" | "hexagram-open-dot" | "19" | "19" | "star-triangle-up" | "119" | "119" | "star-triangle-up-open" | "219" | "219" | "star-triangle-up-dot" | "319" | "319" | "star-triangle-up-open-dot" | "20" | "20" | "star-triangle-down" | "120" | "120" | "star-triangle-down-open" | "220" | "220" | "star-triangle-down-dot" | "320" | "320" | "star-triangle-down-open-dot" | "21" | "21" | "star-square" | "121" | "121" | "star-square-open" | "221" | "221" | "star-square-dot" | "321" | "321" | "star-square-open-dot" | "22" | "22" | "star-diamond" | "122" | "122" | "star-diamond-open" | "222" | "222" | "star-diamond-dot" | "322" | "322" | "star-diamond-open-dot" | "23" | "23" | "diamond-tall" | "123" | "123" | "diamond-tall-open" | "223" | "223" | "diamond-tall-dot" | "323" | "323" | "diamond-tall-open-dot" | "24" | "24" | "diamond-wide" | "124" | "124" | "diamond-wide-open" | "224" | "224" | "diamond-wide-dot" | "324" | "324" | "diamond-wide-open-dot" | "25" | "25" | "hourglass" | "125" | "125" | "hourglass-open" | "26" | "26" | "bowtie" | "126" | "126" | "bowtie-open" | "27" | "27" | "circle-cross" | "127" | "127" | "circle-cross-open" | "28" | "28" | "circle-x" | "128" | "128" | "circle-x-open" | "29" | "29" | "square-cross" | "129" | "129" | "square-cross-open" | "30" | "30" | "square-x" | "130" | "130" | "square-x-open" | "31" | "31" | "diamond-cross" | "131" | "131" | "diamond-cross-open" | "32" | "32" | "diamond-x" | "132" | "132" | "diamond-x-open" | "33" | "33" | "cross-thin" | "133" | "133" | "cross-thin-open" | "34" | "34" | "x-thin" | "134" | "134" | "x-thin-open" | "35" | "35" | "asterisk" | "135" | "135" | "asterisk-open" | "36" | "36" | "hash" | "136" | "136" | "hash-open" | "236" | "236" | "hash-dot" | "336" | "336" | "hash-open-dot" | "37" | "37" | "y-up" | "137" | "137" | "y-up-open" | "38" | "38" | "y-down" | "138" | "138" | "y-down-open" | "39" | "39" | "y-left" | "139" | "139" | "y-left-open" | "40" | "40" | "y-right" | "140" | "140" | "y-right-open" | "41" | "41" | "line-ew" | "141" | "141" | "line-ew-open" | "42" | "42" | "line-ns" | "142" | "142" | "line-ns-open" | "43" | "43" | "line-ne" | "143" | "143" | "line-ne-open" | "44" | "44" | "line-nw" | "144" | "144" | "line-nw-open" | "45" | "45" | "arrow-up" | "145" | "145" | "arrow-up-open" | "46" | "46" | "arrow-down" | "146" | "146" | "arrow-down-open" | "47" | "47" | "arrow-left" | "147" | "147" | "arrow-left-open" | "48" | "48" | "arrow-right" | "148" | "148" | "arrow-right-open" | "49" | "49" | "arrow-bar-up" | "149" | "149" | "arrow-bar-up-open" | "50" | "50" | "arrow-bar-down" | "150" | "150" | "arrow-bar-down-open" | "51" | "51" | "arrow-bar-left" | "151" | "151" | "arrow-bar-left-open" | "52" | "52" | "arrow-bar-right" | "152" | "152" | "arrow-bar-right-open" | "53" | "53" | "arrow" | "153" | "153" | "arrow-open" | "54" | "54" | "arrow-wide" | "154" | "154" | "arrow-wide-open" ) Default: "circle" Sets the marker symbol type. Adding 100 is equivalent to appending "-open" to a symbol name. Adding 200 is equivalent to appending "-dot" to a symbol name. Adding 300 is equivalent to appending "-open-dot" or "dot-open" to a symbol name.      line  Parent: data[type=scatter] Type: object containing one or more of the keys listed below.    backoff  Parent: data[type=scatter].line  Type: number or array of numbers greater than or equal to 0 Default: "auto" Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With "auto" the lines would trim before markers if `marker.angleref` is set to "previous".    color  Parent: data[type=scatter].line  Type: color Sets the line color.    dash  Parent: data[type=scatter].line  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    shape  Parent: data[type=scatter].line  Type: enumerated , one of ( "linear" | "spline" | "hv" | "vh" | "hvh" | "vhv" ) Default: "linear" Determines the line shape. With "spline" the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.    simplify  Parent: data[type=scatter].line  Type: boolean Default: true Simplifies lines by removing nearly-collinear points. When transitioning lines, it may be desirable to disable this so that the number of points along the resulting SVG path is unaffected.    smoothing  Parent: data[type=scatter].line  Type: number between or equal to 0 and 1.3 Default: 1 Has an effect only if `shape` is set to "spline" Sets the amount of smoothing. "0" corresponds to no smoothing (equivalent to a "linear" shape).    width  Parent: data[type=scatter].line  Type: number greater than or equal to 0 Default: 2 Sets the line width (in px).      textfont  Parent: data[type=scatter] Type: object containing one or more of the keys listed below. Sets the text font.    color  Parent: data[type=scatter].textfont  Type: color or array of colors    family  Parent: data[type=scatter].textfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatter].textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatter].textfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatter].textfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=scatter].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatter].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatter].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatter].textfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      error_x  Parent: data[type=scatter] Type: object containing one or more of the keys listed below.    array  Parent: data[type=scatter].error_x  Type: data array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.    arrayminus  Parent: data[type=scatter].error_x  Type: data array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.    color  Parent: data[type=scatter].error_x  Type: color Sets the stroke color of the error bars.    copy_ystyle  Parent: data[type=scatter].error_x  Type: boolean    symmetric  Parent: data[type=scatter].error_x  Type: boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.    thickness  Parent: data[type=scatter].error_x  Type: number greater than or equal to 0 Default: 2 Sets the thickness (in px) of the error bars.    traceref  Parent: data[type=scatter].error_x  Type: integer greater than or equal to 0 Default: 0    tracerefminus  Parent: data[type=scatter].error_x  Type: integer greater than or equal to 0 Default: 0    type  Parent: data[type=scatter].error_x  Type: enumerated , one of ( "percent" | "constant" | "sqrt" | "data" ) Determines the rule used to generate the error bars. If "constant`, the bar lengths are of a constant value. Set this constant in `value`. If "percent", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If "sqrt", the bar lengths correspond to the square of the underlying data. If "data", the bar lengths are set with data set `array`.    value  Parent: data[type=scatter].error_x  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars.    valueminus  Parent: data[type=scatter].error_x  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars    visible  Parent: data[type=scatter].error_x  Type: boolean Determines whether or not this set of error bars is visible.    width  Parent: data[type=scatter].error_x  Type: number greater than or equal to 0 Sets the width (in px) of the cross-bar at both ends of the error bars.      error_y  Parent: data[type=scatter] Type: object containing one or more of the keys listed below.    array  Parent: data[type=scatter].error_y  Type: data array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.    arrayminus  Parent: data[type=scatter].error_y  Type: data array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.    color  Parent: data[type=scatter].error_y  Type: color Sets the stroke color of the error bars.    symmetric  Parent: data[type=scatter].error_y  Type: boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.    thickness  Parent: data[type=scatter].error_y  Type: number greater than or equal to 0 Default: 2 Sets the thickness (in px) of the error bars.    traceref  Parent: data[type=scatter].error_y  Type: integer greater than or equal to 0 Default: 0    tracerefminus  Parent: data[type=scatter].error_y  Type: integer greater than or equal to 0 Default: 0    type  Parent: data[type=scatter].error_y  Type: enumerated , one of ( "percent" | "constant" | "sqrt" | "data" ) Determines the rule used to generate the error bars. If "constant`, the bar lengths are of a constant value. Set this constant in `value`. If "percent", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If "sqrt", the bar lengths correspond to the square of the underlying data. If "data", the bar lengths are set with data set `array`.    value  Parent: data[type=scatter].error_y  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars.    valueminus  Parent: data[type=scatter].error_y  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars    visible  Parent: data[type=scatter].error_y  Type: boolean Determines whether or not this set of error bars is visible.    width  Parent: data[type=scatter].error_y  Type: number greater than or equal to 0 Sets the width (in px) of the cross-bar at both ends of the error bars.      selectedpoints  Parent: data[type=scatter]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    selected  Parent: data[type=scatter] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=scatter].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scatter].selected.marker  Type: color Sets the marker color of selected points.    opacity  Parent: data[type=scatter].selected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of selected points.    size  Parent: data[type=scatter].selected.marker  Type: number greater than or equal to 0 Sets the marker size of selected points.      textfont  Parent: data[type=scatter].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scatter].selected.textfont  Type: color Sets the text font color of selected points.        unselected  Parent: data[type=scatter] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=scatter].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scatter].unselected.marker  Type: color Sets the marker color of unselected points, applied only when a selection exists.    opacity  Parent: data[type=scatter].unselected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of unselected points, applied only when a selection exists.    size  Parent: data[type=scatter].unselected.marker  Type: number greater than or equal to 0 Sets the marker size of unselected points, applied only when a selection exists.      textfont  Parent: data[type=scatter].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scatter].unselected.textfont  Type: color Sets the text font color of unselected points, applied only when a selection exists.        cliponaxis  Parent: data[type=scatter]  Type: boolean Default: true Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to "below traces".    connectgaps  Parent: data[type=scatter]  Type: boolean Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.    fill  Parent: data[type=scatter]  Type: enumerated , one of ( "none" | "tozeroy" | "tozerox" | "tonexty" | "tonextx" | "toself" | "tonext" ) Sets the area to fill with a solid color. Defaults to "none" unless this trace is stacked, then it gets "tonexty" ("tonextx") if `orientation` is "v" ("h") Use with `fillcolor` if not "none". "tozerox" and "tozeroy" fill to x=0 and y=0 respectively. "tonextx" and "tonexty" fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like "tozerox" and "tozeroy". "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. "tonext" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like "toself" if there is no trace before it. "tonext" should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.    fillcolor  Parent: data[type=scatter]  Type: color Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available. If fillgradient is specified, fillcolor is ignored except for setting the background color of the hover label, if any.    fillgradient  Parent: data[type=scatter] Type: object containing one or more of the keys listed below. Sets a fill gradient. If not specified, the fillcolor is used instead.    colorscale  Parent: data[type=scatter].fillgradient  Type: colorscale Sets the fill gradient colors as a color scale. The color scale is interpreted as a gradient applied in the direction specified by "orientation", from the lowest to the highest value of the scatter plot along that axis, or from the center to the most distant point from it, if orientation is "radial".    start  Parent: data[type=scatter].fillgradient  Type: number Sets the gradient start value. It is given as the absolute position on the axis determined by the orientiation. E.g., if orientation is "horizontal", the gradient will be horizontal and start from the x-position given by start. If omitted, the gradient starts at the lowest value of the trace along the respective axis. Ignored if orientation is "radial".    stop  Parent: data[type=scatter].fillgradient  Type: number Sets the gradient end value. It is given as the absolute position on the axis determined by the orientiation. E.g., if orientation is "horizontal", the gradient will be horizontal and end at the x-position given by end. If omitted, the gradient ends at the highest value of the trace along the respective axis. Ignored if orientation is "radial".    type  Parent: data[type=scatter].fillgradient  Type: enumerated , one of ( "radial" | "horizontal" | "vertical" | "none" ) Default: "none" Sets the type/orientation of the color gradient for the fill. Defaults to "none".      fillpattern  Parent: data[type=scatter] Type: object containing one or more of the keys listed below. Sets the pattern within the marker.    bgcolor  Parent: data[type=scatter].fillpattern  Type: color or array of colors When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is "overlay". Otherwise, defaults to a transparent background.    fgcolor  Parent: data[type=scatter].fillpattern  Type: color or array of colors When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is "replace". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.    fgopacity  Parent: data[type=scatter].fillpattern  Type: number between or equal to 0 and 1 Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is "overlay". Otherwise, defaults to 1.    fillmode  Parent: data[type=scatter].fillpattern  Type: enumerated , one of ( "replace" | "overlay" ) Default: "replace" Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.    shape  Parent: data[type=scatter].fillpattern  Type: enumerated or array of enumerateds , one of ( "" | "/" | "\" | "x" | "-" | "|" | "+" | "." ) Default: "" Sets the shape of the pattern fill. By default, no pattern is used for filling the area.    size  Parent: data[type=scatter].fillpattern  Type: number or array of numbers greater than or equal to 0 Default: 8 Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.    solidity  Parent: data[type=scatter].fillpattern  Type: number or array of numbers between or equal to 0 and 1 Default: 0.3 Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.      hoverlabel  Parent: data[type=scatter] Type: object containing one or more of the keys listed below.    align  Parent: data[type=scatter].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=scatter].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=scatter].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=scatter].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=scatter].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=scatter].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatter].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatter].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatter].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=scatter].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatter].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatter].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatter].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=scatter].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      hoveron  Parent: data[type=scatter]  Type: flaglist string. Any combination of "points", "fills" joined with a "+" Examples: "points", "fills", "points+fills" Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is "toself" or "tonext" and there are no markers or text, then the default is "fills", otherwise it is "points".    stackgaps  Parent: data[type=scatter]  Type: enumerated , one of ( "infer zero" | "interpolate" ) Default: "infer zero" Only relevant when `stackgroup` is used, and only the first `stackgaps` found in the `stackgroup` will be used - including if `visible` is "legendonly" but not if it is `false`. Determines how we handle locations at which other traces in this group have data but this one does not. With "infer zero" we insert a zero at these locations. With "interpolate" we linearly interpolate between existing values, and extrapolate a constant beyond the existing values.    xcalendar  Parent: data[type=scatter]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `x` date data.    ycalendar  Parent: data[type=scatter]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `y` date data.    uirevision  Parent: data[type=scatter]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      scattergl traces

      










 A scattergl trace is an object with the key "type" equal to "scattergl" (i.e. {"type": "scattergl"}) and any of the keys listed below. The data visualized as scatter point or lines is set in `x` and `y` using the WebGL plotting engine. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to a numerical arrays. 














   type  Parent: data[type=scattergl]  Type: "scattergl"    name  Parent: data[type=scattergl]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=scattergl]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=scattergl]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=scattergl]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=scattergl]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=scattergl]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=scattergl] Type: object containing one or more of the keys listed below.    font  Parent: data[type=scattergl].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=scattergl].legendgrouptitle.font  Type: color    family  Parent: data[type=scattergl].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattergl].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattergl].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattergl].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=scattergl].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattergl].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattergl].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattergl].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=scattergl].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=scattergl]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=scattergl]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    mode  Parent: data[type=scattergl]  Type: flaglist string. Any combination of "lines", "markers", "text" joined with a "+" OR "none". Examples: "lines", "markers", "lines+markers", "lines+markers+text", "none" Determines the drawing mode for this scatter trace.    ids  Parent: data[type=scattergl]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    x  Parent: data[type=scattergl]  Type: data array Sets the x coordinates.    x0  Parent: data[type=scattergl]  Type: number or categorical coordinate string Default: 0 Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.    dx  Parent: data[type=scattergl]  Type: number Default: 1 Sets the x coordinate step. See `x0` for more info.    y  Parent: data[type=scattergl]  Type: data array Sets the y coordinates.    y0  Parent: data[type=scattergl]  Type: number or categorical coordinate string Default: 0 Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.    dy  Parent: data[type=scattergl]  Type: number Default: 1 Sets the y coordinate step. See `y0` for more info.    text  Parent: data[type=scattergl]  Type: string or array of strings Default: "" Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    textposition  Parent: data[type=scattergl]  Type: enumerated or array of enumerateds , one of ( "top left" | "top center" | "top right" | "middle left" | "middle center" | "middle right" | "bottom left" | "bottom center" | "bottom right" ) Default: "middle center" Sets the positions of the `text` elements with respects to the (x,y) coordinates.    texttemplate  Parent: data[type=scattergl]  Type: string or array of strings Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.     hovertext  Parent: data[type=scattergl]  Type: string or array of strings Default: "" Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.    hoverinfo  Parent: data[type=scattergl]  Type: flaglist string. Any combination of "x", "y", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=scattergl]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    xhoverformat  Parent: data[type=scattergl]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=scattergl]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    meta  Parent: data[type=scattergl]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=scattergl]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    xaxis  Parent: data[type=scattergl]  Type: subplotid Default: x Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.    yaxis  Parent: data[type=scattergl]  Type: subplotid Default: y Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.    xperiod  Parent: data[type=scattergl]  Type: number or categorical coordinate string Default: 0 Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M<n>" on the x axis. Special values in the form of "M<n>" could be used to declare the number of months. In this case `n` must be a positive integer.    xperiodalignment  Parent: data[type=scattergl]  Type: enumerated , one of ( "start" | "middle" | "end" ) Default: "middle" Only relevant when the axis `type` is "date". Sets the alignment of data points on the x axis.    xperiod0  Parent: data[type=scattergl]  Type: number or categorical coordinate string Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.    yperiod  Parent: data[type=scattergl]  Type: number or categorical coordinate string Default: 0 Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M<n>" on the y axis. Special values in the form of "M<n>" could be used to declare the number of months. In this case `n` must be a positive integer.    yperiodalignment  Parent: data[type=scattergl]  Type: enumerated , one of ( "start" | "middle" | "end" ) Default: "middle" Only relevant when the axis `type` is "date". Sets the alignment of data points on the y axis.    yperiod0  Parent: data[type=scattergl]  Type: number or categorical coordinate string Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.    marker  Parent: data[type=scattergl] Type: object containing one or more of the keys listed below.    angle  Parent: data[type=scattergl].marker  Type: angle Default: 0 Sets the marker angle in respect to `angleref`.    autocolorscale  Parent: data[type=scattergl].marker  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=scattergl].marker  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.    cmax  Parent: data[type=scattergl].marker  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.    cmid  Parent: data[type=scattergl].marker  Type: number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.    cmin  Parent: data[type=scattergl].marker  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.    color  Parent: data[type=scattergl].marker  Type: color or array of colors Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.    coloraxis  Parent: data[type=scattergl].marker  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=scattergl].marker Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=scattergl].marker.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=scattergl].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=scattergl].marker.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=scattergl].marker.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=scattergl].marker.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=scattergl].marker.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=scattergl].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=scattergl].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=scattergl].marker.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=scattergl].marker.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=scattergl].marker.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=scattergl].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=scattergl].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=scattergl].marker.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=scattergl].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=scattergl].marker.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=scattergl].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=scattergl].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=scattergl].marker.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=scattergl].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=scattergl].marker.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=scattergl].marker.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=scattergl].marker.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=scattergl].marker.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=scattergl].marker.colorbar.tickfont  Type: color    family  Parent: data[type=scattergl].marker.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattergl].marker.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattergl].marker.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattergl].marker.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=scattergl].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattergl].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattergl].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattergl].marker.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=scattergl].marker.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=scattergl].marker.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=scattergl].marker.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=scattergl].marker.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=scattergl].marker.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=scattergl].marker.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=scattergl].marker.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=scattergl].marker.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=scattergl].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=scattergl].marker.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=scattergl].marker.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=scattergl].marker.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=scattergl].marker.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=scattergl].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=scattergl].marker.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=scattergl].marker.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=scattergl].marker.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=scattergl].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=scattergl].marker.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=scattergl].marker.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=scattergl].marker.colorbar.title.font  Type: color    family  Parent: data[type=scattergl].marker.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattergl].marker.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattergl].marker.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattergl].marker.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=scattergl].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattergl].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattergl].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattergl].marker.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=scattergl].marker.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=scattergl].marker.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=scattergl].marker.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=scattergl].marker.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=scattergl].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=scattergl].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=scattergl].marker.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=scattergl].marker.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=scattergl].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=scattergl].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colorscale  Parent: data[type=scattergl].marker  Type: colorscale Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    line  Parent: data[type=scattergl].marker Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=scattergl].marker.line  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=scattergl].marker.line  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.    cmax  Parent: data[type=scattergl].marker.line  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.    cmid  Parent: data[type=scattergl].marker.line  Type: number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.    cmin  Parent: data[type=scattergl].marker.line  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.    color  Parent: data[type=scattergl].marker.line  Type: color or array of colors Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.    coloraxis  Parent: data[type=scattergl].marker.line  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorscale  Parent: data[type=scattergl].marker.line  Type: colorscale Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    reversescale  Parent: data[type=scattergl].marker.line  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.    width  Parent: data[type=scattergl].marker.line  Type: number or array of numbers greater than or equal to 0 Sets the width (in px) of the lines bounding the marker points.      opacity  Parent: data[type=scattergl].marker  Type: number or array of numbers between or equal to 0 and 1 Sets the marker opacity.    reversescale  Parent: data[type=scattergl].marker  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.    showscale  Parent: data[type=scattergl].marker  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.    size  Parent: data[type=scattergl].marker  Type: number or array of numbers greater than or equal to 0 Default: 6 Sets the marker size (in px).    sizemin  Parent: data[type=scattergl].marker  Type: number greater than or equal to 0 Default: 0 Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.    sizemode  Parent: data[type=scattergl].marker  Type: enumerated , one of ( "diameter" | "area" ) Default: "diameter" Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.    sizeref  Parent: data[type=scattergl].marker  Type: number Default: 1 Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.    symbol  Parent: data[type=scattergl].marker  Type: enumerated or array of enumerateds , one of ( "0" | "0" | "circle" | "100" | "100" | "circle-open" | "200" | "200" | "circle-dot" | "300" | "300" | "circle-open-dot" | "1" | "1" | "square" | "101" | "101" | "square-open" | "201" | "201" | "square-dot" | "301" | "301" | "square-open-dot" | "2" | "2" | "diamond" | "102" | "102" | "diamond-open" | "202" | "202" | "diamond-dot" | "302" | "302" | "diamond-open-dot" | "3" | "3" | "cross" | "103" | "103" | "cross-open" | "203" | "203" | "cross-dot" | "303" | "303" | "cross-open-dot" | "4" | "4" | "x" | "104" | "104" | "x-open" | "204" | "204" | "x-dot" | "304" | "304" | "x-open-dot" | "5" | "5" | "triangle-up" | "105" | "105" | "triangle-up-open" | "205" | "205" | "triangle-up-dot" | "305" | "305" | "triangle-up-open-dot" | "6" | "6" | "triangle-down" | "106" | "106" | "triangle-down-open" | "206" | "206" | "triangle-down-dot" | "306" | "306" | "triangle-down-open-dot" | "7" | "7" | "triangle-left" | "107" | "107" | "triangle-left-open" | "207" | "207" | "triangle-left-dot" | "307" | "307" | "triangle-left-open-dot" | "8" | "8" | "triangle-right" | "108" | "108" | "triangle-right-open" | "208" | "208" | "triangle-right-dot" | "308" | "308" | "triangle-right-open-dot" | "9" | "9" | "triangle-ne" | "109" | "109" | "triangle-ne-open" | "209" | "209" | "triangle-ne-dot" | "309" | "309" | "triangle-ne-open-dot" | "10" | "10" | "triangle-se" | "110" | "110" | "triangle-se-open" | "210" | "210" | "triangle-se-dot" | "310" | "310" | "triangle-se-open-dot" | "11" | "11" | "triangle-sw" | "111" | "111" | "triangle-sw-open" | "211" | "211" | "triangle-sw-dot" | "311" | "311" | "triangle-sw-open-dot" | "12" | "12" | "triangle-nw" | "112" | "112" | "triangle-nw-open" | "212" | "212" | "triangle-nw-dot" | "312" | "312" | "triangle-nw-open-dot" | "13" | "13" | "pentagon" | "113" | "113" | "pentagon-open" | "213" | "213" | "pentagon-dot" | "313" | "313" | "pentagon-open-dot" | "14" | "14" | "hexagon" | "114" | "114" | "hexagon-open" | "214" | "214" | "hexagon-dot" | "314" | "314" | "hexagon-open-dot" | "15" | "15" | "hexagon2" | "115" | "115" | "hexagon2-open" | "215" | "215" | "hexagon2-dot" | "315" | "315" | "hexagon2-open-dot" | "16" | "16" | "octagon" | "116" | "116" | "octagon-open" | "216" | "216" | "octagon-dot" | "316" | "316" | "octagon-open-dot" | "17" | "17" | "star" | "117" | "117" | "star-open" | "217" | "217" | "star-dot" | "317" | "317" | "star-open-dot" | "18" | "18" | "hexagram" | "118" | "118" | "hexagram-open" | "218" | "218" | "hexagram-dot" | "318" | "318" | "hexagram-open-dot" | "19" | "19" | "star-triangle-up" | "119" | "119" | "star-triangle-up-open" | "219" | "219" | "star-triangle-up-dot" | "319" | "319" | "star-triangle-up-open-dot" | "20" | "20" | "star-triangle-down" | "120" | "120" | "star-triangle-down-open" | "220" | "220" | "star-triangle-down-dot" | "320" | "320" | "star-triangle-down-open-dot" | "21" | "21" | "star-square" | "121" | "121" | "star-square-open" | "221" | "221" | "star-square-dot" | "321" | "321" | "star-square-open-dot" | "22" | "22" | "star-diamond" | "122" | "122" | "star-diamond-open" | "222" | "222" | "star-diamond-dot" | "322" | "322" | "star-diamond-open-dot" | "23" | "23" | "diamond-tall" | "123" | "123" | "diamond-tall-open" | "223" | "223" | "diamond-tall-dot" | "323" | "323" | "diamond-tall-open-dot" | "24" | "24" | "diamond-wide" | "124" | "124" | "diamond-wide-open" | "224" | "224" | "diamond-wide-dot" | "324" | "324" | "diamond-wide-open-dot" | "25" | "25" | "hourglass" | "125" | "125" | "hourglass-open" | "26" | "26" | "bowtie" | "126" | "126" | "bowtie-open" | "27" | "27" | "circle-cross" | "127" | "127" | "circle-cross-open" | "28" | "28" | "circle-x" | "128" | "128" | "circle-x-open" | "29" | "29" | "square-cross" | "129" | "129" | "square-cross-open" | "30" | "30" | "square-x" | "130" | "130" | "square-x-open" | "31" | "31" | "diamond-cross" | "131" | "131" | "diamond-cross-open" | "32" | "32" | "diamond-x" | "132" | "132" | "diamond-x-open" | "33" | "33" | "cross-thin" | "133" | "133" | "cross-thin-open" | "34" | "34" | "x-thin" | "134" | "134" | "x-thin-open" | "35" | "35" | "asterisk" | "135" | "135" | "asterisk-open" | "36" | "36" | "hash" | "136" | "136" | "hash-open" | "236" | "236" | "hash-dot" | "336" | "336" | "hash-open-dot" | "37" | "37" | "y-up" | "137" | "137" | "y-up-open" | "38" | "38" | "y-down" | "138" | "138" | "y-down-open" | "39" | "39" | "y-left" | "139" | "139" | "y-left-open" | "40" | "40" | "y-right" | "140" | "140" | "y-right-open" | "41" | "41" | "line-ew" | "141" | "141" | "line-ew-open" | "42" | "42" | "line-ns" | "142" | "142" | "line-ns-open" | "43" | "43" | "line-ne" | "143" | "143" | "line-ne-open" | "44" | "44" | "line-nw" | "144" | "144" | "line-nw-open" | "45" | "45" | "arrow-up" | "145" | "145" | "arrow-up-open" | "46" | "46" | "arrow-down" | "146" | "146" | "arrow-down-open" | "47" | "47" | "arrow-left" | "147" | "147" | "arrow-left-open" | "48" | "48" | "arrow-right" | "148" | "148" | "arrow-right-open" | "49" | "49" | "arrow-bar-up" | "149" | "149" | "arrow-bar-up-open" | "50" | "50" | "arrow-bar-down" | "150" | "150" | "arrow-bar-down-open" | "51" | "51" | "arrow-bar-left" | "151" | "151" | "arrow-bar-left-open" | "52" | "52" | "arrow-bar-right" | "152" | "152" | "arrow-bar-right-open" | "53" | "53" | "arrow" | "153" | "153" | "arrow-open" | "54" | "54" | "arrow-wide" | "154" | "154" | "arrow-wide-open" ) Default: "circle" Sets the marker symbol type. Adding 100 is equivalent to appending "-open" to a symbol name. Adding 200 is equivalent to appending "-dot" to a symbol name. Adding 300 is equivalent to appending "-open-dot" or "dot-open" to a symbol name.      line  Parent: data[type=scattergl] Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattergl].line  Type: color Sets the line color.    dash  Parent: data[type=scattergl].line  Type: enumerated , one of ( "dash" | "dashdot" | "dot" | "longdash" | "longdashdot" | "solid" ) Default: "solid" Sets the style of the lines.    shape  Parent: data[type=scattergl].line  Type: enumerated , one of ( "linear" | "hv" | "vh" | "hvh" | "vhv" ) Default: "linear" Determines the line shape. The values correspond to step-wise line shapes.    width  Parent: data[type=scattergl].line  Type: number greater than or equal to 0 Default: 2 Sets the line width (in px).      textfont  Parent: data[type=scattergl] Type: object containing one or more of the keys listed below. Sets the text font.    color  Parent: data[type=scattergl].textfont  Type: color or array of colors    family  Parent: data[type=scattergl].textfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    size  Parent: data[type=scattergl].textfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=scattergl].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    variant  Parent: data[type=scattergl].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattergl].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "bold" ) Default: "normal" Sets the weight (or boldness) of the font.      error_x  Parent: data[type=scattergl] Type: object containing one or more of the keys listed below.    array  Parent: data[type=scattergl].error_x  Type: data array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.    arrayminus  Parent: data[type=scattergl].error_x  Type: data array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.    color  Parent: data[type=scattergl].error_x  Type: color Sets the stroke color of the error bars.    copy_ystyle  Parent: data[type=scattergl].error_x  Type: boolean    symmetric  Parent: data[type=scattergl].error_x  Type: boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.    thickness  Parent: data[type=scattergl].error_x  Type: number greater than or equal to 0 Default: 2 Sets the thickness (in px) of the error bars.    traceref  Parent: data[type=scattergl].error_x  Type: integer greater than or equal to 0 Default: 0    tracerefminus  Parent: data[type=scattergl].error_x  Type: integer greater than or equal to 0 Default: 0    type  Parent: data[type=scattergl].error_x  Type: enumerated , one of ( "percent" | "constant" | "sqrt" | "data" ) Determines the rule used to generate the error bars. If "constant`, the bar lengths are of a constant value. Set this constant in `value`. If "percent", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If "sqrt", the bar lengths correspond to the square of the underlying data. If "data", the bar lengths are set with data set `array`.    value  Parent: data[type=scattergl].error_x  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars.    valueminus  Parent: data[type=scattergl].error_x  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars    visible  Parent: data[type=scattergl].error_x  Type: boolean Determines whether or not this set of error bars is visible.    width  Parent: data[type=scattergl].error_x  Type: number greater than or equal to 0 Sets the width (in px) of the cross-bar at both ends of the error bars.      error_y  Parent: data[type=scattergl] Type: object containing one or more of the keys listed below.    array  Parent: data[type=scattergl].error_y  Type: data array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.    arrayminus  Parent: data[type=scattergl].error_y  Type: data array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.    color  Parent: data[type=scattergl].error_y  Type: color Sets the stroke color of the error bars.    symmetric  Parent: data[type=scattergl].error_y  Type: boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.    thickness  Parent: data[type=scattergl].error_y  Type: number greater than or equal to 0 Default: 2 Sets the thickness (in px) of the error bars.    traceref  Parent: data[type=scattergl].error_y  Type: integer greater than or equal to 0 Default: 0    tracerefminus  Parent: data[type=scattergl].error_y  Type: integer greater than or equal to 0 Default: 0    type  Parent: data[type=scattergl].error_y  Type: enumerated , one of ( "percent" | "constant" | "sqrt" | "data" ) Determines the rule used to generate the error bars. If "constant`, the bar lengths are of a constant value. Set this constant in `value`. If "percent", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If "sqrt", the bar lengths correspond to the square of the underlying data. If "data", the bar lengths are set with data set `array`.    value  Parent: data[type=scattergl].error_y  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars.    valueminus  Parent: data[type=scattergl].error_y  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars    visible  Parent: data[type=scattergl].error_y  Type: boolean Determines whether or not this set of error bars is visible.    width  Parent: data[type=scattergl].error_y  Type: number greater than or equal to 0 Sets the width (in px) of the cross-bar at both ends of the error bars.      selectedpoints  Parent: data[type=scattergl]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    selected  Parent: data[type=scattergl] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=scattergl].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattergl].selected.marker  Type: color Sets the marker color of selected points.    opacity  Parent: data[type=scattergl].selected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of selected points.    size  Parent: data[type=scattergl].selected.marker  Type: number greater than or equal to 0 Sets the marker size of selected points.      textfont  Parent: data[type=scattergl].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattergl].selected.textfont  Type: color Sets the text font color of selected points.        unselected  Parent: data[type=scattergl] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=scattergl].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattergl].unselected.marker  Type: color Sets the marker color of unselected points, applied only when a selection exists.    opacity  Parent: data[type=scattergl].unselected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of unselected points, applied only when a selection exists.    size  Parent: data[type=scattergl].unselected.marker  Type: number greater than or equal to 0 Sets the marker size of unselected points, applied only when a selection exists.      textfont  Parent: data[type=scattergl].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattergl].unselected.textfont  Type: color Sets the text font color of unselected points, applied only when a selection exists.        connectgaps  Parent: data[type=scattergl]  Type: boolean Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.    fill  Parent: data[type=scattergl]  Type: enumerated , one of ( "none" | "tozeroy" | "tozerox" | "tonexty" | "tonextx" | "toself" | "tonext" ) Default: "none" Sets the area to fill with a solid color. Defaults to "none" unless this trace is stacked, then it gets "tonexty" ("tonextx") if `orientation` is "v" ("h") Use with `fillcolor` if not "none". "tozerox" and "tozeroy" fill to x=0 and y=0 respectively. "tonextx" and "tonexty" fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like "tozerox" and "tozeroy". "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. "tonext" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like "toself" if there is no trace before it. "tonext" should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.    fillcolor  Parent: data[type=scattergl]  Type: color Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.    hoverlabel  Parent: data[type=scattergl] Type: object containing one or more of the keys listed below.    align  Parent: data[type=scattergl].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=scattergl].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=scattergl].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=scattergl].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=scattergl].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=scattergl].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattergl].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattergl].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattergl].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=scattergl].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattergl].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattergl].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattergl].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=scattergl].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      xcalendar  Parent: data[type=scattergl]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `x` date data.    ycalendar  Parent: data[type=scattergl]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `y` date data.    uirevision  Parent: data[type=scattergl]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      bar traces

      










 A bar trace is an object with the key "type" equal to "bar" (i.e. {"type": "bar"}) and any of the keys listed below. The data visualized by the span of the bars is set in `y` if `orientation` is set to "v" (the default) and the labels are set in `x`. By setting `orientation` to "h", the roles are interchanged. 














   type  Parent: data[type=bar]  Type: "bar"    name  Parent: data[type=bar]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=bar]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=bar]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=bar]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=bar]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=bar]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=bar] Type: object containing one or more of the keys listed below.    font  Parent: data[type=bar].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=bar].legendgrouptitle.font  Type: color    family  Parent: data[type=bar].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=bar].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=bar].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=bar].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=bar].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=bar].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=bar].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=bar].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=bar].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=bar]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=bar]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=bar]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    zorder  Parent: data[type=bar]  Type: integer Default: 0 Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.    x  Parent: data[type=bar]  Type: data array Sets the x coordinates.    x0  Parent: data[type=bar]  Type: number or categorical coordinate string Default: 0 Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.    dx  Parent: data[type=bar]  Type: number Default: 1 Sets the x coordinate step. See `x0` for more info.    y  Parent: data[type=bar]  Type: data array Sets the y coordinates.    y0  Parent: data[type=bar]  Type: number or categorical coordinate string Default: 0 Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.    dy  Parent: data[type=bar]  Type: number Default: 1 Sets the y coordinate step. See `y0` for more info.    base  Parent: data[type=bar]  Type: number or categorical coordinate string Sets where the bar base is drawn (in position axis units). In "stack" or "relative" barmode, traces that set "base" will be excluded and drawn in "overlay" mode instead.    width  Parent: data[type=bar]  Type: number or array of numbers greater than or equal to 0 Sets the bar width (in position axis units).    offset  Parent: data[type=bar]  Type: number or array of numbers Shifts the position where the bar is drawn (in position axis units). In "group" barmode, traces that set "offset" will be excluded and drawn in "overlay" mode instead.    text  Parent: data[type=bar]  Type: string or array of strings Default: "" Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    textposition  Parent: data[type=bar]  Type: enumerated or array of enumerateds , one of ( "inside" | "outside" | "auto" | "none" ) Default: "auto" Specifies the location of the `text`. "inside" positions `text` inside, next to the bar end (rotated and scaled if needed). "outside" positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. "auto" tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If "none", no text appears.    texttemplate  Parent: data[type=bar]  Type: string or array of strings Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `value` and `label`.    hovertext  Parent: data[type=bar]  Type: string or array of strings Default: "" Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.    hoverinfo  Parent: data[type=bar]  Type: flaglist string. Any combination of "x", "y", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=bar]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `value` and `label`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    xhoverformat  Parent: data[type=bar]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=bar]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    meta  Parent: data[type=bar]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=bar]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    xaxis  Parent: data[type=bar]  Type: subplotid Default: x Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.    yaxis  Parent: data[type=bar]  Type: subplotid Default: y Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.    orientation  Parent: data[type=bar]  Type: enumerated , one of ( "v" | "h" ) Sets the orientation of the bars. With "v" ("h"), the value of the each bar spans along the vertical (horizontal).    alignmentgroup  Parent: data[type=bar]  Type: string Default: "" Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.    offsetgroup  Parent: data[type=bar]  Type: string Default: "" Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.    xperiod  Parent: data[type=bar]  Type: number or categorical coordinate string Default: 0 Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M<n>" on the x axis. Special values in the form of "M<n>" could be used to declare the number of months. In this case `n` must be a positive integer.    xperiodalignment  Parent: data[type=bar]  Type: enumerated , one of ( "start" | "middle" | "end" ) Default: "middle" Only relevant when the axis `type` is "date". Sets the alignment of data points on the x axis.    xperiod0  Parent: data[type=bar]  Type: number or categorical coordinate string Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.    yperiod  Parent: data[type=bar]  Type: number or categorical coordinate string Default: 0 Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M<n>" on the y axis. Special values in the form of "M<n>" could be used to declare the number of months. In this case `n` must be a positive integer.    yperiodalignment  Parent: data[type=bar]  Type: enumerated , one of ( "start" | "middle" | "end" ) Default: "middle" Only relevant when the axis `type` is "date". Sets the alignment of data points on the y axis.    yperiod0  Parent: data[type=bar]  Type: number or categorical coordinate string Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.    marker  Parent: data[type=bar] Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=bar].marker  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=bar].marker  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.    cmax  Parent: data[type=bar].marker  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.    cmid  Parent: data[type=bar].marker  Type: number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.    cmin  Parent: data[type=bar].marker  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.    color  Parent: data[type=bar].marker  Type: color or array of colors Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.    coloraxis  Parent: data[type=bar].marker  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=bar].marker Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=bar].marker.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=bar].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=bar].marker.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=bar].marker.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=bar].marker.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=bar].marker.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=bar].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=bar].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=bar].marker.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=bar].marker.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=bar].marker.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=bar].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=bar].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=bar].marker.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=bar].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=bar].marker.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=bar].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=bar].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=bar].marker.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=bar].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=bar].marker.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=bar].marker.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=bar].marker.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=bar].marker.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=bar].marker.colorbar.tickfont  Type: color    family  Parent: data[type=bar].marker.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=bar].marker.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=bar].marker.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=bar].marker.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=bar].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=bar].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=bar].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=bar].marker.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=bar].marker.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=bar].marker.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=bar].marker.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=bar].marker.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=bar].marker.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=bar].marker.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=bar].marker.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=bar].marker.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=bar].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=bar].marker.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=bar].marker.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=bar].marker.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=bar].marker.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=bar].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=bar].marker.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=bar].marker.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=bar].marker.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=bar].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=bar].marker.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=bar].marker.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=bar].marker.colorbar.title.font  Type: color    family  Parent: data[type=bar].marker.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=bar].marker.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=bar].marker.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=bar].marker.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=bar].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=bar].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=bar].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=bar].marker.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=bar].marker.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=bar].marker.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=bar].marker.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=bar].marker.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=bar].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=bar].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=bar].marker.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=bar].marker.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=bar].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=bar].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colorscale  Parent: data[type=bar].marker  Type: colorscale Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    cornerradius  Parent: data[type=bar].marker  Type: number or categorical coordinate string Sets the rounding of corners. May be an integer number of pixels, or a percentage of bar width (as a string ending in %). Defaults to `layout.barcornerradius`. In stack or relative barmode, the first trace to set cornerradius is used for the whole stack.    line  Parent: data[type=bar].marker Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=bar].marker.line  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=bar].marker.line  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.    cmax  Parent: data[type=bar].marker.line  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.    cmid  Parent: data[type=bar].marker.line  Type: number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.    cmin  Parent: data[type=bar].marker.line  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.    color  Parent: data[type=bar].marker.line  Type: color or array of colors Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.    coloraxis  Parent: data[type=bar].marker.line  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorscale  Parent: data[type=bar].marker.line  Type: colorscale Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    reversescale  Parent: data[type=bar].marker.line  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.    width  Parent: data[type=bar].marker.line  Type: number or array of numbers greater than or equal to 0 Default: 0 Sets the width (in px) of the lines bounding the marker points.      opacity  Parent: data[type=bar].marker  Type: number or array of numbers between or equal to 0 and 1 Default: 1 Sets the opacity of the bars.    pattern  Parent: data[type=bar].marker Type: object containing one or more of the keys listed below. Sets the pattern within the marker.    bgcolor  Parent: data[type=bar].marker.pattern  Type: color or array of colors When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is "overlay". Otherwise, defaults to a transparent background.    fgcolor  Parent: data[type=bar].marker.pattern  Type: color or array of colors When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is "replace". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.    fgopacity  Parent: data[type=bar].marker.pattern  Type: number between or equal to 0 and 1 Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is "overlay". Otherwise, defaults to 1.    fillmode  Parent: data[type=bar].marker.pattern  Type: enumerated , one of ( "replace" | "overlay" ) Default: "replace" Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.    shape  Parent: data[type=bar].marker.pattern  Type: enumerated or array of enumerateds , one of ( "" | "/" | "\" | "x" | "-" | "|" | "+" | "." ) Default: "" Sets the shape of the pattern fill. By default, no pattern is used for filling the area.    size  Parent: data[type=bar].marker.pattern  Type: number or array of numbers greater than or equal to 0 Default: 8 Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.    solidity  Parent: data[type=bar].marker.pattern  Type: number or array of numbers between or equal to 0 and 1 Default: 0.3 Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.      reversescale  Parent: data[type=bar].marker  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.    showscale  Parent: data[type=bar].marker  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.      textangle  Parent: data[type=bar]  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With "auto" the texts may automatically be rotated to fit with the maximum size in bars.    textfont  Parent: data[type=bar] Type: object containing one or more of the keys listed below. Sets the font used for `text`.    color  Parent: data[type=bar].textfont  Type: color or array of colors    family  Parent: data[type=bar].textfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=bar].textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=bar].textfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=bar].textfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=bar].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=bar].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=bar].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=bar].textfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      error_x  Parent: data[type=bar] Type: object containing one or more of the keys listed below.    array  Parent: data[type=bar].error_x  Type: data array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.    arrayminus  Parent: data[type=bar].error_x  Type: data array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.    color  Parent: data[type=bar].error_x  Type: color Sets the stroke color of the error bars.    copy_ystyle  Parent: data[type=bar].error_x  Type: boolean    symmetric  Parent: data[type=bar].error_x  Type: boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.    thickness  Parent: data[type=bar].error_x  Type: number greater than or equal to 0 Default: 2 Sets the thickness (in px) of the error bars.    traceref  Parent: data[type=bar].error_x  Type: integer greater than or equal to 0 Default: 0    tracerefminus  Parent: data[type=bar].error_x  Type: integer greater than or equal to 0 Default: 0    type  Parent: data[type=bar].error_x  Type: enumerated , one of ( "percent" | "constant" | "sqrt" | "data" ) Determines the rule used to generate the error bars. If "constant`, the bar lengths are of a constant value. Set this constant in `value`. If "percent", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If "sqrt", the bar lengths correspond to the square of the underlying data. If "data", the bar lengths are set with data set `array`.    value  Parent: data[type=bar].error_x  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars.    valueminus  Parent: data[type=bar].error_x  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars    visible  Parent: data[type=bar].error_x  Type: boolean Determines whether or not this set of error bars is visible.    width  Parent: data[type=bar].error_x  Type: number greater than or equal to 0 Sets the width (in px) of the cross-bar at both ends of the error bars.      error_y  Parent: data[type=bar] Type: object containing one or more of the keys listed below.    array  Parent: data[type=bar].error_y  Type: data array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.    arrayminus  Parent: data[type=bar].error_y  Type: data array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.    color  Parent: data[type=bar].error_y  Type: color Sets the stroke color of the error bars.    symmetric  Parent: data[type=bar].error_y  Type: boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.    thickness  Parent: data[type=bar].error_y  Type: number greater than or equal to 0 Default: 2 Sets the thickness (in px) of the error bars.    traceref  Parent: data[type=bar].error_y  Type: integer greater than or equal to 0 Default: 0    tracerefminus  Parent: data[type=bar].error_y  Type: integer greater than or equal to 0 Default: 0    type  Parent: data[type=bar].error_y  Type: enumerated , one of ( "percent" | "constant" | "sqrt" | "data" ) Determines the rule used to generate the error bars. If "constant`, the bar lengths are of a constant value. Set this constant in `value`. If "percent", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If "sqrt", the bar lengths correspond to the square of the underlying data. If "data", the bar lengths are set with data set `array`.    value  Parent: data[type=bar].error_y  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars.    valueminus  Parent: data[type=bar].error_y  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars    visible  Parent: data[type=bar].error_y  Type: boolean Determines whether or not this set of error bars is visible.    width  Parent: data[type=bar].error_y  Type: number greater than or equal to 0 Sets the width (in px) of the cross-bar at both ends of the error bars.      selectedpoints  Parent: data[type=bar]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    selected  Parent: data[type=bar] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=bar].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=bar].selected.marker  Type: color Sets the marker color of selected points.    opacity  Parent: data[type=bar].selected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of selected points.      textfont  Parent: data[type=bar].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=bar].selected.textfont  Type: color Sets the text font color of selected points.        unselected  Parent: data[type=bar] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=bar].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=bar].unselected.marker  Type: color Sets the marker color of unselected points, applied only when a selection exists.    opacity  Parent: data[type=bar].unselected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of unselected points, applied only when a selection exists.      textfont  Parent: data[type=bar].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=bar].unselected.textfont  Type: color Sets the text font color of unselected points, applied only when a selection exists.        cliponaxis  Parent: data[type=bar]  Type: boolean Default: true Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to "below traces".    constraintext  Parent: data[type=bar]  Type: enumerated , one of ( "inside" | "outside" | "both" | "none" ) Default: "both" Constrain the size of text inside or outside a bar to be no larger than the bar itself.    hoverlabel  Parent: data[type=bar] Type: object containing one or more of the keys listed below.    align  Parent: data[type=bar].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=bar].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=bar].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=bar].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=bar].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=bar].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=bar].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=bar].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=bar].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=bar].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=bar].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=bar].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=bar].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=bar].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      insidetextanchor  Parent: data[type=bar]  Type: enumerated , one of ( "end" | "middle" | "start" ) Default: "end" Determines if texts are kept at center or start/end points in `textposition` "inside" mode.    insidetextfont  Parent: data[type=bar] Type: object containing one or more of the keys listed below. Sets the font used for `text` lying inside the bar.    color  Parent: data[type=bar].insidetextfont  Type: color or array of colors    family  Parent: data[type=bar].insidetextfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=bar].insidetextfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=bar].insidetextfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=bar].insidetextfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=bar].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=bar].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=bar].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=bar].insidetextfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      outsidetextfont  Parent: data[type=bar] Type: object containing one or more of the keys listed below. Sets the font used for `text` lying outside the bar.    color  Parent: data[type=bar].outsidetextfont  Type: color or array of colors    family  Parent: data[type=bar].outsidetextfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=bar].outsidetextfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=bar].outsidetextfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=bar].outsidetextfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=bar].outsidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=bar].outsidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=bar].outsidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=bar].outsidetextfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      xcalendar  Parent: data[type=bar]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `x` date data.    ycalendar  Parent: data[type=bar]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `y` date data.    uirevision  Parent: data[type=bar]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      pie traces

      










 A pie trace is an object with the key "type" equal to "pie" (i.e. {"type": "pie"}) and any of the keys listed below. A data visualized by the sectors of the pie is set in `values`. The sector labels are set in `labels`. The sector colors are set in `marker.colors` 














   type  Parent: data[type=pie]  Type: "pie"    name  Parent: data[type=pie]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    title  Parent: data[type=pie] Type: object containing one or more of the keys listed below.    font  Parent: data[type=pie].title Type: object containing one or more of the keys listed below. Sets the font used for `title`.    color  Parent: data[type=pie].title.font  Type: color or array of colors    family  Parent: data[type=pie].title.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=pie].title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=pie].title.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=pie].title.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=pie].title.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=pie].title.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=pie].title.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=pie].title.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      position  Parent: data[type=pie].title  Type: enumerated , one of ( "top left" | "top center" | "top right" | "middle center" | "bottom left" | "bottom center" | "bottom right" ) Specifies the location of the `title`.    text  Parent: data[type=pie].title  Type: string Default: "" Sets the title of the chart. If it is empty, no title is displayed.      visible  Parent: data[type=pie]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=pie]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=pie]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=pie]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=pie]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=pie] Type: object containing one or more of the keys listed below.    font  Parent: data[type=pie].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=pie].legendgrouptitle.font  Type: color    family  Parent: data[type=pie].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=pie].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=pie].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=pie].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=pie].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=pie].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=pie].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=pie].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=pie].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=pie]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=pie]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=pie]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    values  Parent: data[type=pie]  Type: data array Sets the values of the sectors. If omitted, we count occurrences of each label.    labels  Parent: data[type=pie]  Type: data array Sets the sector labels. If `labels` entries are duplicated, we sum associated `values` or simply count occurrences if `values` is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label.    dlabel  Parent: data[type=pie]  Type: number Default: 1 Sets the label step. See `label0` for more info.    label0  Parent: data[type=pie]  Type: number Default: 0 Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step.    pull  Parent: data[type=pie]  Type: number or array of numbers between or equal to 0 and 1 Default: 0 Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.    text  Parent: data[type=pie]  Type: data array Sets text elements associated with each sector. If trace `textinfo` contains a "text" flag, these elements will be seen on the chart. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    textposition  Parent: data[type=pie]  Type: enumerated or array of enumerateds , one of ( "inside" | "outside" | "auto" | "none" ) Default: "auto" Specifies the location of the `textinfo`.    texttemplate  Parent: data[type=pie]  Type: string or array of strings Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label`, `color`, `value`, `percent` and `text`.    hovertext  Parent: data[type=pie]  Type: string or array of strings Default: "" Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a "text" flag.    hoverinfo  Parent: data[type=pie]  Type: flaglist string. Any combination of "label", "text", "value", "percent", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "label", "text", "label+text", "label+text+value", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=pie]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label`, `color`, `value`, `percent` and `text`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    meta  Parent: data[type=pie]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=pie]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    domain  Parent: data[type=pie] Type: object containing one or more of the keys listed below.    column  Parent: data[type=pie].domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this column in the grid for this pie trace .    row  Parent: data[type=pie].domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this row in the grid for this pie trace .    x  Parent: data[type=pie].domain  Type: array Default: [0, 1] Sets the horizontal domain of this pie trace (in plot fraction).    y  Parent: data[type=pie].domain  Type: array Default: [0, 1] Sets the vertical domain of this pie trace (in plot fraction).      automargin  Parent: data[type=pie]  Type: boolean Determines whether outside text labels can push the margins.    marker  Parent: data[type=pie] Type: object containing one or more of the keys listed below.    colors  Parent: data[type=pie].marker  Type: data array Sets the color of each sector. If not specified, the default trace color set is used to pick the sector colors.    line  Parent: data[type=pie].marker Type: object containing one or more of the keys listed below.    color  Parent: data[type=pie].marker.line  Type: color or array of colors Default: "#444" Sets the color of the line enclosing each sector.    width  Parent: data[type=pie].marker.line  Type: number or array of numbers greater than or equal to 0 Default: 0 Sets the width (in px) of the line enclosing each sector.      pattern  Parent: data[type=pie].marker Type: object containing one or more of the keys listed below. Sets the pattern within the marker.    bgcolor  Parent: data[type=pie].marker.pattern  Type: color or array of colors When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is "overlay". Otherwise, defaults to a transparent background.    fgcolor  Parent: data[type=pie].marker.pattern  Type: color or array of colors When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is "replace". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.    fgopacity  Parent: data[type=pie].marker.pattern  Type: number between or equal to 0 and 1 Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is "overlay". Otherwise, defaults to 1.    fillmode  Parent: data[type=pie].marker.pattern  Type: enumerated , one of ( "replace" | "overlay" ) Default: "replace" Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.    shape  Parent: data[type=pie].marker.pattern  Type: enumerated or array of enumerateds , one of ( "" | "/" | "\" | "x" | "-" | "|" | "+" | "." ) Default: "" Sets the shape of the pattern fill. By default, no pattern is used for filling the area.    size  Parent: data[type=pie].marker.pattern  Type: number or array of numbers greater than or equal to 0 Default: 8 Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.    solidity  Parent: data[type=pie].marker.pattern  Type: number or array of numbers between or equal to 0 and 1 Default: 0.3 Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.        textfont  Parent: data[type=pie] Type: object containing one or more of the keys listed below. Sets the font used for `textinfo`.    color  Parent: data[type=pie].textfont  Type: color or array of colors    family  Parent: data[type=pie].textfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=pie].textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=pie].textfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=pie].textfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=pie].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=pie].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=pie].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=pie].textfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      textinfo  Parent: data[type=pie]  Type: flaglist string. Any combination of "label", "text", "value", "percent" joined with a "+" OR "none". Examples: "label", "text", "label+text", "label+text+value", "none" Determines which trace information appear on the graph.    direction  Parent: data[type=pie]  Type: enumerated , one of ( "clockwise" | "counterclockwise" ) Default: "counterclockwise" Specifies the direction at which succeeding sectors follow one another.    hole  Parent: data[type=pie]  Type: number between or equal to 0 and 1 Default: 0 Sets the fraction of the radius to cut out of the pie. Use this to make a donut chart.    hoverlabel  Parent: data[type=pie] Type: object containing one or more of the keys listed below.    align  Parent: data[type=pie].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=pie].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=pie].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=pie].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=pie].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=pie].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=pie].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=pie].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=pie].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=pie].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=pie].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=pie].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=pie].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=pie].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      insidetextfont  Parent: data[type=pie] Type: object containing one or more of the keys listed below. Sets the font used for `textinfo` lying inside the sector.    color  Parent: data[type=pie].insidetextfont  Type: color or array of colors    family  Parent: data[type=pie].insidetextfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=pie].insidetextfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=pie].insidetextfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=pie].insidetextfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=pie].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=pie].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=pie].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=pie].insidetextfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      insidetextorientation  Parent: data[type=pie]  Type: enumerated , one of ( "horizontal" | "radial" | "tangential" | "auto" ) Default: "auto" Controls the orientation of the text inside chart sectors. When set to "auto", text may be oriented in any direction in order to be as big as possible in the middle of a sector. The "horizontal" option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The "radial" option orients text along the radius of the sector. The "tangential" option orients text perpendicular to the radius of the sector.    outsidetextfont  Parent: data[type=pie] Type: object containing one or more of the keys listed below. Sets the font used for `textinfo` lying outside the sector.    color  Parent: data[type=pie].outsidetextfont  Type: color or array of colors    family  Parent: data[type=pie].outsidetextfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=pie].outsidetextfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=pie].outsidetextfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=pie].outsidetextfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=pie].outsidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=pie].outsidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=pie].outsidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=pie].outsidetextfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      rotation  Parent: data[type=pie]  Type: angle Default: 0 Instead of the first slice starting at 12 o'clock, rotate to some other angle.    scalegroup  Parent: data[type=pie]  Type: string Default: "" If there are multiple pie charts that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.    sort  Parent: data[type=pie]  Type: boolean Default: true Determines whether or not the sectors are reordered from largest to smallest.    uirevision  Parent: data[type=pie]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      heatmap traces

      










 A heatmap trace is an object with the key "type" equal to "heatmap" (i.e. {"type": "heatmap"}) and any of the keys listed below. The data that describes the heatmap value-to-color mapping is set in `z`. Data in `z` can either be a 2D array of values (ragged or not) or a 1D array of values. In the case where `z` is a 2D array, say that `z` has N rows and M columns. Then, by default, the resulting heatmap will have N partitions along the y axis and M partitions along the x axis. In other words, the i-th row/ j-th column cell in `z` is mapped to the i-th partition of the y axis (starting from the bottom of the plot) and the j-th partition of the x-axis (starting from the left of the plot). This behavior can be flipped by using `transpose`. Moreover, `x` (`y`) can be provided with M or M+1 (N or N+1) elements. If M (N), then the coordinates correspond to the center of the heatmap cells and the cells have equal width. If M+1 (N+1), then the coordinates correspond to the edges of the heatmap cells. In the case where `z` is a 1D array, the x and y coordinates must be provided in `x` and `y` respectively to form data triplets. 














   type  Parent: data[type=heatmap]  Type: "heatmap"    name  Parent: data[type=heatmap]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=heatmap]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=heatmap]  Type: boolean Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=heatmap]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=heatmap]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=heatmap]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=heatmap] Type: object containing one or more of the keys listed below.    font  Parent: data[type=heatmap].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=heatmap].legendgrouptitle.font  Type: color    family  Parent: data[type=heatmap].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=heatmap].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=heatmap].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=heatmap].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=heatmap].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=heatmap].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=heatmap].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=heatmap].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=heatmap].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=heatmap]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=heatmap]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=heatmap]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    zorder  Parent: data[type=heatmap]  Type: integer Default: 0 Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.    x  Parent: data[type=heatmap]  Type: data array Sets the x coordinates.    x0  Parent: data[type=heatmap]  Type: number or categorical coordinate string Default: 0 Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.    dx  Parent: data[type=heatmap]  Type: number Default: 1 Sets the x coordinate step. See `x0` for more info.    xtype  Parent: data[type=heatmap]  Type: enumerated , one of ( "array" | "scaled" ) If "array", the heatmap's x coordinates are given by "x" (the default behavior when `x` is provided). If "scaled", the heatmap's x coordinates are given by "x0" and "dx" (the default behavior when `x` is not provided).    xgap  Parent: data[type=heatmap]  Type: number greater than or equal to 0 Default: 0 Sets the horizontal gap (in pixels) between bricks.    y  Parent: data[type=heatmap]  Type: data array Sets the y coordinates.    y0  Parent: data[type=heatmap]  Type: number or categorical coordinate string Default: 0 Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.    dy  Parent: data[type=heatmap]  Type: number Default: 1 Sets the y coordinate step. See `y0` for more info.    ytype  Parent: data[type=heatmap]  Type: enumerated , one of ( "array" | "scaled" ) If "array", the heatmap's y coordinates are given by "y" (the default behavior when `y` is provided) If "scaled", the heatmap's y coordinates are given by "y0" and "dy" (the default behavior when `y` is not provided)    ygap  Parent: data[type=heatmap]  Type: number greater than or equal to 0 Default: 0 Sets the vertical gap (in pixels) between bricks.    z  Parent: data[type=heatmap]  Type: data array Sets the z data.    text  Parent: data[type=heatmap]  Type: data array Sets the text elements associated with each z value.    texttemplate  Parent: data[type=heatmap]  Type: string Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `x`, `y`, `z` and `text`.    hovertext  Parent: data[type=heatmap]  Type: data array Same as `text`.    hoverinfo  Parent: data[type=heatmap]  Type: flaglist string. Any combination of "x", "y", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=heatmap]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    xhoverformat  Parent: data[type=heatmap]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=heatmap]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    meta  Parent: data[type=heatmap]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=heatmap]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    xaxis  Parent: data[type=heatmap]  Type: subplotid Default: x Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.    yaxis  Parent: data[type=heatmap]  Type: subplotid Default: y Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.    coloraxis  Parent: data[type=heatmap]  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    xperiod  Parent: data[type=heatmap]  Type: number or categorical coordinate string Default: 0 Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M<n>" on the x axis. Special values in the form of "M<n>" could be used to declare the number of months. In this case `n` must be a positive integer.    xperiodalignment  Parent: data[type=heatmap]  Type: enumerated , one of ( "start" | "middle" | "end" ) Default: "middle" Only relevant when the axis `type` is "date". Sets the alignment of data points on the x axis.    xperiod0  Parent: data[type=heatmap]  Type: number or categorical coordinate string Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.    yperiod  Parent: data[type=heatmap]  Type: number or categorical coordinate string Default: 0 Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M<n>" on the y axis. Special values in the form of "M<n>" could be used to declare the number of months. In this case `n` must be a positive integer.    yperiodalignment  Parent: data[type=heatmap]  Type: enumerated , one of ( "start" | "middle" | "end" ) Default: "middle" Only relevant when the axis `type` is "date". Sets the alignment of data points on the y axis.    yperiod0  Parent: data[type=heatmap]  Type: number or categorical coordinate string Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.    textfont  Parent: data[type=heatmap] Type: object containing one or more of the keys listed below. Sets the text font.    color  Parent: data[type=heatmap].textfont  Type: color Default: "auto"    family  Parent: data[type=heatmap].textfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=heatmap].textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=heatmap].textfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=heatmap].textfont  Type: number greater than or equal to 1 Default: "auto"    style  Parent: data[type=heatmap].textfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=heatmap].textfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=heatmap].textfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=heatmap].textfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      colorbar  Parent: data[type=heatmap] Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=heatmap].colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=heatmap].colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=heatmap].colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=heatmap].colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=heatmap].colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=heatmap].colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=heatmap].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=heatmap].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=heatmap].colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=heatmap].colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=heatmap].colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=heatmap].colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=heatmap].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=heatmap].colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=heatmap].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=heatmap].colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=heatmap].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=heatmap].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=heatmap].colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=heatmap].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=heatmap].colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=heatmap].colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=heatmap].colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=heatmap].colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=heatmap].colorbar.tickfont  Type: color    family  Parent: data[type=heatmap].colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=heatmap].colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=heatmap].colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=heatmap].colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=heatmap].colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=heatmap].colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=heatmap].colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=heatmap].colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=heatmap].colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=heatmap].colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=heatmap].colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=heatmap].colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=heatmap].colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=heatmap].colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=heatmap].colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=heatmap].colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=heatmap].colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=heatmap].colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=heatmap].colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=heatmap].colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=heatmap].colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=heatmap].colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=heatmap].colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=heatmap].colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=heatmap].colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=heatmap].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=heatmap].colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=heatmap].colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=heatmap].colorbar.title.font  Type: color    family  Parent: data[type=heatmap].colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=heatmap].colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=heatmap].colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=heatmap].colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=heatmap].colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=heatmap].colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=heatmap].colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=heatmap].colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=heatmap].colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=heatmap].colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=heatmap].colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=heatmap].colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=heatmap].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=heatmap].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=heatmap].colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=heatmap].colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=heatmap].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=heatmap].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      autocolorscale  Parent: data[type=heatmap]  Type: boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    colorscale  Parent: data[type=heatmap]  Type: colorscale Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    showscale  Parent: data[type=heatmap]  Type: boolean Default: true Determines whether or not a colorbar is displayed for this trace.    reversescale  Parent: data[type=heatmap]  Type: boolean Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.    zauto  Parent: data[type=heatmap]  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.    zhoverformat  Parent: data[type=heatmap]  Type: string Default: "" Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.    zmax  Parent: data[type=heatmap]  Type: number Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.    zmid  Parent: data[type=heatmap]  Type: number Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.    zmin  Parent: data[type=heatmap]  Type: number Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.    zsmooth  Parent: data[type=heatmap]  Type: enumerated , one of ( "fast" | "best" | false ) Picks a smoothing algorithm use to smooth `z` data.    connectgaps  Parent: data[type=heatmap]  Type: boolean Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in. It is defaulted to true if `z` is a one dimensional array and `zsmooth` is not false; otherwise it is defaulted to false.    hoverlabel  Parent: data[type=heatmap] Type: object containing one or more of the keys listed below.    align  Parent: data[type=heatmap].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=heatmap].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=heatmap].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=heatmap].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=heatmap].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=heatmap].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=heatmap].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=heatmap].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=heatmap].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=heatmap].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=heatmap].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=heatmap].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=heatmap].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=heatmap].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      hoverongaps  Parent: data[type=heatmap]  Type: boolean Default: true Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data have hover labels associated with them.    transpose  Parent: data[type=heatmap]  Type: boolean Transposes the z data.    xcalendar  Parent: data[type=heatmap]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `x` date data.    ycalendar  Parent: data[type=heatmap]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `y` date data.    uirevision  Parent: data[type=heatmap]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      image traces

      










 A image trace is an object with the key "type" equal to "image" (i.e. {"type": "image"}) and any of the keys listed below. Display an image, i.e. data on a 2D regular raster. By default, when an image is displayed in a subplot, its y axis will be reversed (ie. `autorange: 'reversed'`), constrained to the domain (ie. `constrain: 'domain'`) and it will have the same scale as its x axis (ie. `scaleanchor: 'x,`) in order for pixels to be rendered as squares. 














   type  Parent: data[type=image]  Type: "image"    name  Parent: data[type=image]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=image]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    legend  Parent: data[type=image]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=image]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgrouptitle  Parent: data[type=image] Type: object containing one or more of the keys listed below.    font  Parent: data[type=image].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=image].legendgrouptitle.font  Type: color    family  Parent: data[type=image].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=image].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=image].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=image].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=image].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=image].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=image].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=image].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=image].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=image]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=image]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=image]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    zorder  Parent: data[type=image]  Type: integer Default: 0 Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.    x0  Parent: data[type=image]  Type: number or categorical coordinate string Default: 0 Set the image's x position. The left edge of the image (or the right edge if the x axis is reversed or dx is negative) will be found at xmin=x0-dx/2    dx  Parent: data[type=image]  Type: number Default: 1 Set the pixel's horizontal size.    y0  Parent: data[type=image]  Type: number or categorical coordinate string Default: 0 Set the image's y position. The top edge of the image (or the bottom edge if the y axis is NOT reversed or if dy is negative) will be found at ymin=y0-dy/2. By default when an image trace is included, the y axis will be reversed so that the image is right-side-up, but you can disable this by setting yaxis.autorange=true or by providing an explicit y axis range.    dy  Parent: data[type=image]  Type: number Default: 1 Set the pixel's vertical size    z  Parent: data[type=image]  Type: data array A 2-dimensional array in which each element is an array of 3 or 4 numbers representing a color.    source  Parent: data[type=image]  Type: string Specifies the data URI of the image to be visualized. The URI consists of "data:image/[<media subtype>][;base64],<data>"    text  Parent: data[type=image]  Type: data array Sets the text elements associated with each z value.    hovertext  Parent: data[type=image]  Type: data array Same as `text`.    hoverinfo  Parent: data[type=image]  Type: flaglist string. Any combination of "x", "y", "z", "color", "name", "text" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "x+y+z+text+name" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=image]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `z`, `color` and `colormodel`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    meta  Parent: data[type=image]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=image]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    xaxis  Parent: data[type=image]  Type: subplotid Default: x Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.    yaxis  Parent: data[type=image]  Type: subplotid Default: y Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.    colormodel  Parent: data[type=image]  Type: enumerated , one of ( "rgb" | "rgba" | "rgba256" | "hsl" | "hsla" ) Color model used to map the numerical color components described in `z` into colors. If `source` is specified, this attribute will be set to `rgba256` otherwise it defaults to `rgb`.    zmax  Parent: data[type=image]  Type: array Array defining the higher bound for each color component. Note that the default value will depend on the colormodel. For the `rgb` colormodel, it is [255, 255, 255]. For the `rgba` colormodel, it is [255, 255, 255, 1]. For the `rgba256` colormodel, it is [255, 255, 255, 255]. For the `hsl` colormodel, it is [360, 100, 100]. For the `hsla` colormodel, it is [360, 100, 100, 1].    zmin  Parent: data[type=image]  Type: array Array defining the lower bound for each color component. Note that the default value will depend on the colormodel. For the `rgb` colormodel, it is [0, 0, 0]. For the `rgba` colormodel, it is [0, 0, 0, 0]. For the `rgba256` colormodel, it is [0, 0, 0, 0]. For the `hsl` colormodel, it is [0, 0, 0]. For the `hsla` colormodel, it is [0, 0, 0, 0].    zsmooth  Parent: data[type=image]  Type: enumerated , one of ( "fast" | false ) Picks a smoothing algorithm used to smooth `z` data. This only applies for image traces that use the `source` attribute.    hoverlabel  Parent: data[type=image] Type: object containing one or more of the keys listed below.    align  Parent: data[type=image].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=image].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=image].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=image].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=image].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=image].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=image].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=image].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=image].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=image].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=image].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=image].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=image].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=image].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      uirevision  Parent: data[type=image]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      contour traces

      










 A contour trace is an object with the key "type" equal to "contour" (i.e. {"type": "contour"}) and any of the keys listed below. The data from which contour lines are computed is set in `z`. Data in `z` must be a 2D array of numbers. Say that `z` has N rows and M columns, then by default, these N rows correspond to N y coordinates (set in `y` or auto-generated) and the M columns correspond to M x coordinates (set in `x` or auto-generated). By setting `transpose` to "true", the above behavior is flipped. 














   type  Parent: data[type=contour]  Type: "contour"    name  Parent: data[type=contour]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=contour]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=contour]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=contour]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=contour]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=contour]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=contour] Type: object containing one or more of the keys listed below.    font  Parent: data[type=contour].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=contour].legendgrouptitle.font  Type: color    family  Parent: data[type=contour].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=contour].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=contour].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=contour].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=contour].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=contour].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=contour].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=contour].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=contour].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=contour]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=contour]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=contour]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    zorder  Parent: data[type=contour]  Type: integer Default: 0 Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.    x  Parent: data[type=contour]  Type: data array Sets the x coordinates.    x0  Parent: data[type=contour]  Type: number or categorical coordinate string Default: 0 Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.    dx  Parent: data[type=contour]  Type: number Default: 1 Sets the x coordinate step. See `x0` for more info.    xtype  Parent: data[type=contour]  Type: enumerated , one of ( "array" | "scaled" ) If "array", the heatmap's x coordinates are given by "x" (the default behavior when `x` is provided). If "scaled", the heatmap's x coordinates are given by "x0" and "dx" (the default behavior when `x` is not provided).    y  Parent: data[type=contour]  Type: data array Sets the y coordinates.    y0  Parent: data[type=contour]  Type: number or categorical coordinate string Default: 0 Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.    dy  Parent: data[type=contour]  Type: number Default: 1 Sets the y coordinate step. See `y0` for more info.    ytype  Parent: data[type=contour]  Type: enumerated , one of ( "array" | "scaled" ) If "array", the heatmap's y coordinates are given by "y" (the default behavior when `y` is provided) If "scaled", the heatmap's y coordinates are given by "y0" and "dy" (the default behavior when `y` is not provided)    z  Parent: data[type=contour]  Type: data array Sets the z data.    text  Parent: data[type=contour]  Type: data array Sets the text elements associated with each z value.    texttemplate  Parent: data[type=contour]  Type: string Default: "" For this trace it only has an effect if `coloring` is set to "heatmap". Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `x`, `y`, `z` and `text`.    hovertext  Parent: data[type=contour]  Type: data array Same as `text`.    hoverinfo  Parent: data[type=contour]  Type: flaglist string. Any combination of "x", "y", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=contour]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    xhoverformat  Parent: data[type=contour]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=contour]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    meta  Parent: data[type=contour]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=contour]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    xaxis  Parent: data[type=contour]  Type: subplotid Default: x Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.    yaxis  Parent: data[type=contour]  Type: subplotid Default: y Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.    coloraxis  Parent: data[type=contour]  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    xperiod  Parent: data[type=contour]  Type: number or categorical coordinate string Default: 0 Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M<n>" on the x axis. Special values in the form of "M<n>" could be used to declare the number of months. In this case `n` must be a positive integer.    xperiodalignment  Parent: data[type=contour]  Type: enumerated , one of ( "start" | "middle" | "end" ) Default: "middle" Only relevant when the axis `type` is "date". Sets the alignment of data points on the x axis.    xperiod0  Parent: data[type=contour]  Type: number or categorical coordinate string Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.    yperiod  Parent: data[type=contour]  Type: number or categorical coordinate string Default: 0 Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M<n>" on the y axis. Special values in the form of "M<n>" could be used to declare the number of months. In this case `n` must be a positive integer.    yperiodalignment  Parent: data[type=contour]  Type: enumerated , one of ( "start" | "middle" | "end" ) Default: "middle" Only relevant when the axis `type` is "date". Sets the alignment of data points on the y axis.    yperiod0  Parent: data[type=contour]  Type: number or categorical coordinate string Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.    line  Parent: data[type=contour] Type: object containing one or more of the keys listed below.    color  Parent: data[type=contour].line  Type: color Sets the color of the contour level. Has no effect if `contours.coloring` is set to "lines".    dash  Parent: data[type=contour].line  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    smoothing  Parent: data[type=contour].line  Type: number between or equal to 0 and 1.3 Default: 1 Sets the amount of smoothing for the contour lines, where "0" corresponds to no smoothing.    width  Parent: data[type=contour].line  Type: number greater than or equal to 0 Sets the contour line width in (in px) Defaults to "0.5" when `contours.type` is "levels". Defaults to "2" when `contour.type` is "constraint".      textfont  Parent: data[type=contour] Type: object containing one or more of the keys listed below. For this trace it only has an effect if `coloring` is set to "heatmap". Sets the text font.    color  Parent: data[type=contour].textfont  Type: color Default: "auto"    family  Parent: data[type=contour].textfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=contour].textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=contour].textfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=contour].textfont  Type: number greater than or equal to 1 Default: "auto"    style  Parent: data[type=contour].textfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=contour].textfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=contour].textfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=contour].textfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      colorbar  Parent: data[type=contour] Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=contour].colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=contour].colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=contour].colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=contour].colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=contour].colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=contour].colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=contour].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=contour].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=contour].colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=contour].colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=contour].colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=contour].colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=contour].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=contour].colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=contour].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=contour].colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=contour].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=contour].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=contour].colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=contour].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=contour].colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=contour].colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=contour].colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=contour].colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=contour].colorbar.tickfont  Type: color    family  Parent: data[type=contour].colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=contour].colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=contour].colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=contour].colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=contour].colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=contour].colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=contour].colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=contour].colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=contour].colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=contour].colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=contour].colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=contour].colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=contour].colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=contour].colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=contour].colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=contour].colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=contour].colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=contour].colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=contour].colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=contour].colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=contour].colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=contour].colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=contour].colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=contour].colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=contour].colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=contour].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=contour].colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=contour].colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=contour].colorbar.title.font  Type: color    family  Parent: data[type=contour].colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=contour].colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=contour].colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=contour].colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=contour].colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=contour].colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=contour].colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=contour].colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=contour].colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=contour].colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=contour].colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=contour].colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=contour].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=contour].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=contour].colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=contour].colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=contour].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=contour].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      autocolorscale  Parent: data[type=contour]  Type: boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    colorscale  Parent: data[type=contour]  Type: colorscale Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    showscale  Parent: data[type=contour]  Type: boolean Default: true Determines whether or not a colorbar is displayed for this trace.    reversescale  Parent: data[type=contour]  Type: boolean Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.    zauto  Parent: data[type=contour]  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.    zhoverformat  Parent: data[type=contour]  Type: string Default: "" Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.    zmax  Parent: data[type=contour]  Type: number Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.    zmid  Parent: data[type=contour]  Type: number Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.    zmin  Parent: data[type=contour]  Type: number Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.    autocontour  Parent: data[type=contour]  Type: boolean Default: true Determines whether or not the contour level attributes are picked by an algorithm. If "true", the number of contour levels can be set in `ncontours`. If "false", set the contour level attributes in `contours`.    connectgaps  Parent: data[type=contour]  Type: boolean Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in. It is defaulted to true if `z` is a one dimensional array otherwise it is defaulted to false.    contours  Parent: data[type=contour] Type: object containing one or more of the keys listed below.    coloring  Parent: data[type=contour].contours  Type: enumerated , one of ( "fill" | "heatmap" | "lines" | "none" ) Default: "fill" Determines the coloring method showing the contour values. If "fill", coloring is done evenly between each contour level If "heatmap", a heatmap gradient coloring is applied between each contour level. If "lines", coloring is done on the contour lines. If "none", no coloring is applied on this trace.    end  Parent: data[type=contour].contours  Type: number Sets the end contour level value. Must be more than `contours.start`    labelfont  Parent: data[type=contour].contours Type: object containing one or more of the keys listed below. Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.    color  Parent: data[type=contour].contours.labelfont  Type: color    family  Parent: data[type=contour].contours.labelfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=contour].contours.labelfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=contour].contours.labelfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=contour].contours.labelfont  Type: number greater than or equal to 1    style  Parent: data[type=contour].contours.labelfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=contour].contours.labelfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=contour].contours.labelfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=contour].contours.labelfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      labelformat  Parent: data[type=contour].contours  Type: string Default: "" Sets the contour label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.    operation  Parent: data[type=contour].contours  Type: enumerated , one of ( "=" | "<" | ">=" | ">" | "<=" | "[]" | "()" | "[)" | "(]" | "][" | ")(" | "](" | ")[" ) Default: "=" Sets the constraint operation. "=" keeps regions equal to `value` "<" and "<=" keep regions less than `value` ">" and ">=" keep regions greater than `value` "[]", "()", "[)", and "(]" keep regions inside `value[0]` to `value[1]` "][", ")(", "](", ")[" keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.    showlabels  Parent: data[type=contour].contours  Type: boolean Determines whether to label the contour lines with their values.    showlines  Parent: data[type=contour].contours  Type: boolean Default: true Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to "fill".    size  Parent: data[type=contour].contours  Type: number greater than or equal to 0 Sets the step between each contour level. Must be positive.    start  Parent: data[type=contour].contours  Type: number Sets the starting contour level value. Must be less than `contours.end`    type  Parent: data[type=contour].contours  Type: enumerated , one of ( "levels" | "constraint" ) Default: "levels" If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.    value  Parent: data[type=contour].contours  Type: number or categorical coordinate string Default: 0 Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (=,<,>=,>,<=) "value" is expected to be a number. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[) "value" is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.      fillcolor  Parent: data[type=contour]  Type: color Sets the fill color if `contours.type` is "constraint". Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.    hoverlabel  Parent: data[type=contour] Type: object containing one or more of the keys listed below.    align  Parent: data[type=contour].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=contour].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=contour].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=contour].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=contour].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=contour].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=contour].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=contour].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=contour].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=contour].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=contour].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=contour].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=contour].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=contour].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      hoverongaps  Parent: data[type=contour]  Type: boolean Default: true Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data have hover labels associated with them.    ncontours  Parent: data[type=contour]  Type: integer greater than or equal to 1 Default: 15 Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is "true" or if `contours.size` is missing.    transpose  Parent: data[type=contour]  Type: boolean Transposes the z data.    xcalendar  Parent: data[type=contour]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `x` date data.    ycalendar  Parent: data[type=contour]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `y` date data.    uirevision  Parent: data[type=contour]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      table traces

      










 A table trace is an object with the key "type" equal to "table" (i.e. {"type": "table"}) and any of the keys listed below. Table view for detailed data viewing. The data are arranged in a grid of rows and columns. Most styling can be specified for columns, rows or individual cells. Table is using a column-major order, ie. the grid is represented as a vector of column vectors. 














   type  Parent: data[type=table]  Type: "table"    name  Parent: data[type=table]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=table]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    legend  Parent: data[type=table]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=table]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgrouptitle  Parent: data[type=table] Type: object containing one or more of the keys listed below.    font  Parent: data[type=table].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=table].legendgrouptitle.font  Type: color    family  Parent: data[type=table].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=table].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=table].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=table].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=table].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=table].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=table].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=table].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=table].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=table]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    ids  Parent: data[type=table]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    columnorder  Parent: data[type=table]  Type: data array Specifies the rendered order of the data columns; for example, a value `2` at position `0` means that column index `0` in the data will be rendered as the third column, as columns have an index base of zero.    columnwidth  Parent: data[type=table]  Type: number or array of numbers The width of columns expressed as a ratio. Columns fill the available width in proportion of their specified column widths.    hoverinfo  Parent: data[type=table]  Type: flaglist string. Any combination of "x", "y", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    meta  Parent: data[type=table]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=table]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    domain  Parent: data[type=table] Type: object containing one or more of the keys listed below.    column  Parent: data[type=table].domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this column in the grid for this table trace .    row  Parent: data[type=table].domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this row in the grid for this table trace .    x  Parent: data[type=table].domain  Type: array Default: [0, 1] Sets the horizontal domain of this table trace (in plot fraction).    y  Parent: data[type=table].domain  Type: array Default: [0, 1] Sets the vertical domain of this table trace (in plot fraction).      cells  Parent: data[type=table] Type: object containing one or more of the keys listed below.    align  Parent: data[type=table].cells  Type: enumerated or array of enumerateds , one of ( "left" | "center" | "right" ) Default: "center" Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.    fill  Parent: data[type=table].cells Type: object containing one or more of the keys listed below.    color  Parent: data[type=table].cells.fill  Type: color or array of colors Default: "white" Sets the cell fill color. It accepts either a specific color or an array of colors or a 2D array of colors.      font  Parent: data[type=table].cells Type: object containing one or more of the keys listed below.    color  Parent: data[type=table].cells.font  Type: color or array of colors    family  Parent: data[type=table].cells.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=table].cells.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=table].cells.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=table].cells.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=table].cells.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=table].cells.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=table].cells.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=table].cells.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      format  Parent: data[type=table].cells  Type: data array Default:  Sets the cell value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.    height  Parent: data[type=table].cells  Type: number Default: 20 The height of cells.    line  Parent: data[type=table].cells Type: object containing one or more of the keys listed below.    color  Parent: data[type=table].cells.line  Type: color or array of colors Default: "grey"    width  Parent: data[type=table].cells.line  Type: number or array of numbers Default: 1      prefix  Parent: data[type=table].cells  Type: string or array of strings Prefix for cell values.    suffix  Parent: data[type=table].cells  Type: string or array of strings Suffix for cell values.    values  Parent: data[type=table].cells  Type: data array Default:  Cell values. `values[m][n]` represents the value of the `n`th point in column `m`, therefore the `values[m]` vector length for all columns must be the same (longer vectors will be truncated). Each value must be a finite number or a string.      header  Parent: data[type=table] Type: object containing one or more of the keys listed below.    align  Parent: data[type=table].header  Type: enumerated or array of enumerateds , one of ( "left" | "center" | "right" ) Default: "center" Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.    fill  Parent: data[type=table].header Type: object containing one or more of the keys listed below.    color  Parent: data[type=table].header.fill  Type: color or array of colors Default: "white" Sets the cell fill color. It accepts either a specific color or an array of colors or a 2D array of colors.      font  Parent: data[type=table].header Type: object containing one or more of the keys listed below.    color  Parent: data[type=table].header.font  Type: color or array of colors    family  Parent: data[type=table].header.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=table].header.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=table].header.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=table].header.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=table].header.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=table].header.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=table].header.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=table].header.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      format  Parent: data[type=table].header  Type: data array Default:  Sets the cell value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.    height  Parent: data[type=table].header  Type: number Default: 28 The height of cells.    line  Parent: data[type=table].header Type: object containing one or more of the keys listed below.    color  Parent: data[type=table].header.line  Type: color or array of colors Default: "grey"    width  Parent: data[type=table].header.line  Type: number or array of numbers Default: 1      prefix  Parent: data[type=table].header  Type: string or array of strings Prefix for cell values.    suffix  Parent: data[type=table].header  Type: string or array of strings Suffix for cell values.    values  Parent: data[type=table].header  Type: data array Default:  Header cell values. `values[m][n]` represents the value of the `n`th point in column `m`, therefore the `values[m]` vector length for all columns must be the same (longer vectors will be truncated). Each value must be a finite number or a string.      hoverlabel  Parent: data[type=table] Type: object containing one or more of the keys listed below.    align  Parent: data[type=table].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=table].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=table].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=table].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=table].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=table].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=table].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=table].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=table].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=table].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=table].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=table].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=table].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=table].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      uirevision  Parent: data[type=table]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      box traces

      










 A box trace is an object with the key "type" equal to "box" (i.e. {"type": "box"}) and any of the keys listed below. Each box spans from quartile 1 (Q1) to quartile 3 (Q3). The second quartile (Q2, i.e. the median) is marked by a line inside the box. The fences grow outward from the boxes' edges, by default they span +/- 1.5 times the interquartile range (IQR: Q3-Q1), The sample mean and standard deviation as well as notches and the sample, outlier and suspected outliers points can be optionally added to the box plot. The values and positions corresponding to each boxes can be input using two signatures. The first signature expects users to supply the sample values in the `y` data array for vertical boxes (`x` for horizontal boxes). By supplying an `x` (`y`) array, one box per distinct `x` (`y`) value is drawn If no `x` (`y`) array is provided, a single box is drawn. In this case, the box is positioned with the trace `name` or with `x0` (`y0`) if provided. The second signature expects users to supply the boxes corresponding Q1, median and Q3 statistics in the `q1`, `median` and `q3` data arrays respectively. Other box features relying on statistics namely `lowerfence`, `upperfence`, `notchspan` can be set directly by the users. To have plotly compute them or to show sample points besides the boxes, users can set the `y` data array for vertical boxes (`x` for horizontal boxes) to a 2D array with the outer length corresponding to the number of boxes in the traces and the inner length corresponding the sample size. 














   type  Parent: data[type=box]  Type: "box"    name  Parent: data[type=box]  Type: string Sets the trace name. The trace name appears as the legend item and on hover. For box traces, the name will also be used for the position coordinate, if `x` and `x0` (`y` and `y0` if horizontal) are missing and the position axis is categorical    visible  Parent: data[type=box]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=box]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=box]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=box]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=box]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=box] Type: object containing one or more of the keys listed below.    font  Parent: data[type=box].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=box].legendgrouptitle.font  Type: color    family  Parent: data[type=box].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=box].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=box].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=box].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=box].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=box].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=box].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=box].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=box].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=box]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=box]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=box]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    zorder  Parent: data[type=box]  Type: integer Default: 0 Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.    x  Parent: data[type=box]  Type: data array Sets the x sample data or coordinates. See overview for more info.    x0  Parent: data[type=box]  Type: number or categorical coordinate string Sets the x coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.    dx  Parent: data[type=box]  Type: number Sets the x coordinate step for multi-box traces set using q1/median/q3.    y  Parent: data[type=box]  Type: data array Sets the y sample data or coordinates. See overview for more info.    y0  Parent: data[type=box]  Type: number or categorical coordinate string Sets the y coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.    dy  Parent: data[type=box]  Type: number Sets the y coordinate step for multi-box traces set using q1/median/q3.    width  Parent: data[type=box]  Type: number greater than or equal to 0 Default: 0 Sets the width of the box in data coordinate If "0" (default value) the width is automatically selected based on the positions of other box traces in the same subplot.    text  Parent: data[type=box]  Type: string or array of strings Default: "" Sets the text elements associated with each sample value. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.    hovertext  Parent: data[type=box]  Type: string or array of strings Default: "" Same as `text`.    hoverinfo  Parent: data[type=box]  Type: flaglist string. Any combination of "x", "y", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=box]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    xhoverformat  Parent: data[type=box]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=box]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    meta  Parent: data[type=box]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=box]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    xaxis  Parent: data[type=box]  Type: subplotid Default: x Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.    yaxis  Parent: data[type=box]  Type: subplotid Default: y Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.    orientation  Parent: data[type=box]  Type: enumerated , one of ( "v" | "h" ) Sets the orientation of the box(es). If "v" ("h"), the distribution is visualized along the vertical (horizontal).    alignmentgroup  Parent: data[type=box]  Type: string Default: "" Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.    offsetgroup  Parent: data[type=box]  Type: string Default: "" Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.    xperiod  Parent: data[type=box]  Type: number or categorical coordinate string Default: 0 Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M<n>" on the x axis. Special values in the form of "M<n>" could be used to declare the number of months. In this case `n` must be a positive integer.    xperiodalignment  Parent: data[type=box]  Type: enumerated , one of ( "start" | "middle" | "end" ) Default: "middle" Only relevant when the axis `type` is "date". Sets the alignment of data points on the x axis.    xperiod0  Parent: data[type=box]  Type: number or categorical coordinate string Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.    yperiod  Parent: data[type=box]  Type: number or categorical coordinate string Default: 0 Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M<n>" on the y axis. Special values in the form of "M<n>" could be used to declare the number of months. In this case `n` must be a positive integer.    yperiodalignment  Parent: data[type=box]  Type: enumerated , one of ( "start" | "middle" | "end" ) Default: "middle" Only relevant when the axis `type` is "date". Sets the alignment of data points on the y axis.    yperiod0  Parent: data[type=box]  Type: number or categorical coordinate string Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.    marker  Parent: data[type=box] Type: object containing one or more of the keys listed below.    angle  Parent: data[type=box].marker  Type: angle Default: 0 Sets the marker angle in respect to `angleref`.    color  Parent: data[type=box].marker  Type: color Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.    line  Parent: data[type=box].marker Type: object containing one or more of the keys listed below.    color  Parent: data[type=box].marker.line  Type: color Default: "#444" Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.    outliercolor  Parent: data[type=box].marker.line  Type: color Sets the border line color of the outlier sample points. Defaults to marker.color    outlierwidth  Parent: data[type=box].marker.line  Type: number greater than or equal to 0 Default: 1 Sets the border line width (in px) of the outlier sample points.    width  Parent: data[type=box].marker.line  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) of the lines bounding the marker points.      opacity  Parent: data[type=box].marker  Type: number between or equal to 0 and 1 Default: 1 Sets the marker opacity.    outliercolor  Parent: data[type=box].marker  Type: color Default: "rgba(0, 0, 0, 0)" Sets the color of the outlier sample points.    size  Parent: data[type=box].marker  Type: number greater than or equal to 0 Default: 6 Sets the marker size (in px).    symbol  Parent: data[type=box].marker  Type: enumerated , one of ( "0" | "0" | "circle" | "100" | "100" | "circle-open" | "200" | "200" | "circle-dot" | "300" | "300" | "circle-open-dot" | "1" | "1" | "square" | "101" | "101" | "square-open" | "201" | "201" | "square-dot" | "301" | "301" | "square-open-dot" | "2" | "2" | "diamond" | "102" | "102" | "diamond-open" | "202" | "202" | "diamond-dot" | "302" | "302" | "diamond-open-dot" | "3" | "3" | "cross" | "103" | "103" | "cross-open" | "203" | "203" | "cross-dot" | "303" | "303" | "cross-open-dot" | "4" | "4" | "x" | "104" | "104" | "x-open" | "204" | "204" | "x-dot" | "304" | "304" | "x-open-dot" | "5" | "5" | "triangle-up" | "105" | "105" | "triangle-up-open" | "205" | "205" | "triangle-up-dot" | "305" | "305" | "triangle-up-open-dot" | "6" | "6" | "triangle-down" | "106" | "106" | "triangle-down-open" | "206" | "206" | "triangle-down-dot" | "306" | "306" | "triangle-down-open-dot" | "7" | "7" | "triangle-left" | "107" | "107" | "triangle-left-open" | "207" | "207" | "triangle-left-dot" | "307" | "307" | "triangle-left-open-dot" | "8" | "8" | "triangle-right" | "108" | "108" | "triangle-right-open" | "208" | "208" | "triangle-right-dot" | "308" | "308" | "triangle-right-open-dot" | "9" | "9" | "triangle-ne" | "109" | "109" | "triangle-ne-open" | "209" | "209" | "triangle-ne-dot" | "309" | "309" | "triangle-ne-open-dot" | "10" | "10" | "triangle-se" | "110" | "110" | "triangle-se-open" | "210" | "210" | "triangle-se-dot" | "310" | "310" | "triangle-se-open-dot" | "11" | "11" | "triangle-sw" | "111" | "111" | "triangle-sw-open" | "211" | "211" | "triangle-sw-dot" | "311" | "311" | "triangle-sw-open-dot" | "12" | "12" | "triangle-nw" | "112" | "112" | "triangle-nw-open" | "212" | "212" | "triangle-nw-dot" | "312" | "312" | "triangle-nw-open-dot" | "13" | "13" | "pentagon" | "113" | "113" | "pentagon-open" | "213" | "213" | "pentagon-dot" | "313" | "313" | "pentagon-open-dot" | "14" | "14" | "hexagon" | "114" | "114" | "hexagon-open" | "214" | "214" | "hexagon-dot" | "314" | "314" | "hexagon-open-dot" | "15" | "15" | "hexagon2" | "115" | "115" | "hexagon2-open" | "215" | "215" | "hexagon2-dot" | "315" | "315" | "hexagon2-open-dot" | "16" | "16" | "octagon" | "116" | "116" | "octagon-open" | "216" | "216" | "octagon-dot" | "316" | "316" | "octagon-open-dot" | "17" | "17" | "star" | "117" | "117" | "star-open" | "217" | "217" | "star-dot" | "317" | "317" | "star-open-dot" | "18" | "18" | "hexagram" | "118" | "118" | "hexagram-open" | "218" | "218" | "hexagram-dot" | "318" | "318" | "hexagram-open-dot" | "19" | "19" | "star-triangle-up" | "119" | "119" | "star-triangle-up-open" | "219" | "219" | "star-triangle-up-dot" | "319" | "319" | "star-triangle-up-open-dot" | "20" | "20" | "star-triangle-down" | "120" | "120" | "star-triangle-down-open" | "220" | "220" | "star-triangle-down-dot" | "320" | "320" | "star-triangle-down-open-dot" | "21" | "21" | "star-square" | "121" | "121" | "star-square-open" | "221" | "221" | "star-square-dot" | "321" | "321" | "star-square-open-dot" | "22" | "22" | "star-diamond" | "122" | "122" | "star-diamond-open" | "222" | "222" | "star-diamond-dot" | "322" | "322" | "star-diamond-open-dot" | "23" | "23" | "diamond-tall" | "123" | "123" | "diamond-tall-open" | "223" | "223" | "diamond-tall-dot" | "323" | "323" | "diamond-tall-open-dot" | "24" | "24" | "diamond-wide" | "124" | "124" | "diamond-wide-open" | "224" | "224" | "diamond-wide-dot" | "324" | "324" | "diamond-wide-open-dot" | "25" | "25" | "hourglass" | "125" | "125" | "hourglass-open" | "26" | "26" | "bowtie" | "126" | "126" | "bowtie-open" | "27" | "27" | "circle-cross" | "127" | "127" | "circle-cross-open" | "28" | "28" | "circle-x" | "128" | "128" | "circle-x-open" | "29" | "29" | "square-cross" | "129" | "129" | "square-cross-open" | "30" | "30" | "square-x" | "130" | "130" | "square-x-open" | "31" | "31" | "diamond-cross" | "131" | "131" | "diamond-cross-open" | "32" | "32" | "diamond-x" | "132" | "132" | "diamond-x-open" | "33" | "33" | "cross-thin" | "133" | "133" | "cross-thin-open" | "34" | "34" | "x-thin" | "134" | "134" | "x-thin-open" | "35" | "35" | "asterisk" | "135" | "135" | "asterisk-open" | "36" | "36" | "hash" | "136" | "136" | "hash-open" | "236" | "236" | "hash-dot" | "336" | "336" | "hash-open-dot" | "37" | "37" | "y-up" | "137" | "137" | "y-up-open" | "38" | "38" | "y-down" | "138" | "138" | "y-down-open" | "39" | "39" | "y-left" | "139" | "139" | "y-left-open" | "40" | "40" | "y-right" | "140" | "140" | "y-right-open" | "41" | "41" | "line-ew" | "141" | "141" | "line-ew-open" | "42" | "42" | "line-ns" | "142" | "142" | "line-ns-open" | "43" | "43" | "line-ne" | "143" | "143" | "line-ne-open" | "44" | "44" | "line-nw" | "144" | "144" | "line-nw-open" | "45" | "45" | "arrow-up" | "145" | "145" | "arrow-up-open" | "46" | "46" | "arrow-down" | "146" | "146" | "arrow-down-open" | "47" | "47" | "arrow-left" | "147" | "147" | "arrow-left-open" | "48" | "48" | "arrow-right" | "148" | "148" | "arrow-right-open" | "49" | "49" | "arrow-bar-up" | "149" | "149" | "arrow-bar-up-open" | "50" | "50" | "arrow-bar-down" | "150" | "150" | "arrow-bar-down-open" | "51" | "51" | "arrow-bar-left" | "151" | "151" | "arrow-bar-left-open" | "52" | "52" | "arrow-bar-right" | "152" | "152" | "arrow-bar-right-open" | "53" | "53" | "arrow" | "153" | "153" | "arrow-open" | "54" | "54" | "arrow-wide" | "154" | "154" | "arrow-wide-open" ) Default: "circle" Sets the marker symbol type. Adding 100 is equivalent to appending "-open" to a symbol name. Adding 200 is equivalent to appending "-dot" to a symbol name. Adding 300 is equivalent to appending "-open-dot" or "dot-open" to a symbol name.      line  Parent: data[type=box] Type: object containing one or more of the keys listed below.    color  Parent: data[type=box].line  Type: color Sets the color of line bounding the box(es).    width  Parent: data[type=box].line  Type: number greater than or equal to 0 Default: 2 Sets the width (in px) of line bounding the box(es).      boxmean  Parent: data[type=box]  Type: enumerated , one of ( true | "sd" | false ) If "true", the mean of the box(es)' underlying distribution is drawn as a dashed line inside the box(es). If "sd" the standard deviation is also drawn. Defaults to "true" when `mean` is set. Defaults to "sd" when `sd` is set Otherwise defaults to "false".    boxpoints  Parent: data[type=box]  Type: enumerated , one of ( "all" | "outliers" | "suspectedoutliers" | false ) If "outliers", only the sample points lying outside the whiskers are shown If "suspectedoutliers", the outlier points are shown and points either less than 4"Q1-3"Q3 or greater than 4"Q3-3"Q1 are highlighted (see `outliercolor`) If "all", all sample points are shown If "false", only the box(es) are shown with no sample points Defaults to "suspectedoutliers" when `marker.outliercolor` or `marker.line.outliercolor` is set. Defaults to "all" under the q1/median/q3 signature. Otherwise defaults to "outliers".    notched  Parent: data[type=box]  Type: boolean Determines whether or not notches are drawn. Notches displays a confidence interval around the median. We compute the confidence interval as median +/- 1.57 " IQR / sqrt(N), where IQR is the interquartile range and N is the sample size. If two boxes' notches do not overlap there is 95% confidence their medians differ. See https://sites.google.com/site/davidsstatistics/home/notched-box-plots for more info. Defaults to "false" unless `notchwidth` or `notchspan` is set.    notchwidth  Parent: data[type=box]  Type: number between or equal to 0 and 0.5 Default: 0.25 Sets the width of the notches relative to the box' width. For example, with 0, the notches are as wide as the box(es).    showwhiskers  Parent: data[type=box]  Type: boolean Determines whether or not whiskers are visible. Defaults to true for `sizemode` "quartiles", false for "sd".    whiskerwidth  Parent: data[type=box]  Type: number between or equal to 0 and 1 Default: 0.5 Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).    q1  Parent: data[type=box]  Type: data array Sets the Quartile 1 values. There should be as many items as the number of boxes desired.    median  Parent: data[type=box]  Type: data array Sets the median values. There should be as many items as the number of boxes desired.    q3  Parent: data[type=box]  Type: data array Sets the Quartile 3 values. There should be as many items as the number of boxes desired.    lowerfence  Parent: data[type=box]  Type: data array Sets the lower fence values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `lowerfence` is not provided but a sample (in `y` or `x`) is set, we compute the lower as the last sample point below 1.5 times the IQR.    upperfence  Parent: data[type=box]  Type: data array Sets the upper fence values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `upperfence` is not provided but a sample (in `y` or `x`) is set, we compute the upper as the last sample point above 1.5 times the IQR.    notchspan  Parent: data[type=box]  Type: data array Sets the notch span from the boxes' `median` values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `notchspan` is not provided but a sample (in `y` or `x`) is set, we compute it as 1.57 " IQR / sqrt(N), where N is the sample size.    mean  Parent: data[type=box]  Type: data array Sets the mean values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `mean` is not provided but a sample (in `y` or `x`) is set, we compute the mean for each box using the sample values.    sd  Parent: data[type=box]  Type: data array Sets the standard deviation values. There should be as many items as the number of boxes desired. This attribute has effect only under the q1/median/q3 signature. If `sd` is not provided but a sample (in `y` or `x`) is set, we compute the standard deviation for each box using the sample values.    sdmultiple  Parent: data[type=box]  Type: number greater than or equal to 0 Default: 1 Scales the box size when sizemode=sd Allowing boxes to be drawn across any stddev range For example 1-stddev, 3-stddev, 5-stddev    quartilemethod  Parent: data[type=box]  Type: enumerated , one of ( "linear" | "exclusive" | "inclusive" ) Default: "linear" Sets the method used to compute the sample's Q1 and Q3 quartiles. The "linear" method uses the 25th percentile for Q1 and 75th percentile for Q3 as computed using method #10 (listed on http://jse.amstat.org/v14n3/langford.html). The "exclusive" method uses the median to divide the ordered dataset into two halves if the sample is odd, it does not include the median in either half - Q1 is then the median of the lower half and Q3 the median of the upper half. The "inclusive" method also uses the median to divide the ordered dataset into two halves but if the sample is odd, it includes the median in both halves - Q1 is then the median of the lower half and Q3 the median of the upper half.    selectedpoints  Parent: data[type=box]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    selected  Parent: data[type=box] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=box].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=box].selected.marker  Type: color Sets the marker color of selected points.    opacity  Parent: data[type=box].selected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of selected points.    size  Parent: data[type=box].selected.marker  Type: number greater than or equal to 0 Sets the marker size of selected points.        unselected  Parent: data[type=box] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=box].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=box].unselected.marker  Type: color Sets the marker color of unselected points, applied only when a selection exists.    opacity  Parent: data[type=box].unselected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of unselected points, applied only when a selection exists.    size  Parent: data[type=box].unselected.marker  Type: number greater than or equal to 0 Sets the marker size of unselected points, applied only when a selection exists.        fillcolor  Parent: data[type=box]  Type: color Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.    hoverlabel  Parent: data[type=box] Type: object containing one or more of the keys listed below.    align  Parent: data[type=box].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=box].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=box].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=box].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=box].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=box].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=box].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=box].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=box].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=box].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=box].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=box].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=box].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=box].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      hoveron  Parent: data[type=box]  Type: flaglist string. Any combination of "boxes", "points" joined with a "+" Examples: "boxes", "points", "boxes+points" Default: "boxes+points" Do the hover effects highlight individual boxes or sample points or both?    pointpos  Parent: data[type=box]  Type: number between or equal to -2 and 2 Sets the position of the sample points in relation to the box(es). If "0", the sample points are places over the center of the box(es). Positive (negative) values correspond to positions to the right (left) for vertical boxes and above (below) for horizontal boxes    jitter  Parent: data[type=box]  Type: number between or equal to 0 and 1 Sets the amount of jitter in the sample points drawn. If "0", the sample points align along the distribution axis. If "1", the sample points are drawn in a random jitter of width equal to the width of the box(es).    sizemode  Parent: data[type=box]  Type: enumerated , one of ( "quartiles" | "sd" ) Default: "quartiles" Sets the upper and lower bound for the boxes quartiles means box is drawn between Q1 and Q3 SD means the box is drawn between Mean +- Standard Deviation Argument sdmultiple (default 1) to scale the box size So it could be drawn 1-stddev, 3-stddev etc    xcalendar  Parent: data[type=box]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `x` date data.    ycalendar  Parent: data[type=box]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `y` date data.    uirevision  Parent: data[type=box]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      violin traces

      










 A violin trace is an object with the key "type" equal to "violin" (i.e. {"type": "violin"}) and any of the keys listed below. In vertical (horizontal) violin plots, statistics are computed using `y` (`x`) values. By supplying an `x` (`y`) array, one violin per distinct x (y) value is drawn If no `x` (`y`) array is provided, a single violin is drawn. That violin position is then positioned with with `name` or with `x0` (`y0`) if provided. 














   type  Parent: data[type=violin]  Type: "violin"    name  Parent: data[type=violin]  Type: string Sets the trace name. The trace name appears as the legend item and on hover. For violin traces, the name will also be used for the position coordinate, if `x` and `x0` (`y` and `y0` if horizontal) are missing and the position axis is categorical. Note that the trace name is also used as a default value for attribute `scalegroup` (please see its description for details).    visible  Parent: data[type=violin]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=violin]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=violin]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=violin]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=violin]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=violin] Type: object containing one or more of the keys listed below.    font  Parent: data[type=violin].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=violin].legendgrouptitle.font  Type: color    family  Parent: data[type=violin].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=violin].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=violin].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=violin].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=violin].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=violin].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=violin].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=violin].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=violin].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=violin]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=violin]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=violin]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    zorder  Parent: data[type=violin]  Type: integer Default: 0 Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.    x  Parent: data[type=violin]  Type: data array Sets the x sample data or coordinates. See overview for more info.    x0  Parent: data[type=violin]  Type: number or categorical coordinate string Sets the x coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.    y  Parent: data[type=violin]  Type: data array Sets the y sample data or coordinates. See overview for more info.    y0  Parent: data[type=violin]  Type: number or categorical coordinate string Sets the y coordinate for single-box traces or the starting coordinate for multi-box traces set using q1/median/q3. See overview for more info.    width  Parent: data[type=violin]  Type: number greater than or equal to 0 Default: 0 Sets the width of the violin in data coordinates. If "0" (default value) the width is automatically selected based on the positions of other violin traces in the same subplot.    text  Parent: data[type=violin]  Type: string or array of strings Default: "" Sets the text elements associated with each sample value. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.    hovertext  Parent: data[type=violin]  Type: string or array of strings Default: "" Same as `text`.    hoverinfo  Parent: data[type=violin]  Type: flaglist string. Any combination of "x", "y", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=violin]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    xhoverformat  Parent: data[type=violin]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=violin]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    meta  Parent: data[type=violin]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=violin]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    xaxis  Parent: data[type=violin]  Type: subplotid Default: x Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.    yaxis  Parent: data[type=violin]  Type: subplotid Default: y Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.    orientation  Parent: data[type=violin]  Type: enumerated , one of ( "v" | "h" ) Sets the orientation of the violin(s). If "v" ("h"), the distribution is visualized along the vertical (horizontal).    alignmentgroup  Parent: data[type=violin]  Type: string Default: "" Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.    offsetgroup  Parent: data[type=violin]  Type: string Default: "" Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.    marker  Parent: data[type=violin] Type: object containing one or more of the keys listed below.    angle  Parent: data[type=violin].marker  Type: angle Default: 0 Sets the marker angle in respect to `angleref`.    color  Parent: data[type=violin].marker  Type: color Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.    line  Parent: data[type=violin].marker Type: object containing one or more of the keys listed below.    color  Parent: data[type=violin].marker.line  Type: color Default: "#444" Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.    outliercolor  Parent: data[type=violin].marker.line  Type: color Sets the border line color of the outlier sample points. Defaults to marker.color    outlierwidth  Parent: data[type=violin].marker.line  Type: number greater than or equal to 0 Default: 1 Sets the border line width (in px) of the outlier sample points.    width  Parent: data[type=violin].marker.line  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) of the lines bounding the marker points.      opacity  Parent: data[type=violin].marker  Type: number between or equal to 0 and 1 Default: 1 Sets the marker opacity.    outliercolor  Parent: data[type=violin].marker  Type: color Default: "rgba(0, 0, 0, 0)" Sets the color of the outlier sample points.    size  Parent: data[type=violin].marker  Type: number greater than or equal to 0 Default: 6 Sets the marker size (in px).    symbol  Parent: data[type=violin].marker  Type: enumerated , one of ( "0" | "0" | "circle" | "100" | "100" | "circle-open" | "200" | "200" | "circle-dot" | "300" | "300" | "circle-open-dot" | "1" | "1" | "square" | "101" | "101" | "square-open" | "201" | "201" | "square-dot" | "301" | "301" | "square-open-dot" | "2" | "2" | "diamond" | "102" | "102" | "diamond-open" | "202" | "202" | "diamond-dot" | "302" | "302" | "diamond-open-dot" | "3" | "3" | "cross" | "103" | "103" | "cross-open" | "203" | "203" | "cross-dot" | "303" | "303" | "cross-open-dot" | "4" | "4" | "x" | "104" | "104" | "x-open" | "204" | "204" | "x-dot" | "304" | "304" | "x-open-dot" | "5" | "5" | "triangle-up" | "105" | "105" | "triangle-up-open" | "205" | "205" | "triangle-up-dot" | "305" | "305" | "triangle-up-open-dot" | "6" | "6" | "triangle-down" | "106" | "106" | "triangle-down-open" | "206" | "206" | "triangle-down-dot" | "306" | "306" | "triangle-down-open-dot" | "7" | "7" | "triangle-left" | "107" | "107" | "triangle-left-open" | "207" | "207" | "triangle-left-dot" | "307" | "307" | "triangle-left-open-dot" | "8" | "8" | "triangle-right" | "108" | "108" | "triangle-right-open" | "208" | "208" | "triangle-right-dot" | "308" | "308" | "triangle-right-open-dot" | "9" | "9" | "triangle-ne" | "109" | "109" | "triangle-ne-open" | "209" | "209" | "triangle-ne-dot" | "309" | "309" | "triangle-ne-open-dot" | "10" | "10" | "triangle-se" | "110" | "110" | "triangle-se-open" | "210" | "210" | "triangle-se-dot" | "310" | "310" | "triangle-se-open-dot" | "11" | "11" | "triangle-sw" | "111" | "111" | "triangle-sw-open" | "211" | "211" | "triangle-sw-dot" | "311" | "311" | "triangle-sw-open-dot" | "12" | "12" | "triangle-nw" | "112" | "112" | "triangle-nw-open" | "212" | "212" | "triangle-nw-dot" | "312" | "312" | "triangle-nw-open-dot" | "13" | "13" | "pentagon" | "113" | "113" | "pentagon-open" | "213" | "213" | "pentagon-dot" | "313" | "313" | "pentagon-open-dot" | "14" | "14" | "hexagon" | "114" | "114" | "hexagon-open" | "214" | "214" | "hexagon-dot" | "314" | "314" | "hexagon-open-dot" | "15" | "15" | "hexagon2" | "115" | "115" | "hexagon2-open" | "215" | "215" | "hexagon2-dot" | "315" | "315" | "hexagon2-open-dot" | "16" | "16" | "octagon" | "116" | "116" | "octagon-open" | "216" | "216" | "octagon-dot" | "316" | "316" | "octagon-open-dot" | "17" | "17" | "star" | "117" | "117" | "star-open" | "217" | "217" | "star-dot" | "317" | "317" | "star-open-dot" | "18" | "18" | "hexagram" | "118" | "118" | "hexagram-open" | "218" | "218" | "hexagram-dot" | "318" | "318" | "hexagram-open-dot" | "19" | "19" | "star-triangle-up" | "119" | "119" | "star-triangle-up-open" | "219" | "219" | "star-triangle-up-dot" | "319" | "319" | "star-triangle-up-open-dot" | "20" | "20" | "star-triangle-down" | "120" | "120" | "star-triangle-down-open" | "220" | "220" | "star-triangle-down-dot" | "320" | "320" | "star-triangle-down-open-dot" | "21" | "21" | "star-square" | "121" | "121" | "star-square-open" | "221" | "221" | "star-square-dot" | "321" | "321" | "star-square-open-dot" | "22" | "22" | "star-diamond" | "122" | "122" | "star-diamond-open" | "222" | "222" | "star-diamond-dot" | "322" | "322" | "star-diamond-open-dot" | "23" | "23" | "diamond-tall" | "123" | "123" | "diamond-tall-open" | "223" | "223" | "diamond-tall-dot" | "323" | "323" | "diamond-tall-open-dot" | "24" | "24" | "diamond-wide" | "124" | "124" | "diamond-wide-open" | "224" | "224" | "diamond-wide-dot" | "324" | "324" | "diamond-wide-open-dot" | "25" | "25" | "hourglass" | "125" | "125" | "hourglass-open" | "26" | "26" | "bowtie" | "126" | "126" | "bowtie-open" | "27" | "27" | "circle-cross" | "127" | "127" | "circle-cross-open" | "28" | "28" | "circle-x" | "128" | "128" | "circle-x-open" | "29" | "29" | "square-cross" | "129" | "129" | "square-cross-open" | "30" | "30" | "square-x" | "130" | "130" | "square-x-open" | "31" | "31" | "diamond-cross" | "131" | "131" | "diamond-cross-open" | "32" | "32" | "diamond-x" | "132" | "132" | "diamond-x-open" | "33" | "33" | "cross-thin" | "133" | "133" | "cross-thin-open" | "34" | "34" | "x-thin" | "134" | "134" | "x-thin-open" | "35" | "35" | "asterisk" | "135" | "135" | "asterisk-open" | "36" | "36" | "hash" | "136" | "136" | "hash-open" | "236" | "236" | "hash-dot" | "336" | "336" | "hash-open-dot" | "37" | "37" | "y-up" | "137" | "137" | "y-up-open" | "38" | "38" | "y-down" | "138" | "138" | "y-down-open" | "39" | "39" | "y-left" | "139" | "139" | "y-left-open" | "40" | "40" | "y-right" | "140" | "140" | "y-right-open" | "41" | "41" | "line-ew" | "141" | "141" | "line-ew-open" | "42" | "42" | "line-ns" | "142" | "142" | "line-ns-open" | "43" | "43" | "line-ne" | "143" | "143" | "line-ne-open" | "44" | "44" | "line-nw" | "144" | "144" | "line-nw-open" | "45" | "45" | "arrow-up" | "145" | "145" | "arrow-up-open" | "46" | "46" | "arrow-down" | "146" | "146" | "arrow-down-open" | "47" | "47" | "arrow-left" | "147" | "147" | "arrow-left-open" | "48" | "48" | "arrow-right" | "148" | "148" | "arrow-right-open" | "49" | "49" | "arrow-bar-up" | "149" | "149" | "arrow-bar-up-open" | "50" | "50" | "arrow-bar-down" | "150" | "150" | "arrow-bar-down-open" | "51" | "51" | "arrow-bar-left" | "151" | "151" | "arrow-bar-left-open" | "52" | "52" | "arrow-bar-right" | "152" | "152" | "arrow-bar-right-open" | "53" | "53" | "arrow" | "153" | "153" | "arrow-open" | "54" | "54" | "arrow-wide" | "154" | "154" | "arrow-wide-open" ) Default: "circle" Sets the marker symbol type. Adding 100 is equivalent to appending "-open" to a symbol name. Adding 200 is equivalent to appending "-dot" to a symbol name. Adding 300 is equivalent to appending "-open-dot" or "dot-open" to a symbol name.      line  Parent: data[type=violin] Type: object containing one or more of the keys listed below.    color  Parent: data[type=violin].line  Type: color Sets the color of line bounding the violin(s).    width  Parent: data[type=violin].line  Type: number greater than or equal to 0 Default: 2 Sets the width (in px) of line bounding the violin(s).      box  Parent: data[type=violin] Type: object containing one or more of the keys listed below.    fillcolor  Parent: data[type=violin].box  Type: color Sets the inner box plot fill color.    line  Parent: data[type=violin].box Type: object containing one or more of the keys listed below.    color  Parent: data[type=violin].box.line  Type: color Sets the inner box plot bounding line color.    width  Parent: data[type=violin].box.line  Type: number greater than or equal to 0 Sets the inner box plot bounding line width.      visible  Parent: data[type=violin].box  Type: boolean Determines if an miniature box plot is drawn inside the violins.     width  Parent: data[type=violin].box  Type: number between or equal to 0 and 1 Default: 0.25 Sets the width of the inner box plots relative to the violins' width. For example, with 1, the inner box plots are as wide as the violins.      quartilemethod  Parent: data[type=violin]  Type: enumerated , one of ( "linear" | "exclusive" | "inclusive" ) Default: "linear" Sets the method used to compute the sample's Q1 and Q3 quartiles. The "linear" method uses the 25th percentile for Q1 and 75th percentile for Q3 as computed using method #10 (listed on http://jse.amstat.org/v14n3/langford.html). The "exclusive" method uses the median to divide the ordered dataset into two halves if the sample is odd, it does not include the median in either half - Q1 is then the median of the lower half and Q3 the median of the upper half. The "inclusive" method also uses the median to divide the ordered dataset into two halves but if the sample is odd, it includes the median in both halves - Q1 is then the median of the lower half and Q3 the median of the upper half.    selectedpoints  Parent: data[type=violin]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    selected  Parent: data[type=violin] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=violin].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=violin].selected.marker  Type: color Sets the marker color of selected points.    opacity  Parent: data[type=violin].selected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of selected points.    size  Parent: data[type=violin].selected.marker  Type: number greater than or equal to 0 Sets the marker size of selected points.        unselected  Parent: data[type=violin] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=violin].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=violin].unselected.marker  Type: color Sets the marker color of unselected points, applied only when a selection exists.    opacity  Parent: data[type=violin].unselected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of unselected points, applied only when a selection exists.    size  Parent: data[type=violin].unselected.marker  Type: number greater than or equal to 0 Sets the marker size of unselected points, applied only when a selection exists.        bandwidth  Parent: data[type=violin]  Type: number greater than or equal to 0 Sets the bandwidth used to compute the kernel density estimate. By default, the bandwidth is determined by Silverman's rule of thumb.    fillcolor  Parent: data[type=violin]  Type: color Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.    hoverlabel  Parent: data[type=violin] Type: object containing one or more of the keys listed below.    align  Parent: data[type=violin].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=violin].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=violin].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=violin].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=violin].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=violin].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=violin].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=violin].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=violin].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=violin].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=violin].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=violin].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=violin].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=violin].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      hoveron  Parent: data[type=violin]  Type: flaglist string. Any combination of "violins", "points", "kde" joined with a "+" OR "all". Examples: "violins", "points", "violins+points", "violins+points+kde", "all" Default: "violins+points+kde" Do the hover effects highlight individual violins or sample points or the kernel density estimate or any combination of them?    pointpos  Parent: data[type=violin]  Type: number between or equal to -2 and 2 Sets the position of the sample points in relation to the violins. If "0", the sample points are places over the center of the violins. Positive (negative) values correspond to positions to the right (left) for vertical violins and above (below) for horizontal violins.    jitter  Parent: data[type=violin]  Type: number between or equal to 0 and 1 Sets the amount of jitter in the sample points drawn. If "0", the sample points align along the distribution axis. If "1", the sample points are drawn in a random jitter of width equal to the width of the violins.    meanline  Parent: data[type=violin] Type: object containing one or more of the keys listed below.    color  Parent: data[type=violin].meanline  Type: color Sets the mean line color.    visible  Parent: data[type=violin].meanline  Type: boolean Determines if a line corresponding to the sample's mean is shown inside the violins. If `box.visible` is turned on, the mean line is drawn inside the inner box. Otherwise, the mean line is drawn from one side of the violin to other.    width  Parent: data[type=violin].meanline  Type: number greater than or equal to 0 Sets the mean line width.      points  Parent: data[type=violin]  Type: enumerated , one of ( "all" | "outliers" | "suspectedoutliers" | false ) If "outliers", only the sample points lying outside the whiskers are shown If "suspectedoutliers", the outlier points are shown and points either less than 4"Q1-3"Q3 or greater than 4"Q3-3"Q1 are highlighted (see `outliercolor`) If "all", all sample points are shown If "false", only the violins are shown with no sample points. Defaults to "suspectedoutliers" when `marker.outliercolor` or `marker.line.outliercolor` is set, otherwise defaults to "outliers".    scalegroup  Parent: data[type=violin]  Type: string Default: "" If there are multiple violins that should be sized according to to some metric (see `scalemode`), link them by providing a non-empty group id here shared by every trace in the same group. If a violin's `width` is undefined, `scalegroup` will default to the trace's name. In this case, violins with the same names will be linked together    scalemode  Parent: data[type=violin]  Type: enumerated , one of ( "width" | "count" ) Default: "width" Sets the metric by which the width of each violin is determined. "width" means each violin has the same (max) width "count" means the violins are scaled by the number of sample points making up each violin.    side  Parent: data[type=violin]  Type: enumerated , one of ( "both" | "positive" | "negative" ) Default: "both" Determines on which side of the position value the density function making up one half of a violin is plotted. Useful when comparing two violin traces under "overlay" mode, where one trace has `side` set to "positive" and the other to "negative".    span  Parent: data[type=violin]  Type: array Sets the span in data space for which the density function will be computed. Has an effect only when `spanmode` is set to "manual".    spanmode  Parent: data[type=violin]  Type: enumerated , one of ( "soft" | "hard" | "manual" ) Default: "soft" Sets the method by which the span in data space where the density function will be computed. "soft" means the span goes from the sample's minimum value minus two bandwidths to the sample's maximum value plus two bandwidths. "hard" means the span goes from the sample's minimum to its maximum value. For custom span settings, use mode "manual" and fill in the `span` attribute.    uirevision  Parent: data[type=violin]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      histogram traces

      










 A histogram trace is an object with the key "type" equal to "histogram" (i.e. {"type": "histogram"}) and any of the keys listed below. The sample data from which statistics are computed is set in `x` for vertically spanning histograms and in `y` for horizontally spanning histograms. Binning options are set `xbins` and `ybins` respectively if no aggregation data is provided. 














   type  Parent: data[type=histogram]  Type: "histogram"    name  Parent: data[type=histogram]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=histogram]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=histogram]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=histogram]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=histogram]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=histogram]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=histogram] Type: object containing one or more of the keys listed below.    font  Parent: data[type=histogram].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=histogram].legendgrouptitle.font  Type: color    family  Parent: data[type=histogram].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=histogram].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=histogram].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=histogram].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=histogram].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=histogram].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=histogram].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=histogram].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=histogram].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=histogram]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=histogram]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=histogram]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    zorder  Parent: data[type=histogram]  Type: integer Default: 0 Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.    x  Parent: data[type=histogram]  Type: data array Sets the sample data to be binned on the x axis.    y  Parent: data[type=histogram]  Type: data array Sets the sample data to be binned on the y axis.    text  Parent: data[type=histogram]  Type: string or array of strings Default: "" Sets hover text elements associated with each bar. If a single string, the same string appears over all bars. If an array of string, the items are mapped in order to the this trace's coordinates.    textposition  Parent: data[type=histogram]  Type: enumerated , one of ( "inside" | "outside" | "auto" | "none" ) Default: "auto" Specifies the location of the `text`. "inside" positions `text` inside, next to the bar end (rotated and scaled if needed). "outside" positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. "auto" tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If "none", no text appears.    texttemplate  Parent: data[type=histogram]  Type: string Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label` and `value`.    hovertext  Parent: data[type=histogram]  Type: string or array of strings Default: "" Same as `text`.    hoverinfo  Parent: data[type=histogram]  Type: flaglist string. Any combination of "x", "y", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=histogram]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `binNumber` Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    xhoverformat  Parent: data[type=histogram]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=histogram]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    meta  Parent: data[type=histogram]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=histogram]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    xaxis  Parent: data[type=histogram]  Type: subplotid Default: x Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.    yaxis  Parent: data[type=histogram]  Type: subplotid Default: y Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.    orientation  Parent: data[type=histogram]  Type: enumerated , one of ( "v" | "h" ) Sets the orientation of the bars. With "v" ("h"), the value of the each bar spans along the vertical (horizontal).    histfunc  Parent: data[type=histogram]  Type: enumerated , one of ( "count" | "sum" | "avg" | "min" | "max" ) Default: "count" Specifies the binning function used for this histogram trace. If "count", the histogram values are computed by counting the number of values lying inside each bin. If "sum", "avg", "min", "max", the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.    histnorm  Parent: data[type=histogram]  Type: enumerated , one of ( "" | "percent" | "probability" | "density" | "probability density" ) Default: "" Specifies the type of normalization used for this histogram trace. If "", the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If "percent" / "probability", the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If "density", the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If "probability density", the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).    alignmentgroup  Parent: data[type=histogram]  Type: string Default: "" Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.    offsetgroup  Parent: data[type=histogram]  Type: string Default: "" Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.    nbinsx  Parent: data[type=histogram]  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.    nbinsy  Parent: data[type=histogram]  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.    autobinx  Parent: data[type=histogram]  Type: boolean Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.    autobiny  Parent: data[type=histogram]  Type: boolean Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.    bingroup  Parent: data[type=histogram]  Type: string Default: "" Set a group of histogram traces which will have compatible bin settings. Note that traces on the same subplot and with the same "orientation" under `barmode` "stack", "relative" and "group" are forced into the same bingroup, Using `bingroup`, traces under `barmode` "overlay" and on different axes (of the same axis type) can have compatible bin settings. Note that histogram and histogram2d" trace can share the same `bingroup`    xbins  Parent: data[type=histogram] Type: object containing one or more of the keys listed below.    end  Parent: data[type=histogram].xbins  Type: number or categorical coordinate string Sets the end value for the x axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.    size  Parent: data[type=histogram].xbins  Type: number or categorical coordinate string Sets the size of each x axis bin. Default behavior: If `nbinsx` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsx` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or "M<n>" for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). If multiple non-overlaying histograms share a subplot, the first explicit `size` is used and all others discarded. If no `size` is provided,the sample data from all traces is combined to determine `size` as described above.    start  Parent: data[type=histogram].xbins  Type: number or categorical coordinate string Sets the starting value for the x axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. If multiple non-overlaying histograms share a subplot, the first explicit `start` is used exactly and all others are shifted down (if necessary) to differ from that one by an integer number of bins.      ybins  Parent: data[type=histogram] Type: object containing one or more of the keys listed below.    end  Parent: data[type=histogram].ybins  Type: number or categorical coordinate string Sets the end value for the y axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.    size  Parent: data[type=histogram].ybins  Type: number or categorical coordinate string Sets the size of each y axis bin. Default behavior: If `nbinsy` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsy` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or "M<n>" for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1). If multiple non-overlaying histograms share a subplot, the first explicit `size` is used and all others discarded. If no `size` is provided,the sample data from all traces is combined to determine `size` as described above.    start  Parent: data[type=histogram].ybins  Type: number or categorical coordinate string Sets the starting value for the y axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5. If multiple non-overlaying histograms share a subplot, the first explicit `start` is used exactly and all others are shifted down (if necessary) to differ from that one by an integer number of bins.      marker  Parent: data[type=histogram] Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=histogram].marker  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=histogram].marker  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.    cmax  Parent: data[type=histogram].marker  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.    cmid  Parent: data[type=histogram].marker  Type: number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.    cmin  Parent: data[type=histogram].marker  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.    color  Parent: data[type=histogram].marker  Type: color or array of colors Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.    coloraxis  Parent: data[type=histogram].marker  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=histogram].marker Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=histogram].marker.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=histogram].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=histogram].marker.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=histogram].marker.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=histogram].marker.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=histogram].marker.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=histogram].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=histogram].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=histogram].marker.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=histogram].marker.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=histogram].marker.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=histogram].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=histogram].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=histogram].marker.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=histogram].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=histogram].marker.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=histogram].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=histogram].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=histogram].marker.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=histogram].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=histogram].marker.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=histogram].marker.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=histogram].marker.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=histogram].marker.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=histogram].marker.colorbar.tickfont  Type: color    family  Parent: data[type=histogram].marker.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=histogram].marker.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=histogram].marker.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=histogram].marker.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=histogram].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=histogram].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=histogram].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=histogram].marker.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=histogram].marker.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=histogram].marker.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=histogram].marker.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=histogram].marker.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=histogram].marker.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=histogram].marker.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=histogram].marker.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=histogram].marker.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=histogram].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=histogram].marker.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=histogram].marker.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=histogram].marker.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=histogram].marker.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=histogram].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=histogram].marker.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=histogram].marker.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=histogram].marker.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=histogram].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=histogram].marker.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=histogram].marker.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=histogram].marker.colorbar.title.font  Type: color    family  Parent: data[type=histogram].marker.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=histogram].marker.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=histogram].marker.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=histogram].marker.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=histogram].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=histogram].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=histogram].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=histogram].marker.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=histogram].marker.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=histogram].marker.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=histogram].marker.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=histogram].marker.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=histogram].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=histogram].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=histogram].marker.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=histogram].marker.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=histogram].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=histogram].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colorscale  Parent: data[type=histogram].marker  Type: colorscale Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    cornerradius  Parent: data[type=histogram].marker  Type: number or categorical coordinate string Sets the rounding of corners. May be an integer number of pixels, or a percentage of bar width (as a string ending in %). Defaults to `layout.barcornerradius`. In stack or relative barmode, the first trace to set cornerradius is used for the whole stack.    line  Parent: data[type=histogram].marker Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=histogram].marker.line  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=histogram].marker.line  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.    cmax  Parent: data[type=histogram].marker.line  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.    cmid  Parent: data[type=histogram].marker.line  Type: number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.    cmin  Parent: data[type=histogram].marker.line  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.    color  Parent: data[type=histogram].marker.line  Type: color or array of colors Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.    coloraxis  Parent: data[type=histogram].marker.line  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorscale  Parent: data[type=histogram].marker.line  Type: colorscale Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    reversescale  Parent: data[type=histogram].marker.line  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.    width  Parent: data[type=histogram].marker.line  Type: number or array of numbers greater than or equal to 0 Default: 0 Sets the width (in px) of the lines bounding the marker points.      opacity  Parent: data[type=histogram].marker  Type: number or array of numbers between or equal to 0 and 1 Default: 1 Sets the opacity of the bars.    pattern  Parent: data[type=histogram].marker Type: object containing one or more of the keys listed below. Sets the pattern within the marker.    bgcolor  Parent: data[type=histogram].marker.pattern  Type: color or array of colors When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is "overlay". Otherwise, defaults to a transparent background.    fgcolor  Parent: data[type=histogram].marker.pattern  Type: color or array of colors When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is "replace". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.    fgopacity  Parent: data[type=histogram].marker.pattern  Type: number between or equal to 0 and 1 Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is "overlay". Otherwise, defaults to 1.    fillmode  Parent: data[type=histogram].marker.pattern  Type: enumerated , one of ( "replace" | "overlay" ) Default: "replace" Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.    shape  Parent: data[type=histogram].marker.pattern  Type: enumerated or array of enumerateds , one of ( "" | "/" | "\" | "x" | "-" | "|" | "+" | "." ) Default: "" Sets the shape of the pattern fill. By default, no pattern is used for filling the area.    size  Parent: data[type=histogram].marker.pattern  Type: number or array of numbers greater than or equal to 0 Default: 8 Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.    solidity  Parent: data[type=histogram].marker.pattern  Type: number or array of numbers between or equal to 0 and 1 Default: 0.3 Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.      reversescale  Parent: data[type=histogram].marker  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.    showscale  Parent: data[type=histogram].marker  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.      textangle  Parent: data[type=histogram]  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With "auto" the texts may automatically be rotated to fit with the maximum size in bars.    textfont  Parent: data[type=histogram] Type: object containing one or more of the keys listed below. Sets the text font.    color  Parent: data[type=histogram].textfont  Type: color    family  Parent: data[type=histogram].textfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=histogram].textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=histogram].textfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=histogram].textfont  Type: number greater than or equal to 1    style  Parent: data[type=histogram].textfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=histogram].textfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=histogram].textfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=histogram].textfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      error_x  Parent: data[type=histogram] Type: object containing one or more of the keys listed below.    array  Parent: data[type=histogram].error_x  Type: data array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.    arrayminus  Parent: data[type=histogram].error_x  Type: data array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.    color  Parent: data[type=histogram].error_x  Type: color Sets the stroke color of the error bars.    copy_ystyle  Parent: data[type=histogram].error_x  Type: boolean    symmetric  Parent: data[type=histogram].error_x  Type: boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.    thickness  Parent: data[type=histogram].error_x  Type: number greater than or equal to 0 Default: 2 Sets the thickness (in px) of the error bars.    traceref  Parent: data[type=histogram].error_x  Type: integer greater than or equal to 0 Default: 0    tracerefminus  Parent: data[type=histogram].error_x  Type: integer greater than or equal to 0 Default: 0    type  Parent: data[type=histogram].error_x  Type: enumerated , one of ( "percent" | "constant" | "sqrt" | "data" ) Determines the rule used to generate the error bars. If "constant`, the bar lengths are of a constant value. Set this constant in `value`. If "percent", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If "sqrt", the bar lengths correspond to the square of the underlying data. If "data", the bar lengths are set with data set `array`.    value  Parent: data[type=histogram].error_x  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars.    valueminus  Parent: data[type=histogram].error_x  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars    visible  Parent: data[type=histogram].error_x  Type: boolean Determines whether or not this set of error bars is visible.    width  Parent: data[type=histogram].error_x  Type: number greater than or equal to 0 Sets the width (in px) of the cross-bar at both ends of the error bars.      error_y  Parent: data[type=histogram] Type: object containing one or more of the keys listed below.    array  Parent: data[type=histogram].error_y  Type: data array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.    arrayminus  Parent: data[type=histogram].error_y  Type: data array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.    color  Parent: data[type=histogram].error_y  Type: color Sets the stroke color of the error bars.    symmetric  Parent: data[type=histogram].error_y  Type: boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.    thickness  Parent: data[type=histogram].error_y  Type: number greater than or equal to 0 Default: 2 Sets the thickness (in px) of the error bars.    traceref  Parent: data[type=histogram].error_y  Type: integer greater than or equal to 0 Default: 0    tracerefminus  Parent: data[type=histogram].error_y  Type: integer greater than or equal to 0 Default: 0    type  Parent: data[type=histogram].error_y  Type: enumerated , one of ( "percent" | "constant" | "sqrt" | "data" ) Determines the rule used to generate the error bars. If "constant`, the bar lengths are of a constant value. Set this constant in `value`. If "percent", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If "sqrt", the bar lengths correspond to the square of the underlying data. If "data", the bar lengths are set with data set `array`.    value  Parent: data[type=histogram].error_y  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars.    valueminus  Parent: data[type=histogram].error_y  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars    visible  Parent: data[type=histogram].error_y  Type: boolean Determines whether or not this set of error bars is visible.    width  Parent: data[type=histogram].error_y  Type: number greater than or equal to 0 Sets the width (in px) of the cross-bar at both ends of the error bars.      selectedpoints  Parent: data[type=histogram]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    selected  Parent: data[type=histogram] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=histogram].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=histogram].selected.marker  Type: color Sets the marker color of selected points.    opacity  Parent: data[type=histogram].selected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of selected points.      textfont  Parent: data[type=histogram].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=histogram].selected.textfont  Type: color Sets the text font color of selected points.        unselected  Parent: data[type=histogram] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=histogram].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=histogram].unselected.marker  Type: color Sets the marker color of unselected points, applied only when a selection exists.    opacity  Parent: data[type=histogram].unselected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of unselected points, applied only when a selection exists.      textfont  Parent: data[type=histogram].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=histogram].unselected.textfont  Type: color Sets the text font color of unselected points, applied only when a selection exists.        cliponaxis  Parent: data[type=histogram]  Type: boolean Default: true Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to "below traces".    constraintext  Parent: data[type=histogram]  Type: enumerated , one of ( "inside" | "outside" | "both" | "none" ) Default: "both" Constrain the size of text inside or outside a bar to be no larger than the bar itself.    cumulative  Parent: data[type=histogram] Type: object containing one or more of the keys listed below.    currentbin  Parent: data[type=histogram].cumulative  Type: enumerated , one of ( "include" | "exclude" | "half" ) Default: "include" Only applies if cumulative is enabled. Sets whether the current bin is included, excluded, or has half of its value included in the current cumulative value. "include" is the default for compatibility with various other tools, however it introduces a half-bin bias to the results. "exclude" makes the opposite half-bin bias, and "half" removes it.    direction  Parent: data[type=histogram].cumulative  Type: enumerated , one of ( "increasing" | "decreasing" ) Default: "increasing" Only applies if cumulative is enabled. If "increasing" (default) we sum all prior bins, so the result increases from left to right. If "decreasing" we sum later bins so the result decreases from left to right.    enabled  Parent: data[type=histogram].cumulative  Type: boolean If true, display the cumulative distribution by summing the binned values. Use the `direction` and `centralbin` attributes to tune the accumulation method. Note: in this mode, the "density" `histnorm` settings behave the same as their equivalents without "density": "" and "density" both rise to the number of data points, and "probability" and "probability density" both rise to the number of sample points.      hoverlabel  Parent: data[type=histogram] Type: object containing one or more of the keys listed below.    align  Parent: data[type=histogram].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=histogram].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=histogram].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=histogram].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=histogram].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=histogram].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=histogram].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=histogram].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=histogram].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=histogram].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=histogram].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=histogram].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=histogram].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=histogram].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      insidetextanchor  Parent: data[type=histogram]  Type: enumerated , one of ( "end" | "middle" | "start" ) Default: "end" Determines if texts are kept at center or start/end points in `textposition` "inside" mode.    insidetextfont  Parent: data[type=histogram] Type: object containing one or more of the keys listed below. Sets the font used for `text` lying inside the bar.    color  Parent: data[type=histogram].insidetextfont  Type: color    family  Parent: data[type=histogram].insidetextfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=histogram].insidetextfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=histogram].insidetextfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=histogram].insidetextfont  Type: number greater than or equal to 1    style  Parent: data[type=histogram].insidetextfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=histogram].insidetextfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=histogram].insidetextfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=histogram].insidetextfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      outsidetextfont  Parent: data[type=histogram] Type: object containing one or more of the keys listed below. Sets the font used for `text` lying outside the bar.    color  Parent: data[type=histogram].outsidetextfont  Type: color    family  Parent: data[type=histogram].outsidetextfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=histogram].outsidetextfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=histogram].outsidetextfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=histogram].outsidetextfont  Type: number greater than or equal to 1    style  Parent: data[type=histogram].outsidetextfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=histogram].outsidetextfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=histogram].outsidetextfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=histogram].outsidetextfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      xcalendar  Parent: data[type=histogram]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `x` date data.    ycalendar  Parent: data[type=histogram]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `y` date data.    uirevision  Parent: data[type=histogram]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      histogram2d traces

      










 A histogram2d trace is an object with the key "type" equal to "histogram2d" (i.e. {"type": "histogram2d"}) and any of the keys listed below. The sample data from which statistics are computed is set in `x` and `y` (where `x` and `y` represent marginal distributions, binning is set in `xbins` and `ybins` in this case) or `z` (where `z` represent the 2D distribution and binning set, binning is set by `x` and `y` in this case). The resulting distribution is visualized as a heatmap. 














   type  Parent: data[type=histogram2d]  Type: "histogram2d"    name  Parent: data[type=histogram2d]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=histogram2d]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=histogram2d]  Type: boolean Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=histogram2d]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=histogram2d]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=histogram2d]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=histogram2d] Type: object containing one or more of the keys listed below.    font  Parent: data[type=histogram2d].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=histogram2d].legendgrouptitle.font  Type: color    family  Parent: data[type=histogram2d].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=histogram2d].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=histogram2d].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=histogram2d].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=histogram2d].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=histogram2d].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=histogram2d].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=histogram2d].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=histogram2d].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=histogram2d]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=histogram2d]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=histogram2d]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    x  Parent: data[type=histogram2d]  Type: data array Sets the sample data to be binned on the x axis.    xgap  Parent: data[type=histogram2d]  Type: number greater than or equal to 0 Default: 0 Sets the horizontal gap (in pixels) between bricks.    y  Parent: data[type=histogram2d]  Type: data array Sets the sample data to be binned on the y axis.    ygap  Parent: data[type=histogram2d]  Type: number greater than or equal to 0 Default: 0 Sets the vertical gap (in pixels) between bricks.    z  Parent: data[type=histogram2d]  Type: data array Sets the aggregation data.    texttemplate  Parent: data[type=histogram2d]  Type: string Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `z`    hoverinfo  Parent: data[type=histogram2d]  Type: flaglist string. Any combination of "x", "y", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=histogram2d]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `z` Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    xhoverformat  Parent: data[type=histogram2d]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=histogram2d]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    meta  Parent: data[type=histogram2d]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=histogram2d]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    xaxis  Parent: data[type=histogram2d]  Type: subplotid Default: x Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.    yaxis  Parent: data[type=histogram2d]  Type: subplotid Default: y Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.    coloraxis  Parent: data[type=histogram2d]  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    histfunc  Parent: data[type=histogram2d]  Type: enumerated , one of ( "count" | "sum" | "avg" | "min" | "max" ) Default: "count" Specifies the binning function used for this histogram trace. If "count", the histogram values are computed by counting the number of values lying inside each bin. If "sum", "avg", "min", "max", the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.    histnorm  Parent: data[type=histogram2d]  Type: enumerated , one of ( "" | "percent" | "probability" | "density" | "probability density" ) Default: "" Specifies the type of normalization used for this histogram trace. If "", the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If "percent" / "probability", the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If "density", the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If "probability density", the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).    nbinsx  Parent: data[type=histogram2d]  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.    nbinsy  Parent: data[type=histogram2d]  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.    autobinx  Parent: data[type=histogram2d]  Type: boolean Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.    autobiny  Parent: data[type=histogram2d]  Type: boolean Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.    bingroup  Parent: data[type=histogram2d]  Type: string Default: "" Set the `xbingroup` and `ybingroup` default prefix For example, setting a `bingroup` of "1" on two histogram2d traces will make them their x-bins and y-bins match separately.    xbingroup  Parent: data[type=histogram2d]  Type: string Default: "" Set a group of histogram traces which will have compatible x-bin settings. Using `xbingroup`, histogram2d and histogram2dcontour traces (on axes of the same axis type) can have compatible x-bin settings. Note that the same `xbingroup` value can be used to set (1D) histogram `bingroup`    xbins  Parent: data[type=histogram2d] Type: object containing one or more of the keys listed below.    end  Parent: data[type=histogram2d].xbins  Type: number or categorical coordinate string Sets the end value for the x axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.    size  Parent: data[type=histogram2d].xbins  Type: number or categorical coordinate string Sets the size of each x axis bin. Default behavior: If `nbinsx` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsx` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or "M<n>" for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1).     start  Parent: data[type=histogram2d].xbins  Type: number or categorical coordinate string Sets the starting value for the x axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5.       ybingroup  Parent: data[type=histogram2d]  Type: string Default: "" Set a group of histogram traces which will have compatible y-bin settings. Using `ybingroup`, histogram2d and histogram2dcontour traces (on axes of the same axis type) can have compatible y-bin settings. Note that the same `ybingroup` value can be used to set (1D) histogram `bingroup`    ybins  Parent: data[type=histogram2d] Type: object containing one or more of the keys listed below.    end  Parent: data[type=histogram2d].ybins  Type: number or categorical coordinate string Sets the end value for the y axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.    size  Parent: data[type=histogram2d].ybins  Type: number or categorical coordinate string Sets the size of each y axis bin. Default behavior: If `nbinsy` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsy` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or "M<n>" for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1).     start  Parent: data[type=histogram2d].ybins  Type: number or categorical coordinate string Sets the starting value for the y axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5.       marker  Parent: data[type=histogram2d] Type: object containing one or more of the keys listed below.    color  Parent: data[type=histogram2d].marker  Type: data array Sets the aggregation data.      textfont  Parent: data[type=histogram2d] Type: object containing one or more of the keys listed below. Sets the text font.    color  Parent: data[type=histogram2d].textfont  Type: color Default: "auto"    family  Parent: data[type=histogram2d].textfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=histogram2d].textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=histogram2d].textfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=histogram2d].textfont  Type: number greater than or equal to 1 Default: "auto"    style  Parent: data[type=histogram2d].textfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=histogram2d].textfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=histogram2d].textfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=histogram2d].textfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      colorbar  Parent: data[type=histogram2d] Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=histogram2d].colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=histogram2d].colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=histogram2d].colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=histogram2d].colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=histogram2d].colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=histogram2d].colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=histogram2d].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=histogram2d].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=histogram2d].colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=histogram2d].colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=histogram2d].colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=histogram2d].colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=histogram2d].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=histogram2d].colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=histogram2d].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=histogram2d].colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=histogram2d].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=histogram2d].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=histogram2d].colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=histogram2d].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=histogram2d].colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=histogram2d].colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=histogram2d].colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=histogram2d].colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=histogram2d].colorbar.tickfont  Type: color    family  Parent: data[type=histogram2d].colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=histogram2d].colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=histogram2d].colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=histogram2d].colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=histogram2d].colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=histogram2d].colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=histogram2d].colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=histogram2d].colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=histogram2d].colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=histogram2d].colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=histogram2d].colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=histogram2d].colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=histogram2d].colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=histogram2d].colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=histogram2d].colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=histogram2d].colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=histogram2d].colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=histogram2d].colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=histogram2d].colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=histogram2d].colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=histogram2d].colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=histogram2d].colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=histogram2d].colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=histogram2d].colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=histogram2d].colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=histogram2d].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=histogram2d].colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=histogram2d].colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=histogram2d].colorbar.title.font  Type: color    family  Parent: data[type=histogram2d].colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=histogram2d].colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=histogram2d].colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=histogram2d].colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=histogram2d].colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=histogram2d].colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=histogram2d].colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=histogram2d].colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=histogram2d].colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=histogram2d].colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=histogram2d].colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=histogram2d].colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=histogram2d].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=histogram2d].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=histogram2d].colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=histogram2d].colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=histogram2d].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=histogram2d].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      autocolorscale  Parent: data[type=histogram2d]  Type: boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    colorscale  Parent: data[type=histogram2d]  Type: colorscale Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    showscale  Parent: data[type=histogram2d]  Type: boolean Default: true Determines whether or not a colorbar is displayed for this trace.    reversescale  Parent: data[type=histogram2d]  Type: boolean Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.    zauto  Parent: data[type=histogram2d]  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.    zhoverformat  Parent: data[type=histogram2d]  Type: string Default: "" Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.    zmax  Parent: data[type=histogram2d]  Type: number Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.    zmid  Parent: data[type=histogram2d]  Type: number Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.    zmin  Parent: data[type=histogram2d]  Type: number Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.    zsmooth  Parent: data[type=histogram2d]  Type: enumerated , one of ( "fast" | "best" | false ) Picks a smoothing algorithm use to smooth `z` data.    hoverlabel  Parent: data[type=histogram2d] Type: object containing one or more of the keys listed below.    align  Parent: data[type=histogram2d].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=histogram2d].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=histogram2d].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=histogram2d].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=histogram2d].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=histogram2d].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=histogram2d].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=histogram2d].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=histogram2d].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=histogram2d].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=histogram2d].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=histogram2d].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=histogram2d].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=histogram2d].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      xcalendar  Parent: data[type=histogram2d]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `x` date data.    ycalendar  Parent: data[type=histogram2d]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `y` date data.    uirevision  Parent: data[type=histogram2d]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      histogram2dcontour traces

      










 A histogram2dcontour trace is an object with the key "type" equal to "histogram2dcontour" (i.e. {"type": "histogram2dcontour"}) and any of the keys listed below. The sample data from which statistics are computed is set in `x` and `y` (where `x` and `y` represent marginal distributions, binning is set in `xbins` and `ybins` in this case) or `z` (where `z` represent the 2D distribution and binning set, binning is set by `x` and `y` in this case). The resulting distribution is visualized as a contour plot. 














   type  Parent: data[type=histogram2dcontour]  Type: "histogram2dcontour"    name  Parent: data[type=histogram2dcontour]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=histogram2dcontour]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=histogram2dcontour]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=histogram2dcontour]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=histogram2dcontour]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=histogram2dcontour]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=histogram2dcontour] Type: object containing one or more of the keys listed below.    font  Parent: data[type=histogram2dcontour].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=histogram2dcontour].legendgrouptitle.font  Type: color    family  Parent: data[type=histogram2dcontour].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=histogram2dcontour].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=histogram2dcontour].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=histogram2dcontour].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=histogram2dcontour].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=histogram2dcontour].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=histogram2dcontour].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=histogram2dcontour].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=histogram2dcontour].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=histogram2dcontour]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=histogram2dcontour]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=histogram2dcontour]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    x  Parent: data[type=histogram2dcontour]  Type: data array Sets the sample data to be binned on the x axis.    y  Parent: data[type=histogram2dcontour]  Type: data array Sets the sample data to be binned on the y axis.    z  Parent: data[type=histogram2dcontour]  Type: data array Sets the aggregation data.    texttemplate  Parent: data[type=histogram2dcontour]  Type: string Default: "" For this trace it only has an effect if `coloring` is set to "heatmap". Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `x`, `y`, `z` and `text`.    hoverinfo  Parent: data[type=histogram2dcontour]  Type: flaglist string. Any combination of "x", "y", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=histogram2dcontour]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `z` Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    xhoverformat  Parent: data[type=histogram2dcontour]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=histogram2dcontour]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    meta  Parent: data[type=histogram2dcontour]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=histogram2dcontour]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    xaxis  Parent: data[type=histogram2dcontour]  Type: subplotid Default: x Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.    yaxis  Parent: data[type=histogram2dcontour]  Type: subplotid Default: y Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.    coloraxis  Parent: data[type=histogram2dcontour]  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    histfunc  Parent: data[type=histogram2dcontour]  Type: enumerated , one of ( "count" | "sum" | "avg" | "min" | "max" ) Default: "count" Specifies the binning function used for this histogram trace. If "count", the histogram values are computed by counting the number of values lying inside each bin. If "sum", "avg", "min", "max", the histogram values are computed using the sum, the average, the minimum or the maximum of the values lying inside each bin respectively.    histnorm  Parent: data[type=histogram2dcontour]  Type: enumerated , one of ( "" | "percent" | "probability" | "density" | "probability density" ) Default: "" Specifies the type of normalization used for this histogram trace. If "", the span of each bar corresponds to the number of occurrences (i.e. the number of data points lying inside the bins). If "percent" / "probability", the span of each bar corresponds to the percentage / fraction of occurrences with respect to the total number of sample points (here, the sum of all bin HEIGHTS equals 100% / 1). If "density", the span of each bar corresponds to the number of occurrences in a bin divided by the size of the bin interval (here, the sum of all bin AREAS equals the total number of sample points). If "probability density", the area of each bar corresponds to the probability that an event will fall into the corresponding bin (here, the sum of all bin AREAS equals 1).    nbinsx  Parent: data[type=histogram2dcontour]  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `xbins.size` is provided.    nbinsy  Parent: data[type=histogram2dcontour]  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of desired bins. This value will be used in an algorithm that will decide the optimal bin size such that the histogram best visualizes the distribution of the data. Ignored if `ybins.size` is provided.    autobinx  Parent: data[type=histogram2dcontour]  Type: boolean Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobinx` is not needed. However, we accept `autobinx: true` or `false` and will update `xbins` accordingly before deleting `autobinx` from the trace.    autobiny  Parent: data[type=histogram2dcontour]  Type: boolean Obsolete: since v1.42 each bin attribute is auto-determined separately and `autobiny` is not needed. However, we accept `autobiny: true` or `false` and will update `ybins` accordingly before deleting `autobiny` from the trace.    bingroup  Parent: data[type=histogram2dcontour]  Type: string Default: "" Set the `xbingroup` and `ybingroup` default prefix For example, setting a `bingroup` of "1" on two histogram2d traces will make them their x-bins and y-bins match separately.    xbingroup  Parent: data[type=histogram2dcontour]  Type: string Default: "" Set a group of histogram traces which will have compatible x-bin settings. Using `xbingroup`, histogram2d and histogram2dcontour traces (on axes of the same axis type) can have compatible x-bin settings. Note that the same `xbingroup` value can be used to set (1D) histogram `bingroup`    xbins  Parent: data[type=histogram2dcontour] Type: object containing one or more of the keys listed below.    end  Parent: data[type=histogram2dcontour].xbins  Type: number or categorical coordinate string Sets the end value for the x axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.    size  Parent: data[type=histogram2dcontour].xbins  Type: number or categorical coordinate string Sets the size of each x axis bin. Default behavior: If `nbinsx` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsx` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or "M<n>" for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1).     start  Parent: data[type=histogram2dcontour].xbins  Type: number or categorical coordinate string Sets the starting value for the x axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5.       ybingroup  Parent: data[type=histogram2dcontour]  Type: string Default: "" Set a group of histogram traces which will have compatible y-bin settings. Using `ybingroup`, histogram2d and histogram2dcontour traces (on axes of the same axis type) can have compatible y-bin settings. Note that the same `ybingroup` value can be used to set (1D) histogram `bingroup`    ybins  Parent: data[type=histogram2dcontour] Type: object containing one or more of the keys listed below.    end  Parent: data[type=histogram2dcontour].ybins  Type: number or categorical coordinate string Sets the end value for the y axis bins. The last bin may not end exactly at this value, we increment the bin edge by `size` from `start` until we reach or exceed `end`. Defaults to the maximum data value. Like `start`, for dates use a date string, and for category data `end` is based on the category serial numbers.    size  Parent: data[type=histogram2dcontour].ybins  Type: number or categorical coordinate string Sets the size of each y axis bin. Default behavior: If `nbinsy` is 0 or omitted, we choose a nice round bin size such that the number of bins is about the same as the typical number of samples in each bin. If `nbinsy` is provided, we choose a nice round bin size giving no more than that many bins. For date data, use milliseconds or "M<n>" for months, as in `axis.dtick`. For category data, the number of categories to bin together (always defaults to 1).     start  Parent: data[type=histogram2dcontour].ybins  Type: number or categorical coordinate string Sets the starting value for the y axis bins. Defaults to the minimum data value, shifted down if necessary to make nice round values and to remove ambiguous bin edges. For example, if most of the data is integers we shift the bin edges 0.5 down, so a `size` of 5 would have a default `start` of -0.5, so it is clear that 0-4 are in the first bin, 5-9 in the second, but continuous data gets a start of 0 and bins [0,5), [5,10) etc. Dates behave similarly, and `start` should be a date string. For category data, `start` is based on the category serial numbers, and defaults to -0.5.       marker  Parent: data[type=histogram2dcontour] Type: object containing one or more of the keys listed below.    color  Parent: data[type=histogram2dcontour].marker  Type: data array Sets the aggregation data.      line  Parent: data[type=histogram2dcontour] Type: object containing one or more of the keys listed below.    color  Parent: data[type=histogram2dcontour].line  Type: color Sets the color of the contour level. Has no effect if `contours.coloring` is set to "lines".    dash  Parent: data[type=histogram2dcontour].line  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    smoothing  Parent: data[type=histogram2dcontour].line  Type: number between or equal to 0 and 1.3 Default: 1 Sets the amount of smoothing for the contour lines, where "0" corresponds to no smoothing.    width  Parent: data[type=histogram2dcontour].line  Type: number greater than or equal to 0 Default: 0.5 Sets the contour line width in (in px)      textfont  Parent: data[type=histogram2dcontour] Type: object containing one or more of the keys listed below. For this trace it only has an effect if `coloring` is set to "heatmap". Sets the text font.    color  Parent: data[type=histogram2dcontour].textfont  Type: color Default: "auto"    family  Parent: data[type=histogram2dcontour].textfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=histogram2dcontour].textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=histogram2dcontour].textfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=histogram2dcontour].textfont  Type: number greater than or equal to 1 Default: "auto"    style  Parent: data[type=histogram2dcontour].textfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=histogram2dcontour].textfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=histogram2dcontour].textfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=histogram2dcontour].textfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      colorbar  Parent: data[type=histogram2dcontour] Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=histogram2dcontour].colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=histogram2dcontour].colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=histogram2dcontour].colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=histogram2dcontour].colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=histogram2dcontour].colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=histogram2dcontour].colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=histogram2dcontour].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=histogram2dcontour].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=histogram2dcontour].colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=histogram2dcontour].colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=histogram2dcontour].colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=histogram2dcontour].colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=histogram2dcontour].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=histogram2dcontour].colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=histogram2dcontour].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=histogram2dcontour].colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=histogram2dcontour].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=histogram2dcontour].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=histogram2dcontour].colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=histogram2dcontour].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=histogram2dcontour].colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=histogram2dcontour].colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=histogram2dcontour].colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=histogram2dcontour].colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=histogram2dcontour].colorbar.tickfont  Type: color    family  Parent: data[type=histogram2dcontour].colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=histogram2dcontour].colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=histogram2dcontour].colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=histogram2dcontour].colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=histogram2dcontour].colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=histogram2dcontour].colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=histogram2dcontour].colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=histogram2dcontour].colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=histogram2dcontour].colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=histogram2dcontour].colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=histogram2dcontour].colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=histogram2dcontour].colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=histogram2dcontour].colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=histogram2dcontour].colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=histogram2dcontour].colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=histogram2dcontour].colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=histogram2dcontour].colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=histogram2dcontour].colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=histogram2dcontour].colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=histogram2dcontour].colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=histogram2dcontour].colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=histogram2dcontour].colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=histogram2dcontour].colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=histogram2dcontour].colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=histogram2dcontour].colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=histogram2dcontour].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=histogram2dcontour].colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=histogram2dcontour].colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=histogram2dcontour].colorbar.title.font  Type: color    family  Parent: data[type=histogram2dcontour].colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=histogram2dcontour].colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=histogram2dcontour].colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=histogram2dcontour].colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=histogram2dcontour].colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=histogram2dcontour].colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=histogram2dcontour].colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=histogram2dcontour].colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=histogram2dcontour].colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=histogram2dcontour].colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=histogram2dcontour].colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=histogram2dcontour].colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=histogram2dcontour].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=histogram2dcontour].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=histogram2dcontour].colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=histogram2dcontour].colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=histogram2dcontour].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=histogram2dcontour].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      autocolorscale  Parent: data[type=histogram2dcontour]  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    colorscale  Parent: data[type=histogram2dcontour]  Type: colorscale Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    showscale  Parent: data[type=histogram2dcontour]  Type: boolean Default: true Determines whether or not a colorbar is displayed for this trace.    reversescale  Parent: data[type=histogram2dcontour]  Type: boolean Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.    zauto  Parent: data[type=histogram2dcontour]  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.    zhoverformat  Parent: data[type=histogram2dcontour]  Type: string Default: "" Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.    zmax  Parent: data[type=histogram2dcontour]  Type: number Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.    zmid  Parent: data[type=histogram2dcontour]  Type: number Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.    zmin  Parent: data[type=histogram2dcontour]  Type: number Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.    autocontour  Parent: data[type=histogram2dcontour]  Type: boolean Default: true Determines whether or not the contour level attributes are picked by an algorithm. If "true", the number of contour levels can be set in `ncontours`. If "false", set the contour level attributes in `contours`.    contours  Parent: data[type=histogram2dcontour] Type: object containing one or more of the keys listed below.    coloring  Parent: data[type=histogram2dcontour].contours  Type: enumerated , one of ( "fill" | "heatmap" | "lines" | "none" ) Default: "fill" Determines the coloring method showing the contour values. If "fill", coloring is done evenly between each contour level If "heatmap", a heatmap gradient coloring is applied between each contour level. If "lines", coloring is done on the contour lines. If "none", no coloring is applied on this trace.    end  Parent: data[type=histogram2dcontour].contours  Type: number Sets the end contour level value. Must be more than `contours.start`    labelfont  Parent: data[type=histogram2dcontour].contours Type: object containing one or more of the keys listed below. Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.    color  Parent: data[type=histogram2dcontour].contours.labelfont  Type: color    family  Parent: data[type=histogram2dcontour].contours.labelfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=histogram2dcontour].contours.labelfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=histogram2dcontour].contours.labelfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=histogram2dcontour].contours.labelfont  Type: number greater than or equal to 1    style  Parent: data[type=histogram2dcontour].contours.labelfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=histogram2dcontour].contours.labelfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=histogram2dcontour].contours.labelfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=histogram2dcontour].contours.labelfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      labelformat  Parent: data[type=histogram2dcontour].contours  Type: string Default: "" Sets the contour label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.    operation  Parent: data[type=histogram2dcontour].contours  Type: enumerated , one of ( "=" | "<" | ">=" | ">" | "<=" | "[]" | "()" | "[)" | "(]" | "][" | ")(" | "](" | ")[" ) Default: "=" Sets the constraint operation. "=" keeps regions equal to `value` "<" and "<=" keep regions less than `value` ">" and ">=" keep regions greater than `value` "[]", "()", "[)", and "(]" keep regions inside `value[0]` to `value[1]` "][", ")(", "](", ")[" keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.    showlabels  Parent: data[type=histogram2dcontour].contours  Type: boolean Determines whether to label the contour lines with their values.    showlines  Parent: data[type=histogram2dcontour].contours  Type: boolean Default: true Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to "fill".    size  Parent: data[type=histogram2dcontour].contours  Type: number greater than or equal to 0 Sets the step between each contour level. Must be positive.    start  Parent: data[type=histogram2dcontour].contours  Type: number Sets the starting contour level value. Must be less than `contours.end`    type  Parent: data[type=histogram2dcontour].contours  Type: enumerated , one of ( "levels" | "constraint" ) Default: "levels" If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.    value  Parent: data[type=histogram2dcontour].contours  Type: number or categorical coordinate string Default: 0 Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (=,<,>=,>,<=) "value" is expected to be a number. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[) "value" is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.      hoverlabel  Parent: data[type=histogram2dcontour] Type: object containing one or more of the keys listed below.    align  Parent: data[type=histogram2dcontour].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=histogram2dcontour].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=histogram2dcontour].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=histogram2dcontour].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=histogram2dcontour].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=histogram2dcontour].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=histogram2dcontour].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=histogram2dcontour].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=histogram2dcontour].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=histogram2dcontour].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=histogram2dcontour].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=histogram2dcontour].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=histogram2dcontour].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=histogram2dcontour].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      ncontours  Parent: data[type=histogram2dcontour]  Type: integer greater than or equal to 1 Default: 15 Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is "true" or if `contours.size` is missing.    xcalendar  Parent: data[type=histogram2dcontour]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `x` date data.    ycalendar  Parent: data[type=histogram2dcontour]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `y` date data.    uirevision  Parent: data[type=histogram2dcontour]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      ohlc traces

      










 A ohlc trace is an object with the key "type" equal to "ohlc" (i.e. {"type": "ohlc"}) and any of the keys listed below. The ohlc (short for Open-High-Low-Close) is a style of financial chart describing open, high, low and close for a given `x` coordinate (most likely time). The tip of the lines represent the `low` and `high` values and the horizontal segments represent the `open` and `close` values. Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing items are drawn in green whereas decreasing are drawn in red. 














   type  Parent: data[type=ohlc]  Type: "ohlc"    name  Parent: data[type=ohlc]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=ohlc]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=ohlc]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=ohlc]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=ohlc]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=ohlc]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=ohlc] Type: object containing one or more of the keys listed below.    font  Parent: data[type=ohlc].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=ohlc].legendgrouptitle.font  Type: color    family  Parent: data[type=ohlc].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=ohlc].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=ohlc].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=ohlc].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=ohlc].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=ohlc].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=ohlc].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=ohlc].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=ohlc].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=ohlc]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=ohlc]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=ohlc]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    zorder  Parent: data[type=ohlc]  Type: integer Default: 0 Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.    x  Parent: data[type=ohlc]  Type: data array Sets the x coordinates. If absent, linear coordinate will be generated.    close  Parent: data[type=ohlc]  Type: data array Sets the close values.    open  Parent: data[type=ohlc]  Type: data array Sets the open values.    high  Parent: data[type=ohlc]  Type: data array Sets the high values.    low  Parent: data[type=ohlc]  Type: data array Sets the low values.    text  Parent: data[type=ohlc]  Type: string or array of strings Default: "" Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points.    hovertext  Parent: data[type=ohlc]  Type: string or array of strings Default: "" Same as `text`.    hoverinfo  Parent: data[type=ohlc]  Type: flaglist string. Any combination of "x", "y", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    xhoverformat  Parent: data[type=ohlc]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=ohlc]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    meta  Parent: data[type=ohlc]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=ohlc]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    xaxis  Parent: data[type=ohlc]  Type: subplotid Default: x Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.    yaxis  Parent: data[type=ohlc]  Type: subplotid Default: y Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.    xperiod  Parent: data[type=ohlc]  Type: number or categorical coordinate string Default: 0 Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M<n>" on the x axis. Special values in the form of "M<n>" could be used to declare the number of months. In this case `n` must be a positive integer.    xperiodalignment  Parent: data[type=ohlc]  Type: enumerated , one of ( "start" | "middle" | "end" ) Default: "middle" Only relevant when the axis `type` is "date". Sets the alignment of data points on the x axis.    xperiod0  Parent: data[type=ohlc]  Type: number or categorical coordinate string Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.    line  Parent: data[type=ohlc] Type: object containing one or more of the keys listed below.    dash  Parent: data[type=ohlc].line  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px"). Note that this style setting can also be set per direction via `increasing.line.dash` and `decreasing.line.dash`.    width  Parent: data[type=ohlc].line  Type: number greater than or equal to 0 Default: 2 [object Object] Note that this style setting can also be set per direction via `increasing.line.width` and `decreasing.line.width`.      selectedpoints  Parent: data[type=ohlc]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    increasing  Parent: data[type=ohlc] Type: object containing one or more of the keys listed below.    line  Parent: data[type=ohlc].increasing Type: object containing one or more of the keys listed below.    color  Parent: data[type=ohlc].increasing.line  Type: color Default: "#3D9970" Sets the line color.    dash  Parent: data[type=ohlc].increasing.line  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    width  Parent: data[type=ohlc].increasing.line  Type: number greater than or equal to 0 Default: 2 Sets the line width (in px).        decreasing  Parent: data[type=ohlc] Type: object containing one or more of the keys listed below.    line  Parent: data[type=ohlc].decreasing Type: object containing one or more of the keys listed below.    color  Parent: data[type=ohlc].decreasing.line  Type: color Default: "#FF4136" Sets the line color.    dash  Parent: data[type=ohlc].decreasing.line  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    width  Parent: data[type=ohlc].decreasing.line  Type: number greater than or equal to 0 Default: 2 Sets the line width (in px).        hoverlabel  Parent: data[type=ohlc] Type: object containing one or more of the keys listed below.    align  Parent: data[type=ohlc].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=ohlc].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=ohlc].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=ohlc].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=ohlc].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=ohlc].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=ohlc].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=ohlc].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=ohlc].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=ohlc].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=ohlc].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=ohlc].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=ohlc].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=ohlc].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.    split  Parent: data[type=ohlc].hoverlabel  Type: boolean Show hover information (open, close, high, low) in separate labels.      tickwidth  Parent: data[type=ohlc]  Type: number between or equal to 0 and 0.5 Default: 0.3 Sets the width of the open/close tick marks relative to the "x" minimal interval.    xcalendar  Parent: data[type=ohlc]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `x` date data.    uirevision  Parent: data[type=ohlc]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      candlestick traces

      










 A candlestick trace is an object with the key "type" equal to "candlestick" (i.e. {"type": "candlestick"}) and any of the keys listed below. The candlestick is a style of financial chart describing open, high, low and close for a given `x` coordinate (most likely time). The boxes represent the spread between the `open` and `close` values and the lines represent the spread between the `low` and `high` values Sample points where the close value is higher (lower) then the open value are called increasing (decreasing). By default, increasing candles are drawn in green whereas decreasing are drawn in red. 














   type  Parent: data[type=candlestick]  Type: "candlestick"    name  Parent: data[type=candlestick]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=candlestick]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=candlestick]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=candlestick]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=candlestick]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=candlestick]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=candlestick] Type: object containing one or more of the keys listed below.    font  Parent: data[type=candlestick].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=candlestick].legendgrouptitle.font  Type: color    family  Parent: data[type=candlestick].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=candlestick].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=candlestick].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=candlestick].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=candlestick].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=candlestick].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=candlestick].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=candlestick].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=candlestick].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=candlestick]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=candlestick]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=candlestick]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    zorder  Parent: data[type=candlestick]  Type: integer Default: 0 Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.    x  Parent: data[type=candlestick]  Type: data array Sets the x coordinates. If absent, linear coordinate will be generated.    close  Parent: data[type=candlestick]  Type: data array Sets the close values.    open  Parent: data[type=candlestick]  Type: data array Sets the open values.    high  Parent: data[type=candlestick]  Type: data array Sets the high values.    low  Parent: data[type=candlestick]  Type: data array Sets the low values.    text  Parent: data[type=candlestick]  Type: string or array of strings Default: "" Sets hover text elements associated with each sample point. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to this trace's sample points.    hovertext  Parent: data[type=candlestick]  Type: string or array of strings Default: "" Same as `text`.    hoverinfo  Parent: data[type=candlestick]  Type: flaglist string. Any combination of "x", "y", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    xhoverformat  Parent: data[type=candlestick]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=candlestick]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    meta  Parent: data[type=candlestick]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=candlestick]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    xaxis  Parent: data[type=candlestick]  Type: subplotid Default: x Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.    yaxis  Parent: data[type=candlestick]  Type: subplotid Default: y Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.    xperiod  Parent: data[type=candlestick]  Type: number or categorical coordinate string Default: 0 Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M<n>" on the x axis. Special values in the form of "M<n>" could be used to declare the number of months. In this case `n` must be a positive integer.    xperiodalignment  Parent: data[type=candlestick]  Type: enumerated , one of ( "start" | "middle" | "end" ) Default: "middle" Only relevant when the axis `type` is "date". Sets the alignment of data points on the x axis.    xperiod0  Parent: data[type=candlestick]  Type: number or categorical coordinate string Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.    line  Parent: data[type=candlestick] Type: object containing one or more of the keys listed below.    width  Parent: data[type=candlestick].line  Type: number greater than or equal to 0 Default: 2 Sets the width (in px) of line bounding the box(es). Note that this style setting can also be set per direction via `increasing.line.width` and `decreasing.line.width`.      whiskerwidth  Parent: data[type=candlestick]  Type: number between or equal to 0 and 1 Default: 0 Sets the width of the whiskers relative to the box' width. For example, with 1, the whiskers are as wide as the box(es).    selectedpoints  Parent: data[type=candlestick]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    increasing  Parent: data[type=candlestick] Type: object containing one or more of the keys listed below.    fillcolor  Parent: data[type=candlestick].increasing  Type: color Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.    line  Parent: data[type=candlestick].increasing Type: object containing one or more of the keys listed below.    color  Parent: data[type=candlestick].increasing.line  Type: color Default: "#3D9970" Sets the color of line bounding the box(es).    width  Parent: data[type=candlestick].increasing.line  Type: number greater than or equal to 0 Default: 2 Sets the width (in px) of line bounding the box(es).        decreasing  Parent: data[type=candlestick] Type: object containing one or more of the keys listed below.    fillcolor  Parent: data[type=candlestick].decreasing  Type: color Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.    line  Parent: data[type=candlestick].decreasing Type: object containing one or more of the keys listed below.    color  Parent: data[type=candlestick].decreasing.line  Type: color Default: "#FF4136" Sets the color of line bounding the box(es).    width  Parent: data[type=candlestick].decreasing.line  Type: number greater than or equal to 0 Default: 2 Sets the width (in px) of line bounding the box(es).        hoverlabel  Parent: data[type=candlestick] Type: object containing one or more of the keys listed below.    align  Parent: data[type=candlestick].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=candlestick].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=candlestick].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=candlestick].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=candlestick].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=candlestick].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=candlestick].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=candlestick].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=candlestick].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=candlestick].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=candlestick].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=candlestick].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=candlestick].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=candlestick].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.    split  Parent: data[type=candlestick].hoverlabel  Type: boolean Show hover information (open, close, high, low) in separate labels.      xcalendar  Parent: data[type=candlestick]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `x` date data.    uirevision  Parent: data[type=candlestick]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      waterfall traces

      










 A waterfall trace is an object with the key "type" equal to "waterfall" (i.e. {"type": "waterfall"}) and any of the keys listed below. Draws waterfall trace which is useful graph to displays the contribution of various elements (either positive or negative) in a bar chart. The data visualized by the span of the bars is set in `y` if `orientation` is set to "v" (the default) and the labels are set in `x`. By setting `orientation` to "h", the roles are interchanged. 














   type  Parent: data[type=waterfall]  Type: "waterfall"    name  Parent: data[type=waterfall]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=waterfall]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=waterfall]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=waterfall]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=waterfall]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=waterfall]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=waterfall] Type: object containing one or more of the keys listed below.    font  Parent: data[type=waterfall].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=waterfall].legendgrouptitle.font  Type: color    family  Parent: data[type=waterfall].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=waterfall].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=waterfall].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=waterfall].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=waterfall].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=waterfall].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=waterfall].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=waterfall].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=waterfall].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=waterfall]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=waterfall]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=waterfall]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    zorder  Parent: data[type=waterfall]  Type: integer Default: 0 Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.    x  Parent: data[type=waterfall]  Type: data array Sets the x coordinates.    x0  Parent: data[type=waterfall]  Type: number or categorical coordinate string Default: 0 Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.    dx  Parent: data[type=waterfall]  Type: number Default: 1 Sets the x coordinate step. See `x0` for more info.    y  Parent: data[type=waterfall]  Type: data array Sets the y coordinates.    y0  Parent: data[type=waterfall]  Type: number or categorical coordinate string Default: 0 Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.    dy  Parent: data[type=waterfall]  Type: number Default: 1 Sets the y coordinate step. See `y0` for more info.    base  Parent: data[type=waterfall]  Type: number Sets where the bar base is drawn (in position axis units).    width  Parent: data[type=waterfall]  Type: number or array of numbers greater than or equal to 0 Sets the bar width (in position axis units).    measure  Parent: data[type=waterfall]  Type: data array Default:  An array containing types of values. By default the values are considered as 'relative'. However; it is possible to use 'total' to compute the sums. Also 'absolute' could be applied to reset the computed total or to declare an initial value where needed.    offset  Parent: data[type=waterfall]  Type: number or array of numbers Shifts the position where the bar is drawn (in position axis units). In "group" barmode, traces that set "offset" will be excluded and drawn in "overlay" mode instead.    text  Parent: data[type=waterfall]  Type: string or array of strings Default: "" Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    textposition  Parent: data[type=waterfall]  Type: enumerated or array of enumerateds , one of ( "inside" | "outside" | "auto" | "none" ) Default: "auto" Specifies the location of the `text`. "inside" positions `text` inside, next to the bar end (rotated and scaled if needed). "outside" positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. "auto" tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If "none", no text appears.    texttemplate  Parent: data[type=waterfall]  Type: string or array of strings Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `initial`, `delta`, `final` and `label`.    hovertext  Parent: data[type=waterfall]  Type: string or array of strings Default: "" Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.    hoverinfo  Parent: data[type=waterfall]  Type: flaglist string. Any combination of "name", "x", "y", "text", "initial", "delta", "final" joined with a "+" OR "all" or "none" or "skip". Examples: "name", "x", "name+x", "name+x+y", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=waterfall]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `initial`, `delta` and `final`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    xhoverformat  Parent: data[type=waterfall]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=waterfall]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    meta  Parent: data[type=waterfall]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=waterfall]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    xaxis  Parent: data[type=waterfall]  Type: subplotid Default: x Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.    yaxis  Parent: data[type=waterfall]  Type: subplotid Default: y Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.    orientation  Parent: data[type=waterfall]  Type: enumerated , one of ( "v" | "h" ) Sets the orientation of the bars. With "v" ("h"), the value of the each bar spans along the vertical (horizontal).    alignmentgroup  Parent: data[type=waterfall]  Type: string Default: "" Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.    offsetgroup  Parent: data[type=waterfall]  Type: string Default: "" Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.    xperiod  Parent: data[type=waterfall]  Type: number or categorical coordinate string Default: 0 Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M<n>" on the x axis. Special values in the form of "M<n>" could be used to declare the number of months. In this case `n` must be a positive integer.    xperiodalignment  Parent: data[type=waterfall]  Type: enumerated , one of ( "start" | "middle" | "end" ) Default: "middle" Only relevant when the axis `type` is "date". Sets the alignment of data points on the x axis.    xperiod0  Parent: data[type=waterfall]  Type: number or categorical coordinate string Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.    yperiod  Parent: data[type=waterfall]  Type: number or categorical coordinate string Default: 0 Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M<n>" on the y axis. Special values in the form of "M<n>" could be used to declare the number of months. In this case `n` must be a positive integer.    yperiodalignment  Parent: data[type=waterfall]  Type: enumerated , one of ( "start" | "middle" | "end" ) Default: "middle" Only relevant when the axis `type` is "date". Sets the alignment of data points on the y axis.    yperiod0  Parent: data[type=waterfall]  Type: number or categorical coordinate string Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.    textangle  Parent: data[type=waterfall]  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With "auto" the texts may automatically be rotated to fit with the maximum size in bars.    textfont  Parent: data[type=waterfall] Type: object containing one or more of the keys listed below. Sets the font used for `text`.    color  Parent: data[type=waterfall].textfont  Type: color or array of colors    family  Parent: data[type=waterfall].textfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=waterfall].textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=waterfall].textfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=waterfall].textfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=waterfall].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=waterfall].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=waterfall].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=waterfall].textfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      textinfo  Parent: data[type=waterfall]  Type: flaglist string. Any combination of "label", "text", "initial", "delta", "final" joined with a "+" OR "none". Examples: "label", "text", "label+text", "label+text+initial", "none" Determines which trace information appear on the graph. In the case of having multiple waterfalls, totals are computed separately (per trace).    selectedpoints  Parent: data[type=waterfall]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    cliponaxis  Parent: data[type=waterfall]  Type: boolean Default: true Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to "below traces".    connector  Parent: data[type=waterfall] Type: object containing one or more of the keys listed below.    line  Parent: data[type=waterfall].connector Type: object containing one or more of the keys listed below.    color  Parent: data[type=waterfall].connector.line  Type: color Default: "#444" Sets the line color.    dash  Parent: data[type=waterfall].connector.line  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    width  Parent: data[type=waterfall].connector.line  Type: number greater than or equal to 0 Default: 2 Sets the line width (in px).      mode  Parent: data[type=waterfall].connector  Type: enumerated , one of ( "spanning" | "between" ) Default: "between" Sets the shape of connector lines.    visible  Parent: data[type=waterfall].connector  Type: boolean Default: true Determines if connector lines are drawn.       constraintext  Parent: data[type=waterfall]  Type: enumerated , one of ( "inside" | "outside" | "both" | "none" ) Default: "both" Constrain the size of text inside or outside a bar to be no larger than the bar itself.    increasing  Parent: data[type=waterfall] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=waterfall].increasing Type: object containing one or more of the keys listed below.    color  Parent: data[type=waterfall].increasing.marker  Type: color Sets the marker color of all increasing values.    line  Parent: data[type=waterfall].increasing.marker Type: object containing one or more of the keys listed below.    color  Parent: data[type=waterfall].increasing.marker.line  Type: color Sets the line color of all increasing values.    width  Parent: data[type=waterfall].increasing.marker.line  Type: number greater than or equal to 0 Default: 0 Sets the line width of all increasing values.          decreasing  Parent: data[type=waterfall] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=waterfall].decreasing Type: object containing one or more of the keys listed below.    color  Parent: data[type=waterfall].decreasing.marker  Type: color Sets the marker color of all decreasing values.    line  Parent: data[type=waterfall].decreasing.marker Type: object containing one or more of the keys listed below.    color  Parent: data[type=waterfall].decreasing.marker.line  Type: color Sets the line color of all decreasing values.    width  Parent: data[type=waterfall].decreasing.marker.line  Type: number greater than or equal to 0 Default: 0 Sets the line width of all decreasing values.          hoverlabel  Parent: data[type=waterfall] Type: object containing one or more of the keys listed below.    align  Parent: data[type=waterfall].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=waterfall].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=waterfall].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=waterfall].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=waterfall].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=waterfall].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=waterfall].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=waterfall].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=waterfall].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=waterfall].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=waterfall].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=waterfall].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=waterfall].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=waterfall].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      insidetextanchor  Parent: data[type=waterfall]  Type: enumerated , one of ( "end" | "middle" | "start" ) Default: "end" Determines if texts are kept at center or start/end points in `textposition` "inside" mode.    insidetextfont  Parent: data[type=waterfall] Type: object containing one or more of the keys listed below. Sets the font used for `text` lying inside the bar.    color  Parent: data[type=waterfall].insidetextfont  Type: color or array of colors    family  Parent: data[type=waterfall].insidetextfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=waterfall].insidetextfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=waterfall].insidetextfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=waterfall].insidetextfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=waterfall].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=waterfall].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=waterfall].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=waterfall].insidetextfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      outsidetextfont  Parent: data[type=waterfall] Type: object containing one or more of the keys listed below. Sets the font used for `text` lying outside the bar.    color  Parent: data[type=waterfall].outsidetextfont  Type: color or array of colors    family  Parent: data[type=waterfall].outsidetextfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=waterfall].outsidetextfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=waterfall].outsidetextfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=waterfall].outsidetextfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=waterfall].outsidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=waterfall].outsidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=waterfall].outsidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=waterfall].outsidetextfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      totals  Parent: data[type=waterfall] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=waterfall].totals Type: object containing one or more of the keys listed below.    color  Parent: data[type=waterfall].totals.marker  Type: color Sets the marker color of all intermediate sums and total values.    line  Parent: data[type=waterfall].totals.marker Type: object containing one or more of the keys listed below.    color  Parent: data[type=waterfall].totals.marker.line  Type: color Sets the line color of all intermediate sums and total values.    width  Parent: data[type=waterfall].totals.marker.line  Type: number greater than or equal to 0 Default: 0 Sets the line width of all intermediate sums and total values.          uirevision  Parent: data[type=waterfall]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      funnel traces

      










 A funnel trace is an object with the key "type" equal to "funnel" (i.e. {"type": "funnel"}) and any of the keys listed below. Visualize stages in a process using length-encoded bars. This trace can be used to show data in either a part-to-whole representation wherein each item appears in a single stage, or in a "drop-off" representation wherein each item appears in each stage it traversed. See also the "funnelarea" trace type for a different approach to visualizing funnel data. 














   type  Parent: data[type=funnel]  Type: "funnel"    name  Parent: data[type=funnel]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=funnel]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=funnel]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=funnel]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=funnel]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=funnel]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=funnel] Type: object containing one or more of the keys listed below.    font  Parent: data[type=funnel].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=funnel].legendgrouptitle.font  Type: color    family  Parent: data[type=funnel].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=funnel].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=funnel].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=funnel].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=funnel].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=funnel].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=funnel].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=funnel].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=funnel].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=funnel]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=funnel]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=funnel]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    zorder  Parent: data[type=funnel]  Type: integer Default: 0 Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.    x  Parent: data[type=funnel]  Type: data array Sets the x coordinates.    x0  Parent: data[type=funnel]  Type: number or categorical coordinate string Default: 0 Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.    dx  Parent: data[type=funnel]  Type: number Default: 1 Sets the x coordinate step. See `x0` for more info.    y  Parent: data[type=funnel]  Type: data array Sets the y coordinates.    y0  Parent: data[type=funnel]  Type: number or categorical coordinate string Default: 0 Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.    dy  Parent: data[type=funnel]  Type: number Default: 1 Sets the y coordinate step. See `y0` for more info.    width  Parent: data[type=funnel]  Type: number greater than or equal to 0 Sets the bar width (in position axis units).    offset  Parent: data[type=funnel]  Type: number Shifts the position where the bar is drawn (in position axis units). In "group" barmode, traces that set "offset" will be excluded and drawn in "overlay" mode instead.    text  Parent: data[type=funnel]  Type: string or array of strings Default: "" Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    textposition  Parent: data[type=funnel]  Type: enumerated or array of enumerateds , one of ( "inside" | "outside" | "auto" | "none" ) Default: "auto" Specifies the location of the `text`. "inside" positions `text` inside, next to the bar end (rotated and scaled if needed). "outside" positions `text` outside, next to the bar end (scaled if needed), unless there is another bar stacked on this one, then the text gets pushed inside. "auto" tries to position `text` inside the bar, but if the bar is too small and no bar is stacked on this one the text is moved outside. If "none", no text appears.    texttemplate  Parent: data[type=funnel]  Type: string or array of strings Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `percentInitial`, `percentPrevious`, `percentTotal`, `label` and `value`.    hovertext  Parent: data[type=funnel]  Type: string or array of strings Default: "" Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.    hoverinfo  Parent: data[type=funnel]  Type: flaglist string. Any combination of "name", "x", "y", "text", "percent initial", "percent previous", "percent total" joined with a "+" OR "all" or "none" or "skip". Examples: "name", "x", "name+x", "name+x+y", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=funnel]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `percentInitial`, `percentPrevious` and `percentTotal`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    xhoverformat  Parent: data[type=funnel]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=funnel]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    meta  Parent: data[type=funnel]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=funnel]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    xaxis  Parent: data[type=funnel]  Type: subplotid Default: x Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.    yaxis  Parent: data[type=funnel]  Type: subplotid Default: y Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.    orientation  Parent: data[type=funnel]  Type: enumerated , one of ( "v" | "h" ) Sets the orientation of the funnels. With "v" ("h"), the value of the each bar spans along the vertical (horizontal). By default funnels are tend to be oriented horizontally; unless only "y" array is presented or orientation is set to "v". Also regarding graphs including only 'horizontal' funnels, "autorange" on the "y-axis" are set to "reversed".    alignmentgroup  Parent: data[type=funnel]  Type: string Default: "" Set several traces linked to the same position axis or matching axes to the same alignmentgroup. This controls whether bars compute their positional range dependently or independently.    offsetgroup  Parent: data[type=funnel]  Type: string Default: "" Set several traces linked to the same position axis or matching axes to the same offsetgroup where bars of the same position coordinate will line up.    xperiod  Parent: data[type=funnel]  Type: number or categorical coordinate string Default: 0 Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M<n>" on the x axis. Special values in the form of "M<n>" could be used to declare the number of months. In this case `n` must be a positive integer.    xperiodalignment  Parent: data[type=funnel]  Type: enumerated , one of ( "start" | "middle" | "end" ) Default: "middle" Only relevant when the axis `type` is "date". Sets the alignment of data points on the x axis.    xperiod0  Parent: data[type=funnel]  Type: number or categorical coordinate string Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.    yperiod  Parent: data[type=funnel]  Type: number or categorical coordinate string Default: 0 Only relevant when the axis `type` is "date". Sets the period positioning in milliseconds or "M<n>" on the y axis. Special values in the form of "M<n>" could be used to declare the number of months. In this case `n` must be a positive integer.    yperiodalignment  Parent: data[type=funnel]  Type: enumerated , one of ( "start" | "middle" | "end" ) Default: "middle" Only relevant when the axis `type` is "date". Sets the alignment of data points on the y axis.    yperiod0  Parent: data[type=funnel]  Type: number or categorical coordinate string Only relevant when the axis `type` is "date". Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.    marker  Parent: data[type=funnel] Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=funnel].marker  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=funnel].marker  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.    cmax  Parent: data[type=funnel].marker  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.    cmid  Parent: data[type=funnel].marker  Type: number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.    cmin  Parent: data[type=funnel].marker  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.    color  Parent: data[type=funnel].marker  Type: color or array of colors Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.    coloraxis  Parent: data[type=funnel].marker  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=funnel].marker Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=funnel].marker.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=funnel].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=funnel].marker.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=funnel].marker.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=funnel].marker.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=funnel].marker.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=funnel].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=funnel].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=funnel].marker.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=funnel].marker.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=funnel].marker.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=funnel].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=funnel].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=funnel].marker.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=funnel].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=funnel].marker.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=funnel].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=funnel].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=funnel].marker.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=funnel].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=funnel].marker.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=funnel].marker.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=funnel].marker.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=funnel].marker.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=funnel].marker.colorbar.tickfont  Type: color    family  Parent: data[type=funnel].marker.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=funnel].marker.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=funnel].marker.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=funnel].marker.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=funnel].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=funnel].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=funnel].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=funnel].marker.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=funnel].marker.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=funnel].marker.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=funnel].marker.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=funnel].marker.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=funnel].marker.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=funnel].marker.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=funnel].marker.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=funnel].marker.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=funnel].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=funnel].marker.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=funnel].marker.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=funnel].marker.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=funnel].marker.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=funnel].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=funnel].marker.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=funnel].marker.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=funnel].marker.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=funnel].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=funnel].marker.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=funnel].marker.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=funnel].marker.colorbar.title.font  Type: color    family  Parent: data[type=funnel].marker.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=funnel].marker.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=funnel].marker.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=funnel].marker.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=funnel].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=funnel].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=funnel].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=funnel].marker.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=funnel].marker.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=funnel].marker.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=funnel].marker.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=funnel].marker.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=funnel].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=funnel].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=funnel].marker.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=funnel].marker.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=funnel].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=funnel].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colorscale  Parent: data[type=funnel].marker  Type: colorscale Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    line  Parent: data[type=funnel].marker Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=funnel].marker.line  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=funnel].marker.line  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.    cmax  Parent: data[type=funnel].marker.line  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.    cmid  Parent: data[type=funnel].marker.line  Type: number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.    cmin  Parent: data[type=funnel].marker.line  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.    color  Parent: data[type=funnel].marker.line  Type: color or array of colors Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.    coloraxis  Parent: data[type=funnel].marker.line  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorscale  Parent: data[type=funnel].marker.line  Type: colorscale Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    reversescale  Parent: data[type=funnel].marker.line  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.    width  Parent: data[type=funnel].marker.line  Type: number or array of numbers greater than or equal to 0 Default: 0 Sets the width (in px) of the lines bounding the marker points.      opacity  Parent: data[type=funnel].marker  Type: number or array of numbers between or equal to 0 and 1 Default: 1 Sets the opacity of the bars.    reversescale  Parent: data[type=funnel].marker  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.    showscale  Parent: data[type=funnel].marker  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.      textangle  Parent: data[type=funnel]  Type: angle Default: 0 Sets the angle of the tick labels with respect to the bar. For example, a `tickangle` of -90 draws the tick labels vertically. With "auto" the texts may automatically be rotated to fit with the maximum size in bars.    textfont  Parent: data[type=funnel] Type: object containing one or more of the keys listed below. Sets the font used for `text`.    color  Parent: data[type=funnel].textfont  Type: color or array of colors    family  Parent: data[type=funnel].textfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=funnel].textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=funnel].textfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=funnel].textfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=funnel].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=funnel].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=funnel].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=funnel].textfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      textinfo  Parent: data[type=funnel]  Type: flaglist string. Any combination of "label", "text", "percent initial", "percent previous", "percent total", "value" joined with a "+" OR "none". Examples: "label", "text", "label+text", "label+text+percent initial", "none" Determines which trace information appear on the graph. In the case of having multiple funnels, percentages & totals are computed separately (per trace).    selectedpoints  Parent: data[type=funnel]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    cliponaxis  Parent: data[type=funnel]  Type: boolean Default: true Determines whether the text nodes are clipped about the subplot axes. To show the text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to "below traces".    connector  Parent: data[type=funnel] Type: object containing one or more of the keys listed below.    fillcolor  Parent: data[type=funnel].connector  Type: color Sets the fill color.    line  Parent: data[type=funnel].connector Type: object containing one or more of the keys listed below.    color  Parent: data[type=funnel].connector.line  Type: color Default: "#444" Sets the line color.    dash  Parent: data[type=funnel].connector.line  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    width  Parent: data[type=funnel].connector.line  Type: number greater than or equal to 0 Default: 0 Sets the line width (in px).      visible  Parent: data[type=funnel].connector  Type: boolean Default: true Determines if connector regions and lines are drawn.      constraintext  Parent: data[type=funnel]  Type: enumerated , one of ( "inside" | "outside" | "both" | "none" ) Default: "both" Constrain the size of text inside or outside a bar to be no larger than the bar itself.    hoverlabel  Parent: data[type=funnel] Type: object containing one or more of the keys listed below.    align  Parent: data[type=funnel].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=funnel].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=funnel].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=funnel].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=funnel].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=funnel].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=funnel].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=funnel].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=funnel].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=funnel].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=funnel].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=funnel].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=funnel].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=funnel].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      insidetextanchor  Parent: data[type=funnel]  Type: enumerated , one of ( "end" | "middle" | "start" ) Default: "middle" Determines if texts are kept at center or start/end points in `textposition` "inside" mode.    insidetextfont  Parent: data[type=funnel] Type: object containing one or more of the keys listed below. Sets the font used for `text` lying inside the bar.    color  Parent: data[type=funnel].insidetextfont  Type: color or array of colors    family  Parent: data[type=funnel].insidetextfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=funnel].insidetextfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=funnel].insidetextfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=funnel].insidetextfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=funnel].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=funnel].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=funnel].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=funnel].insidetextfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      outsidetextfont  Parent: data[type=funnel] Type: object containing one or more of the keys listed below. Sets the font used for `text` lying outside the bar.    color  Parent: data[type=funnel].outsidetextfont  Type: color or array of colors    family  Parent: data[type=funnel].outsidetextfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=funnel].outsidetextfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=funnel].outsidetextfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=funnel].outsidetextfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=funnel].outsidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=funnel].outsidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=funnel].outsidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=funnel].outsidetextfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      uirevision  Parent: data[type=funnel]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      funnelarea traces

      










 A funnelarea trace is an object with the key "type" equal to "funnelarea" (i.e. {"type": "funnelarea"}) and any of the keys listed below. Visualize stages in a process using area-encoded trapezoids. This trace can be used to show data in a part-to-whole representation similar to a "pie" trace, wherein each item appears in a single stage. See also the "funnel" trace type for a different approach to visualizing funnel data. 














   type  Parent: data[type=funnelarea]  Type: "funnelarea"    name  Parent: data[type=funnelarea]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    title  Parent: data[type=funnelarea] Type: object containing one or more of the keys listed below.    font  Parent: data[type=funnelarea].title Type: object containing one or more of the keys listed below. Sets the font used for `title`.    color  Parent: data[type=funnelarea].title.font  Type: color or array of colors    family  Parent: data[type=funnelarea].title.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=funnelarea].title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=funnelarea].title.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=funnelarea].title.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=funnelarea].title.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=funnelarea].title.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=funnelarea].title.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=funnelarea].title.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      position  Parent: data[type=funnelarea].title  Type: enumerated , one of ( "top left" | "top center" | "top right" ) Default: "top center" Specifies the location of the `title`.    text  Parent: data[type=funnelarea].title  Type: string Default: "" Sets the title of the chart. If it is empty, no title is displayed.      visible  Parent: data[type=funnelarea]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=funnelarea]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=funnelarea]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=funnelarea]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=funnelarea]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=funnelarea] Type: object containing one or more of the keys listed below.    font  Parent: data[type=funnelarea].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=funnelarea].legendgrouptitle.font  Type: color    family  Parent: data[type=funnelarea].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=funnelarea].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=funnelarea].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=funnelarea].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=funnelarea].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=funnelarea].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=funnelarea].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=funnelarea].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=funnelarea].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=funnelarea]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=funnelarea]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=funnelarea]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    values  Parent: data[type=funnelarea]  Type: data array Sets the values of the sectors. If omitted, we count occurrences of each label.    labels  Parent: data[type=funnelarea]  Type: data array Sets the sector labels. If `labels` entries are duplicated, we sum associated `values` or simply count occurrences if `values` is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label.    dlabel  Parent: data[type=funnelarea]  Type: number Default: 1 Sets the label step. See `label0` for more info.    label0  Parent: data[type=funnelarea]  Type: number Default: 0 Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step.    text  Parent: data[type=funnelarea]  Type: data array Sets text elements associated with each sector. If trace `textinfo` contains a "text" flag, these elements will be seen on the chart. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    textposition  Parent: data[type=funnelarea]  Type: enumerated or array of enumerateds , one of ( "inside" | "none" ) Default: "inside" Specifies the location of the `textinfo`.    texttemplate  Parent: data[type=funnelarea]  Type: string or array of strings Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label`, `color`, `value`, `text` and `percent`.    hovertext  Parent: data[type=funnelarea]  Type: string or array of strings Default: "" Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a "text" flag.    hoverinfo  Parent: data[type=funnelarea]  Type: flaglist string. Any combination of "label", "text", "value", "percent", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "label", "text", "label+text", "label+text+value", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=funnelarea]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label`, `color`, `value`, `text` and `percent`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    meta  Parent: data[type=funnelarea]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=funnelarea]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    domain  Parent: data[type=funnelarea] Type: object containing one or more of the keys listed below.    column  Parent: data[type=funnelarea].domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this column in the grid for this funnelarea trace .    row  Parent: data[type=funnelarea].domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this row in the grid for this funnelarea trace .    x  Parent: data[type=funnelarea].domain  Type: array Default: [0, 1] Sets the horizontal domain of this funnelarea trace (in plot fraction).    y  Parent: data[type=funnelarea].domain  Type: array Default: [0, 1] Sets the vertical domain of this funnelarea trace (in plot fraction).      marker  Parent: data[type=funnelarea] Type: object containing one or more of the keys listed below.    colors  Parent: data[type=funnelarea].marker  Type: data array Sets the color of each sector. If not specified, the default trace color set is used to pick the sector colors.    line  Parent: data[type=funnelarea].marker Type: object containing one or more of the keys listed below.    color  Parent: data[type=funnelarea].marker.line  Type: color or array of colors Sets the color of the line enclosing each sector. Defaults to the `paper_bgcolor` value.    width  Parent: data[type=funnelarea].marker.line  Type: number or array of numbers greater than or equal to 0 Default: 1 Sets the width (in px) of the line enclosing each sector.      pattern  Parent: data[type=funnelarea].marker Type: object containing one or more of the keys listed below. Sets the pattern within the marker.    bgcolor  Parent: data[type=funnelarea].marker.pattern  Type: color or array of colors When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is "overlay". Otherwise, defaults to a transparent background.    fgcolor  Parent: data[type=funnelarea].marker.pattern  Type: color or array of colors When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is "replace". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.    fgopacity  Parent: data[type=funnelarea].marker.pattern  Type: number between or equal to 0 and 1 Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is "overlay". Otherwise, defaults to 1.    fillmode  Parent: data[type=funnelarea].marker.pattern  Type: enumerated , one of ( "replace" | "overlay" ) Default: "replace" Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.    shape  Parent: data[type=funnelarea].marker.pattern  Type: enumerated or array of enumerateds , one of ( "" | "/" | "\" | "x" | "-" | "|" | "+" | "." ) Default: "" Sets the shape of the pattern fill. By default, no pattern is used for filling the area.    size  Parent: data[type=funnelarea].marker.pattern  Type: number or array of numbers greater than or equal to 0 Default: 8 Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.    solidity  Parent: data[type=funnelarea].marker.pattern  Type: number or array of numbers between or equal to 0 and 1 Default: 0.3 Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.        textfont  Parent: data[type=funnelarea] Type: object containing one or more of the keys listed below. Sets the font used for `textinfo`.    color  Parent: data[type=funnelarea].textfont  Type: color or array of colors    family  Parent: data[type=funnelarea].textfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=funnelarea].textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=funnelarea].textfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=funnelarea].textfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=funnelarea].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=funnelarea].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=funnelarea].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=funnelarea].textfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      textinfo  Parent: data[type=funnelarea]  Type: flaglist string. Any combination of "label", "text", "value", "percent" joined with a "+" OR "none". Examples: "label", "text", "label+text", "label+text+value", "none" Determines which trace information appear on the graph.    aspectratio  Parent: data[type=funnelarea]  Type: number greater than or equal to 0 Default: 1 Sets the ratio between height and width    baseratio  Parent: data[type=funnelarea]  Type: number between or equal to 0 and 1 Default: 0.333 Sets the ratio between bottom length and maximum top length.    hoverlabel  Parent: data[type=funnelarea] Type: object containing one or more of the keys listed below.    align  Parent: data[type=funnelarea].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=funnelarea].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=funnelarea].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=funnelarea].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=funnelarea].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=funnelarea].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=funnelarea].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=funnelarea].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=funnelarea].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=funnelarea].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=funnelarea].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=funnelarea].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=funnelarea].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=funnelarea].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      insidetextfont  Parent: data[type=funnelarea] Type: object containing one or more of the keys listed below. Sets the font used for `textinfo` lying inside the sector.    color  Parent: data[type=funnelarea].insidetextfont  Type: color or array of colors    family  Parent: data[type=funnelarea].insidetextfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=funnelarea].insidetextfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=funnelarea].insidetextfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=funnelarea].insidetextfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=funnelarea].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=funnelarea].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=funnelarea].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=funnelarea].insidetextfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      scalegroup  Parent: data[type=funnelarea]  Type: string Default: "" If there are multiple funnelareas that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.    uirevision  Parent: data[type=funnelarea]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      indicator traces

      










 A indicator trace is an object with the key "type" equal to "indicator" (i.e. {"type": "indicator"}) and any of the keys listed below. An indicator is used to visualize a single `value` along with some contextual information such as `steps` or a `threshold`, using a combination of three visual elements: a number, a delta, and/or a gauge. Deltas are taken with respect to a `reference`. Gauges can be either angular or bullet (aka linear) gauges. 














   type  Parent: data[type=indicator]  Type: "indicator"    name  Parent: data[type=indicator]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    title  Parent: data[type=indicator] Type: object containing one or more of the keys listed below.    align  Parent: data[type=indicator].title  Type: enumerated , one of ( "left" | "center" | "right" ) Sets the horizontal alignment of the title. It defaults to `center` except for bullet charts for which it defaults to right.    font  Parent: data[type=indicator].title Type: object containing one or more of the keys listed below. Set the font used to display the title    color  Parent: data[type=indicator].title.font  Type: color    family  Parent: data[type=indicator].title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=indicator].title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=indicator].title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=indicator].title.font  Type: number greater than or equal to 1    style  Parent: data[type=indicator].title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=indicator].title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=indicator].title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=indicator].title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=indicator].title  Type: string Sets the title of this indicator.      visible  Parent: data[type=indicator]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    legend  Parent: data[type=indicator]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=indicator]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgrouptitle  Parent: data[type=indicator] Type: object containing one or more of the keys listed below.    font  Parent: data[type=indicator].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=indicator].legendgrouptitle.font  Type: color    family  Parent: data[type=indicator].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=indicator].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=indicator].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=indicator].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=indicator].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=indicator].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=indicator].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=indicator].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=indicator].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=indicator]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    mode  Parent: data[type=indicator]  Type: flaglist string. Any combination of "number", "delta", "gauge" joined with a "+" Examples: "number", "delta", "number+delta", "number+delta+gauge" Default: "number" Determines how the value is displayed on the graph. `number` displays the value numerically in text. `delta` displays the difference to a reference value in text. Finally, `gauge` displays the value graphically on an axis.    ids  Parent: data[type=indicator]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    value  Parent: data[type=indicator]  Type: number Sets the number to be displayed.    meta  Parent: data[type=indicator]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=indicator]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    domain  Parent: data[type=indicator] Type: object containing one or more of the keys listed below.    column  Parent: data[type=indicator].domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this column in the grid for this indicator trace .    row  Parent: data[type=indicator].domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this row in the grid for this indicator trace .    x  Parent: data[type=indicator].domain  Type: array Default: [0, 1] Sets the horizontal domain of this indicator trace (in plot fraction).    y  Parent: data[type=indicator].domain  Type: array Default: [0, 1] Sets the vertical domain of this indicator trace (in plot fraction).      align  Parent: data[type=indicator]  Type: enumerated , one of ( "left" | "center" | "right" ) Sets the horizontal alignment of the `text` within the box. Note that this attribute has no effect if an angular gauge is displayed: in this case, it is always centered    delta  Parent: data[type=indicator] Type: object containing one or more of the keys listed below.    decreasing  Parent: data[type=indicator].delta Type: object containing one or more of the keys listed below.    color  Parent: data[type=indicator].delta.decreasing  Type: color Default: "#FF4136" Sets the color for increasing value.    symbol  Parent: data[type=indicator].delta.decreasing  Type: string Default: "▼" Sets the symbol to display for increasing value      font  Parent: data[type=indicator].delta Type: object containing one or more of the keys listed below. Set the font used to display the delta    color  Parent: data[type=indicator].delta.font  Type: color    family  Parent: data[type=indicator].delta.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=indicator].delta.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=indicator].delta.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=indicator].delta.font  Type: number greater than or equal to 1    style  Parent: data[type=indicator].delta.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=indicator].delta.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=indicator].delta.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=indicator].delta.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      increasing  Parent: data[type=indicator].delta Type: object containing one or more of the keys listed below.    color  Parent: data[type=indicator].delta.increasing  Type: color Default: "#3D9970" Sets the color for increasing value.    symbol  Parent: data[type=indicator].delta.increasing  Type: string Default: "▲" Sets the symbol to display for increasing value      position  Parent: data[type=indicator].delta  Type: enumerated , one of ( "top" | "bottom" | "left" | "right" ) Default: "bottom" Sets the position of delta with respect to the number.    prefix  Parent: data[type=indicator].delta  Type: string Default: "" Sets a prefix appearing before the delta.    reference  Parent: data[type=indicator].delta  Type: number Sets the reference value to compute the delta. By default, it is set to the current value.    relative  Parent: data[type=indicator].delta  Type: boolean Show relative change    suffix  Parent: data[type=indicator].delta  Type: string Default: "" Sets a suffix appearing next to the delta.    valueformat  Parent: data[type=indicator].delta  Type: string Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.      number  Parent: data[type=indicator] Type: object containing one or more of the keys listed below.    font  Parent: data[type=indicator].number Type: object containing one or more of the keys listed below. Set the font used to display main number    color  Parent: data[type=indicator].number.font  Type: color    family  Parent: data[type=indicator].number.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=indicator].number.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=indicator].number.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=indicator].number.font  Type: number greater than or equal to 1    style  Parent: data[type=indicator].number.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=indicator].number.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=indicator].number.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=indicator].number.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      prefix  Parent: data[type=indicator].number  Type: string Default: "" Sets a prefix appearing before the number.    suffix  Parent: data[type=indicator].number  Type: string Default: "" Sets a suffix appearing next to the number.    valueformat  Parent: data[type=indicator].number  Type: string Default: "" Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.      gauge  Parent: data[type=indicator] Type: object containing one or more of the keys listed below. The gauge of the Indicator plot.    axis  Parent: data[type=indicator].gauge Type: object containing one or more of the keys listed below.    dtick  Parent: data[type=indicator].gauge.axis  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=indicator].gauge.axis  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=indicator].gauge.axis  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    minexponent  Parent: data[type=indicator].gauge.axis  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=indicator].gauge.axis  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    range  Parent: data[type=indicator].gauge.axis  Type: array Sets the range of this axis.    separatethousands  Parent: data[type=indicator].gauge.axis  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=indicator].gauge.axis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=indicator].gauge.axis  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=indicator].gauge.axis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=indicator].gauge.axis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    tick0  Parent: data[type=indicator].gauge.axis  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=indicator].gauge.axis  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=indicator].gauge.axis  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=indicator].gauge.axis Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=indicator].gauge.axis.tickfont  Type: color    family  Parent: data[type=indicator].gauge.axis.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=indicator].gauge.axis.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=indicator].gauge.axis.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=indicator].gauge.axis.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=indicator].gauge.axis.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=indicator].gauge.axis.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=indicator].gauge.axis.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=indicator].gauge.axis.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=indicator].gauge.axis  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=indicator].gauge.axis Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=indicator].gauge.axis.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=indicator].gauge.axis.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=indicator].gauge.axis.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=indicator].gauge.axis.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=indicator].gauge.axis.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabelstep  Parent: data[type=indicator].gauge.axis  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=indicator].gauge.axis  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=indicator].gauge.axis  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=indicator].gauge.axis  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=indicator].gauge.axis  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "outside" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=indicator].gauge.axis  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=indicator].gauge.axis  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=indicator].gauge.axis  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=indicator].gauge.axis  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    visible  Parent: data[type=indicator].gauge.axis  Type: boolean Default: true A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false      bar  Parent: data[type=indicator].gauge Type: object containing one or more of the keys listed below. Set the appearance of the gauge's value    color  Parent: data[type=indicator].gauge.bar  Type: color Default: "green" Sets the background color of the arc.    line  Parent: data[type=indicator].gauge.bar Type: object containing one or more of the keys listed below.    color  Parent: data[type=indicator].gauge.bar.line  Type: color Default: "#444" Sets the color of the line enclosing each sector.    width  Parent: data[type=indicator].gauge.bar.line  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) of the line enclosing each sector.      thickness  Parent: data[type=indicator].gauge.bar  Type: number between or equal to 0 and 1 Default: 1 Sets the thickness of the bar as a fraction of the total thickness of the gauge.      bgcolor  Parent: data[type=indicator].gauge  Type: color Sets the gauge background color.    bordercolor  Parent: data[type=indicator].gauge  Type: color Default: "#444" Sets the color of the border enclosing the gauge.    borderwidth  Parent: data[type=indicator].gauge  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the border enclosing the gauge.    shape  Parent: data[type=indicator].gauge  Type: enumerated , one of ( "angular" | "bullet" ) Default: "angular" Set the shape of the gauge    steps  Parent: data[type=indicator].gauge Type: array of object where each object has one or more of the keys listed below.     color  Parent: data[type=indicator].gauge.steps[]  Type: color Sets the background color of the arc.    line  Parent: data[type=indicator].gauge.steps[] Type: object containing one or more of the keys listed below.    color  Parent: data[type=indicator].gauge.steps[].line  Type: color Default: "#444" Sets the color of the line enclosing each sector.    width  Parent: data[type=indicator].gauge.steps[].line  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) of the line enclosing each sector.      name  Parent: data[type=indicator].gauge.steps[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    range  Parent: data[type=indicator].gauge.steps[]  Type: array Sets the range of this axis.    templateitemname  Parent: data[type=indicator].gauge.steps[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    thickness  Parent: data[type=indicator].gauge.steps[]  Type: number between or equal to 0 and 1 Default: 1 Sets the thickness of the bar as a fraction of the total thickness of the gauge.      threshold  Parent: data[type=indicator].gauge Type: object containing one or more of the keys listed below.    line  Parent: data[type=indicator].gauge.threshold Type: object containing one or more of the keys listed below.    color  Parent: data[type=indicator].gauge.threshold.line  Type: color Default: "#444" Sets the color of the threshold line.    width  Parent: data[type=indicator].gauge.threshold.line  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the threshold line.      thickness  Parent: data[type=indicator].gauge.threshold  Type: number between or equal to 0 and 1 Default: 0.85 Sets the thickness of the threshold line as a fraction of the thickness of the gauge.    value  Parent: data[type=indicator].gauge.threshold  Type: number Sets a treshold value drawn as a line.        uirevision  Parent: data[type=indicator]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      scatter3d traces

      










 A scatter3d trace is an object with the key "type" equal to "scatter3d" (i.e. {"type": "scatter3d"}) and any of the keys listed below. The data visualized as scatter point or lines in 3D dimension is set in `x`, `y`, `z`. Text (appearing either on the chart or on hover only) is via `text`. Bubble charts are achieved by setting `marker.size` and/or `marker.color` Projections are achieved via `projection`. Surface fills are achieved via `surfaceaxis`. 














   type  Parent: data[type=scatter3d]  Type: "scatter3d"    name  Parent: data[type=scatter3d]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=scatter3d]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=scatter3d]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=scatter3d]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=scatter3d]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=scatter3d]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=scatter3d] Type: object containing one or more of the keys listed below.    font  Parent: data[type=scatter3d].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=scatter3d].legendgrouptitle.font  Type: color    family  Parent: data[type=scatter3d].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatter3d].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatter3d].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatter3d].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=scatter3d].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatter3d].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatter3d].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatter3d].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=scatter3d].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=scatter3d]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=scatter3d]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    mode  Parent: data[type=scatter3d]  Type: flaglist string. Any combination of "lines", "markers", "text" joined with a "+" OR "none". Examples: "lines", "markers", "lines+markers", "lines+markers+text", "none" Default: "lines+markers" Determines the drawing mode for this scatter trace. If the provided `mode` includes "text" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is "lines+markers". Otherwise, "lines".    ids  Parent: data[type=scatter3d]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    x  Parent: data[type=scatter3d]  Type: data array Sets the x coordinates.    y  Parent: data[type=scatter3d]  Type: data array Sets the y coordinates.    z  Parent: data[type=scatter3d]  Type: data array Sets the z coordinates.    surfacecolor  Parent: data[type=scatter3d]  Type: color Sets the surface fill color.    text  Parent: data[type=scatter3d]  Type: string or array of strings Default: "" Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    textposition  Parent: data[type=scatter3d]  Type: enumerated or array of enumerateds , one of ( "top left" | "top center" | "top right" | "middle left" | "middle center" | "middle right" | "bottom left" | "bottom center" | "bottom right" ) Default: "top center" Sets the positions of the `text` elements with respects to the (x,y) coordinates.    texttemplate  Parent: data[type=scatter3d]  Type: string or array of strings Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.     hovertext  Parent: data[type=scatter3d]  Type: string or array of strings Default: "" Sets text elements associated with each (x,y,z) triplet. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y,z) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.    hoverinfo  Parent: data[type=scatter3d]  Type: flaglist string. Any combination of "x", "y", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=scatter3d]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    xhoverformat  Parent: data[type=scatter3d]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=scatter3d]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    meta  Parent: data[type=scatter3d]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=scatter3d]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    scene  Parent: data[type=scatter3d]  Type: subplotid Default: scene Sets a reference between this trace's 3D coordinate system and a 3D scene. If "scene" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If "scene2", the (x,y,z) coordinates refer to `layout.scene2`, and so on.    marker  Parent: data[type=scatter3d] Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=scatter3d].marker  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=scatter3d].marker  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.    cmax  Parent: data[type=scatter3d].marker  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.    cmid  Parent: data[type=scatter3d].marker  Type: number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.    cmin  Parent: data[type=scatter3d].marker  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.    color  Parent: data[type=scatter3d].marker  Type: color or array of colors Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.    coloraxis  Parent: data[type=scatter3d].marker  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=scatter3d].marker Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=scatter3d].marker.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=scatter3d].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=scatter3d].marker.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=scatter3d].marker.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=scatter3d].marker.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=scatter3d].marker.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=scatter3d].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=scatter3d].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=scatter3d].marker.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=scatter3d].marker.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=scatter3d].marker.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=scatter3d].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=scatter3d].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=scatter3d].marker.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=scatter3d].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=scatter3d].marker.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=scatter3d].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=scatter3d].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=scatter3d].marker.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=scatter3d].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=scatter3d].marker.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=scatter3d].marker.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=scatter3d].marker.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=scatter3d].marker.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=scatter3d].marker.colorbar.tickfont  Type: color    family  Parent: data[type=scatter3d].marker.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatter3d].marker.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatter3d].marker.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatter3d].marker.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=scatter3d].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatter3d].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatter3d].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatter3d].marker.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=scatter3d].marker.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=scatter3d].marker.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=scatter3d].marker.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=scatter3d].marker.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=scatter3d].marker.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=scatter3d].marker.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=scatter3d].marker.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=scatter3d].marker.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=scatter3d].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=scatter3d].marker.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=scatter3d].marker.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=scatter3d].marker.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=scatter3d].marker.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=scatter3d].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=scatter3d].marker.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=scatter3d].marker.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=scatter3d].marker.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=scatter3d].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=scatter3d].marker.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=scatter3d].marker.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=scatter3d].marker.colorbar.title.font  Type: color    family  Parent: data[type=scatter3d].marker.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatter3d].marker.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatter3d].marker.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatter3d].marker.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=scatter3d].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatter3d].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatter3d].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatter3d].marker.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=scatter3d].marker.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=scatter3d].marker.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=scatter3d].marker.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=scatter3d].marker.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=scatter3d].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=scatter3d].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=scatter3d].marker.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=scatter3d].marker.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=scatter3d].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=scatter3d].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colorscale  Parent: data[type=scatter3d].marker  Type: colorscale Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    line  Parent: data[type=scatter3d].marker Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=scatter3d].marker.line  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=scatter3d].marker.line  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.    cmax  Parent: data[type=scatter3d].marker.line  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.    cmid  Parent: data[type=scatter3d].marker.line  Type: number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.    cmin  Parent: data[type=scatter3d].marker.line  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.    color  Parent: data[type=scatter3d].marker.line  Type: color or array of colors Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.    coloraxis  Parent: data[type=scatter3d].marker.line  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorscale  Parent: data[type=scatter3d].marker.line  Type: colorscale Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    reversescale  Parent: data[type=scatter3d].marker.line  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.    width  Parent: data[type=scatter3d].marker.line  Type: number greater than or equal to 0 Sets the width (in px) of the lines bounding the marker points.      opacity  Parent: data[type=scatter3d].marker  Type: number between or equal to 0 and 1 Sets the marker opacity. Note that the marker opacity for scatter3d traces must be a scalar value for performance reasons. To set a blending opacity value (i.e. which is not transparent), set "marker.color" to an rgba color and use its alpha channel.    reversescale  Parent: data[type=scatter3d].marker  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.    showscale  Parent: data[type=scatter3d].marker  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.    size  Parent: data[type=scatter3d].marker  Type: number or array of numbers greater than or equal to 0 Default: 8 Sets the marker size (in px).    sizemin  Parent: data[type=scatter3d].marker  Type: number greater than or equal to 0 Default: 0 Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.    sizemode  Parent: data[type=scatter3d].marker  Type: enumerated , one of ( "diameter" | "area" ) Default: "diameter" Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.    sizeref  Parent: data[type=scatter3d].marker  Type: number Default: 1 Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.    symbol  Parent: data[type=scatter3d].marker  Type: enumerated or array of enumerateds , one of ( "circle" | "circle-open" | "cross" | "diamond" | "diamond-open" | "square" | "square-open" | "x" ) Default: "circle" Sets the marker symbol type.      line  Parent: data[type=scatter3d] Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=scatter3d].line  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=scatter3d].line  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax` Has an effect only if in `line.color` is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.    cmax  Parent: data[type=scatter3d].line  Type: number Sets the upper bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.    cmid  Parent: data[type=scatter3d].line  Type: number Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.    cmin  Parent: data[type=scatter3d].line  Type: number Sets the lower bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.    color  Parent: data[type=scatter3d].line  Type: color or array of colors Sets the line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `line.cmin` and `line.cmax` if set.    coloraxis  Parent: data[type=scatter3d].line  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=scatter3d].line Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=scatter3d].line.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=scatter3d].line.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=scatter3d].line.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=scatter3d].line.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=scatter3d].line.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=scatter3d].line.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=scatter3d].line.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=scatter3d].line.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=scatter3d].line.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=scatter3d].line.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=scatter3d].line.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=scatter3d].line.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=scatter3d].line.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=scatter3d].line.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=scatter3d].line.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=scatter3d].line.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=scatter3d].line.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=scatter3d].line.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=scatter3d].line.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=scatter3d].line.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=scatter3d].line.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=scatter3d].line.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=scatter3d].line.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=scatter3d].line.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=scatter3d].line.colorbar.tickfont  Type: color    family  Parent: data[type=scatter3d].line.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatter3d].line.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatter3d].line.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatter3d].line.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=scatter3d].line.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatter3d].line.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatter3d].line.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatter3d].line.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=scatter3d].line.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=scatter3d].line.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=scatter3d].line.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=scatter3d].line.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=scatter3d].line.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=scatter3d].line.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=scatter3d].line.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=scatter3d].line.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=scatter3d].line.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=scatter3d].line.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=scatter3d].line.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=scatter3d].line.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=scatter3d].line.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=scatter3d].line.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=scatter3d].line.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=scatter3d].line.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=scatter3d].line.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=scatter3d].line.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=scatter3d].line.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=scatter3d].line.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=scatter3d].line.colorbar.title.font  Type: color    family  Parent: data[type=scatter3d].line.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatter3d].line.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatter3d].line.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatter3d].line.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=scatter3d].line.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatter3d].line.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatter3d].line.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatter3d].line.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=scatter3d].line.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=scatter3d].line.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=scatter3d].line.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=scatter3d].line.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=scatter3d].line.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=scatter3d].line.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=scatter3d].line.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=scatter3d].line.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=scatter3d].line.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=scatter3d].line.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colorscale  Parent: data[type=scatter3d].line  Type: colorscale Sets the colorscale. Has an effect only if in `line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `line.cmin` and `line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    dash  Parent: data[type=scatter3d].line  Type: enumerated , one of ( "dash" | "dashdot" | "dot" | "longdash" | "longdashdot" | "solid" ) Default: "solid" Sets the dash style of the lines.    reversescale  Parent: data[type=scatter3d].line  Type: boolean Reverses the color mapping if true. Has an effect only if in `line.color` is set to a numerical array. If true, `line.cmin` will correspond to the last color in the array and `line.cmax` will correspond to the first color.    showscale  Parent: data[type=scatter3d].line  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `line.color` is set to a numerical array.    width  Parent: data[type=scatter3d].line  Type: number greater than or equal to 0 Default: 2 Sets the line width (in px).      textfont  Parent: data[type=scatter3d] Type: object containing one or more of the keys listed below. Sets the text font.    color  Parent: data[type=scatter3d].textfont  Type: color or array of colors    family  Parent: data[type=scatter3d].textfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    size  Parent: data[type=scatter3d].textfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=scatter3d].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    variant  Parent: data[type=scatter3d].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatter3d].textfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      error_x  Parent: data[type=scatter3d] Type: object containing one or more of the keys listed below.    array  Parent: data[type=scatter3d].error_x  Type: data array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.    arrayminus  Parent: data[type=scatter3d].error_x  Type: data array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.    color  Parent: data[type=scatter3d].error_x  Type: color Sets the stroke color of the error bars.    copy_zstyle  Parent: data[type=scatter3d].error_x  Type: boolean    symmetric  Parent: data[type=scatter3d].error_x  Type: boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.    thickness  Parent: data[type=scatter3d].error_x  Type: number greater than or equal to 0 Default: 2 Sets the thickness (in px) of the error bars.    traceref  Parent: data[type=scatter3d].error_x  Type: integer greater than or equal to 0 Default: 0    tracerefminus  Parent: data[type=scatter3d].error_x  Type: integer greater than or equal to 0 Default: 0    type  Parent: data[type=scatter3d].error_x  Type: enumerated , one of ( "percent" | "constant" | "sqrt" | "data" ) Determines the rule used to generate the error bars. If "constant`, the bar lengths are of a constant value. Set this constant in `value`. If "percent", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If "sqrt", the bar lengths correspond to the square of the underlying data. If "data", the bar lengths are set with data set `array`.    value  Parent: data[type=scatter3d].error_x  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars.    valueminus  Parent: data[type=scatter3d].error_x  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars    visible  Parent: data[type=scatter3d].error_x  Type: boolean Determines whether or not this set of error bars is visible.    width  Parent: data[type=scatter3d].error_x  Type: number greater than or equal to 0 Sets the width (in px) of the cross-bar at both ends of the error bars.      error_y  Parent: data[type=scatter3d] Type: object containing one or more of the keys listed below.    array  Parent: data[type=scatter3d].error_y  Type: data array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.    arrayminus  Parent: data[type=scatter3d].error_y  Type: data array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.    color  Parent: data[type=scatter3d].error_y  Type: color Sets the stroke color of the error bars.    copy_zstyle  Parent: data[type=scatter3d].error_y  Type: boolean    symmetric  Parent: data[type=scatter3d].error_y  Type: boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.    thickness  Parent: data[type=scatter3d].error_y  Type: number greater than or equal to 0 Default: 2 Sets the thickness (in px) of the error bars.    traceref  Parent: data[type=scatter3d].error_y  Type: integer greater than or equal to 0 Default: 0    tracerefminus  Parent: data[type=scatter3d].error_y  Type: integer greater than or equal to 0 Default: 0    type  Parent: data[type=scatter3d].error_y  Type: enumerated , one of ( "percent" | "constant" | "sqrt" | "data" ) Determines the rule used to generate the error bars. If "constant`, the bar lengths are of a constant value. Set this constant in `value`. If "percent", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If "sqrt", the bar lengths correspond to the square of the underlying data. If "data", the bar lengths are set with data set `array`.    value  Parent: data[type=scatter3d].error_y  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars.    valueminus  Parent: data[type=scatter3d].error_y  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars    visible  Parent: data[type=scatter3d].error_y  Type: boolean Determines whether or not this set of error bars is visible.    width  Parent: data[type=scatter3d].error_y  Type: number greater than or equal to 0 Sets the width (in px) of the cross-bar at both ends of the error bars.      error_z  Parent: data[type=scatter3d] Type: object containing one or more of the keys listed below.    array  Parent: data[type=scatter3d].error_z  Type: data array Sets the data corresponding the length of each error bar. Values are plotted relative to the underlying data.    arrayminus  Parent: data[type=scatter3d].error_z  Type: data array Sets the data corresponding the length of each error bar in the bottom (left) direction for vertical (horizontal) bars Values are plotted relative to the underlying data.    color  Parent: data[type=scatter3d].error_z  Type: color Sets the stroke color of the error bars.    symmetric  Parent: data[type=scatter3d].error_z  Type: boolean Determines whether or not the error bars have the same length in both direction (top/bottom for vertical bars, left/right for horizontal bars.    thickness  Parent: data[type=scatter3d].error_z  Type: number greater than or equal to 0 Default: 2 Sets the thickness (in px) of the error bars.    traceref  Parent: data[type=scatter3d].error_z  Type: integer greater than or equal to 0 Default: 0    tracerefminus  Parent: data[type=scatter3d].error_z  Type: integer greater than or equal to 0 Default: 0    type  Parent: data[type=scatter3d].error_z  Type: enumerated , one of ( "percent" | "constant" | "sqrt" | "data" ) Determines the rule used to generate the error bars. If "constant`, the bar lengths are of a constant value. Set this constant in `value`. If "percent", the bar lengths correspond to a percentage of underlying data. Set this percentage in `value`. If "sqrt", the bar lengths correspond to the square of the underlying data. If "data", the bar lengths are set with data set `array`.    value  Parent: data[type=scatter3d].error_z  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars.    valueminus  Parent: data[type=scatter3d].error_z  Type: number greater than or equal to 0 Default: 10 Sets the value of either the percentage (if `type` is set to "percent") or the constant (if `type` is set to "constant") corresponding to the lengths of the error bars in the bottom (left) direction for vertical (horizontal) bars    visible  Parent: data[type=scatter3d].error_z  Type: boolean Determines whether or not this set of error bars is visible.    width  Parent: data[type=scatter3d].error_z  Type: number greater than or equal to 0 Sets the width (in px) of the cross-bar at both ends of the error bars.      zhoverformat  Parent: data[type=scatter3d]  Type: string Default: "" Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `zaxis.hoverformat`.    connectgaps  Parent: data[type=scatter3d]  Type: boolean Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.    hoverlabel  Parent: data[type=scatter3d] Type: object containing one or more of the keys listed below.    align  Parent: data[type=scatter3d].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=scatter3d].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=scatter3d].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=scatter3d].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=scatter3d].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=scatter3d].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatter3d].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatter3d].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatter3d].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=scatter3d].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatter3d].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatter3d].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatter3d].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=scatter3d].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      projection  Parent: data[type=scatter3d] Type: object containing one or more of the keys listed below.    x  Parent: data[type=scatter3d].projection Type: object containing one or more of the keys listed below.    opacity  Parent: data[type=scatter3d].projection.x  Type: number between or equal to 0 and 1 Default: 1 Sets the projection color.    scale  Parent: data[type=scatter3d].projection.x  Type: number between or equal to 0 and 10 Default: 0.6666666666666666 Sets the scale factor determining the size of the projection marker points.    show  Parent: data[type=scatter3d].projection.x  Type: boolean Sets whether or not projections are shown along the x axis.      y  Parent: data[type=scatter3d].projection Type: object containing one or more of the keys listed below.    opacity  Parent: data[type=scatter3d].projection.y  Type: number between or equal to 0 and 1 Default: 1 Sets the projection color.    scale  Parent: data[type=scatter3d].projection.y  Type: number between or equal to 0 and 10 Default: 0.6666666666666666 Sets the scale factor determining the size of the projection marker points.    show  Parent: data[type=scatter3d].projection.y  Type: boolean Sets whether or not projections are shown along the y axis.      z  Parent: data[type=scatter3d].projection Type: object containing one or more of the keys listed below.    opacity  Parent: data[type=scatter3d].projection.z  Type: number between or equal to 0 and 1 Default: 1 Sets the projection color.    scale  Parent: data[type=scatter3d].projection.z  Type: number between or equal to 0 and 10 Default: 0.6666666666666666 Sets the scale factor determining the size of the projection marker points.    show  Parent: data[type=scatter3d].projection.z  Type: boolean Sets whether or not projections are shown along the z axis.        surfaceaxis  Parent: data[type=scatter3d]  Type: enumerated , one of ( "-1" | "0" | "1" | "2" ) Default: "-1" If "-1", the scatter points are not fill with a surface If "0", "1", "2", the scatter points are filled with a Delaunay surface about the x, y, z respectively.    xcalendar  Parent: data[type=scatter3d]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `x` date data.    ycalendar  Parent: data[type=scatter3d]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `y` date data.    zcalendar  Parent: data[type=scatter3d]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `z` date data.    uirevision  Parent: data[type=scatter3d]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      surface traces

      










 A surface trace is an object with the key "type" equal to "surface" (i.e. {"type": "surface"}) and any of the keys listed below. The data the describes the coordinates of the surface is set in `z`. Data in `z` should be a 2D array. Coordinates in `x` and `y` can either be 1D arrays or {2D arrays} (e.g. to graph parametric surfaces). If not provided in `x` and `y`, the x and y coordinates are assumed to be linear starting at 0 with a unit step. The color scale corresponds to the `z` values by default. For custom color scales, use `surfacecolor` which should be a 2D array, where its bounds can be controlled using `cmin` and `cmax`. 














   type  Parent: data[type=surface]  Type: "surface"    name  Parent: data[type=surface]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=surface]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=surface]  Type: boolean Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=surface]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=surface]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=surface]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=surface] Type: object containing one or more of the keys listed below.    font  Parent: data[type=surface].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=surface].legendgrouptitle.font  Type: color    family  Parent: data[type=surface].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=surface].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=surface].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=surface].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=surface].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=surface].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=surface].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=surface].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=surface].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=surface]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=surface]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.    ids  Parent: data[type=surface]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    x  Parent: data[type=surface]  Type: data array Sets the x coordinates.    y  Parent: data[type=surface]  Type: data array Sets the y coordinates.    z  Parent: data[type=surface]  Type: data array Sets the z coordinates.    surfacecolor  Parent: data[type=surface]  Type: data array Sets the surface color values, used for setting a color scale independent of `z`.    text  Parent: data[type=surface]  Type: string or array of strings Default: "" Sets the text elements associated with each z value. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    hovertext  Parent: data[type=surface]  Type: string or array of strings Default: "" Same as `text`.    hoverinfo  Parent: data[type=surface]  Type: flaglist string. Any combination of "x", "y", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=surface]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    xhoverformat  Parent: data[type=surface]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=surface]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    meta  Parent: data[type=surface]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=surface]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    scene  Parent: data[type=surface]  Type: subplotid Default: scene Sets a reference between this trace's 3D coordinate system and a 3D scene. If "scene" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If "scene2", the (x,y,z) coordinates refer to `layout.scene2`, and so on.    coloraxis  Parent: data[type=surface]  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=surface] Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=surface].colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=surface].colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=surface].colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=surface].colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=surface].colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=surface].colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=surface].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=surface].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=surface].colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=surface].colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=surface].colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=surface].colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=surface].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=surface].colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=surface].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=surface].colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=surface].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=surface].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=surface].colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=surface].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=surface].colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=surface].colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=surface].colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=surface].colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=surface].colorbar.tickfont  Type: color    family  Parent: data[type=surface].colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=surface].colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=surface].colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=surface].colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=surface].colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=surface].colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=surface].colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=surface].colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=surface].colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=surface].colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=surface].colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=surface].colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=surface].colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=surface].colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=surface].colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=surface].colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=surface].colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=surface].colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=surface].colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=surface].colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=surface].colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=surface].colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=surface].colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=surface].colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=surface].colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=surface].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=surface].colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=surface].colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=surface].colorbar.title.font  Type: color    family  Parent: data[type=surface].colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=surface].colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=surface].colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=surface].colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=surface].colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=surface].colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=surface].colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=surface].colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=surface].colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=surface].colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=surface].colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=surface].colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=surface].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=surface].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=surface].colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=surface].colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=surface].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=surface].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      autocolorscale  Parent: data[type=surface]  Type: boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    colorscale  Parent: data[type=surface]  Type: colorscale Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    showscale  Parent: data[type=surface]  Type: boolean Default: true Determines whether or not a colorbar is displayed for this trace.    reversescale  Parent: data[type=surface]  Type: boolean Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.    zhoverformat  Parent: data[type=surface]  Type: string Default: "" Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `zaxis.hoverformat`.    cauto  Parent: data[type=surface]  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here z or surfacecolor) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.    cmax  Parent: data[type=surface]  Type: number Sets the upper bound of the color domain. Value should have the same units as z or surfacecolor and if set, `cmin` must be set as well.    cmid  Parent: data[type=surface]  Type: number Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as z or surfacecolor. Has no effect when `cauto` is `false`.    cmin  Parent: data[type=surface]  Type: number Sets the lower bound of the color domain. Value should have the same units as z or surfacecolor and if set, `cmax` must be set as well.    connectgaps  Parent: data[type=surface]  Type: boolean Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in.    contours  Parent: data[type=surface] Type: object containing one or more of the keys listed below.    x  Parent: data[type=surface].contours Type: object containing one or more of the keys listed below.    color  Parent: data[type=surface].contours.x  Type: color Default: "#444" Sets the color of the contour lines.    end  Parent: data[type=surface].contours.x  Type: number Sets the end contour level value. Must be more than `contours.start`    highlight  Parent: data[type=surface].contours.x  Type: boolean Default: true Determines whether or not contour lines about the x dimension are highlighted on hover.    highlightcolor  Parent: data[type=surface].contours.x  Type: color Default: "#444" Sets the color of the highlighted contour lines.    highlightwidth  Parent: data[type=surface].contours.x  Type: number between or equal to 1 and 16 Default: 2 Sets the width of the highlighted contour lines.    project  Parent: data[type=surface].contours.x Type: object containing one or more of the keys listed below.    x  Parent: data[type=surface].contours.x.project  Type: boolean Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to "true" (the default), the projected lines are shown on hover. If `show` is set to "true", the projected lines are shown in permanence.    y  Parent: data[type=surface].contours.x.project  Type: boolean Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to "true" (the default), the projected lines are shown on hover. If `show` is set to "true", the projected lines are shown in permanence.    z  Parent: data[type=surface].contours.x.project  Type: boolean Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to "true" (the default), the projected lines are shown on hover. If `show` is set to "true", the projected lines are shown in permanence.      show  Parent: data[type=surface].contours.x  Type: boolean Determines whether or not contour lines about the x dimension are drawn.    size  Parent: data[type=surface].contours.x  Type: number greater than or equal to 0 Sets the step between each contour level. Must be positive.    start  Parent: data[type=surface].contours.x  Type: number Sets the starting contour level value. Must be less than `contours.end`    usecolormap  Parent: data[type=surface].contours.x  Type: boolean An alternate to "color". Determines whether or not the contour lines are colored using the trace "colorscale".    width  Parent: data[type=surface].contours.x  Type: number between or equal to 1 and 16 Default: 2 Sets the width of the contour lines.      y  Parent: data[type=surface].contours Type: object containing one or more of the keys listed below.    color  Parent: data[type=surface].contours.y  Type: color Default: "#444" Sets the color of the contour lines.    end  Parent: data[type=surface].contours.y  Type: number Sets the end contour level value. Must be more than `contours.start`    highlight  Parent: data[type=surface].contours.y  Type: boolean Default: true Determines whether or not contour lines about the y dimension are highlighted on hover.    highlightcolor  Parent: data[type=surface].contours.y  Type: color Default: "#444" Sets the color of the highlighted contour lines.    highlightwidth  Parent: data[type=surface].contours.y  Type: number between or equal to 1 and 16 Default: 2 Sets the width of the highlighted contour lines.    project  Parent: data[type=surface].contours.y Type: object containing one or more of the keys listed below.    x  Parent: data[type=surface].contours.y.project  Type: boolean Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to "true" (the default), the projected lines are shown on hover. If `show` is set to "true", the projected lines are shown in permanence.    y  Parent: data[type=surface].contours.y.project  Type: boolean Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to "true" (the default), the projected lines are shown on hover. If `show` is set to "true", the projected lines are shown in permanence.    z  Parent: data[type=surface].contours.y.project  Type: boolean Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to "true" (the default), the projected lines are shown on hover. If `show` is set to "true", the projected lines are shown in permanence.      show  Parent: data[type=surface].contours.y  Type: boolean Determines whether or not contour lines about the y dimension are drawn.    size  Parent: data[type=surface].contours.y  Type: number greater than or equal to 0 Sets the step between each contour level. Must be positive.    start  Parent: data[type=surface].contours.y  Type: number Sets the starting contour level value. Must be less than `contours.end`    usecolormap  Parent: data[type=surface].contours.y  Type: boolean An alternate to "color". Determines whether or not the contour lines are colored using the trace "colorscale".    width  Parent: data[type=surface].contours.y  Type: number between or equal to 1 and 16 Default: 2 Sets the width of the contour lines.      z  Parent: data[type=surface].contours Type: object containing one or more of the keys listed below.    color  Parent: data[type=surface].contours.z  Type: color Default: "#444" Sets the color of the contour lines.    end  Parent: data[type=surface].contours.z  Type: number Sets the end contour level value. Must be more than `contours.start`    highlight  Parent: data[type=surface].contours.z  Type: boolean Default: true Determines whether or not contour lines about the z dimension are highlighted on hover.    highlightcolor  Parent: data[type=surface].contours.z  Type: color Default: "#444" Sets the color of the highlighted contour lines.    highlightwidth  Parent: data[type=surface].contours.z  Type: number between or equal to 1 and 16 Default: 2 Sets the width of the highlighted contour lines.    project  Parent: data[type=surface].contours.z Type: object containing one or more of the keys listed below.    x  Parent: data[type=surface].contours.z.project  Type: boolean Determines whether or not these contour lines are projected on the x plane. If `highlight` is set to "true" (the default), the projected lines are shown on hover. If `show` is set to "true", the projected lines are shown in permanence.    y  Parent: data[type=surface].contours.z.project  Type: boolean Determines whether or not these contour lines are projected on the y plane. If `highlight` is set to "true" (the default), the projected lines are shown on hover. If `show` is set to "true", the projected lines are shown in permanence.    z  Parent: data[type=surface].contours.z.project  Type: boolean Determines whether or not these contour lines are projected on the z plane. If `highlight` is set to "true" (the default), the projected lines are shown on hover. If `show` is set to "true", the projected lines are shown in permanence.      show  Parent: data[type=surface].contours.z  Type: boolean Determines whether or not contour lines about the z dimension are drawn.    size  Parent: data[type=surface].contours.z  Type: number greater than or equal to 0 Sets the step between each contour level. Must be positive.    start  Parent: data[type=surface].contours.z  Type: number Sets the starting contour level value. Must be less than `contours.end`    usecolormap  Parent: data[type=surface].contours.z  Type: boolean An alternate to "color". Determines whether or not the contour lines are colored using the trace "colorscale".    width  Parent: data[type=surface].contours.z  Type: number between or equal to 1 and 16 Default: 2 Sets the width of the contour lines.        hidesurface  Parent: data[type=surface]  Type: boolean Determines whether or not a surface is drawn. For example, set `hidesurface` to "false" `contours.x.show` to "true" and `contours.y.show` to "true" to draw a wire frame plot.    hoverlabel  Parent: data[type=surface] Type: object containing one or more of the keys listed below.    align  Parent: data[type=surface].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=surface].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=surface].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=surface].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=surface].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=surface].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=surface].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=surface].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=surface].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=surface].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=surface].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=surface].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=surface].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=surface].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      lighting  Parent: data[type=surface] Type: object containing one or more of the keys listed below.    ambient  Parent: data[type=surface].lighting  Type: number between or equal to 0 and 1 Default: 0.8 Ambient light increases overall color visibility but can wash out the image.    diffuse  Parent: data[type=surface].lighting  Type: number between or equal to 0 and 1 Default: 0.8 Represents the extent that incident rays are reflected in a range of angles.    fresnel  Parent: data[type=surface].lighting  Type: number between or equal to 0 and 5 Default: 0.2 Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.    roughness  Parent: data[type=surface].lighting  Type: number between or equal to 0 and 1 Default: 0.5 Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.    specular  Parent: data[type=surface].lighting  Type: number between or equal to 0 and 2 Default: 0.05 Represents the level that incident rays are reflected in a single direction, causing shine.      lightposition  Parent: data[type=surface] Type: object containing one or more of the keys listed below.    x  Parent: data[type=surface].lightposition  Type: number between or equal to -100000 and 100000 Default: 10 Numeric vector, representing the X coordinate for each vertex.    y  Parent: data[type=surface].lightposition  Type: number between or equal to -100000 and 100000 Default: 10000 Numeric vector, representing the Y coordinate for each vertex.    z  Parent: data[type=surface].lightposition  Type: number between or equal to -100000 and 100000 Default: 0 Numeric vector, representing the Z coordinate for each vertex.      opacityscale  Parent: data[type=surface]  Type: number or categorical coordinate string Sets the opacityscale. The opacityscale must be an array containing arrays mapping a normalized value to an opacity value. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 1], [0.5, 0.2], [1, 1]]` means that higher/lower values would have higher opacity values and those in the middle would be more transparent Alternatively, `opacityscale` may be a palette name string of the following list: 'min', 'max', 'extremes' and 'uniform'. The default is 'uniform'.    xcalendar  Parent: data[type=surface]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `x` date data.    ycalendar  Parent: data[type=surface]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `y` date data.    zcalendar  Parent: data[type=surface]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `z` date data.    uirevision  Parent: data[type=surface]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      mesh3d traces

      










 A mesh3d trace is an object with the key "type" equal to "mesh3d" (i.e. {"type": "mesh3d"}) and any of the keys listed below. Draws sets of triangles with coordinates given by three 1-dimensional arrays in `x`, `y`, `z` and (1) a sets of `i`, `j`, `k` indices (2) Delaunay triangulation or (3) the Alpha-shape algorithm or (4) the Convex-hull algorithm 














   type  Parent: data[type=mesh3d]  Type: "mesh3d"    name  Parent: data[type=mesh3d]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=mesh3d]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=mesh3d]  Type: boolean Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=mesh3d]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=mesh3d]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=mesh3d]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=mesh3d] Type: object containing one or more of the keys listed below.    font  Parent: data[type=mesh3d].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=mesh3d].legendgrouptitle.font  Type: color    family  Parent: data[type=mesh3d].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=mesh3d].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=mesh3d].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=mesh3d].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=mesh3d].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=mesh3d].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=mesh3d].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=mesh3d].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=mesh3d].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=mesh3d]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=mesh3d]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.    ids  Parent: data[type=mesh3d]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    x  Parent: data[type=mesh3d]  Type: data array Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.    y  Parent: data[type=mesh3d]  Type: data array Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.    z  Parent: data[type=mesh3d]  Type: data array Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.    i  Parent: data[type=mesh3d]  Type: data array A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the "first" vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a point in space, which is the first vertex of a triangle.    j  Parent: data[type=mesh3d]  Type: data array A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the "second" vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a point in space, which is the second vertex of a triangle.    k  Parent: data[type=mesh3d]  Type: data array A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the "third" vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a point in space, which is the third vertex of a triangle.    facecolor  Parent: data[type=mesh3d]  Type: data array Sets the color of each face Overrides "color" and "vertexcolor".    intensity  Parent: data[type=mesh3d]  Type: data array Sets the intensity values for vertices or cells as defined by `intensitymode`. It can be used for plotting fields on meshes.    intensitymode  Parent: data[type=mesh3d]  Type: enumerated , one of ( "vertex" | "cell" ) Default: "vertex" Determines the source of `intensity` values.    vertexcolor  Parent: data[type=mesh3d]  Type: data array Sets the color of each vertex Overrides "color". While Red, green and blue colors are in the range of 0 and 255; in the case of having vertex color data in RGBA format, the alpha color should be normalized to be between 0 and 1.    text  Parent: data[type=mesh3d]  Type: string or array of strings Default: "" Sets the text elements associated with the vertices. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    hovertext  Parent: data[type=mesh3d]  Type: string or array of strings Default: "" Same as `text`.    hoverinfo  Parent: data[type=mesh3d]  Type: flaglist string. Any combination of "x", "y", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=mesh3d]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    xhoverformat  Parent: data[type=mesh3d]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=mesh3d]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    meta  Parent: data[type=mesh3d]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=mesh3d]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    scene  Parent: data[type=mesh3d]  Type: subplotid Default: scene Sets a reference between this trace's 3D coordinate system and a 3D scene. If "scene" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If "scene2", the (x,y,z) coordinates refer to `layout.scene2`, and so on.    coloraxis  Parent: data[type=mesh3d]  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    color  Parent: data[type=mesh3d]  Type: color Sets the color of the whole mesh    colorbar  Parent: data[type=mesh3d] Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=mesh3d].colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=mesh3d].colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=mesh3d].colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=mesh3d].colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=mesh3d].colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=mesh3d].colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=mesh3d].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=mesh3d].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=mesh3d].colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=mesh3d].colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=mesh3d].colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=mesh3d].colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=mesh3d].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=mesh3d].colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=mesh3d].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=mesh3d].colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=mesh3d].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=mesh3d].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=mesh3d].colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=mesh3d].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=mesh3d].colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=mesh3d].colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=mesh3d].colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=mesh3d].colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=mesh3d].colorbar.tickfont  Type: color    family  Parent: data[type=mesh3d].colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=mesh3d].colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=mesh3d].colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=mesh3d].colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=mesh3d].colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=mesh3d].colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=mesh3d].colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=mesh3d].colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=mesh3d].colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=mesh3d].colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=mesh3d].colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=mesh3d].colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=mesh3d].colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=mesh3d].colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=mesh3d].colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=mesh3d].colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=mesh3d].colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=mesh3d].colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=mesh3d].colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=mesh3d].colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=mesh3d].colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=mesh3d].colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=mesh3d].colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=mesh3d].colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=mesh3d].colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=mesh3d].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=mesh3d].colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=mesh3d].colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=mesh3d].colorbar.title.font  Type: color    family  Parent: data[type=mesh3d].colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=mesh3d].colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=mesh3d].colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=mesh3d].colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=mesh3d].colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=mesh3d].colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=mesh3d].colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=mesh3d].colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=mesh3d].colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=mesh3d].colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=mesh3d].colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=mesh3d].colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=mesh3d].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=mesh3d].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=mesh3d].colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=mesh3d].colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=mesh3d].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=mesh3d].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      autocolorscale  Parent: data[type=mesh3d]  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    colorscale  Parent: data[type=mesh3d]  Type: colorscale Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    showscale  Parent: data[type=mesh3d]  Type: boolean Default: true Determines whether or not a colorbar is displayed for this trace.    reversescale  Parent: data[type=mesh3d]  Type: boolean Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.    zhoverformat  Parent: data[type=mesh3d]  Type: string Default: "" Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `zaxis.hoverformat`.    cauto  Parent: data[type=mesh3d]  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here `intensity`) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.    cmax  Parent: data[type=mesh3d]  Type: number Sets the upper bound of the color domain. Value should have the same units as `intensity` and if set, `cmin` must be set as well.    cmid  Parent: data[type=mesh3d]  Type: number Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `intensity`. Has no effect when `cauto` is `false`.    cmin  Parent: data[type=mesh3d]  Type: number Sets the lower bound of the color domain. Value should have the same units as `intensity` and if set, `cmax` must be set as well.    alphahull  Parent: data[type=mesh3d]  Type: number Default: -1 Determines how the mesh surface triangles are derived from the set of vertices (points) represented by the `x`, `y` and `z` arrays, if the `i`, `j`, `k` arrays are not supplied. For general use of `mesh3d` it is preferred that `i`, `j`, `k` are supplied. If "-1", Delaunay triangulation is used, which is mainly suitable if the mesh is a single, more or less layer surface that is perpendicular to `delaunayaxis`. In case the `delaunayaxis` intersects the mesh surface at more than one point it will result triangles that are very long in the dimension of `delaunayaxis`. If ">0", the alpha-shape algorithm is used. In this case, the positive `alphahull` value signals the use of the alpha-shape algorithm, _and_ its value acts as the parameter for the mesh fitting. If "0", the convex-hull algorithm is used. It is suitable for convex bodies or if the intention is to enclose the `x`, `y` and `z` point set into a convex hull.    delaunayaxis  Parent: data[type=mesh3d]  Type: enumerated , one of ( "x" | "y" | "z" ) Default: "z" Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the Delaunay triangulation. It has an effect if `i`, `j`, `k` are not provided and `alphahull` is set to indicate Delaunay triangulation.    contour  Parent: data[type=mesh3d] Type: object containing one or more of the keys listed below.    color  Parent: data[type=mesh3d].contour  Type: color Default: "#444" Sets the color of the contour lines.    show  Parent: data[type=mesh3d].contour  Type: boolean Sets whether or not dynamic contours are shown on hover    width  Parent: data[type=mesh3d].contour  Type: number between or equal to 1 and 16 Default: 2 Sets the width of the contour lines.      flatshading  Parent: data[type=mesh3d]  Type: boolean Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.    hoverlabel  Parent: data[type=mesh3d] Type: object containing one or more of the keys listed below.    align  Parent: data[type=mesh3d].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=mesh3d].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=mesh3d].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=mesh3d].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=mesh3d].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=mesh3d].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=mesh3d].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=mesh3d].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=mesh3d].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=mesh3d].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=mesh3d].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=mesh3d].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=mesh3d].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=mesh3d].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      lighting  Parent: data[type=mesh3d] Type: object containing one or more of the keys listed below.    ambient  Parent: data[type=mesh3d].lighting  Type: number between or equal to 0 and 1 Default: 0.8 Ambient light increases overall color visibility but can wash out the image.    diffuse  Parent: data[type=mesh3d].lighting  Type: number between or equal to 0 and 1 Default: 0.8 Represents the extent that incident rays are reflected in a range of angles.    facenormalsepsilon  Parent: data[type=mesh3d].lighting  Type: number between or equal to 0 and 1 Default: 1e-06 Epsilon for face normals calculation avoids math issues arising from degenerate geometry.    fresnel  Parent: data[type=mesh3d].lighting  Type: number between or equal to 0 and 5 Default: 0.2 Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.    roughness  Parent: data[type=mesh3d].lighting  Type: number between or equal to 0 and 1 Default: 0.5 Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.    specular  Parent: data[type=mesh3d].lighting  Type: number between or equal to 0 and 2 Default: 0.05 Represents the level that incident rays are reflected in a single direction, causing shine.    vertexnormalsepsilon  Parent: data[type=mesh3d].lighting  Type: number between or equal to 0 and 1 Default: 1e-12 Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.      lightposition  Parent: data[type=mesh3d] Type: object containing one or more of the keys listed below.    x  Parent: data[type=mesh3d].lightposition  Type: number between or equal to -100000 and 100000 Default: 100000 Numeric vector, representing the X coordinate for each vertex.    y  Parent: data[type=mesh3d].lightposition  Type: number between or equal to -100000 and 100000 Default: 100000 Numeric vector, representing the Y coordinate for each vertex.    z  Parent: data[type=mesh3d].lightposition  Type: number between or equal to -100000 and 100000 Default: 0 Numeric vector, representing the Z coordinate for each vertex.      xcalendar  Parent: data[type=mesh3d]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `x` date data.    ycalendar  Parent: data[type=mesh3d]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `y` date data.    zcalendar  Parent: data[type=mesh3d]  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use with `z` date data.    uirevision  Parent: data[type=mesh3d]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      cone traces

      










 A cone trace is an object with the key "type" equal to "cone" (i.e. {"type": "cone"}) and any of the keys listed below. Use cone traces to visualize vector fields. Specify a vector field using 6 1D arrays, 3 position arrays `x`, `y` and `z` and 3 vector component arrays `u`, `v`, `w`. The cones are drawn exactly at the positions given by `x`, `y` and `z`. 














   type  Parent: data[type=cone]  Type: "cone"    name  Parent: data[type=cone]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=cone]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=cone]  Type: boolean Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=cone]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=cone]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=cone]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=cone] Type: object containing one or more of the keys listed below.    font  Parent: data[type=cone].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=cone].legendgrouptitle.font  Type: color    family  Parent: data[type=cone].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=cone].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=cone].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=cone].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=cone].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=cone].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=cone].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=cone].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=cone].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=cone]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=cone]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.    ids  Parent: data[type=cone]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    x  Parent: data[type=cone]  Type: data array Sets the x coordinates of the vector field and of the displayed cones.    y  Parent: data[type=cone]  Type: data array Sets the y coordinates of the vector field and of the displayed cones.    z  Parent: data[type=cone]  Type: data array Sets the z coordinates of the vector field and of the displayed cones.    u  Parent: data[type=cone]  Type: data array Sets the x components of the vector field.    v  Parent: data[type=cone]  Type: data array Sets the y components of the vector field.    w  Parent: data[type=cone]  Type: data array Sets the z components of the vector field.    text  Parent: data[type=cone]  Type: string or array of strings Default: "" Sets the text elements associated with the cones. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    hovertext  Parent: data[type=cone]  Type: string or array of strings Default: "" Same as `text`.    hoverinfo  Parent: data[type=cone]  Type: flaglist string. Any combination of "x", "y", "z", "u", "v", "w", "norm", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "x+y+z+norm+text+name" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=cone]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `norm` Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    xhoverformat  Parent: data[type=cone]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=cone]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    uhoverformat  Parent: data[type=cone]  Type: string Default: "" Sets the hover text formatting rulefor `u` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.    vhoverformat  Parent: data[type=cone]  Type: string Default: "" Sets the hover text formatting rulefor `v` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.    whoverformat  Parent: data[type=cone]  Type: string Default: "" Sets the hover text formatting rulefor `w` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.    meta  Parent: data[type=cone]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=cone]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    scene  Parent: data[type=cone]  Type: subplotid Default: scene Sets a reference between this trace's 3D coordinate system and a 3D scene. If "scene" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If "scene2", the (x,y,z) coordinates refer to `layout.scene2`, and so on.    coloraxis  Parent: data[type=cone]  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=cone] Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=cone].colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=cone].colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=cone].colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=cone].colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=cone].colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=cone].colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=cone].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=cone].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=cone].colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=cone].colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=cone].colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=cone].colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=cone].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=cone].colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=cone].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=cone].colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=cone].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=cone].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=cone].colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=cone].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=cone].colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=cone].colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=cone].colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=cone].colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=cone].colorbar.tickfont  Type: color    family  Parent: data[type=cone].colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=cone].colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=cone].colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=cone].colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=cone].colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=cone].colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=cone].colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=cone].colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=cone].colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=cone].colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=cone].colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=cone].colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=cone].colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=cone].colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=cone].colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=cone].colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=cone].colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=cone].colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=cone].colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=cone].colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=cone].colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=cone].colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=cone].colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=cone].colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=cone].colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=cone].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=cone].colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=cone].colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=cone].colorbar.title.font  Type: color    family  Parent: data[type=cone].colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=cone].colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=cone].colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=cone].colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=cone].colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=cone].colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=cone].colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=cone].colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=cone].colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=cone].colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=cone].colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=cone].colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=cone].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=cone].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=cone].colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=cone].colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=cone].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=cone].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      autocolorscale  Parent: data[type=cone]  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    colorscale  Parent: data[type=cone]  Type: colorscale Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    showscale  Parent: data[type=cone]  Type: boolean Default: true Determines whether or not a colorbar is displayed for this trace.    reversescale  Parent: data[type=cone]  Type: boolean Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.    zhoverformat  Parent: data[type=cone]  Type: string Default: "" Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `zaxis.hoverformat`.    cauto  Parent: data[type=cone]  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here u/v/w norm) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.    cmax  Parent: data[type=cone]  Type: number Sets the upper bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmin` must be set as well.    cmid  Parent: data[type=cone]  Type: number Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as u/v/w norm. Has no effect when `cauto` is `false`.    cmin  Parent: data[type=cone]  Type: number Sets the lower bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmax` must be set as well.    anchor  Parent: data[type=cone]  Type: enumerated , one of ( "tip" | "tail" | "cm" | "center" ) Default: "cm" Sets the cones' anchor with respect to their x/y/z positions. Note that "cm" denote the cone's center of mass which corresponds to 1/4 from the tail to tip.    hoverlabel  Parent: data[type=cone] Type: object containing one or more of the keys listed below.    align  Parent: data[type=cone].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=cone].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=cone].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=cone].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=cone].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=cone].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=cone].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=cone].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=cone].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=cone].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=cone].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=cone].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=cone].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=cone].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      lighting  Parent: data[type=cone] Type: object containing one or more of the keys listed below.    ambient  Parent: data[type=cone].lighting  Type: number between or equal to 0 and 1 Default: 0.8 Ambient light increases overall color visibility but can wash out the image.    diffuse  Parent: data[type=cone].lighting  Type: number between or equal to 0 and 1 Default: 0.8 Represents the extent that incident rays are reflected in a range of angles.    facenormalsepsilon  Parent: data[type=cone].lighting  Type: number between or equal to 0 and 1 Default: 1e-06 Epsilon for face normals calculation avoids math issues arising from degenerate geometry.    fresnel  Parent: data[type=cone].lighting  Type: number between or equal to 0 and 5 Default: 0.2 Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.    roughness  Parent: data[type=cone].lighting  Type: number between or equal to 0 and 1 Default: 0.5 Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.    specular  Parent: data[type=cone].lighting  Type: number between or equal to 0 and 2 Default: 0.05 Represents the level that incident rays are reflected in a single direction, causing shine.    vertexnormalsepsilon  Parent: data[type=cone].lighting  Type: number between or equal to 0 and 1 Default: 1e-12 Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.      lightposition  Parent: data[type=cone] Type: object containing one or more of the keys listed below.    x  Parent: data[type=cone].lightposition  Type: number between or equal to -100000 and 100000 Default: 100000 Numeric vector, representing the X coordinate for each vertex.    y  Parent: data[type=cone].lightposition  Type: number between or equal to -100000 and 100000 Default: 100000 Numeric vector, representing the Y coordinate for each vertex.    z  Parent: data[type=cone].lightposition  Type: number between or equal to -100000 and 100000 Default: 0 Numeric vector, representing the Z coordinate for each vertex.      sizemode  Parent: data[type=cone]  Type: enumerated , one of ( "scaled" | "absolute" | "raw" ) Default: "scaled" Determines whether `sizeref` is set as a "scaled" (i.e unitless) scalar (normalized by the max u/v/w norm in the vector field) or as "absolute" value (in the same units as the vector field). To display sizes in actual vector length use "raw".    sizeref  Parent: data[type=cone]  Type: number greater than or equal to 0 Adjusts the cone size scaling. The size of the cones is determined by their u/v/w norm multiplied a factor and `sizeref`. This factor (computed internally) corresponds to the minimum "time" to travel across two successive x/y/z positions at the average velocity of those two successive positions. All cones in a given trace use the same factor. With `sizemode` set to "raw", its default value is "1". With `sizemode` set to "scaled", `sizeref` is unitless, its default value is "0.5". With `sizemode` set to "absolute", `sizeref` has the same units as the u/v/w vector field, its the default value is half the sample's maximum vector norm.    uirevision  Parent: data[type=cone]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      streamtube traces

      










 A streamtube trace is an object with the key "type" equal to "streamtube" (i.e. {"type": "streamtube"}) and any of the keys listed below. Use a streamtube trace to visualize flow in a vector field. Specify a vector field using 6 1D arrays of equal length, 3 position arrays `x`, `y` and `z` and 3 vector component arrays `u`, `v`, and `w`. By default, the tubes' starting positions will be cut from the vector field's x-z plane at its minimum y value. To specify your own starting position, use attributes `starts.x`, `starts.y` and `starts.z`. The color is encoded by the norm of (u, v, w), and the local radius by the divergence of (u, v, w). 














   type  Parent: data[type=streamtube]  Type: "streamtube"    name  Parent: data[type=streamtube]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=streamtube]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=streamtube]  Type: boolean Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=streamtube]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=streamtube]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=streamtube]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=streamtube] Type: object containing one or more of the keys listed below.    font  Parent: data[type=streamtube].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=streamtube].legendgrouptitle.font  Type: color    family  Parent: data[type=streamtube].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=streamtube].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=streamtube].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=streamtube].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=streamtube].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=streamtube].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=streamtube].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=streamtube].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=streamtube].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=streamtube]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=streamtube]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.    ids  Parent: data[type=streamtube]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    x  Parent: data[type=streamtube]  Type: data array Sets the x coordinates of the vector field.    y  Parent: data[type=streamtube]  Type: data array Sets the y coordinates of the vector field.    z  Parent: data[type=streamtube]  Type: data array Sets the z coordinates of the vector field.    u  Parent: data[type=streamtube]  Type: data array Sets the x components of the vector field.    v  Parent: data[type=streamtube]  Type: data array Sets the y components of the vector field.    w  Parent: data[type=streamtube]  Type: data array Sets the z components of the vector field.    text  Parent: data[type=streamtube]  Type: string Default: "" Sets a text element associated with this trace. If trace `hoverinfo` contains a "text" flag, this text element will be seen in all hover labels. Note that streamtube traces do not support array `text` values.    hovertext  Parent: data[type=streamtube]  Type: string Default: "" Same as `text`.    hoverinfo  Parent: data[type=streamtube]  Type: flaglist string. Any combination of "x", "y", "z", "u", "v", "w", "norm", "divergence", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "x+y+z+norm+text+name" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=streamtube]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `tubex`, `tubey`, `tubez`, `tubeu`, `tubev`, `tubew`, `norm` and `divergence`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    xhoverformat  Parent: data[type=streamtube]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=streamtube]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    uhoverformat  Parent: data[type=streamtube]  Type: string Default: "" Sets the hover text formatting rulefor `u` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.    vhoverformat  Parent: data[type=streamtube]  Type: string Default: "" Sets the hover text formatting rulefor `v` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.    whoverformat  Parent: data[type=streamtube]  Type: string Default: "" Sets the hover text formatting rulefor `w` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.    meta  Parent: data[type=streamtube]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=streamtube]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    scene  Parent: data[type=streamtube]  Type: subplotid Default: scene Sets a reference between this trace's 3D coordinate system and a 3D scene. If "scene" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If "scene2", the (x,y,z) coordinates refer to `layout.scene2`, and so on.    coloraxis  Parent: data[type=streamtube]  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=streamtube] Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=streamtube].colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=streamtube].colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=streamtube].colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=streamtube].colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=streamtube].colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=streamtube].colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=streamtube].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=streamtube].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=streamtube].colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=streamtube].colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=streamtube].colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=streamtube].colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=streamtube].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=streamtube].colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=streamtube].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=streamtube].colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=streamtube].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=streamtube].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=streamtube].colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=streamtube].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=streamtube].colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=streamtube].colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=streamtube].colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=streamtube].colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=streamtube].colorbar.tickfont  Type: color    family  Parent: data[type=streamtube].colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=streamtube].colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=streamtube].colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=streamtube].colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=streamtube].colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=streamtube].colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=streamtube].colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=streamtube].colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=streamtube].colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=streamtube].colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=streamtube].colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=streamtube].colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=streamtube].colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=streamtube].colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=streamtube].colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=streamtube].colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=streamtube].colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=streamtube].colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=streamtube].colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=streamtube].colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=streamtube].colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=streamtube].colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=streamtube].colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=streamtube].colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=streamtube].colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=streamtube].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=streamtube].colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=streamtube].colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=streamtube].colorbar.title.font  Type: color    family  Parent: data[type=streamtube].colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=streamtube].colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=streamtube].colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=streamtube].colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=streamtube].colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=streamtube].colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=streamtube].colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=streamtube].colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=streamtube].colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=streamtube].colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=streamtube].colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=streamtube].colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=streamtube].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=streamtube].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=streamtube].colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=streamtube].colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=streamtube].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=streamtube].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      autocolorscale  Parent: data[type=streamtube]  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    colorscale  Parent: data[type=streamtube]  Type: colorscale Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    showscale  Parent: data[type=streamtube]  Type: boolean Default: true Determines whether or not a colorbar is displayed for this trace.    reversescale  Parent: data[type=streamtube]  Type: boolean Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.    zhoverformat  Parent: data[type=streamtube]  Type: string Default: "" Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `zaxis.hoverformat`.    cauto  Parent: data[type=streamtube]  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here u/v/w norm) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.    cmax  Parent: data[type=streamtube]  Type: number Sets the upper bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmin` must be set as well.    cmid  Parent: data[type=streamtube]  Type: number Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as u/v/w norm. Has no effect when `cauto` is `false`.    cmin  Parent: data[type=streamtube]  Type: number Sets the lower bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmax` must be set as well.    hoverlabel  Parent: data[type=streamtube] Type: object containing one or more of the keys listed below.    align  Parent: data[type=streamtube].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=streamtube].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=streamtube].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=streamtube].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=streamtube].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=streamtube].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=streamtube].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=streamtube].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=streamtube].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=streamtube].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=streamtube].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=streamtube].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=streamtube].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=streamtube].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      lighting  Parent: data[type=streamtube] Type: object containing one or more of the keys listed below.    ambient  Parent: data[type=streamtube].lighting  Type: number between or equal to 0 and 1 Default: 0.8 Ambient light increases overall color visibility but can wash out the image.    diffuse  Parent: data[type=streamtube].lighting  Type: number between or equal to 0 and 1 Default: 0.8 Represents the extent that incident rays are reflected in a range of angles.    facenormalsepsilon  Parent: data[type=streamtube].lighting  Type: number between or equal to 0 and 1 Default: 1e-06 Epsilon for face normals calculation avoids math issues arising from degenerate geometry.    fresnel  Parent: data[type=streamtube].lighting  Type: number between or equal to 0 and 5 Default: 0.2 Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.    roughness  Parent: data[type=streamtube].lighting  Type: number between or equal to 0 and 1 Default: 0.5 Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.    specular  Parent: data[type=streamtube].lighting  Type: number between or equal to 0 and 2 Default: 0.05 Represents the level that incident rays are reflected in a single direction, causing shine.    vertexnormalsepsilon  Parent: data[type=streamtube].lighting  Type: number between or equal to 0 and 1 Default: 1e-12 Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.      lightposition  Parent: data[type=streamtube] Type: object containing one or more of the keys listed below.    x  Parent: data[type=streamtube].lightposition  Type: number between or equal to -100000 and 100000 Default: 100000 Numeric vector, representing the X coordinate for each vertex.    y  Parent: data[type=streamtube].lightposition  Type: number between or equal to -100000 and 100000 Default: 100000 Numeric vector, representing the Y coordinate for each vertex.    z  Parent: data[type=streamtube].lightposition  Type: number between or equal to -100000 and 100000 Default: 0 Numeric vector, representing the Z coordinate for each vertex.      maxdisplayed  Parent: data[type=streamtube]  Type: integer greater than or equal to 0 Default: 1000 The maximum number of displayed segments in a streamtube.    sizeref  Parent: data[type=streamtube]  Type: number greater than or equal to 0 Default: 1 The scaling factor for the streamtubes. The default is 1, which avoids two max divergence tubes from touching at adjacent starting positions.    starts  Parent: data[type=streamtube] Type: object containing one or more of the keys listed below.    x  Parent: data[type=streamtube].starts  Type: data array Sets the x components of the starting position of the streamtubes    y  Parent: data[type=streamtube].starts  Type: data array Sets the y components of the starting position of the streamtubes    z  Parent: data[type=streamtube].starts  Type: data array Sets the z components of the starting position of the streamtubes      uirevision  Parent: data[type=streamtube]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      volume traces

      










 A volume trace is an object with the key "type" equal to "volume" (i.e. {"type": "volume"}) and any of the keys listed below. Draws volume trace between iso-min and iso-max values with coordinates given by four 1-dimensional arrays containing the `value`, `x`, `y` and `z` of every vertex of a uniform or non-uniform 3-D grid. Horizontal or vertical slices, caps as well as spaceframe between iso-min and iso-max values could also be drawn using this trace. 














   type  Parent: data[type=volume]  Type: "volume"    name  Parent: data[type=volume]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=volume]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=volume]  Type: boolean Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=volume]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=volume]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=volume]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=volume] Type: object containing one or more of the keys listed below.    font  Parent: data[type=volume].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=volume].legendgrouptitle.font  Type: color    family  Parent: data[type=volume].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=volume].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=volume].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=volume].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=volume].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=volume].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=volume].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=volume].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=volume].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=volume]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=volume]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.    ids  Parent: data[type=volume]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    x  Parent: data[type=volume]  Type: data array Sets the X coordinates of the vertices on X axis.    y  Parent: data[type=volume]  Type: data array Sets the Y coordinates of the vertices on Y axis.    z  Parent: data[type=volume]  Type: data array Sets the Z coordinates of the vertices on Z axis.    value  Parent: data[type=volume]  Type: data array Sets the 4th dimension (value) of the vertices.    text  Parent: data[type=volume]  Type: string or array of strings Default: "" Sets the text elements associated with the vertices. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    hovertext  Parent: data[type=volume]  Type: string or array of strings Default: "" Same as `text`.    hoverinfo  Parent: data[type=volume]  Type: flaglist string. Any combination of "x", "y", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=volume]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    xhoverformat  Parent: data[type=volume]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=volume]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    valuehoverformat  Parent: data[type=volume]  Type: string Default: "" Sets the hover text formatting rulefor `value` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.    meta  Parent: data[type=volume]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=volume]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    scene  Parent: data[type=volume]  Type: subplotid Default: scene Sets a reference between this trace's 3D coordinate system and a 3D scene. If "scene" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If "scene2", the (x,y,z) coordinates refer to `layout.scene2`, and so on.    coloraxis  Parent: data[type=volume]  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=volume] Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=volume].colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=volume].colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=volume].colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=volume].colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=volume].colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=volume].colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=volume].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=volume].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=volume].colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=volume].colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=volume].colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=volume].colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=volume].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=volume].colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=volume].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=volume].colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=volume].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=volume].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=volume].colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=volume].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=volume].colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=volume].colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=volume].colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=volume].colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=volume].colorbar.tickfont  Type: color    family  Parent: data[type=volume].colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=volume].colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=volume].colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=volume].colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=volume].colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=volume].colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=volume].colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=volume].colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=volume].colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=volume].colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=volume].colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=volume].colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=volume].colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=volume].colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=volume].colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=volume].colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=volume].colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=volume].colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=volume].colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=volume].colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=volume].colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=volume].colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=volume].colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=volume].colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=volume].colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=volume].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=volume].colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=volume].colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=volume].colorbar.title.font  Type: color    family  Parent: data[type=volume].colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=volume].colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=volume].colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=volume].colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=volume].colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=volume].colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=volume].colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=volume].colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=volume].colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=volume].colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=volume].colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=volume].colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=volume].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=volume].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=volume].colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=volume].colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=volume].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=volume].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      autocolorscale  Parent: data[type=volume]  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    colorscale  Parent: data[type=volume]  Type: colorscale Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    showscale  Parent: data[type=volume]  Type: boolean Default: true Determines whether or not a colorbar is displayed for this trace.    reversescale  Parent: data[type=volume]  Type: boolean Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.    zhoverformat  Parent: data[type=volume]  Type: string Default: "" Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `zaxis.hoverformat`.    cauto  Parent: data[type=volume]  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here `value`) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.    cmax  Parent: data[type=volume]  Type: number Sets the upper bound of the color domain. Value should have the same units as `value` and if set, `cmin` must be set as well.    cmid  Parent: data[type=volume]  Type: number Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `value`. Has no effect when `cauto` is `false`.    cmin  Parent: data[type=volume]  Type: number Sets the lower bound of the color domain. Value should have the same units as `value` and if set, `cmax` must be set as well.    caps  Parent: data[type=volume] Type: object containing one or more of the keys listed below.    x  Parent: data[type=volume].caps Type: object containing one or more of the keys listed below.    fill  Parent: data[type=volume].caps.x  Type: number between or equal to 0 and 1 Default: 1 Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.    show  Parent: data[type=volume].caps.x  Type: boolean Default: true Sets the fill ratio of the `slices`. The default fill value of the x `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.      y  Parent: data[type=volume].caps Type: object containing one or more of the keys listed below.    fill  Parent: data[type=volume].caps.y  Type: number between or equal to 0 and 1 Default: 1 Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.    show  Parent: data[type=volume].caps.y  Type: boolean Default: true Sets the fill ratio of the `slices`. The default fill value of the y `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.      z  Parent: data[type=volume].caps Type: object containing one or more of the keys listed below.    fill  Parent: data[type=volume].caps.z  Type: number between or equal to 0 and 1 Default: 1 Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.    show  Parent: data[type=volume].caps.z  Type: boolean Default: true Sets the fill ratio of the `slices`. The default fill value of the z `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.        contour  Parent: data[type=volume] Type: object containing one or more of the keys listed below.    color  Parent: data[type=volume].contour  Type: color Default: "#444" Sets the color of the contour lines.    show  Parent: data[type=volume].contour  Type: boolean Sets whether or not dynamic contours are shown on hover    width  Parent: data[type=volume].contour  Type: number between or equal to 1 and 16 Default: 2 Sets the width of the contour lines.      flatshading  Parent: data[type=volume]  Type: boolean Default: true Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.    hoverlabel  Parent: data[type=volume] Type: object containing one or more of the keys listed below.    align  Parent: data[type=volume].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=volume].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=volume].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=volume].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=volume].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=volume].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=volume].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=volume].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=volume].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=volume].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=volume].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=volume].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=volume].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=volume].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      isomax  Parent: data[type=volume]  Type: number Sets the maximum boundary for iso-surface plot.    isomin  Parent: data[type=volume]  Type: number Sets the minimum boundary for iso-surface plot.    lighting  Parent: data[type=volume] Type: object containing one or more of the keys listed below.    ambient  Parent: data[type=volume].lighting  Type: number between or equal to 0 and 1 Default: 0.8 Ambient light increases overall color visibility but can wash out the image.    diffuse  Parent: data[type=volume].lighting  Type: number between or equal to 0 and 1 Default: 0.8 Represents the extent that incident rays are reflected in a range of angles.    facenormalsepsilon  Parent: data[type=volume].lighting  Type: number between or equal to 0 and 1 Default: 0 Epsilon for face normals calculation avoids math issues arising from degenerate geometry.    fresnel  Parent: data[type=volume].lighting  Type: number between or equal to 0 and 5 Default: 0.2 Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.    roughness  Parent: data[type=volume].lighting  Type: number between or equal to 0 and 1 Default: 0.5 Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.    specular  Parent: data[type=volume].lighting  Type: number between or equal to 0 and 2 Default: 0.05 Represents the level that incident rays are reflected in a single direction, causing shine.    vertexnormalsepsilon  Parent: data[type=volume].lighting  Type: number between or equal to 0 and 1 Default: 1e-12 Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.      lightposition  Parent: data[type=volume] Type: object containing one or more of the keys listed below.    x  Parent: data[type=volume].lightposition  Type: number between or equal to -100000 and 100000 Default: 100000 Numeric vector, representing the X coordinate for each vertex.    y  Parent: data[type=volume].lightposition  Type: number between or equal to -100000 and 100000 Default: 100000 Numeric vector, representing the Y coordinate for each vertex.    z  Parent: data[type=volume].lightposition  Type: number between or equal to -100000 and 100000 Default: 0 Numeric vector, representing the Z coordinate for each vertex.      opacityscale  Parent: data[type=volume]  Type: number or categorical coordinate string Sets the opacityscale. The opacityscale must be an array containing arrays mapping a normalized value to an opacity value. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 1], [0.5, 0.2], [1, 1]]` means that higher/lower values would have higher opacity values and those in the middle would be more transparent Alternatively, `opacityscale` may be a palette name string of the following list: 'min', 'max', 'extremes' and 'uniform'. The default is 'uniform'.    slices  Parent: data[type=volume] Type: object containing one or more of the keys listed below.    x  Parent: data[type=volume].slices Type: object containing one or more of the keys listed below.    fill  Parent: data[type=volume].slices.x  Type: number between or equal to 0 and 1 Default: 1 Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.    locations  Parent: data[type=volume].slices.x  Type: data array Default:  Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis x except start and end.    show  Parent: data[type=volume].slices.x  Type: boolean Determines whether or not slice planes about the x dimension are drawn.      y  Parent: data[type=volume].slices Type: object containing one or more of the keys listed below.    fill  Parent: data[type=volume].slices.y  Type: number between or equal to 0 and 1 Default: 1 Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.    locations  Parent: data[type=volume].slices.y  Type: data array Default:  Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis y except start and end.    show  Parent: data[type=volume].slices.y  Type: boolean Determines whether or not slice planes about the y dimension are drawn.      z  Parent: data[type=volume].slices Type: object containing one or more of the keys listed below.    fill  Parent: data[type=volume].slices.z  Type: number between or equal to 0 and 1 Default: 1 Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.    locations  Parent: data[type=volume].slices.z  Type: data array Default:  Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis z except start and end.    show  Parent: data[type=volume].slices.z  Type: boolean Determines whether or not slice planes about the z dimension are drawn.        spaceframe  Parent: data[type=volume] Type: object containing one or more of the keys listed below.    fill  Parent: data[type=volume].spaceframe  Type: number between or equal to 0 and 1 Default: 1 Sets the fill ratio of the `spaceframe` elements. The default fill value is 1 meaning that they are entirely shaded. Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.    show  Parent: data[type=volume].spaceframe  Type: boolean Displays/hides tetrahedron shapes between minimum and maximum iso-values. Often useful when either caps or surfaces are disabled or filled with values less than 1.      surface  Parent: data[type=volume] Type: object containing one or more of the keys listed below.    count  Parent: data[type=volume].surface  Type: integer greater than or equal to 1 Default: 2 Sets the number of iso-surfaces between minimum and maximum iso-values. By default this value is 2 meaning that only minimum and maximum surfaces would be drawn.    fill  Parent: data[type=volume].surface  Type: number between or equal to 0 and 1 Default: 1 Sets the fill ratio of the iso-surface. The default fill value of the surface is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.    pattern  Parent: data[type=volume].surface  Type: flaglist string. Any combination of "A", "B", "C", "D", "E" joined with a "+" OR "all" or "odd" or "even". Examples: "A", "B", "A+B", "A+B+C", "all" Default: "all" Sets the surface pattern of the iso-surface 3-D sections. The default pattern of the surface is `all` meaning that the rest of surface elements would be shaded. The check options (either 1 or 2) could be used to draw half of the squares on the surface. Using various combinations of capital `A`, `B`, `C`, `D` and `E` may also be used to reduce the number of triangles on the iso-surfaces and creating other patterns of interest.    show  Parent: data[type=volume].surface  Type: boolean Default: true Hides/displays surfaces between minimum and maximum iso-values.      uirevision  Parent: data[type=volume]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      isosurface traces

      










 A isosurface trace is an object with the key "type" equal to "isosurface" (i.e. {"type": "isosurface"}) and any of the keys listed below. Draws isosurfaces between iso-min and iso-max values with coordinates given by four 1-dimensional arrays containing the `value`, `x`, `y` and `z` of every vertex of a uniform or non-uniform 3-D grid. Horizontal or vertical slices, caps as well as spaceframe between iso-min and iso-max values could also be drawn using this trace. 














   type  Parent: data[type=isosurface]  Type: "isosurface"    name  Parent: data[type=isosurface]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=isosurface]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=isosurface]  Type: boolean Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=isosurface]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=isosurface]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=isosurface]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=isosurface] Type: object containing one or more of the keys listed below.    font  Parent: data[type=isosurface].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=isosurface].legendgrouptitle.font  Type: color    family  Parent: data[type=isosurface].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=isosurface].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=isosurface].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=isosurface].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=isosurface].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=isosurface].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=isosurface].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=isosurface].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=isosurface].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=isosurface]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=isosurface]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.    ids  Parent: data[type=isosurface]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    x  Parent: data[type=isosurface]  Type: data array Sets the X coordinates of the vertices on X axis.    y  Parent: data[type=isosurface]  Type: data array Sets the Y coordinates of the vertices on Y axis.    z  Parent: data[type=isosurface]  Type: data array Sets the Z coordinates of the vertices on Z axis.    value  Parent: data[type=isosurface]  Type: data array Sets the 4th dimension (value) of the vertices.    text  Parent: data[type=isosurface]  Type: string or array of strings Default: "" Sets the text elements associated with the vertices. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    hovertext  Parent: data[type=isosurface]  Type: string or array of strings Default: "" Same as `text`.    hoverinfo  Parent: data[type=isosurface]  Type: flaglist string. Any combination of "x", "y", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=isosurface]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    xhoverformat  Parent: data[type=isosurface]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=isosurface]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    valuehoverformat  Parent: data[type=isosurface]  Type: string Default: "" Sets the hover text formatting rulefor `value` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.    meta  Parent: data[type=isosurface]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=isosurface]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    scene  Parent: data[type=isosurface]  Type: subplotid Default: scene Sets a reference between this trace's 3D coordinate system and a 3D scene. If "scene" (the default value), the (x,y,z) coordinates refer to `layout.scene`. If "scene2", the (x,y,z) coordinates refer to `layout.scene2`, and so on.    coloraxis  Parent: data[type=isosurface]  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=isosurface] Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=isosurface].colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=isosurface].colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=isosurface].colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=isosurface].colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=isosurface].colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=isosurface].colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=isosurface].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=isosurface].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=isosurface].colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=isosurface].colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=isosurface].colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=isosurface].colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=isosurface].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=isosurface].colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=isosurface].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=isosurface].colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=isosurface].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=isosurface].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=isosurface].colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=isosurface].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=isosurface].colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=isosurface].colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=isosurface].colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=isosurface].colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=isosurface].colorbar.tickfont  Type: color    family  Parent: data[type=isosurface].colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=isosurface].colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=isosurface].colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=isosurface].colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=isosurface].colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=isosurface].colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=isosurface].colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=isosurface].colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=isosurface].colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=isosurface].colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=isosurface].colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=isosurface].colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=isosurface].colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=isosurface].colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=isosurface].colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=isosurface].colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=isosurface].colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=isosurface].colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=isosurface].colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=isosurface].colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=isosurface].colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=isosurface].colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=isosurface].colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=isosurface].colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=isosurface].colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=isosurface].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=isosurface].colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=isosurface].colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=isosurface].colorbar.title.font  Type: color    family  Parent: data[type=isosurface].colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=isosurface].colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=isosurface].colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=isosurface].colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=isosurface].colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=isosurface].colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=isosurface].colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=isosurface].colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=isosurface].colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=isosurface].colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=isosurface].colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=isosurface].colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=isosurface].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=isosurface].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=isosurface].colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=isosurface].colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=isosurface].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=isosurface].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      autocolorscale  Parent: data[type=isosurface]  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    colorscale  Parent: data[type=isosurface]  Type: colorscale Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    showscale  Parent: data[type=isosurface]  Type: boolean Default: true Determines whether or not a colorbar is displayed for this trace.    reversescale  Parent: data[type=isosurface]  Type: boolean Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.    zhoverformat  Parent: data[type=isosurface]  Type: string Default: "" Sets the hover text formatting rulefor `z` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `zaxis.hoverformat`.    cauto  Parent: data[type=isosurface]  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here `value`) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.    cmax  Parent: data[type=isosurface]  Type: number Sets the upper bound of the color domain. Value should have the same units as `value` and if set, `cmin` must be set as well.    cmid  Parent: data[type=isosurface]  Type: number Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `value`. Has no effect when `cauto` is `false`.    cmin  Parent: data[type=isosurface]  Type: number Sets the lower bound of the color domain. Value should have the same units as `value` and if set, `cmax` must be set as well.    caps  Parent: data[type=isosurface] Type: object containing one or more of the keys listed below.    x  Parent: data[type=isosurface].caps Type: object containing one or more of the keys listed below.    fill  Parent: data[type=isosurface].caps.x  Type: number between or equal to 0 and 1 Default: 1 Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.    show  Parent: data[type=isosurface].caps.x  Type: boolean Default: true Sets the fill ratio of the `slices`. The default fill value of the x `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.      y  Parent: data[type=isosurface].caps Type: object containing one or more of the keys listed below.    fill  Parent: data[type=isosurface].caps.y  Type: number between or equal to 0 and 1 Default: 1 Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.    show  Parent: data[type=isosurface].caps.y  Type: boolean Default: true Sets the fill ratio of the `slices`. The default fill value of the y `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.      z  Parent: data[type=isosurface].caps Type: object containing one or more of the keys listed below.    fill  Parent: data[type=isosurface].caps.z  Type: number between or equal to 0 and 1 Default: 1 Sets the fill ratio of the `caps`. The default fill value of the `caps` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.    show  Parent: data[type=isosurface].caps.z  Type: boolean Default: true Sets the fill ratio of the `slices`. The default fill value of the z `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.        contour  Parent: data[type=isosurface] Type: object containing one or more of the keys listed below.    color  Parent: data[type=isosurface].contour  Type: color Default: "#444" Sets the color of the contour lines.    show  Parent: data[type=isosurface].contour  Type: boolean Sets whether or not dynamic contours are shown on hover    width  Parent: data[type=isosurface].contour  Type: number between or equal to 1 and 16 Default: 2 Sets the width of the contour lines.      flatshading  Parent: data[type=isosurface]  Type: boolean Default: true Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.    hoverlabel  Parent: data[type=isosurface] Type: object containing one or more of the keys listed below.    align  Parent: data[type=isosurface].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=isosurface].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=isosurface].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=isosurface].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=isosurface].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=isosurface].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=isosurface].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=isosurface].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=isosurface].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=isosurface].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=isosurface].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=isosurface].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=isosurface].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=isosurface].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      isomax  Parent: data[type=isosurface]  Type: number Sets the maximum boundary for iso-surface plot.    isomin  Parent: data[type=isosurface]  Type: number Sets the minimum boundary for iso-surface plot.    lighting  Parent: data[type=isosurface] Type: object containing one or more of the keys listed below.    ambient  Parent: data[type=isosurface].lighting  Type: number between or equal to 0 and 1 Default: 0.8 Ambient light increases overall color visibility but can wash out the image.    diffuse  Parent: data[type=isosurface].lighting  Type: number between or equal to 0 and 1 Default: 0.8 Represents the extent that incident rays are reflected in a range of angles.    facenormalsepsilon  Parent: data[type=isosurface].lighting  Type: number between or equal to 0 and 1 Default: 0 Epsilon for face normals calculation avoids math issues arising from degenerate geometry.    fresnel  Parent: data[type=isosurface].lighting  Type: number between or equal to 0 and 5 Default: 0.2 Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.    roughness  Parent: data[type=isosurface].lighting  Type: number between or equal to 0 and 1 Default: 0.5 Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.    specular  Parent: data[type=isosurface].lighting  Type: number between or equal to 0 and 2 Default: 0.05 Represents the level that incident rays are reflected in a single direction, causing shine.    vertexnormalsepsilon  Parent: data[type=isosurface].lighting  Type: number between or equal to 0 and 1 Default: 1e-12 Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.      lightposition  Parent: data[type=isosurface] Type: object containing one or more of the keys listed below.    x  Parent: data[type=isosurface].lightposition  Type: number between or equal to -100000 and 100000 Default: 100000 Numeric vector, representing the X coordinate for each vertex.    y  Parent: data[type=isosurface].lightposition  Type: number between or equal to -100000 and 100000 Default: 100000 Numeric vector, representing the Y coordinate for each vertex.    z  Parent: data[type=isosurface].lightposition  Type: number between or equal to -100000 and 100000 Default: 0 Numeric vector, representing the Z coordinate for each vertex.      slices  Parent: data[type=isosurface] Type: object containing one or more of the keys listed below.    x  Parent: data[type=isosurface].slices Type: object containing one or more of the keys listed below.    fill  Parent: data[type=isosurface].slices.x  Type: number between or equal to 0 and 1 Default: 1 Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.    locations  Parent: data[type=isosurface].slices.x  Type: data array Default:  Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis x except start and end.    show  Parent: data[type=isosurface].slices.x  Type: boolean Determines whether or not slice planes about the x dimension are drawn.      y  Parent: data[type=isosurface].slices Type: object containing one or more of the keys listed below.    fill  Parent: data[type=isosurface].slices.y  Type: number between or equal to 0 and 1 Default: 1 Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.    locations  Parent: data[type=isosurface].slices.y  Type: data array Default:  Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis y except start and end.    show  Parent: data[type=isosurface].slices.y  Type: boolean Determines whether or not slice planes about the y dimension are drawn.      z  Parent: data[type=isosurface].slices Type: object containing one or more of the keys listed below.    fill  Parent: data[type=isosurface].slices.z  Type: number between or equal to 0 and 1 Default: 1 Sets the fill ratio of the `slices`. The default fill value of the `slices` is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.    locations  Parent: data[type=isosurface].slices.z  Type: data array Default:  Specifies the location(s) of slices on the axis. When not specified slices would be created for all points of the axis z except start and end.    show  Parent: data[type=isosurface].slices.z  Type: boolean Determines whether or not slice planes about the z dimension are drawn.        spaceframe  Parent: data[type=isosurface] Type: object containing one or more of the keys listed below.    fill  Parent: data[type=isosurface].spaceframe  Type: number between or equal to 0 and 1 Default: 0.15 Sets the fill ratio of the `spaceframe` elements. The default fill value is 0.15 meaning that only 15% of the area of every faces of tetras would be shaded. Applying a greater `fill` ratio would allow the creation of stronger elements or could be sued to have entirely closed areas (in case of using 1).    show  Parent: data[type=isosurface].spaceframe  Type: boolean Displays/hides tetrahedron shapes between minimum and maximum iso-values. Often useful when either caps or surfaces are disabled or filled with values less than 1.      surface  Parent: data[type=isosurface] Type: object containing one or more of the keys listed below.    count  Parent: data[type=isosurface].surface  Type: integer greater than or equal to 1 Default: 2 Sets the number of iso-surfaces between minimum and maximum iso-values. By default this value is 2 meaning that only minimum and maximum surfaces would be drawn.    fill  Parent: data[type=isosurface].surface  Type: number between or equal to 0 and 1 Default: 1 Sets the fill ratio of the iso-surface. The default fill value of the surface is 1 meaning that they are entirely shaded. On the other hand Applying a `fill` ratio less than one would allow the creation of openings parallel to the edges.    pattern  Parent: data[type=isosurface].surface  Type: flaglist string. Any combination of "A", "B", "C", "D", "E" joined with a "+" OR "all" or "odd" or "even". Examples: "A", "B", "A+B", "A+B+C", "all" Default: "all" Sets the surface pattern of the iso-surface 3-D sections. The default pattern of the surface is `all` meaning that the rest of surface elements would be shaded. The check options (either 1 or 2) could be used to draw half of the squares on the surface. Using various combinations of capital `A`, `B`, `C`, `D` and `E` may also be used to reduce the number of triangles on the iso-surfaces and creating other patterns of interest.    show  Parent: data[type=isosurface].surface  Type: boolean Default: true Hides/displays surfaces between minimum and maximum iso-values.      uirevision  Parent: data[type=isosurface]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      scattergeo traces

      










 A scattergeo trace is an object with the key "type" equal to "scattergeo" (i.e. {"type": "scattergeo"}) and any of the keys listed below. The data visualized as scatter point or lines on a geographic map is provided either by longitude/latitude pairs in `lon` and `lat` respectively or by geographic location IDs or names in `locations`. 














   type  Parent: data[type=scattergeo]  Type: "scattergeo"    name  Parent: data[type=scattergeo]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=scattergeo]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=scattergeo]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=scattergeo]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=scattergeo]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=scattergeo]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=scattergeo] Type: object containing one or more of the keys listed below.    font  Parent: data[type=scattergeo].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=scattergeo].legendgrouptitle.font  Type: color    family  Parent: data[type=scattergeo].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattergeo].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattergeo].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattergeo].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=scattergeo].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattergeo].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattergeo].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattergeo].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=scattergeo].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=scattergeo]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=scattergeo]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    mode  Parent: data[type=scattergeo]  Type: flaglist string. Any combination of "lines", "markers", "text" joined with a "+" OR "none". Examples: "lines", "markers", "lines+markers", "lines+markers+text", "none" Default: "markers" Determines the drawing mode for this scatter trace. If the provided `mode` includes "text" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is "lines+markers". Otherwise, "lines".    ids  Parent: data[type=scattergeo]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    lat  Parent: data[type=scattergeo]  Type: data array Sets the latitude coordinates (in degrees North).    geojson  Parent: data[type=scattergeo]  Type: number or categorical coordinate string Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used when `locations` is set. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type "FeatureCollection" or "Feature" with geometries of type "Polygon" or "MultiPolygon".    featureidkey  Parent: data[type=scattergeo]  Type: string Default: "id" Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example "properties.name".    locations  Parent: data[type=scattergeo]  Type: data array Sets the coordinates via location IDs or names. Coordinates correspond to the centroid of each location given. See `locationmode` for more info.    lon  Parent: data[type=scattergeo]  Type: data array Sets the longitude coordinates (in degrees East).    text  Parent: data[type=scattergeo]  Type: string or array of strings Default: "" Sets text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    textposition  Parent: data[type=scattergeo]  Type: enumerated or array of enumerateds , one of ( "top left" | "top center" | "top right" | "middle left" | "middle center" | "middle right" | "bottom left" | "bottom center" | "bottom right" ) Default: "middle center" Sets the positions of the `text` elements with respects to the (x,y) coordinates.    texttemplate  Parent: data[type=scattergeo]  Type: string or array of strings Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `lat`, `lon`, `location` and `text`.    hovertext  Parent: data[type=scattergeo]  Type: string or array of strings Default: "" Sets hover text elements associated with each (lon,lat) pair or item in `locations`. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) or `locations` coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.    hoverinfo  Parent: data[type=scattergeo]  Type: flaglist string. Any combination of "lon", "lat", "location", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "lon", "lat", "lon+lat", "lon+lat+location", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=scattergeo]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    meta  Parent: data[type=scattergeo]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=scattergeo]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    geo  Parent: data[type=scattergeo]  Type: subplotid Default: geo Sets a reference between this trace's geospatial coordinates and a geographic map. If "geo" (the default value), the geospatial coordinates refer to `layout.geo`. If "geo2", the geospatial coordinates refer to `layout.geo2`, and so on.    marker  Parent: data[type=scattergeo] Type: object containing one or more of the keys listed below.    angle  Parent: data[type=scattergeo].marker  Type: angle Default: 0 Sets the marker angle in respect to `angleref`.    angleref  Parent: data[type=scattergeo].marker  Type: enumerated , one of ( "previous" | "up" | "north" ) Default: "up" Sets the reference for marker angle. With "previous", angle 0 points along the line from the previous point to this one. With "up", angle 0 points toward the top of the screen. With "north", angle 0 points north based on the current map projection.    autocolorscale  Parent: data[type=scattergeo].marker  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=scattergeo].marker  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.    cmax  Parent: data[type=scattergeo].marker  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.    cmid  Parent: data[type=scattergeo].marker  Type: number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.    cmin  Parent: data[type=scattergeo].marker  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.    color  Parent: data[type=scattergeo].marker  Type: color or array of colors Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.    coloraxis  Parent: data[type=scattergeo].marker  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=scattergeo].marker Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=scattergeo].marker.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=scattergeo].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=scattergeo].marker.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=scattergeo].marker.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=scattergeo].marker.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=scattergeo].marker.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=scattergeo].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=scattergeo].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=scattergeo].marker.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=scattergeo].marker.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=scattergeo].marker.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=scattergeo].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=scattergeo].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=scattergeo].marker.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=scattergeo].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=scattergeo].marker.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=scattergeo].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=scattergeo].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=scattergeo].marker.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=scattergeo].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=scattergeo].marker.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=scattergeo].marker.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=scattergeo].marker.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=scattergeo].marker.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=scattergeo].marker.colorbar.tickfont  Type: color    family  Parent: data[type=scattergeo].marker.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattergeo].marker.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattergeo].marker.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattergeo].marker.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=scattergeo].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattergeo].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattergeo].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattergeo].marker.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=scattergeo].marker.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=scattergeo].marker.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=scattergeo].marker.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=scattergeo].marker.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=scattergeo].marker.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=scattergeo].marker.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=scattergeo].marker.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=scattergeo].marker.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=scattergeo].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=scattergeo].marker.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=scattergeo].marker.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=scattergeo].marker.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=scattergeo].marker.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=scattergeo].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=scattergeo].marker.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=scattergeo].marker.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=scattergeo].marker.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=scattergeo].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=scattergeo].marker.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=scattergeo].marker.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=scattergeo].marker.colorbar.title.font  Type: color    family  Parent: data[type=scattergeo].marker.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattergeo].marker.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattergeo].marker.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattergeo].marker.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=scattergeo].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattergeo].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattergeo].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattergeo].marker.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=scattergeo].marker.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=scattergeo].marker.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=scattergeo].marker.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=scattergeo].marker.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=scattergeo].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=scattergeo].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=scattergeo].marker.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=scattergeo].marker.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=scattergeo].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=scattergeo].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colorscale  Parent: data[type=scattergeo].marker  Type: colorscale Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    gradient  Parent: data[type=scattergeo].marker Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattergeo].marker.gradient  Type: color or array of colors Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.    type  Parent: data[type=scattergeo].marker.gradient  Type: enumerated or array of enumerateds , one of ( "radial" | "horizontal" | "vertical" | "none" ) Default: "none" Sets the type of gradient used to fill the markers      line  Parent: data[type=scattergeo].marker Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=scattergeo].marker.line  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=scattergeo].marker.line  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.    cmax  Parent: data[type=scattergeo].marker.line  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.    cmid  Parent: data[type=scattergeo].marker.line  Type: number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.    cmin  Parent: data[type=scattergeo].marker.line  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.    color  Parent: data[type=scattergeo].marker.line  Type: color or array of colors Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.    coloraxis  Parent: data[type=scattergeo].marker.line  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorscale  Parent: data[type=scattergeo].marker.line  Type: colorscale Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    reversescale  Parent: data[type=scattergeo].marker.line  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.    width  Parent: data[type=scattergeo].marker.line  Type: number or array of numbers greater than or equal to 0 Sets the width (in px) of the lines bounding the marker points.      opacity  Parent: data[type=scattergeo].marker  Type: number or array of numbers between or equal to 0 and 1 Sets the marker opacity.    reversescale  Parent: data[type=scattergeo].marker  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.    showscale  Parent: data[type=scattergeo].marker  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.    size  Parent: data[type=scattergeo].marker  Type: number or array of numbers greater than or equal to 0 Default: 6 Sets the marker size (in px).    sizemin  Parent: data[type=scattergeo].marker  Type: number greater than or equal to 0 Default: 0 Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.    sizemode  Parent: data[type=scattergeo].marker  Type: enumerated , one of ( "diameter" | "area" ) Default: "diameter" Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.    sizeref  Parent: data[type=scattergeo].marker  Type: number Default: 1 Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.    standoff  Parent: data[type=scattergeo].marker  Type: number or array of numbers greater than or equal to 0 Default: 0 Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.    symbol  Parent: data[type=scattergeo].marker  Type: enumerated or array of enumerateds , one of ( "0" | "0" | "circle" | "100" | "100" | "circle-open" | "200" | "200" | "circle-dot" | "300" | "300" | "circle-open-dot" | "1" | "1" | "square" | "101" | "101" | "square-open" | "201" | "201" | "square-dot" | "301" | "301" | "square-open-dot" | "2" | "2" | "diamond" | "102" | "102" | "diamond-open" | "202" | "202" | "diamond-dot" | "302" | "302" | "diamond-open-dot" | "3" | "3" | "cross" | "103" | "103" | "cross-open" | "203" | "203" | "cross-dot" | "303" | "303" | "cross-open-dot" | "4" | "4" | "x" | "104" | "104" | "x-open" | "204" | "204" | "x-dot" | "304" | "304" | "x-open-dot" | "5" | "5" | "triangle-up" | "105" | "105" | "triangle-up-open" | "205" | "205" | "triangle-up-dot" | "305" | "305" | "triangle-up-open-dot" | "6" | "6" | "triangle-down" | "106" | "106" | "triangle-down-open" | "206" | "206" | "triangle-down-dot" | "306" | "306" | "triangle-down-open-dot" | "7" | "7" | "triangle-left" | "107" | "107" | "triangle-left-open" | "207" | "207" | "triangle-left-dot" | "307" | "307" | "triangle-left-open-dot" | "8" | "8" | "triangle-right" | "108" | "108" | "triangle-right-open" | "208" | "208" | "triangle-right-dot" | "308" | "308" | "triangle-right-open-dot" | "9" | "9" | "triangle-ne" | "109" | "109" | "triangle-ne-open" | "209" | "209" | "triangle-ne-dot" | "309" | "309" | "triangle-ne-open-dot" | "10" | "10" | "triangle-se" | "110" | "110" | "triangle-se-open" | "210" | "210" | "triangle-se-dot" | "310" | "310" | "triangle-se-open-dot" | "11" | "11" | "triangle-sw" | "111" | "111" | "triangle-sw-open" | "211" | "211" | "triangle-sw-dot" | "311" | "311" | "triangle-sw-open-dot" | "12" | "12" | "triangle-nw" | "112" | "112" | "triangle-nw-open" | "212" | "212" | "triangle-nw-dot" | "312" | "312" | "triangle-nw-open-dot" | "13" | "13" | "pentagon" | "113" | "113" | "pentagon-open" | "213" | "213" | "pentagon-dot" | "313" | "313" | "pentagon-open-dot" | "14" | "14" | "hexagon" | "114" | "114" | "hexagon-open" | "214" | "214" | "hexagon-dot" | "314" | "314" | "hexagon-open-dot" | "15" | "15" | "hexagon2" | "115" | "115" | "hexagon2-open" | "215" | "215" | "hexagon2-dot" | "315" | "315" | "hexagon2-open-dot" | "16" | "16" | "octagon" | "116" | "116" | "octagon-open" | "216" | "216" | "octagon-dot" | "316" | "316" | "octagon-open-dot" | "17" | "17" | "star" | "117" | "117" | "star-open" | "217" | "217" | "star-dot" | "317" | "317" | "star-open-dot" | "18" | "18" | "hexagram" | "118" | "118" | "hexagram-open" | "218" | "218" | "hexagram-dot" | "318" | "318" | "hexagram-open-dot" | "19" | "19" | "star-triangle-up" | "119" | "119" | "star-triangle-up-open" | "219" | "219" | "star-triangle-up-dot" | "319" | "319" | "star-triangle-up-open-dot" | "20" | "20" | "star-triangle-down" | "120" | "120" | "star-triangle-down-open" | "220" | "220" | "star-triangle-down-dot" | "320" | "320" | "star-triangle-down-open-dot" | "21" | "21" | "star-square" | "121" | "121" | "star-square-open" | "221" | "221" | "star-square-dot" | "321" | "321" | "star-square-open-dot" | "22" | "22" | "star-diamond" | "122" | "122" | "star-diamond-open" | "222" | "222" | "star-diamond-dot" | "322" | "322" | "star-diamond-open-dot" | "23" | "23" | "diamond-tall" | "123" | "123" | "diamond-tall-open" | "223" | "223" | "diamond-tall-dot" | "323" | "323" | "diamond-tall-open-dot" | "24" | "24" | "diamond-wide" | "124" | "124" | "diamond-wide-open" | "224" | "224" | "diamond-wide-dot" | "324" | "324" | "diamond-wide-open-dot" | "25" | "25" | "hourglass" | "125" | "125" | "hourglass-open" | "26" | "26" | "bowtie" | "126" | "126" | "bowtie-open" | "27" | "27" | "circle-cross" | "127" | "127" | "circle-cross-open" | "28" | "28" | "circle-x" | "128" | "128" | "circle-x-open" | "29" | "29" | "square-cross" | "129" | "129" | "square-cross-open" | "30" | "30" | "square-x" | "130" | "130" | "square-x-open" | "31" | "31" | "diamond-cross" | "131" | "131" | "diamond-cross-open" | "32" | "32" | "diamond-x" | "132" | "132" | "diamond-x-open" | "33" | "33" | "cross-thin" | "133" | "133" | "cross-thin-open" | "34" | "34" | "x-thin" | "134" | "134" | "x-thin-open" | "35" | "35" | "asterisk" | "135" | "135" | "asterisk-open" | "36" | "36" | "hash" | "136" | "136" | "hash-open" | "236" | "236" | "hash-dot" | "336" | "336" | "hash-open-dot" | "37" | "37" | "y-up" | "137" | "137" | "y-up-open" | "38" | "38" | "y-down" | "138" | "138" | "y-down-open" | "39" | "39" | "y-left" | "139" | "139" | "y-left-open" | "40" | "40" | "y-right" | "140" | "140" | "y-right-open" | "41" | "41" | "line-ew" | "141" | "141" | "line-ew-open" | "42" | "42" | "line-ns" | "142" | "142" | "line-ns-open" | "43" | "43" | "line-ne" | "143" | "143" | "line-ne-open" | "44" | "44" | "line-nw" | "144" | "144" | "line-nw-open" | "45" | "45" | "arrow-up" | "145" | "145" | "arrow-up-open" | "46" | "46" | "arrow-down" | "146" | "146" | "arrow-down-open" | "47" | "47" | "arrow-left" | "147" | "147" | "arrow-left-open" | "48" | "48" | "arrow-right" | "148" | "148" | "arrow-right-open" | "49" | "49" | "arrow-bar-up" | "149" | "149" | "arrow-bar-up-open" | "50" | "50" | "arrow-bar-down" | "150" | "150" | "arrow-bar-down-open" | "51" | "51" | "arrow-bar-left" | "151" | "151" | "arrow-bar-left-open" | "52" | "52" | "arrow-bar-right" | "152" | "152" | "arrow-bar-right-open" | "53" | "53" | "arrow" | "153" | "153" | "arrow-open" | "54" | "54" | "arrow-wide" | "154" | "154" | "arrow-wide-open" ) Default: "circle" Sets the marker symbol type. Adding 100 is equivalent to appending "-open" to a symbol name. Adding 200 is equivalent to appending "-dot" to a symbol name. Adding 300 is equivalent to appending "-open-dot" or "dot-open" to a symbol name.      line  Parent: data[type=scattergeo] Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattergeo].line  Type: color Sets the line color.    dash  Parent: data[type=scattergeo].line  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    width  Parent: data[type=scattergeo].line  Type: number greater than or equal to 0 Default: 2 Sets the line width (in px).      textfont  Parent: data[type=scattergeo] Type: object containing one or more of the keys listed below. Sets the text font.    color  Parent: data[type=scattergeo].textfont  Type: color or array of colors    family  Parent: data[type=scattergeo].textfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattergeo].textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattergeo].textfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattergeo].textfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=scattergeo].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattergeo].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattergeo].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattergeo].textfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      selectedpoints  Parent: data[type=scattergeo]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    selected  Parent: data[type=scattergeo] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=scattergeo].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattergeo].selected.marker  Type: color Sets the marker color of selected points.    opacity  Parent: data[type=scattergeo].selected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of selected points.    size  Parent: data[type=scattergeo].selected.marker  Type: number greater than or equal to 0 Sets the marker size of selected points.      textfont  Parent: data[type=scattergeo].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattergeo].selected.textfont  Type: color Sets the text font color of selected points.        unselected  Parent: data[type=scattergeo] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=scattergeo].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattergeo].unselected.marker  Type: color Sets the marker color of unselected points, applied only when a selection exists.    opacity  Parent: data[type=scattergeo].unselected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of unselected points, applied only when a selection exists.    size  Parent: data[type=scattergeo].unselected.marker  Type: number greater than or equal to 0 Sets the marker size of unselected points, applied only when a selection exists.      textfont  Parent: data[type=scattergeo].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattergeo].unselected.textfont  Type: color Sets the text font color of unselected points, applied only when a selection exists.        connectgaps  Parent: data[type=scattergeo]  Type: boolean Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.    fill  Parent: data[type=scattergeo]  Type: enumerated , one of ( "none" | "toself" ) Default: "none" Sets the area to fill with a solid color. Use with `fillcolor` if not "none". "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.    fillcolor  Parent: data[type=scattergeo]  Type: color Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.    hoverlabel  Parent: data[type=scattergeo] Type: object containing one or more of the keys listed below.    align  Parent: data[type=scattergeo].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=scattergeo].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=scattergeo].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=scattergeo].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=scattergeo].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=scattergeo].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattergeo].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattergeo].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattergeo].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=scattergeo].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattergeo].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattergeo].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattergeo].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=scattergeo].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      locationmode  Parent: data[type=scattergeo]  Type: enumerated , one of ( "ISO-3" | "USA-states" | "country names" | "geojson-id" ) Default: "ISO-3" Determines the set of locations used to match entries in `locations` to regions on the map. Values "ISO-3", "USA-states", "country names" correspond to features on the base map and value "geojson-id" corresponds to features from a custom GeoJSON linked to the `geojson` attribute.    uirevision  Parent: data[type=scattergeo]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      choropleth traces

      










 A choropleth trace is an object with the key "type" equal to "choropleth" (i.e. {"type": "choropleth"}) and any of the keys listed below. The data that describes the choropleth value-to-color mapping is set in `z`. The geographic locations corresponding to each value in `z` are set in `locations`. 














   type  Parent: data[type=choropleth]  Type: "choropleth"    name  Parent: data[type=choropleth]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=choropleth]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=choropleth]  Type: boolean Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=choropleth]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=choropleth]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=choropleth]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=choropleth] Type: object containing one or more of the keys listed below.    font  Parent: data[type=choropleth].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=choropleth].legendgrouptitle.font  Type: color    family  Parent: data[type=choropleth].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=choropleth].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=choropleth].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=choropleth].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=choropleth].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=choropleth].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=choropleth].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=choropleth].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=choropleth].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=choropleth]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    ids  Parent: data[type=choropleth]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    z  Parent: data[type=choropleth]  Type: data array Sets the color values.    geojson  Parent: data[type=choropleth]  Type: number or categorical coordinate string Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type "FeatureCollection" or "Feature" with geometries of type "Polygon" or "MultiPolygon".    featureidkey  Parent: data[type=choropleth]  Type: string Default: "id" Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example "properties.name".    locations  Parent: data[type=choropleth]  Type: data array Sets the coordinates via location IDs or names. See `locationmode` for more info.    text  Parent: data[type=choropleth]  Type: string or array of strings Default: "" Sets the text elements associated with each location.    hovertext  Parent: data[type=choropleth]  Type: string or array of strings Default: "" Same as `text`.    hoverinfo  Parent: data[type=choropleth]  Type: flaglist string. Any combination of "location", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "location", "z", "location+z", "location+z+text", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=choropleth]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    meta  Parent: data[type=choropleth]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=choropleth]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    geo  Parent: data[type=choropleth]  Type: subplotid Default: geo Sets a reference between this trace's geospatial coordinates and a geographic map. If "geo" (the default value), the geospatial coordinates refer to `layout.geo`. If "geo2", the geospatial coordinates refer to `layout.geo2`, and so on.    coloraxis  Parent: data[type=choropleth]  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    marker  Parent: data[type=choropleth] Type: object containing one or more of the keys listed below.    line  Parent: data[type=choropleth].marker Type: object containing one or more of the keys listed below.    color  Parent: data[type=choropleth].marker.line  Type: color or array of colors Default: "#444" Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.    width  Parent: data[type=choropleth].marker.line  Type: number or array of numbers greater than or equal to 0 Default: 1 Sets the width (in px) of the lines bounding the marker points.      opacity  Parent: data[type=choropleth].marker  Type: number or array of numbers between or equal to 0 and 1 Default: 1 Sets the opacity of the locations.      colorbar  Parent: data[type=choropleth] Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=choropleth].colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=choropleth].colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=choropleth].colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=choropleth].colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=choropleth].colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=choropleth].colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=choropleth].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=choropleth].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=choropleth].colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=choropleth].colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=choropleth].colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=choropleth].colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=choropleth].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=choropleth].colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=choropleth].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=choropleth].colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=choropleth].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=choropleth].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=choropleth].colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=choropleth].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=choropleth].colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=choropleth].colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=choropleth].colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=choropleth].colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=choropleth].colorbar.tickfont  Type: color    family  Parent: data[type=choropleth].colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=choropleth].colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=choropleth].colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=choropleth].colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=choropleth].colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=choropleth].colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=choropleth].colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=choropleth].colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=choropleth].colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=choropleth].colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=choropleth].colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=choropleth].colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=choropleth].colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=choropleth].colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=choropleth].colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=choropleth].colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=choropleth].colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=choropleth].colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=choropleth].colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=choropleth].colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=choropleth].colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=choropleth].colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=choropleth].colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=choropleth].colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=choropleth].colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=choropleth].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=choropleth].colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=choropleth].colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=choropleth].colorbar.title.font  Type: color    family  Parent: data[type=choropleth].colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=choropleth].colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=choropleth].colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=choropleth].colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=choropleth].colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=choropleth].colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=choropleth].colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=choropleth].colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=choropleth].colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=choropleth].colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=choropleth].colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=choropleth].colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=choropleth].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=choropleth].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=choropleth].colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=choropleth].colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=choropleth].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=choropleth].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      autocolorscale  Parent: data[type=choropleth]  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    colorscale  Parent: data[type=choropleth]  Type: colorscale Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    showscale  Parent: data[type=choropleth]  Type: boolean Default: true Determines whether or not a colorbar is displayed for this trace.    reversescale  Parent: data[type=choropleth]  Type: boolean Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.    zauto  Parent: data[type=choropleth]  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.    zmax  Parent: data[type=choropleth]  Type: number Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.    zmid  Parent: data[type=choropleth]  Type: number Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.    zmin  Parent: data[type=choropleth]  Type: number Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.    selectedpoints  Parent: data[type=choropleth]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    selected  Parent: data[type=choropleth] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=choropleth].selected Type: object containing one or more of the keys listed below.    opacity  Parent: data[type=choropleth].selected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of selected points.        unselected  Parent: data[type=choropleth] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=choropleth].unselected Type: object containing one or more of the keys listed below.    opacity  Parent: data[type=choropleth].unselected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of unselected points, applied only when a selection exists.        hoverlabel  Parent: data[type=choropleth] Type: object containing one or more of the keys listed below.    align  Parent: data[type=choropleth].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=choropleth].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=choropleth].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=choropleth].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=choropleth].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=choropleth].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=choropleth].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=choropleth].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=choropleth].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=choropleth].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=choropleth].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=choropleth].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=choropleth].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=choropleth].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      locationmode  Parent: data[type=choropleth]  Type: enumerated , one of ( "ISO-3" | "USA-states" | "country names" | "geojson-id" ) Default: "ISO-3" Determines the set of locations used to match entries in `locations` to regions on the map. Values "ISO-3", "USA-states", "country names" correspond to features on the base map and value "geojson-id" corresponds to features from a custom GeoJSON linked to the `geojson` attribute.    uirevision  Parent: data[type=choropleth]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      scattermap traces

      










 A scattermap trace is an object with the key "type" equal to "scattermap" (i.e. {"type": "scattermap"}) and any of the keys listed below. The data visualized as scatter point, lines or marker symbols on a MapLibre GL geographic map is provided by longitude/latitude pairs in `lon` and `lat`. 














   type  Parent: data[type=scattermap]  Type: "scattermap"    name  Parent: data[type=scattermap]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=scattermap]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=scattermap]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=scattermap]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=scattermap]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=scattermap]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=scattermap] Type: object containing one or more of the keys listed below.    font  Parent: data[type=scattermap].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=scattermap].legendgrouptitle.font  Type: color    family  Parent: data[type=scattermap].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattermap].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattermap].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattermap].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=scattermap].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattermap].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattermap].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattermap].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=scattermap].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=scattermap]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=scattermap]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    mode  Parent: data[type=scattermap]  Type: flaglist string. Any combination of "lines", "markers", "text" joined with a "+" OR "none". Examples: "lines", "markers", "lines+markers", "lines+markers+text", "none" Default: "markers" Determines the drawing mode for this scatter trace. If the provided `mode` includes "text" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover.    ids  Parent: data[type=scattermap]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    lat  Parent: data[type=scattermap]  Type: data array Sets the latitude coordinates (in degrees North).    lon  Parent: data[type=scattermap]  Type: data array Sets the longitude coordinates (in degrees East).    cluster  Parent: data[type=scattermap] Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattermap].cluster  Type: color or array of colors Sets the color for each cluster step.    enabled  Parent: data[type=scattermap].cluster  Type: boolean Determines whether clustering is enabled or disabled.    maxzoom  Parent: data[type=scattermap].cluster  Type: number between or equal to 0 and 24 Default: 24 Sets the maximum zoom level. At zoom levels equal to or greater than this, points will never be clustered.    opacity  Parent: data[type=scattermap].cluster  Type: number or array of numbers between or equal to 0 and 1 Default: 1 Sets the marker opacity.    size  Parent: data[type=scattermap].cluster  Type: number or array of numbers greater than or equal to 0 Default: 20 Sets the size for each cluster step.    step  Parent: data[type=scattermap].cluster  Type: number or array of numbers greater than or equal to -1 Default: -1 Sets how many points it takes to create a cluster or advance to the next cluster step. Use this in conjunction with arrays for `size` and / or `color`. If an integer, steps start at multiples of this number. If an array, each step extends from the given value until one less than the next value.      text  Parent: data[type=scattermap]  Type: string or array of strings Default: "" Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    textposition  Parent: data[type=scattermap]  Type: enumerated , one of ( "top left" | "top center" | "top right" | "middle left" | "middle center" | "middle right" | "bottom left" | "bottom center" | "bottom right" ) Default: "middle center" Sets the positions of the `text` elements with respects to the (x,y) coordinates.    texttemplate  Parent: data[type=scattermap]  Type: string or array of strings Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `lat`, `lon` and `text`.    hovertext  Parent: data[type=scattermap]  Type: string or array of strings Default: "" Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.    hoverinfo  Parent: data[type=scattermap]  Type: flaglist string. Any combination of "lon", "lat", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "lon", "lat", "lon+lat", "lon+lat+text", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=scattermap]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    meta  Parent: data[type=scattermap]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=scattermap]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    subplot  Parent: data[type=scattermap]  Type: subplotid Default: map Sets a reference between this trace's data coordinates and a map subplot. If "map" (the default value), the data refer to `layout.map`. If "map2", the data refer to `layout.map2`, and so on.    marker  Parent: data[type=scattermap] Type: object containing one or more of the keys listed below.    allowoverlap  Parent: data[type=scattermap].marker  Type: boolean Flag to draw all symbols, even if they overlap.    angle  Parent: data[type=scattermap].marker  Type: number or array of numbers Default: "auto" Sets the marker orientation from true North, in degrees clockwise. When using the "auto" default, no rotation would be applied in perspective views which is different from using a zero angle.    autocolorscale  Parent: data[type=scattermap].marker  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=scattermap].marker  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.    cmax  Parent: data[type=scattermap].marker  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.    cmid  Parent: data[type=scattermap].marker  Type: number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.    cmin  Parent: data[type=scattermap].marker  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.    color  Parent: data[type=scattermap].marker  Type: color or array of colors Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.    coloraxis  Parent: data[type=scattermap].marker  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=scattermap].marker Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=scattermap].marker.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=scattermap].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=scattermap].marker.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=scattermap].marker.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=scattermap].marker.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=scattermap].marker.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=scattermap].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=scattermap].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=scattermap].marker.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=scattermap].marker.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=scattermap].marker.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=scattermap].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=scattermap].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=scattermap].marker.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=scattermap].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=scattermap].marker.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=scattermap].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=scattermap].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=scattermap].marker.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=scattermap].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=scattermap].marker.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=scattermap].marker.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=scattermap].marker.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=scattermap].marker.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=scattermap].marker.colorbar.tickfont  Type: color    family  Parent: data[type=scattermap].marker.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattermap].marker.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattermap].marker.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattermap].marker.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=scattermap].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattermap].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattermap].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattermap].marker.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=scattermap].marker.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=scattermap].marker.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=scattermap].marker.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=scattermap].marker.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=scattermap].marker.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=scattermap].marker.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=scattermap].marker.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=scattermap].marker.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=scattermap].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=scattermap].marker.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=scattermap].marker.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=scattermap].marker.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=scattermap].marker.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=scattermap].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=scattermap].marker.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=scattermap].marker.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=scattermap].marker.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=scattermap].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=scattermap].marker.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=scattermap].marker.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=scattermap].marker.colorbar.title.font  Type: color    family  Parent: data[type=scattermap].marker.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattermap].marker.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattermap].marker.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattermap].marker.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=scattermap].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattermap].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattermap].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattermap].marker.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=scattermap].marker.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=scattermap].marker.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=scattermap].marker.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=scattermap].marker.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=scattermap].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=scattermap].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=scattermap].marker.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=scattermap].marker.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=scattermap].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=scattermap].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colorscale  Parent: data[type=scattermap].marker  Type: colorscale Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    opacity  Parent: data[type=scattermap].marker  Type: number or array of numbers between or equal to 0 and 1 Sets the marker opacity.    reversescale  Parent: data[type=scattermap].marker  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.    showscale  Parent: data[type=scattermap].marker  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.    size  Parent: data[type=scattermap].marker  Type: number or array of numbers greater than or equal to 0 Default: 6 Sets the marker size (in px).    sizemin  Parent: data[type=scattermap].marker  Type: number greater than or equal to 0 Default: 0 Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.    sizemode  Parent: data[type=scattermap].marker  Type: enumerated , one of ( "diameter" | "area" ) Default: "diameter" Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.    sizeref  Parent: data[type=scattermap].marker  Type: number Default: 1 Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.    symbol  Parent: data[type=scattermap].marker  Type: string or array of strings Default: "circle" Sets the marker symbol. Full list: https://www.map.com/maki-icons/ Note that the array `marker.color` and `marker.size` are only available for "circle" symbols.      line  Parent: data[type=scattermap] Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattermap].line  Type: color Sets the line color.    width  Parent: data[type=scattermap].line  Type: number greater than or equal to 0 Default: 2 Sets the line width (in px).      textfont  Parent: data[type=scattermap] Type: object containing one or more of the keys listed below. Sets the icon text font (color=map.layer.paint.text-color, size=map.layer.layout.text-size). Has an effect only when `type` is set to "symbol".    color  Parent: data[type=scattermap].textfont  Type: color    family  Parent: data[type=scattermap].textfont  Type: string Default: "Open Sans Regular, Arial Unicode MS Regular" HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    size  Parent: data[type=scattermap].textfont  Type: number greater than or equal to 1    style  Parent: data[type=scattermap].textfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    weight  Parent: data[type=scattermap].textfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      selectedpoints  Parent: data[type=scattermap]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    selected  Parent: data[type=scattermap] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=scattermap].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattermap].selected.marker  Type: color Sets the marker color of selected points.    opacity  Parent: data[type=scattermap].selected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of selected points.    size  Parent: data[type=scattermap].selected.marker  Type: number greater than or equal to 0 Sets the marker size of selected points.        unselected  Parent: data[type=scattermap] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=scattermap].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattermap].unselected.marker  Type: color Sets the marker color of unselected points, applied only when a selection exists.    opacity  Parent: data[type=scattermap].unselected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of unselected points, applied only when a selection exists.    size  Parent: data[type=scattermap].unselected.marker  Type: number greater than or equal to 0 Sets the marker size of unselected points, applied only when a selection exists.        below  Parent: data[type=scattermap]  Type: string Determines if this scattermap trace's layers are to be inserted before the layer with the specified ID. By default, scattermap layers are inserted above all the base layers. To place the scattermap layers above every other layer, set `below` to "''".    connectgaps  Parent: data[type=scattermap]  Type: boolean Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.    fill  Parent: data[type=scattermap]  Type: enumerated , one of ( "none" | "toself" ) Default: "none" Sets the area to fill with a solid color. Use with `fillcolor` if not "none". "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.    fillcolor  Parent: data[type=scattermap]  Type: color Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.    hoverlabel  Parent: data[type=scattermap] Type: object containing one or more of the keys listed below.    align  Parent: data[type=scattermap].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=scattermap].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=scattermap].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=scattermap].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=scattermap].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=scattermap].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattermap].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattermap].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattermap].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=scattermap].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattermap].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattermap].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattermap].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=scattermap].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      uirevision  Parent: data[type=scattermap]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      scattermapbox traces

      










 A scattermapbox trace is an object with the key "type" equal to "scattermapbox" (i.e. {"type": "scattermapbox"}) and any of the keys listed below. "scattermapbox" trace is deprecated! Please consider switching to the "scattermap" trace type and `map` subplots. Learn more at: https://plotly.com/python/maplibre-migration/ as well as https://plotly.com/javascript/maplibre-migration/ The data visualized as scatter point, lines or marker symbols on a Mapbox GL geographic map is provided by longitude/latitude pairs in `lon` and `lat`. 














   type  Parent: data[type=scattermapbox]  Type: "scattermapbox"    name  Parent: data[type=scattermapbox]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=scattermapbox]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=scattermapbox]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=scattermapbox]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=scattermapbox]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=scattermapbox]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=scattermapbox] Type: object containing one or more of the keys listed below.    font  Parent: data[type=scattermapbox].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=scattermapbox].legendgrouptitle.font  Type: color    family  Parent: data[type=scattermapbox].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattermapbox].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattermapbox].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattermapbox].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=scattermapbox].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattermapbox].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattermapbox].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattermapbox].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=scattermapbox].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=scattermapbox]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=scattermapbox]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    mode  Parent: data[type=scattermapbox]  Type: flaglist string. Any combination of "lines", "markers", "text" joined with a "+" OR "none". Examples: "lines", "markers", "lines+markers", "lines+markers+text", "none" Default: "markers" Determines the drawing mode for this scatter trace. If the provided `mode` includes "text" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover.    ids  Parent: data[type=scattermapbox]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    lat  Parent: data[type=scattermapbox]  Type: data array Sets the latitude coordinates (in degrees North).    lon  Parent: data[type=scattermapbox]  Type: data array Sets the longitude coordinates (in degrees East).    cluster  Parent: data[type=scattermapbox] Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattermapbox].cluster  Type: color or array of colors Sets the color for each cluster step.    enabled  Parent: data[type=scattermapbox].cluster  Type: boolean Determines whether clustering is enabled or disabled.    maxzoom  Parent: data[type=scattermapbox].cluster  Type: number between or equal to 0 and 24 Default: 24 Sets the maximum zoom level. At zoom levels equal to or greater than this, points will never be clustered.    opacity  Parent: data[type=scattermapbox].cluster  Type: number or array of numbers between or equal to 0 and 1 Default: 1 Sets the marker opacity.    size  Parent: data[type=scattermapbox].cluster  Type: number or array of numbers greater than or equal to 0 Default: 20 Sets the size for each cluster step.    step  Parent: data[type=scattermapbox].cluster  Type: number or array of numbers greater than or equal to -1 Default: -1 Sets how many points it takes to create a cluster or advance to the next cluster step. Use this in conjunction with arrays for `size` and / or `color`. If an integer, steps start at multiples of this number. If an array, each step extends from the given value until one less than the next value.      text  Parent: data[type=scattermapbox]  Type: string or array of strings Default: "" Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    textposition  Parent: data[type=scattermapbox]  Type: enumerated , one of ( "top left" | "top center" | "top right" | "middle left" | "middle center" | "middle right" | "bottom left" | "bottom center" | "bottom right" ) Default: "middle center" Sets the positions of the `text` elements with respects to the (x,y) coordinates.    texttemplate  Parent: data[type=scattermapbox]  Type: string or array of strings Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `lat`, `lon` and `text`.    hovertext  Parent: data[type=scattermapbox]  Type: string or array of strings Default: "" Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.    hoverinfo  Parent: data[type=scattermapbox]  Type: flaglist string. Any combination of "lon", "lat", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "lon", "lat", "lon+lat", "lon+lat+text", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=scattermapbox]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    meta  Parent: data[type=scattermapbox]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=scattermapbox]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    subplot  Parent: data[type=scattermapbox]  Type: subplotid Default: mapbox mapbox subplots and traces are deprecated! Please consider switching to `map` subplots and traces. Learn more at: https://plotly.com/python/maplibre-migration/ as well as https://plotly.com/javascript/maplibre-migration/ Sets a reference between this trace's data coordinates and a mapbox subplot. If "mapbox" (the default value), the data refer to `layout.mapbox`. If "mapbox2", the data refer to `layout.mapbox2`, and so on.    marker  Parent: data[type=scattermapbox] Type: object containing one or more of the keys listed below.    allowoverlap  Parent: data[type=scattermapbox].marker  Type: boolean Flag to draw all symbols, even if they overlap.    angle  Parent: data[type=scattermapbox].marker  Type: number or array of numbers Default: "auto" Sets the marker orientation from true North, in degrees clockwise. When using the "auto" default, no rotation would be applied in perspective views which is different from using a zero angle.    autocolorscale  Parent: data[type=scattermapbox].marker  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=scattermapbox].marker  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.    cmax  Parent: data[type=scattermapbox].marker  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.    cmid  Parent: data[type=scattermapbox].marker  Type: number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.    cmin  Parent: data[type=scattermapbox].marker  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.    color  Parent: data[type=scattermapbox].marker  Type: color or array of colors Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.    coloraxis  Parent: data[type=scattermapbox].marker  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=scattermapbox].marker Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=scattermapbox].marker.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=scattermapbox].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=scattermapbox].marker.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=scattermapbox].marker.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=scattermapbox].marker.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=scattermapbox].marker.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=scattermapbox].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=scattermapbox].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=scattermapbox].marker.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=scattermapbox].marker.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=scattermapbox].marker.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=scattermapbox].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=scattermapbox].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=scattermapbox].marker.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=scattermapbox].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=scattermapbox].marker.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=scattermapbox].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=scattermapbox].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=scattermapbox].marker.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=scattermapbox].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=scattermapbox].marker.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=scattermapbox].marker.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=scattermapbox].marker.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=scattermapbox].marker.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=scattermapbox].marker.colorbar.tickfont  Type: color    family  Parent: data[type=scattermapbox].marker.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattermapbox].marker.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattermapbox].marker.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattermapbox].marker.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=scattermapbox].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattermapbox].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattermapbox].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattermapbox].marker.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=scattermapbox].marker.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=scattermapbox].marker.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=scattermapbox].marker.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=scattermapbox].marker.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=scattermapbox].marker.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=scattermapbox].marker.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=scattermapbox].marker.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=scattermapbox].marker.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=scattermapbox].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=scattermapbox].marker.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=scattermapbox].marker.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=scattermapbox].marker.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=scattermapbox].marker.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=scattermapbox].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=scattermapbox].marker.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=scattermapbox].marker.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=scattermapbox].marker.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=scattermapbox].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=scattermapbox].marker.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=scattermapbox].marker.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=scattermapbox].marker.colorbar.title.font  Type: color    family  Parent: data[type=scattermapbox].marker.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattermapbox].marker.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattermapbox].marker.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattermapbox].marker.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=scattermapbox].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattermapbox].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattermapbox].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattermapbox].marker.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=scattermapbox].marker.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=scattermapbox].marker.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=scattermapbox].marker.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=scattermapbox].marker.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=scattermapbox].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=scattermapbox].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=scattermapbox].marker.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=scattermapbox].marker.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=scattermapbox].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=scattermapbox].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colorscale  Parent: data[type=scattermapbox].marker  Type: colorscale Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    opacity  Parent: data[type=scattermapbox].marker  Type: number or array of numbers between or equal to 0 and 1 Sets the marker opacity.    reversescale  Parent: data[type=scattermapbox].marker  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.    showscale  Parent: data[type=scattermapbox].marker  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.    size  Parent: data[type=scattermapbox].marker  Type: number or array of numbers greater than or equal to 0 Default: 6 Sets the marker size (in px).    sizemin  Parent: data[type=scattermapbox].marker  Type: number greater than or equal to 0 Default: 0 Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.    sizemode  Parent: data[type=scattermapbox].marker  Type: enumerated , one of ( "diameter" | "area" ) Default: "diameter" Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.    sizeref  Parent: data[type=scattermapbox].marker  Type: number Default: 1 Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.    symbol  Parent: data[type=scattermapbox].marker  Type: string or array of strings Default: "circle" Sets the marker symbol. Full list: https://www.mapbox.com/maki-icons/ Note that the array `marker.color` and `marker.size` are only available for "circle" symbols.      line  Parent: data[type=scattermapbox] Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattermapbox].line  Type: color Sets the line color.    width  Parent: data[type=scattermapbox].line  Type: number greater than or equal to 0 Default: 2 Sets the line width (in px).      textfont  Parent: data[type=scattermapbox] Type: object containing one or more of the keys listed below. Sets the icon text font (color=mapbox.layer.paint.text-color, size=mapbox.layer.layout.text-size). Has an effect only when `type` is set to "symbol".    color  Parent: data[type=scattermapbox].textfont  Type: color    family  Parent: data[type=scattermapbox].textfont  Type: string Default: "Open Sans Regular, Arial Unicode MS Regular" HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    size  Parent: data[type=scattermapbox].textfont  Type: number greater than or equal to 1    style  Parent: data[type=scattermapbox].textfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    weight  Parent: data[type=scattermapbox].textfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      selectedpoints  Parent: data[type=scattermapbox]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    selected  Parent: data[type=scattermapbox] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=scattermapbox].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattermapbox].selected.marker  Type: color Sets the marker color of selected points.    opacity  Parent: data[type=scattermapbox].selected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of selected points.    size  Parent: data[type=scattermapbox].selected.marker  Type: number greater than or equal to 0 Sets the marker size of selected points.        unselected  Parent: data[type=scattermapbox] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=scattermapbox].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattermapbox].unselected.marker  Type: color Sets the marker color of unselected points, applied only when a selection exists.    opacity  Parent: data[type=scattermapbox].unselected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of unselected points, applied only when a selection exists.    size  Parent: data[type=scattermapbox].unselected.marker  Type: number greater than or equal to 0 Sets the marker size of unselected points, applied only when a selection exists.        below  Parent: data[type=scattermapbox]  Type: string Determines if this scattermapbox trace's layers are to be inserted before the layer with the specified ID. By default, scattermapbox layers are inserted above all the base layers. To place the scattermapbox layers above every other layer, set `below` to "''".    connectgaps  Parent: data[type=scattermapbox]  Type: boolean Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.    fill  Parent: data[type=scattermapbox]  Type: enumerated , one of ( "none" | "toself" ) Default: "none" Sets the area to fill with a solid color. Use with `fillcolor` if not "none". "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape.    fillcolor  Parent: data[type=scattermapbox]  Type: color Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.    hoverlabel  Parent: data[type=scattermapbox] Type: object containing one or more of the keys listed below.    align  Parent: data[type=scattermapbox].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=scattermapbox].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=scattermapbox].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=scattermapbox].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=scattermapbox].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=scattermapbox].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattermapbox].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattermapbox].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattermapbox].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=scattermapbox].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattermapbox].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattermapbox].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattermapbox].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=scattermapbox].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      uirevision  Parent: data[type=scattermapbox]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      choroplethmap traces

      










 A choroplethmap trace is an object with the key "type" equal to "choroplethmap" (i.e. {"type": "choroplethmap"}) and any of the keys listed below. GeoJSON features to be filled are set in `geojson` The data that describes the choropleth value-to-color mapping is set in `locations` and `z`. 














   type  Parent: data[type=choroplethmap]  Type: "choroplethmap"    name  Parent: data[type=choroplethmap]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=choroplethmap]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=choroplethmap]  Type: boolean Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=choroplethmap]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=choroplethmap]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=choroplethmap]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=choroplethmap] Type: object containing one or more of the keys listed below.    font  Parent: data[type=choroplethmap].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=choroplethmap].legendgrouptitle.font  Type: color    family  Parent: data[type=choroplethmap].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=choroplethmap].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=choroplethmap].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=choroplethmap].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=choroplethmap].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=choroplethmap].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=choroplethmap].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=choroplethmap].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=choroplethmap].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=choroplethmap]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    ids  Parent: data[type=choroplethmap]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    z  Parent: data[type=choroplethmap]  Type: data array Sets the color values.    geojson  Parent: data[type=choroplethmap]  Type: number or categorical coordinate string Sets the GeoJSON data associated with this trace. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type "FeatureCollection" or "Feature" with geometries of type "Polygon" or "MultiPolygon".    featureidkey  Parent: data[type=choroplethmap]  Type: string Default: "id" Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Support nested property, for example "properties.name".    locations  Parent: data[type=choroplethmap]  Type: data array Sets which features found in "geojson" to plot using their feature `id` field.    text  Parent: data[type=choroplethmap]  Type: string or array of strings Default: "" Sets the text elements associated with each location.    hovertext  Parent: data[type=choroplethmap]  Type: string or array of strings Default: "" Same as `text`.    hoverinfo  Parent: data[type=choroplethmap]  Type: flaglist string. Any combination of "location", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "location", "z", "location+z", "location+z+text", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=choroplethmap]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `properties` Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    meta  Parent: data[type=choroplethmap]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=choroplethmap]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    subplot  Parent: data[type=choroplethmap]  Type: subplotid Default: map Sets a reference between this trace's data coordinates and a map subplot. If "map" (the default value), the data refer to `layout.map`. If "map2", the data refer to `layout.map2`, and so on.    coloraxis  Parent: data[type=choroplethmap]  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    marker  Parent: data[type=choroplethmap] Type: object containing one or more of the keys listed below.    line  Parent: data[type=choroplethmap].marker Type: object containing one or more of the keys listed below.    color  Parent: data[type=choroplethmap].marker.line  Type: color or array of colors Default: "#444" Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.    width  Parent: data[type=choroplethmap].marker.line  Type: number or array of numbers greater than or equal to 0 Default: 1 Sets the width (in px) of the lines bounding the marker points.      opacity  Parent: data[type=choroplethmap].marker  Type: number or array of numbers between or equal to 0 and 1 Default: 1 Sets the opacity of the locations.      colorbar  Parent: data[type=choroplethmap] Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=choroplethmap].colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=choroplethmap].colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=choroplethmap].colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=choroplethmap].colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=choroplethmap].colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=choroplethmap].colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=choroplethmap].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=choroplethmap].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=choroplethmap].colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=choroplethmap].colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=choroplethmap].colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=choroplethmap].colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=choroplethmap].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=choroplethmap].colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=choroplethmap].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=choroplethmap].colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=choroplethmap].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=choroplethmap].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=choroplethmap].colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=choroplethmap].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=choroplethmap].colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=choroplethmap].colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=choroplethmap].colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=choroplethmap].colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=choroplethmap].colorbar.tickfont  Type: color    family  Parent: data[type=choroplethmap].colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=choroplethmap].colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=choroplethmap].colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=choroplethmap].colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=choroplethmap].colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=choroplethmap].colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=choroplethmap].colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=choroplethmap].colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=choroplethmap].colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=choroplethmap].colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=choroplethmap].colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=choroplethmap].colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=choroplethmap].colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=choroplethmap].colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=choroplethmap].colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=choroplethmap].colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=choroplethmap].colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=choroplethmap].colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=choroplethmap].colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=choroplethmap].colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=choroplethmap].colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=choroplethmap].colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=choroplethmap].colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=choroplethmap].colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=choroplethmap].colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=choroplethmap].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=choroplethmap].colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=choroplethmap].colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=choroplethmap].colorbar.title.font  Type: color    family  Parent: data[type=choroplethmap].colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=choroplethmap].colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=choroplethmap].colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=choroplethmap].colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=choroplethmap].colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=choroplethmap].colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=choroplethmap].colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=choroplethmap].colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=choroplethmap].colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=choroplethmap].colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=choroplethmap].colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=choroplethmap].colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=choroplethmap].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=choroplethmap].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=choroplethmap].colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=choroplethmap].colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=choroplethmap].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=choroplethmap].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      autocolorscale  Parent: data[type=choroplethmap]  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    colorscale  Parent: data[type=choroplethmap]  Type: colorscale Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    showscale  Parent: data[type=choroplethmap]  Type: boolean Default: true Determines whether or not a colorbar is displayed for this trace.    reversescale  Parent: data[type=choroplethmap]  Type: boolean Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.    zauto  Parent: data[type=choroplethmap]  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.    zmax  Parent: data[type=choroplethmap]  Type: number Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.    zmid  Parent: data[type=choroplethmap]  Type: number Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.    zmin  Parent: data[type=choroplethmap]  Type: number Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.    selectedpoints  Parent: data[type=choroplethmap]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    selected  Parent: data[type=choroplethmap] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=choroplethmap].selected Type: object containing one or more of the keys listed below.    opacity  Parent: data[type=choroplethmap].selected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of selected points.        unselected  Parent: data[type=choroplethmap] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=choroplethmap].unselected Type: object containing one or more of the keys listed below.    opacity  Parent: data[type=choroplethmap].unselected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of unselected points, applied only when a selection exists.        below  Parent: data[type=choroplethmap]  Type: string Determines if the choropleth polygons will be inserted before the layer with the specified ID. By default, choroplethmap traces are placed above the water layers. If set to '', the layer will be inserted above every existing layer.    hoverlabel  Parent: data[type=choroplethmap] Type: object containing one or more of the keys listed below.    align  Parent: data[type=choroplethmap].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=choroplethmap].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=choroplethmap].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=choroplethmap].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=choroplethmap].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=choroplethmap].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=choroplethmap].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=choroplethmap].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=choroplethmap].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=choroplethmap].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=choroplethmap].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=choroplethmap].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=choroplethmap].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=choroplethmap].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      uirevision  Parent: data[type=choroplethmap]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      choroplethmapbox traces

      










 A choroplethmapbox trace is an object with the key "type" equal to "choroplethmapbox" (i.e. {"type": "choroplethmapbox"}) and any of the keys listed below. "choroplethmapbox" trace is deprecated! Please consider switching to the "choroplethmap" trace type and `map` subplots. Learn more at: https://plotly.com/python/maplibre-migration/ as well as https://plotly.com/javascript/maplibre-migration/ GeoJSON features to be filled are set in `geojson` The data that describes the choropleth value-to-color mapping is set in `locations` and `z`. 














   type  Parent: data[type=choroplethmapbox]  Type: "choroplethmapbox"    name  Parent: data[type=choroplethmapbox]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=choroplethmapbox]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=choroplethmapbox]  Type: boolean Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=choroplethmapbox]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=choroplethmapbox]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=choroplethmapbox]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=choroplethmapbox] Type: object containing one or more of the keys listed below.    font  Parent: data[type=choroplethmapbox].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=choroplethmapbox].legendgrouptitle.font  Type: color    family  Parent: data[type=choroplethmapbox].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=choroplethmapbox].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=choroplethmapbox].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=choroplethmapbox].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=choroplethmapbox].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=choroplethmapbox].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=choroplethmapbox].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=choroplethmapbox].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=choroplethmapbox].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=choroplethmapbox]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    ids  Parent: data[type=choroplethmapbox]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    z  Parent: data[type=choroplethmapbox]  Type: data array Sets the color values.    geojson  Parent: data[type=choroplethmapbox]  Type: number or categorical coordinate string Sets the GeoJSON data associated with this trace. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type "FeatureCollection" or "Feature" with geometries of type "Polygon" or "MultiPolygon".    featureidkey  Parent: data[type=choroplethmapbox]  Type: string Default: "id" Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Support nested property, for example "properties.name".    locations  Parent: data[type=choroplethmapbox]  Type: data array Sets which features found in "geojson" to plot using their feature `id` field.    text  Parent: data[type=choroplethmapbox]  Type: string or array of strings Default: "" Sets the text elements associated with each location.    hovertext  Parent: data[type=choroplethmapbox]  Type: string or array of strings Default: "" Same as `text`.    hoverinfo  Parent: data[type=choroplethmapbox]  Type: flaglist string. Any combination of "location", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "location", "z", "location+z", "location+z+text", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=choroplethmapbox]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `properties` Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    meta  Parent: data[type=choroplethmapbox]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=choroplethmapbox]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    subplot  Parent: data[type=choroplethmapbox]  Type: subplotid Default: mapbox mapbox subplots and traces are deprecated! Please consider switching to `map` subplots and traces. Learn more at: https://plotly.com/python/maplibre-migration/ as well as https://plotly.com/javascript/maplibre-migration/ Sets a reference between this trace's data coordinates and a mapbox subplot. If "mapbox" (the default value), the data refer to `layout.mapbox`. If "mapbox2", the data refer to `layout.mapbox2`, and so on.    coloraxis  Parent: data[type=choroplethmapbox]  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    marker  Parent: data[type=choroplethmapbox] Type: object containing one or more of the keys listed below.    line  Parent: data[type=choroplethmapbox].marker Type: object containing one or more of the keys listed below.    color  Parent: data[type=choroplethmapbox].marker.line  Type: color or array of colors Default: "#444" Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.    width  Parent: data[type=choroplethmapbox].marker.line  Type: number or array of numbers greater than or equal to 0 Default: 1 Sets the width (in px) of the lines bounding the marker points.      opacity  Parent: data[type=choroplethmapbox].marker  Type: number or array of numbers between or equal to 0 and 1 Default: 1 Sets the opacity of the locations.      colorbar  Parent: data[type=choroplethmapbox] Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=choroplethmapbox].colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=choroplethmapbox].colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=choroplethmapbox].colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=choroplethmapbox].colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=choroplethmapbox].colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=choroplethmapbox].colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=choroplethmapbox].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=choroplethmapbox].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=choroplethmapbox].colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=choroplethmapbox].colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=choroplethmapbox].colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=choroplethmapbox].colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=choroplethmapbox].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=choroplethmapbox].colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=choroplethmapbox].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=choroplethmapbox].colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=choroplethmapbox].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=choroplethmapbox].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=choroplethmapbox].colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=choroplethmapbox].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=choroplethmapbox].colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=choroplethmapbox].colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=choroplethmapbox].colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=choroplethmapbox].colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=choroplethmapbox].colorbar.tickfont  Type: color    family  Parent: data[type=choroplethmapbox].colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=choroplethmapbox].colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=choroplethmapbox].colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=choroplethmapbox].colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=choroplethmapbox].colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=choroplethmapbox].colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=choroplethmapbox].colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=choroplethmapbox].colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=choroplethmapbox].colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=choroplethmapbox].colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=choroplethmapbox].colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=choroplethmapbox].colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=choroplethmapbox].colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=choroplethmapbox].colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=choroplethmapbox].colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=choroplethmapbox].colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=choroplethmapbox].colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=choroplethmapbox].colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=choroplethmapbox].colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=choroplethmapbox].colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=choroplethmapbox].colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=choroplethmapbox].colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=choroplethmapbox].colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=choroplethmapbox].colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=choroplethmapbox].colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=choroplethmapbox].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=choroplethmapbox].colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=choroplethmapbox].colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=choroplethmapbox].colorbar.title.font  Type: color    family  Parent: data[type=choroplethmapbox].colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=choroplethmapbox].colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=choroplethmapbox].colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=choroplethmapbox].colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=choroplethmapbox].colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=choroplethmapbox].colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=choroplethmapbox].colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=choroplethmapbox].colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=choroplethmapbox].colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=choroplethmapbox].colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=choroplethmapbox].colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=choroplethmapbox].colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=choroplethmapbox].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=choroplethmapbox].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=choroplethmapbox].colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=choroplethmapbox].colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=choroplethmapbox].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=choroplethmapbox].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      autocolorscale  Parent: data[type=choroplethmapbox]  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    colorscale  Parent: data[type=choroplethmapbox]  Type: colorscale Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    showscale  Parent: data[type=choroplethmapbox]  Type: boolean Default: true Determines whether or not a colorbar is displayed for this trace.    reversescale  Parent: data[type=choroplethmapbox]  Type: boolean Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.    zauto  Parent: data[type=choroplethmapbox]  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.    zmax  Parent: data[type=choroplethmapbox]  Type: number Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.    zmid  Parent: data[type=choroplethmapbox]  Type: number Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.    zmin  Parent: data[type=choroplethmapbox]  Type: number Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.    selectedpoints  Parent: data[type=choroplethmapbox]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    selected  Parent: data[type=choroplethmapbox] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=choroplethmapbox].selected Type: object containing one or more of the keys listed below.    opacity  Parent: data[type=choroplethmapbox].selected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of selected points.        unselected  Parent: data[type=choroplethmapbox] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=choroplethmapbox].unselected Type: object containing one or more of the keys listed below.    opacity  Parent: data[type=choroplethmapbox].unselected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of unselected points, applied only when a selection exists.        below  Parent: data[type=choroplethmapbox]  Type: string Determines if the choropleth polygons will be inserted before the layer with the specified ID. By default, choroplethmapbox traces are placed above the water layers. If set to '', the layer will be inserted above every existing layer.    hoverlabel  Parent: data[type=choroplethmapbox] Type: object containing one or more of the keys listed below.    align  Parent: data[type=choroplethmapbox].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=choroplethmapbox].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=choroplethmapbox].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=choroplethmapbox].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=choroplethmapbox].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=choroplethmapbox].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=choroplethmapbox].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=choroplethmapbox].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=choroplethmapbox].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=choroplethmapbox].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=choroplethmapbox].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=choroplethmapbox].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=choroplethmapbox].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=choroplethmapbox].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      uirevision  Parent: data[type=choroplethmapbox]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      densitymap traces

      










 A densitymap trace is an object with the key "type" equal to "densitymap" (i.e. {"type": "densitymap"}) and any of the keys listed below. Draws a bivariate kernel density estimation with a Gaussian kernel from `lon` and `lat` coordinates and optional `z` values using a colorscale. 














   type  Parent: data[type=densitymap]  Type: "densitymap"    name  Parent: data[type=densitymap]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=densitymap]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=densitymap]  Type: boolean Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=densitymap]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=densitymap]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=densitymap]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=densitymap] Type: object containing one or more of the keys listed below.    font  Parent: data[type=densitymap].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=densitymap].legendgrouptitle.font  Type: color    family  Parent: data[type=densitymap].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=densitymap].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=densitymap].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=densitymap].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=densitymap].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=densitymap].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=densitymap].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=densitymap].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=densitymap].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=densitymap]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=densitymap]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=densitymap]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    z  Parent: data[type=densitymap]  Type: data array Sets the points' weight. For example, a value of 10 would be equivalent to having 10 points of weight 1 in the same spot    radius  Parent: data[type=densitymap]  Type: number or array of numbers greater than or equal to 1 Default: 30 Sets the radius of influence of one `lon` / `lat` point in pixels. Increasing the value makes the densitymap trace smoother, but less detailed.    lat  Parent: data[type=densitymap]  Type: data array Sets the latitude coordinates (in degrees North).    lon  Parent: data[type=densitymap]  Type: data array Sets the longitude coordinates (in degrees East).    text  Parent: data[type=densitymap]  Type: string or array of strings Default: "" Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    hovertext  Parent: data[type=densitymap]  Type: string or array of strings Default: "" Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.    hoverinfo  Parent: data[type=densitymap]  Type: flaglist string. Any combination of "lon", "lat", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "lon", "lat", "lon+lat", "lon+lat+z", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=densitymap]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    meta  Parent: data[type=densitymap]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=densitymap]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    subplot  Parent: data[type=densitymap]  Type: subplotid Default: map Sets a reference between this trace's data coordinates and a map subplot. If "map" (the default value), the data refer to `layout.map`. If "map2", the data refer to `layout.map2`, and so on.    coloraxis  Parent: data[type=densitymap]  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=densitymap] Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=densitymap].colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=densitymap].colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=densitymap].colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=densitymap].colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=densitymap].colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=densitymap].colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=densitymap].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=densitymap].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=densitymap].colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=densitymap].colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=densitymap].colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=densitymap].colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=densitymap].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=densitymap].colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=densitymap].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=densitymap].colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=densitymap].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=densitymap].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=densitymap].colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=densitymap].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=densitymap].colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=densitymap].colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=densitymap].colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=densitymap].colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=densitymap].colorbar.tickfont  Type: color    family  Parent: data[type=densitymap].colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=densitymap].colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=densitymap].colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=densitymap].colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=densitymap].colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=densitymap].colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=densitymap].colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=densitymap].colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=densitymap].colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=densitymap].colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=densitymap].colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=densitymap].colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=densitymap].colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=densitymap].colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=densitymap].colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=densitymap].colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=densitymap].colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=densitymap].colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=densitymap].colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=densitymap].colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=densitymap].colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=densitymap].colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=densitymap].colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=densitymap].colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=densitymap].colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=densitymap].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=densitymap].colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=densitymap].colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=densitymap].colorbar.title.font  Type: color    family  Parent: data[type=densitymap].colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=densitymap].colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=densitymap].colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=densitymap].colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=densitymap].colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=densitymap].colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=densitymap].colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=densitymap].colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=densitymap].colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=densitymap].colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=densitymap].colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=densitymap].colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=densitymap].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=densitymap].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=densitymap].colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=densitymap].colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=densitymap].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=densitymap].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      autocolorscale  Parent: data[type=densitymap]  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    colorscale  Parent: data[type=densitymap]  Type: colorscale Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    showscale  Parent: data[type=densitymap]  Type: boolean Default: true Determines whether or not a colorbar is displayed for this trace.    reversescale  Parent: data[type=densitymap]  Type: boolean Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.    zauto  Parent: data[type=densitymap]  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.    zmax  Parent: data[type=densitymap]  Type: number Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.    zmid  Parent: data[type=densitymap]  Type: number Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.    zmin  Parent: data[type=densitymap]  Type: number Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.    below  Parent: data[type=densitymap]  Type: string Determines if the densitymap trace will be inserted before the layer with the specified ID. By default, densitymap traces are placed below the first layer of type symbol If set to '', the layer will be inserted above every existing layer.    hoverlabel  Parent: data[type=densitymap] Type: object containing one or more of the keys listed below.    align  Parent: data[type=densitymap].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=densitymap].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=densitymap].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=densitymap].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=densitymap].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=densitymap].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=densitymap].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=densitymap].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=densitymap].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=densitymap].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=densitymap].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=densitymap].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=densitymap].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=densitymap].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      uirevision  Parent: data[type=densitymap]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      densitymapbox traces

      










 A densitymapbox trace is an object with the key "type" equal to "densitymapbox" (i.e. {"type": "densitymapbox"}) and any of the keys listed below. "densitymapbox" trace is deprecated! Please consider switching to the "densitymap" trace type and `map` subplots. Learn more at: https://plotly.com/python/maplibre-migration/ as well as https://plotly.com/javascript/maplibre-migration/ Draws a bivariate kernel density estimation with a Gaussian kernel from `lon` and `lat` coordinates and optional `z` values using a colorscale. 














   type  Parent: data[type=densitymapbox]  Type: "densitymapbox"    name  Parent: data[type=densitymapbox]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=densitymapbox]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=densitymapbox]  Type: boolean Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=densitymapbox]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=densitymapbox]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=densitymapbox]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=densitymapbox] Type: object containing one or more of the keys listed below.    font  Parent: data[type=densitymapbox].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=densitymapbox].legendgrouptitle.font  Type: color    family  Parent: data[type=densitymapbox].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=densitymapbox].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=densitymapbox].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=densitymapbox].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=densitymapbox].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=densitymapbox].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=densitymapbox].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=densitymapbox].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=densitymapbox].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=densitymapbox]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=densitymapbox]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=densitymapbox]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    z  Parent: data[type=densitymapbox]  Type: data array Sets the points' weight. For example, a value of 10 would be equivalent to having 10 points of weight 1 in the same spot    radius  Parent: data[type=densitymapbox]  Type: number or array of numbers greater than or equal to 1 Default: 30 Sets the radius of influence of one `lon` / `lat` point in pixels. Increasing the value makes the densitymapbox trace smoother, but less detailed.    lat  Parent: data[type=densitymapbox]  Type: data array Sets the latitude coordinates (in degrees North).    lon  Parent: data[type=densitymapbox]  Type: data array Sets the longitude coordinates (in degrees East).    text  Parent: data[type=densitymapbox]  Type: string or array of strings Default: "" Sets text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    hovertext  Parent: data[type=densitymapbox]  Type: string or array of strings Default: "" Sets hover text elements associated with each (lon,lat) pair If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (lon,lat) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.    hoverinfo  Parent: data[type=densitymapbox]  Type: flaglist string. Any combination of "lon", "lat", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "lon", "lat", "lon+lat", "lon+lat+z", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=densitymapbox]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    meta  Parent: data[type=densitymapbox]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=densitymapbox]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    subplot  Parent: data[type=densitymapbox]  Type: subplotid Default: mapbox mapbox subplots and traces are deprecated! Please consider switching to `map` subplots and traces. Learn more at: https://plotly.com/python/maplibre-migration/ as well as https://plotly.com/javascript/maplibre-migration/ Sets a reference between this trace's data coordinates and a mapbox subplot. If "mapbox" (the default value), the data refer to `layout.mapbox`. If "mapbox2", the data refer to `layout.mapbox2`, and so on.    coloraxis  Parent: data[type=densitymapbox]  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=densitymapbox] Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=densitymapbox].colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=densitymapbox].colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=densitymapbox].colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=densitymapbox].colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=densitymapbox].colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=densitymapbox].colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=densitymapbox].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=densitymapbox].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=densitymapbox].colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=densitymapbox].colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=densitymapbox].colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=densitymapbox].colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=densitymapbox].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=densitymapbox].colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=densitymapbox].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=densitymapbox].colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=densitymapbox].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=densitymapbox].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=densitymapbox].colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=densitymapbox].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=densitymapbox].colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=densitymapbox].colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=densitymapbox].colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=densitymapbox].colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=densitymapbox].colorbar.tickfont  Type: color    family  Parent: data[type=densitymapbox].colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=densitymapbox].colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=densitymapbox].colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=densitymapbox].colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=densitymapbox].colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=densitymapbox].colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=densitymapbox].colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=densitymapbox].colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=densitymapbox].colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=densitymapbox].colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=densitymapbox].colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=densitymapbox].colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=densitymapbox].colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=densitymapbox].colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=densitymapbox].colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=densitymapbox].colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=densitymapbox].colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=densitymapbox].colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=densitymapbox].colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=densitymapbox].colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=densitymapbox].colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=densitymapbox].colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=densitymapbox].colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=densitymapbox].colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=densitymapbox].colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=densitymapbox].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=densitymapbox].colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=densitymapbox].colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=densitymapbox].colorbar.title.font  Type: color    family  Parent: data[type=densitymapbox].colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=densitymapbox].colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=densitymapbox].colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=densitymapbox].colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=densitymapbox].colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=densitymapbox].colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=densitymapbox].colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=densitymapbox].colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=densitymapbox].colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=densitymapbox].colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=densitymapbox].colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=densitymapbox].colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=densitymapbox].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=densitymapbox].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=densitymapbox].colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=densitymapbox].colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=densitymapbox].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=densitymapbox].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      autocolorscale  Parent: data[type=densitymapbox]  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    colorscale  Parent: data[type=densitymapbox]  Type: colorscale Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    showscale  Parent: data[type=densitymapbox]  Type: boolean Default: true Determines whether or not a colorbar is displayed for this trace.    reversescale  Parent: data[type=densitymapbox]  Type: boolean Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.    zauto  Parent: data[type=densitymapbox]  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.    zmax  Parent: data[type=densitymapbox]  Type: number Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.    zmid  Parent: data[type=densitymapbox]  Type: number Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.    zmin  Parent: data[type=densitymapbox]  Type: number Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.    below  Parent: data[type=densitymapbox]  Type: string Determines if the densitymapbox trace will be inserted before the layer with the specified ID. By default, densitymapbox traces are placed below the first layer of type symbol If set to '', the layer will be inserted above every existing layer.    hoverlabel  Parent: data[type=densitymapbox] Type: object containing one or more of the keys listed below.    align  Parent: data[type=densitymapbox].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=densitymapbox].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=densitymapbox].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=densitymapbox].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=densitymapbox].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=densitymapbox].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=densitymapbox].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=densitymapbox].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=densitymapbox].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=densitymapbox].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=densitymapbox].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=densitymapbox].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=densitymapbox].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=densitymapbox].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      uirevision  Parent: data[type=densitymapbox]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      scatterpolar traces

      










 A scatterpolar trace is an object with the key "type" equal to "scatterpolar" (i.e. {"type": "scatterpolar"}) and any of the keys listed below. The scatterpolar trace type encompasses line charts, scatter charts, text charts, and bubble charts in polar coordinates. The data visualized as scatter point or lines is set in `r` (radial) and `theta` (angular) coordinates Text (appearing either on the chart or on hover only) is via `text`. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to numerical arrays. 














   type  Parent: data[type=scatterpolar]  Type: "scatterpolar"    name  Parent: data[type=scatterpolar]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=scatterpolar]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=scatterpolar]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=scatterpolar]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=scatterpolar]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=scatterpolar]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=scatterpolar] Type: object containing one or more of the keys listed below.    font  Parent: data[type=scatterpolar].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=scatterpolar].legendgrouptitle.font  Type: color    family  Parent: data[type=scatterpolar].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatterpolar].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatterpolar].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatterpolar].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=scatterpolar].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatterpolar].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatterpolar].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatterpolar].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=scatterpolar].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=scatterpolar]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=scatterpolar]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    mode  Parent: data[type=scatterpolar]  Type: flaglist string. Any combination of "lines", "markers", "text" joined with a "+" OR "none". Examples: "lines", "markers", "lines+markers", "lines+markers+text", "none" Determines the drawing mode for this scatter trace. If the provided `mode` includes "text" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is "lines+markers". Otherwise, "lines".    ids  Parent: data[type=scatterpolar]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    r  Parent: data[type=scatterpolar]  Type: data array Sets the radial coordinates    r0  Parent: data[type=scatterpolar]  Type: number or categorical coordinate string Default: 0 Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.    dr  Parent: data[type=scatterpolar]  Type: number Default: 1 Sets the r coordinate step.    theta  Parent: data[type=scatterpolar]  Type: data array Sets the angular coordinates    theta0  Parent: data[type=scatterpolar]  Type: number or categorical coordinate string Default: 0 Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.    dtheta  Parent: data[type=scatterpolar]  Type: number Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.    thetaunit  Parent: data[type=scatterpolar]  Type: enumerated , one of ( "radians" | "degrees" | "gradians" ) Default: "degrees" Sets the unit of input "theta" values. Has an effect only when on "linear" angular axes.    text  Parent: data[type=scatterpolar]  Type: string or array of strings Default: "" Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    textposition  Parent: data[type=scatterpolar]  Type: enumerated or array of enumerateds , one of ( "top left" | "top center" | "top right" | "middle left" | "middle center" | "middle right" | "bottom left" | "bottom center" | "bottom right" ) Default: "middle center" Sets the positions of the `text` elements with respects to the (x,y) coordinates.    texttemplate  Parent: data[type=scatterpolar]  Type: string or array of strings Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `r`, `theta` and `text`.    hovertext  Parent: data[type=scatterpolar]  Type: string or array of strings Default: "" Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.    hoverinfo  Parent: data[type=scatterpolar]  Type: flaglist string. Any combination of "r", "theta", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "r", "theta", "r+theta", "r+theta+text", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=scatterpolar]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    meta  Parent: data[type=scatterpolar]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=scatterpolar]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    subplot  Parent: data[type=scatterpolar]  Type: subplotid Default: polar Sets a reference between this trace's data coordinates and a polar subplot. If "polar" (the default value), the data refer to `layout.polar`. If "polar2", the data refer to `layout.polar2`, and so on.    marker  Parent: data[type=scatterpolar] Type: object containing one or more of the keys listed below.    angle  Parent: data[type=scatterpolar].marker  Type: angle Default: 0 Sets the marker angle in respect to `angleref`.    angleref  Parent: data[type=scatterpolar].marker  Type: enumerated , one of ( "previous" | "up" ) Default: "up" Sets the reference for marker angle. With "previous", angle 0 points along the line from the previous point to this one. With "up", angle 0 points toward the top of the screen.    autocolorscale  Parent: data[type=scatterpolar].marker  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=scatterpolar].marker  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.    cmax  Parent: data[type=scatterpolar].marker  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.    cmid  Parent: data[type=scatterpolar].marker  Type: number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.    cmin  Parent: data[type=scatterpolar].marker  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.    color  Parent: data[type=scatterpolar].marker  Type: color or array of colors Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.    coloraxis  Parent: data[type=scatterpolar].marker  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=scatterpolar].marker Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=scatterpolar].marker.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=scatterpolar].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=scatterpolar].marker.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=scatterpolar].marker.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=scatterpolar].marker.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=scatterpolar].marker.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=scatterpolar].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=scatterpolar].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=scatterpolar].marker.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=scatterpolar].marker.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=scatterpolar].marker.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=scatterpolar].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=scatterpolar].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=scatterpolar].marker.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=scatterpolar].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=scatterpolar].marker.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=scatterpolar].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=scatterpolar].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=scatterpolar].marker.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=scatterpolar].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=scatterpolar].marker.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=scatterpolar].marker.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=scatterpolar].marker.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=scatterpolar].marker.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=scatterpolar].marker.colorbar.tickfont  Type: color    family  Parent: data[type=scatterpolar].marker.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatterpolar].marker.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatterpolar].marker.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatterpolar].marker.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=scatterpolar].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatterpolar].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatterpolar].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatterpolar].marker.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=scatterpolar].marker.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=scatterpolar].marker.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=scatterpolar].marker.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=scatterpolar].marker.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=scatterpolar].marker.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=scatterpolar].marker.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=scatterpolar].marker.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=scatterpolar].marker.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=scatterpolar].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=scatterpolar].marker.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=scatterpolar].marker.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=scatterpolar].marker.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=scatterpolar].marker.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=scatterpolar].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=scatterpolar].marker.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=scatterpolar].marker.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=scatterpolar].marker.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=scatterpolar].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=scatterpolar].marker.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=scatterpolar].marker.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=scatterpolar].marker.colorbar.title.font  Type: color    family  Parent: data[type=scatterpolar].marker.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatterpolar].marker.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatterpolar].marker.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatterpolar].marker.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=scatterpolar].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatterpolar].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatterpolar].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatterpolar].marker.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=scatterpolar].marker.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=scatterpolar].marker.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=scatterpolar].marker.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=scatterpolar].marker.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=scatterpolar].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=scatterpolar].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=scatterpolar].marker.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=scatterpolar].marker.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=scatterpolar].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=scatterpolar].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colorscale  Parent: data[type=scatterpolar].marker  Type: colorscale Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    gradient  Parent: data[type=scatterpolar].marker Type: object containing one or more of the keys listed below.    color  Parent: data[type=scatterpolar].marker.gradient  Type: color or array of colors Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.    type  Parent: data[type=scatterpolar].marker.gradient  Type: enumerated or array of enumerateds , one of ( "radial" | "horizontal" | "vertical" | "none" ) Default: "none" Sets the type of gradient used to fill the markers      line  Parent: data[type=scatterpolar].marker Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=scatterpolar].marker.line  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=scatterpolar].marker.line  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.    cmax  Parent: data[type=scatterpolar].marker.line  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.    cmid  Parent: data[type=scatterpolar].marker.line  Type: number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.    cmin  Parent: data[type=scatterpolar].marker.line  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.    color  Parent: data[type=scatterpolar].marker.line  Type: color or array of colors Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.    coloraxis  Parent: data[type=scatterpolar].marker.line  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorscale  Parent: data[type=scatterpolar].marker.line  Type: colorscale Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    reversescale  Parent: data[type=scatterpolar].marker.line  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.    width  Parent: data[type=scatterpolar].marker.line  Type: number or array of numbers greater than or equal to 0 Sets the width (in px) of the lines bounding the marker points.      maxdisplayed  Parent: data[type=scatterpolar].marker  Type: number greater than or equal to 0 Default: 0 Sets a maximum number of points to be drawn on the graph. "0" corresponds to no limit.    opacity  Parent: data[type=scatterpolar].marker  Type: number or array of numbers between or equal to 0 and 1 Sets the marker opacity.    reversescale  Parent: data[type=scatterpolar].marker  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.    showscale  Parent: data[type=scatterpolar].marker  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.    size  Parent: data[type=scatterpolar].marker  Type: number or array of numbers greater than or equal to 0 Default: 6 Sets the marker size (in px).    sizemin  Parent: data[type=scatterpolar].marker  Type: number greater than or equal to 0 Default: 0 Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.    sizemode  Parent: data[type=scatterpolar].marker  Type: enumerated , one of ( "diameter" | "area" ) Default: "diameter" Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.    sizeref  Parent: data[type=scatterpolar].marker  Type: number Default: 1 Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.    standoff  Parent: data[type=scatterpolar].marker  Type: number or array of numbers greater than or equal to 0 Default: 0 Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.    symbol  Parent: data[type=scatterpolar].marker  Type: enumerated or array of enumerateds , one of ( "0" | "0" | "circle" | "100" | "100" | "circle-open" | "200" | "200" | "circle-dot" | "300" | "300" | "circle-open-dot" | "1" | "1" | "square" | "101" | "101" | "square-open" | "201" | "201" | "square-dot" | "301" | "301" | "square-open-dot" | "2" | "2" | "diamond" | "102" | "102" | "diamond-open" | "202" | "202" | "diamond-dot" | "302" | "302" | "diamond-open-dot" | "3" | "3" | "cross" | "103" | "103" | "cross-open" | "203" | "203" | "cross-dot" | "303" | "303" | "cross-open-dot" | "4" | "4" | "x" | "104" | "104" | "x-open" | "204" | "204" | "x-dot" | "304" | "304" | "x-open-dot" | "5" | "5" | "triangle-up" | "105" | "105" | "triangle-up-open" | "205" | "205" | "triangle-up-dot" | "305" | "305" | "triangle-up-open-dot" | "6" | "6" | "triangle-down" | "106" | "106" | "triangle-down-open" | "206" | "206" | "triangle-down-dot" | "306" | "306" | "triangle-down-open-dot" | "7" | "7" | "triangle-left" | "107" | "107" | "triangle-left-open" | "207" | "207" | "triangle-left-dot" | "307" | "307" | "triangle-left-open-dot" | "8" | "8" | "triangle-right" | "108" | "108" | "triangle-right-open" | "208" | "208" | "triangle-right-dot" | "308" | "308" | "triangle-right-open-dot" | "9" | "9" | "triangle-ne" | "109" | "109" | "triangle-ne-open" | "209" | "209" | "triangle-ne-dot" | "309" | "309" | "triangle-ne-open-dot" | "10" | "10" | "triangle-se" | "110" | "110" | "triangle-se-open" | "210" | "210" | "triangle-se-dot" | "310" | "310" | "triangle-se-open-dot" | "11" | "11" | "triangle-sw" | "111" | "111" | "triangle-sw-open" | "211" | "211" | "triangle-sw-dot" | "311" | "311" | "triangle-sw-open-dot" | "12" | "12" | "triangle-nw" | "112" | "112" | "triangle-nw-open" | "212" | "212" | "triangle-nw-dot" | "312" | "312" | "triangle-nw-open-dot" | "13" | "13" | "pentagon" | "113" | "113" | "pentagon-open" | "213" | "213" | "pentagon-dot" | "313" | "313" | "pentagon-open-dot" | "14" | "14" | "hexagon" | "114" | "114" | "hexagon-open" | "214" | "214" | "hexagon-dot" | "314" | "314" | "hexagon-open-dot" | "15" | "15" | "hexagon2" | "115" | "115" | "hexagon2-open" | "215" | "215" | "hexagon2-dot" | "315" | "315" | "hexagon2-open-dot" | "16" | "16" | "octagon" | "116" | "116" | "octagon-open" | "216" | "216" | "octagon-dot" | "316" | "316" | "octagon-open-dot" | "17" | "17" | "star" | "117" | "117" | "star-open" | "217" | "217" | "star-dot" | "317" | "317" | "star-open-dot" | "18" | "18" | "hexagram" | "118" | "118" | "hexagram-open" | "218" | "218" | "hexagram-dot" | "318" | "318" | "hexagram-open-dot" | "19" | "19" | "star-triangle-up" | "119" | "119" | "star-triangle-up-open" | "219" | "219" | "star-triangle-up-dot" | "319" | "319" | "star-triangle-up-open-dot" | "20" | "20" | "star-triangle-down" | "120" | "120" | "star-triangle-down-open" | "220" | "220" | "star-triangle-down-dot" | "320" | "320" | "star-triangle-down-open-dot" | "21" | "21" | "star-square" | "121" | "121" | "star-square-open" | "221" | "221" | "star-square-dot" | "321" | "321" | "star-square-open-dot" | "22" | "22" | "star-diamond" | "122" | "122" | "star-diamond-open" | "222" | "222" | "star-diamond-dot" | "322" | "322" | "star-diamond-open-dot" | "23" | "23" | "diamond-tall" | "123" | "123" | "diamond-tall-open" | "223" | "223" | "diamond-tall-dot" | "323" | "323" | "diamond-tall-open-dot" | "24" | "24" | "diamond-wide" | "124" | "124" | "diamond-wide-open" | "224" | "224" | "diamond-wide-dot" | "324" | "324" | "diamond-wide-open-dot" | "25" | "25" | "hourglass" | "125" | "125" | "hourglass-open" | "26" | "26" | "bowtie" | "126" | "126" | "bowtie-open" | "27" | "27" | "circle-cross" | "127" | "127" | "circle-cross-open" | "28" | "28" | "circle-x" | "128" | "128" | "circle-x-open" | "29" | "29" | "square-cross" | "129" | "129" | "square-cross-open" | "30" | "30" | "square-x" | "130" | "130" | "square-x-open" | "31" | "31" | "diamond-cross" | "131" | "131" | "diamond-cross-open" | "32" | "32" | "diamond-x" | "132" | "132" | "diamond-x-open" | "33" | "33" | "cross-thin" | "133" | "133" | "cross-thin-open" | "34" | "34" | "x-thin" | "134" | "134" | "x-thin-open" | "35" | "35" | "asterisk" | "135" | "135" | "asterisk-open" | "36" | "36" | "hash" | "136" | "136" | "hash-open" | "236" | "236" | "hash-dot" | "336" | "336" | "hash-open-dot" | "37" | "37" | "y-up" | "137" | "137" | "y-up-open" | "38" | "38" | "y-down" | "138" | "138" | "y-down-open" | "39" | "39" | "y-left" | "139" | "139" | "y-left-open" | "40" | "40" | "y-right" | "140" | "140" | "y-right-open" | "41" | "41" | "line-ew" | "141" | "141" | "line-ew-open" | "42" | "42" | "line-ns" | "142" | "142" | "line-ns-open" | "43" | "43" | "line-ne" | "143" | "143" | "line-ne-open" | "44" | "44" | "line-nw" | "144" | "144" | "line-nw-open" | "45" | "45" | "arrow-up" | "145" | "145" | "arrow-up-open" | "46" | "46" | "arrow-down" | "146" | "146" | "arrow-down-open" | "47" | "47" | "arrow-left" | "147" | "147" | "arrow-left-open" | "48" | "48" | "arrow-right" | "148" | "148" | "arrow-right-open" | "49" | "49" | "arrow-bar-up" | "149" | "149" | "arrow-bar-up-open" | "50" | "50" | "arrow-bar-down" | "150" | "150" | "arrow-bar-down-open" | "51" | "51" | "arrow-bar-left" | "151" | "151" | "arrow-bar-left-open" | "52" | "52" | "arrow-bar-right" | "152" | "152" | "arrow-bar-right-open" | "53" | "53" | "arrow" | "153" | "153" | "arrow-open" | "54" | "54" | "arrow-wide" | "154" | "154" | "arrow-wide-open" ) Default: "circle" Sets the marker symbol type. Adding 100 is equivalent to appending "-open" to a symbol name. Adding 200 is equivalent to appending "-dot" to a symbol name. Adding 300 is equivalent to appending "-open-dot" or "dot-open" to a symbol name.      line  Parent: data[type=scatterpolar] Type: object containing one or more of the keys listed below.    backoff  Parent: data[type=scatterpolar].line  Type: number or array of numbers greater than or equal to 0 Default: "auto" Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With "auto" the lines would trim before markers if `marker.angleref` is set to "previous".    color  Parent: data[type=scatterpolar].line  Type: color Sets the line color.    dash  Parent: data[type=scatterpolar].line  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    shape  Parent: data[type=scatterpolar].line  Type: enumerated , one of ( "linear" | "spline" ) Default: "linear" Determines the line shape. With "spline" the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.    smoothing  Parent: data[type=scatterpolar].line  Type: number between or equal to 0 and 1.3 Default: 1 Has an effect only if `shape` is set to "spline" Sets the amount of smoothing. "0" corresponds to no smoothing (equivalent to a "linear" shape).    width  Parent: data[type=scatterpolar].line  Type: number greater than or equal to 0 Default: 2 Sets the line width (in px).      textfont  Parent: data[type=scatterpolar] Type: object containing one or more of the keys listed below. Sets the text font.    color  Parent: data[type=scatterpolar].textfont  Type: color or array of colors    family  Parent: data[type=scatterpolar].textfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatterpolar].textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatterpolar].textfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatterpolar].textfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=scatterpolar].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatterpolar].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatterpolar].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatterpolar].textfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      selectedpoints  Parent: data[type=scatterpolar]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    selected  Parent: data[type=scatterpolar] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=scatterpolar].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scatterpolar].selected.marker  Type: color Sets the marker color of selected points.    opacity  Parent: data[type=scatterpolar].selected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of selected points.    size  Parent: data[type=scatterpolar].selected.marker  Type: number greater than or equal to 0 Sets the marker size of selected points.      textfont  Parent: data[type=scatterpolar].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scatterpolar].selected.textfont  Type: color Sets the text font color of selected points.        unselected  Parent: data[type=scatterpolar] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=scatterpolar].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scatterpolar].unselected.marker  Type: color Sets the marker color of unselected points, applied only when a selection exists.    opacity  Parent: data[type=scatterpolar].unselected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of unselected points, applied only when a selection exists.    size  Parent: data[type=scatterpolar].unselected.marker  Type: number greater than or equal to 0 Sets the marker size of unselected points, applied only when a selection exists.      textfont  Parent: data[type=scatterpolar].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scatterpolar].unselected.textfont  Type: color Sets the text font color of unselected points, applied only when a selection exists.        cliponaxis  Parent: data[type=scatterpolar]  Type: boolean Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to "below traces".    connectgaps  Parent: data[type=scatterpolar]  Type: boolean Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.    fill  Parent: data[type=scatterpolar]  Type: enumerated , one of ( "none" | "toself" | "tonext" ) Default: "none" Sets the area to fill with a solid color. Use with `fillcolor` if not "none". scatterpolar has a subset of the options available to scatter. "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. "tonext" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like "toself" if there is no trace before it. "tonext" should not be used if one trace does not enclose the other.    fillcolor  Parent: data[type=scatterpolar]  Type: color Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.    hoverlabel  Parent: data[type=scatterpolar] Type: object containing one or more of the keys listed below.    align  Parent: data[type=scatterpolar].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=scatterpolar].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=scatterpolar].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=scatterpolar].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=scatterpolar].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=scatterpolar].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatterpolar].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatterpolar].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatterpolar].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=scatterpolar].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatterpolar].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatterpolar].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatterpolar].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=scatterpolar].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      hoveron  Parent: data[type=scatterpolar]  Type: flaglist string. Any combination of "points", "fills" joined with a "+" Examples: "points", "fills", "points+fills" Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is "toself" or "tonext" and there are no markers or text, then the default is "fills", otherwise it is "points".    uirevision  Parent: data[type=scatterpolar]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      scatterpolargl traces

      










 A scatterpolargl trace is an object with the key "type" equal to "scatterpolargl" (i.e. {"type": "scatterpolargl"}) and any of the keys listed below. The scatterpolargl trace type encompasses line charts, scatter charts, and bubble charts in polar coordinates using the WebGL plotting engine. The data visualized as scatter point or lines is set in `r` (radial) and `theta` (angular) coordinates Bubble charts are achieved by setting `marker.size` and/or `marker.color` to numerical arrays. 














   type  Parent: data[type=scatterpolargl]  Type: "scatterpolargl"    name  Parent: data[type=scatterpolargl]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=scatterpolargl]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=scatterpolargl]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=scatterpolargl]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=scatterpolargl]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=scatterpolargl]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=scatterpolargl] Type: object containing one or more of the keys listed below.    font  Parent: data[type=scatterpolargl].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=scatterpolargl].legendgrouptitle.font  Type: color    family  Parent: data[type=scatterpolargl].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatterpolargl].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatterpolargl].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatterpolargl].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=scatterpolargl].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatterpolargl].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatterpolargl].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatterpolargl].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=scatterpolargl].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=scatterpolargl]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=scatterpolargl]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    mode  Parent: data[type=scatterpolargl]  Type: flaglist string. Any combination of "lines", "markers", "text" joined with a "+" OR "none". Examples: "lines", "markers", "lines+markers", "lines+markers+text", "none" Determines the drawing mode for this scatter trace. If the provided `mode` includes "text" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is "lines+markers". Otherwise, "lines".    ids  Parent: data[type=scatterpolargl]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    r  Parent: data[type=scatterpolargl]  Type: data array Sets the radial coordinates    r0  Parent: data[type=scatterpolargl]  Type: number or categorical coordinate string Default: 0 Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.    dr  Parent: data[type=scatterpolargl]  Type: number Default: 1 Sets the r coordinate step.    theta  Parent: data[type=scatterpolargl]  Type: data array Sets the angular coordinates    theta0  Parent: data[type=scatterpolargl]  Type: number or categorical coordinate string Default: 0 Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.    dtheta  Parent: data[type=scatterpolargl]  Type: number Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.    thetaunit  Parent: data[type=scatterpolargl]  Type: enumerated , one of ( "radians" | "degrees" | "gradians" ) Default: "degrees" Sets the unit of input "theta" values. Has an effect only when on "linear" angular axes.    text  Parent: data[type=scatterpolargl]  Type: string or array of strings Default: "" Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    textposition  Parent: data[type=scatterpolargl]  Type: enumerated or array of enumerateds , one of ( "top left" | "top center" | "top right" | "middle left" | "middle center" | "middle right" | "bottom left" | "bottom center" | "bottom right" ) Default: "middle center" Sets the positions of the `text` elements with respects to the (x,y) coordinates.    texttemplate  Parent: data[type=scatterpolargl]  Type: string or array of strings Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `r`, `theta` and `text`.    hovertext  Parent: data[type=scatterpolargl]  Type: string or array of strings Default: "" Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.    hoverinfo  Parent: data[type=scatterpolargl]  Type: flaglist string. Any combination of "r", "theta", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "r", "theta", "r+theta", "r+theta+text", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=scatterpolargl]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    meta  Parent: data[type=scatterpolargl]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=scatterpolargl]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    subplot  Parent: data[type=scatterpolargl]  Type: subplotid Default: polar Sets a reference between this trace's data coordinates and a polar subplot. If "polar" (the default value), the data refer to `layout.polar`. If "polar2", the data refer to `layout.polar2`, and so on.    marker  Parent: data[type=scatterpolargl] Type: object containing one or more of the keys listed below.    angle  Parent: data[type=scatterpolargl].marker  Type: angle Default: 0 Sets the marker angle in respect to `angleref`.    autocolorscale  Parent: data[type=scatterpolargl].marker  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=scatterpolargl].marker  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.    cmax  Parent: data[type=scatterpolargl].marker  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.    cmid  Parent: data[type=scatterpolargl].marker  Type: number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.    cmin  Parent: data[type=scatterpolargl].marker  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.    color  Parent: data[type=scatterpolargl].marker  Type: color or array of colors Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.    coloraxis  Parent: data[type=scatterpolargl].marker  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=scatterpolargl].marker Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=scatterpolargl].marker.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=scatterpolargl].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=scatterpolargl].marker.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=scatterpolargl].marker.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=scatterpolargl].marker.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=scatterpolargl].marker.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=scatterpolargl].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=scatterpolargl].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=scatterpolargl].marker.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=scatterpolargl].marker.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=scatterpolargl].marker.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=scatterpolargl].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=scatterpolargl].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=scatterpolargl].marker.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=scatterpolargl].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=scatterpolargl].marker.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=scatterpolargl].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=scatterpolargl].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=scatterpolargl].marker.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=scatterpolargl].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=scatterpolargl].marker.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=scatterpolargl].marker.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=scatterpolargl].marker.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=scatterpolargl].marker.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=scatterpolargl].marker.colorbar.tickfont  Type: color    family  Parent: data[type=scatterpolargl].marker.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatterpolargl].marker.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatterpolargl].marker.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatterpolargl].marker.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=scatterpolargl].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatterpolargl].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatterpolargl].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatterpolargl].marker.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=scatterpolargl].marker.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=scatterpolargl].marker.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=scatterpolargl].marker.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=scatterpolargl].marker.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=scatterpolargl].marker.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=scatterpolargl].marker.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=scatterpolargl].marker.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=scatterpolargl].marker.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=scatterpolargl].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=scatterpolargl].marker.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=scatterpolargl].marker.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=scatterpolargl].marker.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=scatterpolargl].marker.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=scatterpolargl].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=scatterpolargl].marker.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=scatterpolargl].marker.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=scatterpolargl].marker.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=scatterpolargl].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=scatterpolargl].marker.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=scatterpolargl].marker.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=scatterpolargl].marker.colorbar.title.font  Type: color    family  Parent: data[type=scatterpolargl].marker.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatterpolargl].marker.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatterpolargl].marker.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatterpolargl].marker.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=scatterpolargl].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatterpolargl].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatterpolargl].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatterpolargl].marker.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=scatterpolargl].marker.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=scatterpolargl].marker.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=scatterpolargl].marker.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=scatterpolargl].marker.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=scatterpolargl].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=scatterpolargl].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=scatterpolargl].marker.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=scatterpolargl].marker.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=scatterpolargl].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=scatterpolargl].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colorscale  Parent: data[type=scatterpolargl].marker  Type: colorscale Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    line  Parent: data[type=scatterpolargl].marker Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=scatterpolargl].marker.line  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=scatterpolargl].marker.line  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.    cmax  Parent: data[type=scatterpolargl].marker.line  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.    cmid  Parent: data[type=scatterpolargl].marker.line  Type: number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.    cmin  Parent: data[type=scatterpolargl].marker.line  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.    color  Parent: data[type=scatterpolargl].marker.line  Type: color or array of colors Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.    coloraxis  Parent: data[type=scatterpolargl].marker.line  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorscale  Parent: data[type=scatterpolargl].marker.line  Type: colorscale Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    reversescale  Parent: data[type=scatterpolargl].marker.line  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.    width  Parent: data[type=scatterpolargl].marker.line  Type: number or array of numbers greater than or equal to 0 Sets the width (in px) of the lines bounding the marker points.      opacity  Parent: data[type=scatterpolargl].marker  Type: number or array of numbers between or equal to 0 and 1 Sets the marker opacity.    reversescale  Parent: data[type=scatterpolargl].marker  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.    showscale  Parent: data[type=scatterpolargl].marker  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.    size  Parent: data[type=scatterpolargl].marker  Type: number or array of numbers greater than or equal to 0 Default: 6 Sets the marker size (in px).    sizemin  Parent: data[type=scatterpolargl].marker  Type: number greater than or equal to 0 Default: 0 Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.    sizemode  Parent: data[type=scatterpolargl].marker  Type: enumerated , one of ( "diameter" | "area" ) Default: "diameter" Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.    sizeref  Parent: data[type=scatterpolargl].marker  Type: number Default: 1 Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.    symbol  Parent: data[type=scatterpolargl].marker  Type: enumerated or array of enumerateds , one of ( "0" | "0" | "circle" | "100" | "100" | "circle-open" | "200" | "200" | "circle-dot" | "300" | "300" | "circle-open-dot" | "1" | "1" | "square" | "101" | "101" | "square-open" | "201" | "201" | "square-dot" | "301" | "301" | "square-open-dot" | "2" | "2" | "diamond" | "102" | "102" | "diamond-open" | "202" | "202" | "diamond-dot" | "302" | "302" | "diamond-open-dot" | "3" | "3" | "cross" | "103" | "103" | "cross-open" | "203" | "203" | "cross-dot" | "303" | "303" | "cross-open-dot" | "4" | "4" | "x" | "104" | "104" | "x-open" | "204" | "204" | "x-dot" | "304" | "304" | "x-open-dot" | "5" | "5" | "triangle-up" | "105" | "105" | "triangle-up-open" | "205" | "205" | "triangle-up-dot" | "305" | "305" | "triangle-up-open-dot" | "6" | "6" | "triangle-down" | "106" | "106" | "triangle-down-open" | "206" | "206" | "triangle-down-dot" | "306" | "306" | "triangle-down-open-dot" | "7" | "7" | "triangle-left" | "107" | "107" | "triangle-left-open" | "207" | "207" | "triangle-left-dot" | "307" | "307" | "triangle-left-open-dot" | "8" | "8" | "triangle-right" | "108" | "108" | "triangle-right-open" | "208" | "208" | "triangle-right-dot" | "308" | "308" | "triangle-right-open-dot" | "9" | "9" | "triangle-ne" | "109" | "109" | "triangle-ne-open" | "209" | "209" | "triangle-ne-dot" | "309" | "309" | "triangle-ne-open-dot" | "10" | "10" | "triangle-se" | "110" | "110" | "triangle-se-open" | "210" | "210" | "triangle-se-dot" | "310" | "310" | "triangle-se-open-dot" | "11" | "11" | "triangle-sw" | "111" | "111" | "triangle-sw-open" | "211" | "211" | "triangle-sw-dot" | "311" | "311" | "triangle-sw-open-dot" | "12" | "12" | "triangle-nw" | "112" | "112" | "triangle-nw-open" | "212" | "212" | "triangle-nw-dot" | "312" | "312" | "triangle-nw-open-dot" | "13" | "13" | "pentagon" | "113" | "113" | "pentagon-open" | "213" | "213" | "pentagon-dot" | "313" | "313" | "pentagon-open-dot" | "14" | "14" | "hexagon" | "114" | "114" | "hexagon-open" | "214" | "214" | "hexagon-dot" | "314" | "314" | "hexagon-open-dot" | "15" | "15" | "hexagon2" | "115" | "115" | "hexagon2-open" | "215" | "215" | "hexagon2-dot" | "315" | "315" | "hexagon2-open-dot" | "16" | "16" | "octagon" | "116" | "116" | "octagon-open" | "216" | "216" | "octagon-dot" | "316" | "316" | "octagon-open-dot" | "17" | "17" | "star" | "117" | "117" | "star-open" | "217" | "217" | "star-dot" | "317" | "317" | "star-open-dot" | "18" | "18" | "hexagram" | "118" | "118" | "hexagram-open" | "218" | "218" | "hexagram-dot" | "318" | "318" | "hexagram-open-dot" | "19" | "19" | "star-triangle-up" | "119" | "119" | "star-triangle-up-open" | "219" | "219" | "star-triangle-up-dot" | "319" | "319" | "star-triangle-up-open-dot" | "20" | "20" | "star-triangle-down" | "120" | "120" | "star-triangle-down-open" | "220" | "220" | "star-triangle-down-dot" | "320" | "320" | "star-triangle-down-open-dot" | "21" | "21" | "star-square" | "121" | "121" | "star-square-open" | "221" | "221" | "star-square-dot" | "321" | "321" | "star-square-open-dot" | "22" | "22" | "star-diamond" | "122" | "122" | "star-diamond-open" | "222" | "222" | "star-diamond-dot" | "322" | "322" | "star-diamond-open-dot" | "23" | "23" | "diamond-tall" | "123" | "123" | "diamond-tall-open" | "223" | "223" | "diamond-tall-dot" | "323" | "323" | "diamond-tall-open-dot" | "24" | "24" | "diamond-wide" | "124" | "124" | "diamond-wide-open" | "224" | "224" | "diamond-wide-dot" | "324" | "324" | "diamond-wide-open-dot" | "25" | "25" | "hourglass" | "125" | "125" | "hourglass-open" | "26" | "26" | "bowtie" | "126" | "126" | "bowtie-open" | "27" | "27" | "circle-cross" | "127" | "127" | "circle-cross-open" | "28" | "28" | "circle-x" | "128" | "128" | "circle-x-open" | "29" | "29" | "square-cross" | "129" | "129" | "square-cross-open" | "30" | "30" | "square-x" | "130" | "130" | "square-x-open" | "31" | "31" | "diamond-cross" | "131" | "131" | "diamond-cross-open" | "32" | "32" | "diamond-x" | "132" | "132" | "diamond-x-open" | "33" | "33" | "cross-thin" | "133" | "133" | "cross-thin-open" | "34" | "34" | "x-thin" | "134" | "134" | "x-thin-open" | "35" | "35" | "asterisk" | "135" | "135" | "asterisk-open" | "36" | "36" | "hash" | "136" | "136" | "hash-open" | "236" | "236" | "hash-dot" | "336" | "336" | "hash-open-dot" | "37" | "37" | "y-up" | "137" | "137" | "y-up-open" | "38" | "38" | "y-down" | "138" | "138" | "y-down-open" | "39" | "39" | "y-left" | "139" | "139" | "y-left-open" | "40" | "40" | "y-right" | "140" | "140" | "y-right-open" | "41" | "41" | "line-ew" | "141" | "141" | "line-ew-open" | "42" | "42" | "line-ns" | "142" | "142" | "line-ns-open" | "43" | "43" | "line-ne" | "143" | "143" | "line-ne-open" | "44" | "44" | "line-nw" | "144" | "144" | "line-nw-open" | "45" | "45" | "arrow-up" | "145" | "145" | "arrow-up-open" | "46" | "46" | "arrow-down" | "146" | "146" | "arrow-down-open" | "47" | "47" | "arrow-left" | "147" | "147" | "arrow-left-open" | "48" | "48" | "arrow-right" | "148" | "148" | "arrow-right-open" | "49" | "49" | "arrow-bar-up" | "149" | "149" | "arrow-bar-up-open" | "50" | "50" | "arrow-bar-down" | "150" | "150" | "arrow-bar-down-open" | "51" | "51" | "arrow-bar-left" | "151" | "151" | "arrow-bar-left-open" | "52" | "52" | "arrow-bar-right" | "152" | "152" | "arrow-bar-right-open" | "53" | "53" | "arrow" | "153" | "153" | "arrow-open" | "54" | "54" | "arrow-wide" | "154" | "154" | "arrow-wide-open" ) Default: "circle" Sets the marker symbol type. Adding 100 is equivalent to appending "-open" to a symbol name. Adding 200 is equivalent to appending "-dot" to a symbol name. Adding 300 is equivalent to appending "-open-dot" or "dot-open" to a symbol name.      line  Parent: data[type=scatterpolargl] Type: object containing one or more of the keys listed below.    color  Parent: data[type=scatterpolargl].line  Type: color Sets the line color.    dash  Parent: data[type=scatterpolargl].line  Type: enumerated , one of ( "dash" | "dashdot" | "dot" | "longdash" | "longdashdot" | "solid" ) Default: "solid" Sets the style of the lines.    width  Parent: data[type=scatterpolargl].line  Type: number greater than or equal to 0 Default: 2 Sets the line width (in px).      textfont  Parent: data[type=scatterpolargl] Type: object containing one or more of the keys listed below. Sets the text font.    color  Parent: data[type=scatterpolargl].textfont  Type: color or array of colors    family  Parent: data[type=scatterpolargl].textfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    size  Parent: data[type=scatterpolargl].textfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=scatterpolargl].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    variant  Parent: data[type=scatterpolargl].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatterpolargl].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "bold" ) Default: "normal" Sets the weight (or boldness) of the font.      selectedpoints  Parent: data[type=scatterpolargl]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    selected  Parent: data[type=scatterpolargl] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=scatterpolargl].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scatterpolargl].selected.marker  Type: color Sets the marker color of selected points.    opacity  Parent: data[type=scatterpolargl].selected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of selected points.    size  Parent: data[type=scatterpolargl].selected.marker  Type: number greater than or equal to 0 Sets the marker size of selected points.      textfont  Parent: data[type=scatterpolargl].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scatterpolargl].selected.textfont  Type: color Sets the text font color of selected points.        unselected  Parent: data[type=scatterpolargl] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=scatterpolargl].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scatterpolargl].unselected.marker  Type: color Sets the marker color of unselected points, applied only when a selection exists.    opacity  Parent: data[type=scatterpolargl].unselected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of unselected points, applied only when a selection exists.    size  Parent: data[type=scatterpolargl].unselected.marker  Type: number greater than or equal to 0 Sets the marker size of unselected points, applied only when a selection exists.      textfont  Parent: data[type=scatterpolargl].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scatterpolargl].unselected.textfont  Type: color Sets the text font color of unselected points, applied only when a selection exists.        connectgaps  Parent: data[type=scatterpolargl]  Type: boolean Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.    fill  Parent: data[type=scatterpolargl]  Type: enumerated , one of ( "none" | "tozeroy" | "tozerox" | "tonexty" | "tonextx" | "toself" | "tonext" ) Default: "none" Sets the area to fill with a solid color. Defaults to "none" unless this trace is stacked, then it gets "tonexty" ("tonextx") if `orientation` is "v" ("h") Use with `fillcolor` if not "none". "tozerox" and "tozeroy" fill to x=0 and y=0 respectively. "tonextx" and "tonexty" fill between the endpoints of this trace and the endpoints of the trace before it, connecting those endpoints with straight lines (to make a stacked area graph); if there is no trace before it, they behave like "tozerox" and "tozeroy". "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. "tonext" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like "toself" if there is no trace before it. "tonext" should not be used if one trace does not enclose the other. Traces in a `stackgroup` will only fill to (or be filled to) other traces in the same group. With multiple `stackgroup`s or some traces stacked and some not, if fill-linked traces are not already consecutive, the later ones will be pushed down in the drawing order.    fillcolor  Parent: data[type=scatterpolargl]  Type: color Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.    hoverlabel  Parent: data[type=scatterpolargl] Type: object containing one or more of the keys listed below.    align  Parent: data[type=scatterpolargl].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=scatterpolargl].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=scatterpolargl].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=scatterpolargl].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=scatterpolargl].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=scatterpolargl].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatterpolargl].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatterpolargl].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatterpolargl].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=scatterpolargl].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatterpolargl].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatterpolargl].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatterpolargl].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=scatterpolargl].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      uirevision  Parent: data[type=scatterpolargl]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      barpolar traces

      










 A barpolar trace is an object with the key "type" equal to "barpolar" (i.e. {"type": "barpolar"}) and any of the keys listed below. The data visualized by the radial span of the bars is set in `r` 














   type  Parent: data[type=barpolar]  Type: "barpolar"    name  Parent: data[type=barpolar]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=barpolar]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=barpolar]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=barpolar]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=barpolar]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=barpolar]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=barpolar] Type: object containing one or more of the keys listed below.    font  Parent: data[type=barpolar].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=barpolar].legendgrouptitle.font  Type: color    family  Parent: data[type=barpolar].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=barpolar].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=barpolar].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=barpolar].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=barpolar].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=barpolar].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=barpolar].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=barpolar].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=barpolar].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=barpolar]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=barpolar]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=barpolar]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    base  Parent: data[type=barpolar]  Type: number or categorical coordinate string Sets where the bar base is drawn (in radial axis units). In "stack" barmode, traces that set "base" will be excluded and drawn in "overlay" mode instead.    r  Parent: data[type=barpolar]  Type: data array Sets the radial coordinates    r0  Parent: data[type=barpolar]  Type: number or categorical coordinate string Default: 0 Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.    dr  Parent: data[type=barpolar]  Type: number Default: 1 Sets the r coordinate step.    theta  Parent: data[type=barpolar]  Type: data array Sets the angular coordinates    theta0  Parent: data[type=barpolar]  Type: number or categorical coordinate string Default: 0 Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.    dtheta  Parent: data[type=barpolar]  Type: number Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.    thetaunit  Parent: data[type=barpolar]  Type: enumerated , one of ( "radians" | "degrees" | "gradians" ) Default: "degrees" Sets the unit of input "theta" values. Has an effect only when on "linear" angular axes.    width  Parent: data[type=barpolar]  Type: number or array of numbers greater than or equal to 0 Sets the bar angular width (in "thetaunit" units).    offset  Parent: data[type=barpolar]  Type: number or array of numbers Shifts the angular position where the bar is drawn (in "thetatunit" units).    text  Parent: data[type=barpolar]  Type: string or array of strings Default: "" Sets hover text elements associated with each bar. If a single string, the same string appears over all bars. If an array of string, the items are mapped in order to the this trace's coordinates.    hovertext  Parent: data[type=barpolar]  Type: string or array of strings Default: "" Same as `text`.    hoverinfo  Parent: data[type=barpolar]  Type: flaglist string. Any combination of "r", "theta", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "r", "theta", "r+theta", "r+theta+text", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=barpolar]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    meta  Parent: data[type=barpolar]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=barpolar]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    subplot  Parent: data[type=barpolar]  Type: subplotid Default: polar Sets a reference between this trace's data coordinates and a polar subplot. If "polar" (the default value), the data refer to `layout.polar`. If "polar2", the data refer to `layout.polar2`, and so on.    marker  Parent: data[type=barpolar] Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=barpolar].marker  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=barpolar].marker  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.    cmax  Parent: data[type=barpolar].marker  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.    cmid  Parent: data[type=barpolar].marker  Type: number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.    cmin  Parent: data[type=barpolar].marker  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.    color  Parent: data[type=barpolar].marker  Type: color or array of colors Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.    coloraxis  Parent: data[type=barpolar].marker  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=barpolar].marker Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=barpolar].marker.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=barpolar].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=barpolar].marker.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=barpolar].marker.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=barpolar].marker.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=barpolar].marker.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=barpolar].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=barpolar].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=barpolar].marker.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=barpolar].marker.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=barpolar].marker.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=barpolar].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=barpolar].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=barpolar].marker.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=barpolar].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=barpolar].marker.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=barpolar].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=barpolar].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=barpolar].marker.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=barpolar].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=barpolar].marker.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=barpolar].marker.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=barpolar].marker.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=barpolar].marker.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=barpolar].marker.colorbar.tickfont  Type: color    family  Parent: data[type=barpolar].marker.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=barpolar].marker.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=barpolar].marker.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=barpolar].marker.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=barpolar].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=barpolar].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=barpolar].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=barpolar].marker.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=barpolar].marker.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=barpolar].marker.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=barpolar].marker.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=barpolar].marker.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=barpolar].marker.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=barpolar].marker.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=barpolar].marker.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=barpolar].marker.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=barpolar].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=barpolar].marker.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=barpolar].marker.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=barpolar].marker.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=barpolar].marker.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=barpolar].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=barpolar].marker.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=barpolar].marker.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=barpolar].marker.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=barpolar].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=barpolar].marker.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=barpolar].marker.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=barpolar].marker.colorbar.title.font  Type: color    family  Parent: data[type=barpolar].marker.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=barpolar].marker.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=barpolar].marker.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=barpolar].marker.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=barpolar].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=barpolar].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=barpolar].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=barpolar].marker.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=barpolar].marker.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=barpolar].marker.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=barpolar].marker.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=barpolar].marker.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=barpolar].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=barpolar].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=barpolar].marker.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=barpolar].marker.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=barpolar].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=barpolar].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colorscale  Parent: data[type=barpolar].marker  Type: colorscale Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    line  Parent: data[type=barpolar].marker Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=barpolar].marker.line  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=barpolar].marker.line  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.    cmax  Parent: data[type=barpolar].marker.line  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.    cmid  Parent: data[type=barpolar].marker.line  Type: number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.    cmin  Parent: data[type=barpolar].marker.line  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.    color  Parent: data[type=barpolar].marker.line  Type: color or array of colors Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.    coloraxis  Parent: data[type=barpolar].marker.line  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorscale  Parent: data[type=barpolar].marker.line  Type: colorscale Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    reversescale  Parent: data[type=barpolar].marker.line  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.    width  Parent: data[type=barpolar].marker.line  Type: number or array of numbers greater than or equal to 0 Default: 0 Sets the width (in px) of the lines bounding the marker points.      opacity  Parent: data[type=barpolar].marker  Type: number or array of numbers between or equal to 0 and 1 Default: 1 Sets the opacity of the bars.    pattern  Parent: data[type=barpolar].marker Type: object containing one or more of the keys listed below. Sets the pattern within the marker.    bgcolor  Parent: data[type=barpolar].marker.pattern  Type: color or array of colors When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is "overlay". Otherwise, defaults to a transparent background.    fgcolor  Parent: data[type=barpolar].marker.pattern  Type: color or array of colors When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is "replace". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.    fgopacity  Parent: data[type=barpolar].marker.pattern  Type: number between or equal to 0 and 1 Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is "overlay". Otherwise, defaults to 1.    fillmode  Parent: data[type=barpolar].marker.pattern  Type: enumerated , one of ( "replace" | "overlay" ) Default: "replace" Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.    shape  Parent: data[type=barpolar].marker.pattern  Type: enumerated or array of enumerateds , one of ( "" | "/" | "\" | "x" | "-" | "|" | "+" | "." ) Default: "" Sets the shape of the pattern fill. By default, no pattern is used for filling the area.    size  Parent: data[type=barpolar].marker.pattern  Type: number or array of numbers greater than or equal to 0 Default: 8 Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.    solidity  Parent: data[type=barpolar].marker.pattern  Type: number or array of numbers between or equal to 0 and 1 Default: 0.3 Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.      reversescale  Parent: data[type=barpolar].marker  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.    showscale  Parent: data[type=barpolar].marker  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.      selectedpoints  Parent: data[type=barpolar]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    selected  Parent: data[type=barpolar] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=barpolar].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=barpolar].selected.marker  Type: color Sets the marker color of selected points.    opacity  Parent: data[type=barpolar].selected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of selected points.      textfont  Parent: data[type=barpolar].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=barpolar].selected.textfont  Type: color Sets the text font color of selected points.        unselected  Parent: data[type=barpolar] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=barpolar].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=barpolar].unselected.marker  Type: color Sets the marker color of unselected points, applied only when a selection exists.    opacity  Parent: data[type=barpolar].unselected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of unselected points, applied only when a selection exists.      textfont  Parent: data[type=barpolar].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=barpolar].unselected.textfont  Type: color Sets the text font color of unselected points, applied only when a selection exists.        hoverlabel  Parent: data[type=barpolar] Type: object containing one or more of the keys listed below.    align  Parent: data[type=barpolar].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=barpolar].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=barpolar].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=barpolar].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=barpolar].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=barpolar].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=barpolar].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=barpolar].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=barpolar].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=barpolar].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=barpolar].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=barpolar].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=barpolar].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=barpolar].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      uirevision  Parent: data[type=barpolar]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      scatterternary traces

      










 A scatterternary trace is an object with the key "type" equal to "scatterternary" (i.e. {"type": "scatterternary"}) and any of the keys listed below. Provides similar functionality to the "scatter" type but on a ternary phase diagram. The data is provided by at least two arrays out of `a`, `b`, `c` triplets. 














   type  Parent: data[type=scatterternary]  Type: "scatterternary"    name  Parent: data[type=scatterternary]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=scatterternary]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=scatterternary]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=scatterternary]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=scatterternary]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=scatterternary]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=scatterternary] Type: object containing one or more of the keys listed below.    font  Parent: data[type=scatterternary].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=scatterternary].legendgrouptitle.font  Type: color    family  Parent: data[type=scatterternary].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatterternary].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatterternary].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatterternary].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=scatterternary].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatterternary].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatterternary].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatterternary].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=scatterternary].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=scatterternary]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=scatterternary]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    mode  Parent: data[type=scatterternary]  Type: flaglist string. Any combination of "lines", "markers", "text" joined with a "+" OR "none". Examples: "lines", "markers", "lines+markers", "lines+markers+text", "none" Default: "markers" Determines the drawing mode for this scatter trace. If the provided `mode` includes "text" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is "lines+markers". Otherwise, "lines".    ids  Parent: data[type=scatterternary]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    a  Parent: data[type=scatterternary]  Type: data array Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.    b  Parent: data[type=scatterternary]  Type: data array Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.    c  Parent: data[type=scatterternary]  Type: data array Sets the quantity of component `a` in each data point. If `a`, `b`, and `c` are all provided, they need not be normalized, only the relative values matter. If only two arrays are provided they must be normalized to match `ternary<i>.sum`.    text  Parent: data[type=scatterternary]  Type: string or array of strings Default: "" Sets text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c). If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    textposition  Parent: data[type=scatterternary]  Type: enumerated or array of enumerateds , one of ( "top left" | "top center" | "top right" | "middle left" | "middle center" | "middle right" | "bottom left" | "bottom center" | "bottom right" ) Default: "middle center" Sets the positions of the `text` elements with respects to the (x,y) coordinates.    texttemplate  Parent: data[type=scatterternary]  Type: string or array of strings Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `a`, `b`, `c` and `text`.    hovertext  Parent: data[type=scatterternary]  Type: string or array of strings Default: "" Sets hover text elements associated with each (a,b,c) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b,c). To be seen, trace `hoverinfo` must contain a "text" flag.    hoverinfo  Parent: data[type=scatterternary]  Type: flaglist string. Any combination of "a", "b", "c", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "a", "b", "a+b", "a+b+c", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=scatterternary]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    meta  Parent: data[type=scatterternary]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=scatterternary]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    subplot  Parent: data[type=scatterternary]  Type: subplotid Default: ternary Sets a reference between this trace's data coordinates and a ternary subplot. If "ternary" (the default value), the data refer to `layout.ternary`. If "ternary2", the data refer to `layout.ternary2`, and so on.    marker  Parent: data[type=scatterternary] Type: object containing one or more of the keys listed below.    angle  Parent: data[type=scatterternary].marker  Type: angle Default: 0 Sets the marker angle in respect to `angleref`.    angleref  Parent: data[type=scatterternary].marker  Type: enumerated , one of ( "previous" | "up" ) Default: "up" Sets the reference for marker angle. With "previous", angle 0 points along the line from the previous point to this one. With "up", angle 0 points toward the top of the screen.    autocolorscale  Parent: data[type=scatterternary].marker  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=scatterternary].marker  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.    cmax  Parent: data[type=scatterternary].marker  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.    cmid  Parent: data[type=scatterternary].marker  Type: number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.    cmin  Parent: data[type=scatterternary].marker  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.    color  Parent: data[type=scatterternary].marker  Type: color or array of colors Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.    coloraxis  Parent: data[type=scatterternary].marker  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=scatterternary].marker Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=scatterternary].marker.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=scatterternary].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=scatterternary].marker.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=scatterternary].marker.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=scatterternary].marker.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=scatterternary].marker.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=scatterternary].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=scatterternary].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=scatterternary].marker.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=scatterternary].marker.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=scatterternary].marker.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=scatterternary].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=scatterternary].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=scatterternary].marker.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=scatterternary].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=scatterternary].marker.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=scatterternary].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=scatterternary].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=scatterternary].marker.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=scatterternary].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=scatterternary].marker.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=scatterternary].marker.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=scatterternary].marker.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=scatterternary].marker.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=scatterternary].marker.colorbar.tickfont  Type: color    family  Parent: data[type=scatterternary].marker.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatterternary].marker.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatterternary].marker.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatterternary].marker.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=scatterternary].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatterternary].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatterternary].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatterternary].marker.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=scatterternary].marker.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=scatterternary].marker.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=scatterternary].marker.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=scatterternary].marker.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=scatterternary].marker.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=scatterternary].marker.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=scatterternary].marker.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=scatterternary].marker.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=scatterternary].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=scatterternary].marker.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=scatterternary].marker.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=scatterternary].marker.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=scatterternary].marker.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=scatterternary].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=scatterternary].marker.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=scatterternary].marker.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=scatterternary].marker.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=scatterternary].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=scatterternary].marker.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=scatterternary].marker.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=scatterternary].marker.colorbar.title.font  Type: color    family  Parent: data[type=scatterternary].marker.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatterternary].marker.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatterternary].marker.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatterternary].marker.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=scatterternary].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatterternary].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatterternary].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatterternary].marker.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=scatterternary].marker.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=scatterternary].marker.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=scatterternary].marker.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=scatterternary].marker.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=scatterternary].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=scatterternary].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=scatterternary].marker.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=scatterternary].marker.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=scatterternary].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=scatterternary].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colorscale  Parent: data[type=scatterternary].marker  Type: colorscale Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    gradient  Parent: data[type=scatterternary].marker Type: object containing one or more of the keys listed below.    color  Parent: data[type=scatterternary].marker.gradient  Type: color or array of colors Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.    type  Parent: data[type=scatterternary].marker.gradient  Type: enumerated or array of enumerateds , one of ( "radial" | "horizontal" | "vertical" | "none" ) Default: "none" Sets the type of gradient used to fill the markers      line  Parent: data[type=scatterternary].marker Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=scatterternary].marker.line  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=scatterternary].marker.line  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.    cmax  Parent: data[type=scatterternary].marker.line  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.    cmid  Parent: data[type=scatterternary].marker.line  Type: number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.    cmin  Parent: data[type=scatterternary].marker.line  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.    color  Parent: data[type=scatterternary].marker.line  Type: color or array of colors Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.    coloraxis  Parent: data[type=scatterternary].marker.line  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorscale  Parent: data[type=scatterternary].marker.line  Type: colorscale Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    reversescale  Parent: data[type=scatterternary].marker.line  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.    width  Parent: data[type=scatterternary].marker.line  Type: number or array of numbers greater than or equal to 0 Sets the width (in px) of the lines bounding the marker points.      maxdisplayed  Parent: data[type=scatterternary].marker  Type: number greater than or equal to 0 Default: 0 Sets a maximum number of points to be drawn on the graph. "0" corresponds to no limit.    opacity  Parent: data[type=scatterternary].marker  Type: number or array of numbers between or equal to 0 and 1 Sets the marker opacity.    reversescale  Parent: data[type=scatterternary].marker  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.    showscale  Parent: data[type=scatterternary].marker  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.    size  Parent: data[type=scatterternary].marker  Type: number or array of numbers greater than or equal to 0 Default: 6 Sets the marker size (in px).    sizemin  Parent: data[type=scatterternary].marker  Type: number greater than or equal to 0 Default: 0 Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.    sizemode  Parent: data[type=scatterternary].marker  Type: enumerated , one of ( "diameter" | "area" ) Default: "diameter" Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.    sizeref  Parent: data[type=scatterternary].marker  Type: number Default: 1 Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.    standoff  Parent: data[type=scatterternary].marker  Type: number or array of numbers greater than or equal to 0 Default: 0 Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.    symbol  Parent: data[type=scatterternary].marker  Type: enumerated or array of enumerateds , one of ( "0" | "0" | "circle" | "100" | "100" | "circle-open" | "200" | "200" | "circle-dot" | "300" | "300" | "circle-open-dot" | "1" | "1" | "square" | "101" | "101" | "square-open" | "201" | "201" | "square-dot" | "301" | "301" | "square-open-dot" | "2" | "2" | "diamond" | "102" | "102" | "diamond-open" | "202" | "202" | "diamond-dot" | "302" | "302" | "diamond-open-dot" | "3" | "3" | "cross" | "103" | "103" | "cross-open" | "203" | "203" | "cross-dot" | "303" | "303" | "cross-open-dot" | "4" | "4" | "x" | "104" | "104" | "x-open" | "204" | "204" | "x-dot" | "304" | "304" | "x-open-dot" | "5" | "5" | "triangle-up" | "105" | "105" | "triangle-up-open" | "205" | "205" | "triangle-up-dot" | "305" | "305" | "triangle-up-open-dot" | "6" | "6" | "triangle-down" | "106" | "106" | "triangle-down-open" | "206" | "206" | "triangle-down-dot" | "306" | "306" | "triangle-down-open-dot" | "7" | "7" | "triangle-left" | "107" | "107" | "triangle-left-open" | "207" | "207" | "triangle-left-dot" | "307" | "307" | "triangle-left-open-dot" | "8" | "8" | "triangle-right" | "108" | "108" | "triangle-right-open" | "208" | "208" | "triangle-right-dot" | "308" | "308" | "triangle-right-open-dot" | "9" | "9" | "triangle-ne" | "109" | "109" | "triangle-ne-open" | "209" | "209" | "triangle-ne-dot" | "309" | "309" | "triangle-ne-open-dot" | "10" | "10" | "triangle-se" | "110" | "110" | "triangle-se-open" | "210" | "210" | "triangle-se-dot" | "310" | "310" | "triangle-se-open-dot" | "11" | "11" | "triangle-sw" | "111" | "111" | "triangle-sw-open" | "211" | "211" | "triangle-sw-dot" | "311" | "311" | "triangle-sw-open-dot" | "12" | "12" | "triangle-nw" | "112" | "112" | "triangle-nw-open" | "212" | "212" | "triangle-nw-dot" | "312" | "312" | "triangle-nw-open-dot" | "13" | "13" | "pentagon" | "113" | "113" | "pentagon-open" | "213" | "213" | "pentagon-dot" | "313" | "313" | "pentagon-open-dot" | "14" | "14" | "hexagon" | "114" | "114" | "hexagon-open" | "214" | "214" | "hexagon-dot" | "314" | "314" | "hexagon-open-dot" | "15" | "15" | "hexagon2" | "115" | "115" | "hexagon2-open" | "215" | "215" | "hexagon2-dot" | "315" | "315" | "hexagon2-open-dot" | "16" | "16" | "octagon" | "116" | "116" | "octagon-open" | "216" | "216" | "octagon-dot" | "316" | "316" | "octagon-open-dot" | "17" | "17" | "star" | "117" | "117" | "star-open" | "217" | "217" | "star-dot" | "317" | "317" | "star-open-dot" | "18" | "18" | "hexagram" | "118" | "118" | "hexagram-open" | "218" | "218" | "hexagram-dot" | "318" | "318" | "hexagram-open-dot" | "19" | "19" | "star-triangle-up" | "119" | "119" | "star-triangle-up-open" | "219" | "219" | "star-triangle-up-dot" | "319" | "319" | "star-triangle-up-open-dot" | "20" | "20" | "star-triangle-down" | "120" | "120" | "star-triangle-down-open" | "220" | "220" | "star-triangle-down-dot" | "320" | "320" | "star-triangle-down-open-dot" | "21" | "21" | "star-square" | "121" | "121" | "star-square-open" | "221" | "221" | "star-square-dot" | "321" | "321" | "star-square-open-dot" | "22" | "22" | "star-diamond" | "122" | "122" | "star-diamond-open" | "222" | "222" | "star-diamond-dot" | "322" | "322" | "star-diamond-open-dot" | "23" | "23" | "diamond-tall" | "123" | "123" | "diamond-tall-open" | "223" | "223" | "diamond-tall-dot" | "323" | "323" | "diamond-tall-open-dot" | "24" | "24" | "diamond-wide" | "124" | "124" | "diamond-wide-open" | "224" | "224" | "diamond-wide-dot" | "324" | "324" | "diamond-wide-open-dot" | "25" | "25" | "hourglass" | "125" | "125" | "hourglass-open" | "26" | "26" | "bowtie" | "126" | "126" | "bowtie-open" | "27" | "27" | "circle-cross" | "127" | "127" | "circle-cross-open" | "28" | "28" | "circle-x" | "128" | "128" | "circle-x-open" | "29" | "29" | "square-cross" | "129" | "129" | "square-cross-open" | "30" | "30" | "square-x" | "130" | "130" | "square-x-open" | "31" | "31" | "diamond-cross" | "131" | "131" | "diamond-cross-open" | "32" | "32" | "diamond-x" | "132" | "132" | "diamond-x-open" | "33" | "33" | "cross-thin" | "133" | "133" | "cross-thin-open" | "34" | "34" | "x-thin" | "134" | "134" | "x-thin-open" | "35" | "35" | "asterisk" | "135" | "135" | "asterisk-open" | "36" | "36" | "hash" | "136" | "136" | "hash-open" | "236" | "236" | "hash-dot" | "336" | "336" | "hash-open-dot" | "37" | "37" | "y-up" | "137" | "137" | "y-up-open" | "38" | "38" | "y-down" | "138" | "138" | "y-down-open" | "39" | "39" | "y-left" | "139" | "139" | "y-left-open" | "40" | "40" | "y-right" | "140" | "140" | "y-right-open" | "41" | "41" | "line-ew" | "141" | "141" | "line-ew-open" | "42" | "42" | "line-ns" | "142" | "142" | "line-ns-open" | "43" | "43" | "line-ne" | "143" | "143" | "line-ne-open" | "44" | "44" | "line-nw" | "144" | "144" | "line-nw-open" | "45" | "45" | "arrow-up" | "145" | "145" | "arrow-up-open" | "46" | "46" | "arrow-down" | "146" | "146" | "arrow-down-open" | "47" | "47" | "arrow-left" | "147" | "147" | "arrow-left-open" | "48" | "48" | "arrow-right" | "148" | "148" | "arrow-right-open" | "49" | "49" | "arrow-bar-up" | "149" | "149" | "arrow-bar-up-open" | "50" | "50" | "arrow-bar-down" | "150" | "150" | "arrow-bar-down-open" | "51" | "51" | "arrow-bar-left" | "151" | "151" | "arrow-bar-left-open" | "52" | "52" | "arrow-bar-right" | "152" | "152" | "arrow-bar-right-open" | "53" | "53" | "arrow" | "153" | "153" | "arrow-open" | "54" | "54" | "arrow-wide" | "154" | "154" | "arrow-wide-open" ) Default: "circle" Sets the marker symbol type. Adding 100 is equivalent to appending "-open" to a symbol name. Adding 200 is equivalent to appending "-dot" to a symbol name. Adding 300 is equivalent to appending "-open-dot" or "dot-open" to a symbol name.      line  Parent: data[type=scatterternary] Type: object containing one or more of the keys listed below.    backoff  Parent: data[type=scatterternary].line  Type: number or array of numbers greater than or equal to 0 Default: "auto" Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With "auto" the lines would trim before markers if `marker.angleref` is set to "previous".    color  Parent: data[type=scatterternary].line  Type: color Sets the line color.    dash  Parent: data[type=scatterternary].line  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    shape  Parent: data[type=scatterternary].line  Type: enumerated , one of ( "linear" | "spline" ) Default: "linear" Determines the line shape. With "spline" the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.    smoothing  Parent: data[type=scatterternary].line  Type: number between or equal to 0 and 1.3 Default: 1 Has an effect only if `shape` is set to "spline" Sets the amount of smoothing. "0" corresponds to no smoothing (equivalent to a "linear" shape).    width  Parent: data[type=scatterternary].line  Type: number greater than or equal to 0 Default: 2 Sets the line width (in px).      textfont  Parent: data[type=scatterternary] Type: object containing one or more of the keys listed below. Sets the text font.    color  Parent: data[type=scatterternary].textfont  Type: color or array of colors    family  Parent: data[type=scatterternary].textfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatterternary].textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatterternary].textfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatterternary].textfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=scatterternary].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatterternary].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatterternary].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatterternary].textfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      selectedpoints  Parent: data[type=scatterternary]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    selected  Parent: data[type=scatterternary] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=scatterternary].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scatterternary].selected.marker  Type: color Sets the marker color of selected points.    opacity  Parent: data[type=scatterternary].selected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of selected points.    size  Parent: data[type=scatterternary].selected.marker  Type: number greater than or equal to 0 Sets the marker size of selected points.      textfont  Parent: data[type=scatterternary].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scatterternary].selected.textfont  Type: color Sets the text font color of selected points.        unselected  Parent: data[type=scatterternary] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=scatterternary].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scatterternary].unselected.marker  Type: color Sets the marker color of unselected points, applied only when a selection exists.    opacity  Parent: data[type=scatterternary].unselected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of unselected points, applied only when a selection exists.    size  Parent: data[type=scatterternary].unselected.marker  Type: number greater than or equal to 0 Sets the marker size of unselected points, applied only when a selection exists.      textfont  Parent: data[type=scatterternary].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scatterternary].unselected.textfont  Type: color Sets the text font color of unselected points, applied only when a selection exists.        cliponaxis  Parent: data[type=scatterternary]  Type: boolean Default: true Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to "below traces".    connectgaps  Parent: data[type=scatterternary]  Type: boolean Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.    fill  Parent: data[type=scatterternary]  Type: enumerated , one of ( "none" | "toself" | "tonext" ) Default: "none" Sets the area to fill with a solid color. Use with `fillcolor` if not "none". scatterternary has a subset of the options available to scatter. "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. "tonext" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like "toself" if there is no trace before it. "tonext" should not be used if one trace does not enclose the other.    fillcolor  Parent: data[type=scatterternary]  Type: color Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.    hoverlabel  Parent: data[type=scatterternary] Type: object containing one or more of the keys listed below.    align  Parent: data[type=scatterternary].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=scatterternary].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=scatterternary].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=scatterternary].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=scatterternary].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=scatterternary].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scatterternary].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scatterternary].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scatterternary].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=scatterternary].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scatterternary].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scatterternary].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scatterternary].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=scatterternary].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      hoveron  Parent: data[type=scatterternary]  Type: flaglist string. Any combination of "points", "fills" joined with a "+" Examples: "points", "fills", "points+fills" Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is "toself" or "tonext" and there are no markers or text, then the default is "fills", otherwise it is "points".    sum  Parent: data[type=scatterternary]  Type: number greater than or equal to 0 Default: 0 The number each triplet should sum to, if only two of `a`, `b`, and `c` are provided. This overrides `ternary<i>.sum` to normalize this specific trace, but does not affect the values displayed on the axes. 0 (or missing) means to use ternary<i>.sum    uirevision  Parent: data[type=scatterternary]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      scattersmith traces

      










 A scattersmith trace is an object with the key "type" equal to "scattersmith" (i.e. {"type": "scattersmith"}) and any of the keys listed below. The scattersmith trace type encompasses line charts, scatter charts, text charts, and bubble charts in smith coordinates. The data visualized as scatter point or lines is set in `real` and `imag` (imaginary) coordinates Text (appearing either on the chart or on hover only) is via `text`. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to numerical arrays. 














   type  Parent: data[type=scattersmith]  Type: "scattersmith"    name  Parent: data[type=scattersmith]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=scattersmith]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=scattersmith]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=scattersmith]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=scattersmith]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=scattersmith]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=scattersmith] Type: object containing one or more of the keys listed below.    font  Parent: data[type=scattersmith].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=scattersmith].legendgrouptitle.font  Type: color    family  Parent: data[type=scattersmith].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattersmith].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattersmith].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattersmith].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=scattersmith].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattersmith].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattersmith].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattersmith].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=scattersmith].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=scattersmith]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=scattersmith]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    mode  Parent: data[type=scattersmith]  Type: flaglist string. Any combination of "lines", "markers", "text" joined with a "+" OR "none". Examples: "lines", "markers", "lines+markers", "lines+markers+text", "none" Determines the drawing mode for this scatter trace. If the provided `mode` includes "text" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is "lines+markers". Otherwise, "lines".    ids  Parent: data[type=scattersmith]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    imag  Parent: data[type=scattersmith]  Type: data array Sets the imaginary component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.    real  Parent: data[type=scattersmith]  Type: data array Sets the real component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.    text  Parent: data[type=scattersmith]  Type: string or array of strings Default: "" Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    textposition  Parent: data[type=scattersmith]  Type: enumerated or array of enumerateds , one of ( "top left" | "top center" | "top right" | "middle left" | "middle center" | "middle right" | "bottom left" | "bottom center" | "bottom right" ) Default: "middle center" Sets the positions of the `text` elements with respects to the (x,y) coordinates.    texttemplate  Parent: data[type=scattersmith]  Type: string or array of strings Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `real`, `imag` and `text`.    hovertext  Parent: data[type=scattersmith]  Type: string or array of strings Default: "" Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a "text" flag.    hoverinfo  Parent: data[type=scattersmith]  Type: flaglist string. Any combination of "real", "imag", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "real", "imag", "real+imag", "real+imag+text", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=scattersmith]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    meta  Parent: data[type=scattersmith]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=scattersmith]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    subplot  Parent: data[type=scattersmith]  Type: subplotid Default: smith Sets a reference between this trace's data coordinates and a smith subplot. If "smith" (the default value), the data refer to `layout.smith`. If "smith2", the data refer to `layout.smith2`, and so on.    marker  Parent: data[type=scattersmith] Type: object containing one or more of the keys listed below.    angle  Parent: data[type=scattersmith].marker  Type: angle Default: 0 Sets the marker angle in respect to `angleref`.    angleref  Parent: data[type=scattersmith].marker  Type: enumerated , one of ( "previous" | "up" ) Default: "up" Sets the reference for marker angle. With "previous", angle 0 points along the line from the previous point to this one. With "up", angle 0 points toward the top of the screen.    autocolorscale  Parent: data[type=scattersmith].marker  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=scattersmith].marker  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.    cmax  Parent: data[type=scattersmith].marker  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.    cmid  Parent: data[type=scattersmith].marker  Type: number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.    cmin  Parent: data[type=scattersmith].marker  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.    color  Parent: data[type=scattersmith].marker  Type: color or array of colors Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.    coloraxis  Parent: data[type=scattersmith].marker  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=scattersmith].marker Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=scattersmith].marker.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=scattersmith].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=scattersmith].marker.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=scattersmith].marker.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=scattersmith].marker.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=scattersmith].marker.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=scattersmith].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=scattersmith].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=scattersmith].marker.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=scattersmith].marker.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=scattersmith].marker.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=scattersmith].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=scattersmith].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=scattersmith].marker.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=scattersmith].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=scattersmith].marker.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=scattersmith].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=scattersmith].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=scattersmith].marker.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=scattersmith].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=scattersmith].marker.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=scattersmith].marker.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=scattersmith].marker.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=scattersmith].marker.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=scattersmith].marker.colorbar.tickfont  Type: color    family  Parent: data[type=scattersmith].marker.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattersmith].marker.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattersmith].marker.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattersmith].marker.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=scattersmith].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattersmith].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattersmith].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattersmith].marker.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=scattersmith].marker.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=scattersmith].marker.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=scattersmith].marker.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=scattersmith].marker.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=scattersmith].marker.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=scattersmith].marker.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=scattersmith].marker.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=scattersmith].marker.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=scattersmith].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=scattersmith].marker.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=scattersmith].marker.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=scattersmith].marker.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=scattersmith].marker.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=scattersmith].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=scattersmith].marker.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=scattersmith].marker.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=scattersmith].marker.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=scattersmith].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=scattersmith].marker.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=scattersmith].marker.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=scattersmith].marker.colorbar.title.font  Type: color    family  Parent: data[type=scattersmith].marker.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattersmith].marker.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattersmith].marker.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattersmith].marker.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=scattersmith].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattersmith].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattersmith].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattersmith].marker.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=scattersmith].marker.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=scattersmith].marker.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=scattersmith].marker.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=scattersmith].marker.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=scattersmith].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=scattersmith].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=scattersmith].marker.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=scattersmith].marker.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=scattersmith].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=scattersmith].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colorscale  Parent: data[type=scattersmith].marker  Type: colorscale Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    gradient  Parent: data[type=scattersmith].marker Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattersmith].marker.gradient  Type: color or array of colors Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.    type  Parent: data[type=scattersmith].marker.gradient  Type: enumerated or array of enumerateds , one of ( "radial" | "horizontal" | "vertical" | "none" ) Default: "none" Sets the type of gradient used to fill the markers      line  Parent: data[type=scattersmith].marker Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=scattersmith].marker.line  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=scattersmith].marker.line  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.    cmax  Parent: data[type=scattersmith].marker.line  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.    cmid  Parent: data[type=scattersmith].marker.line  Type: number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.    cmin  Parent: data[type=scattersmith].marker.line  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.    color  Parent: data[type=scattersmith].marker.line  Type: color or array of colors Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.    coloraxis  Parent: data[type=scattersmith].marker.line  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorscale  Parent: data[type=scattersmith].marker.line  Type: colorscale Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    reversescale  Parent: data[type=scattersmith].marker.line  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.    width  Parent: data[type=scattersmith].marker.line  Type: number or array of numbers greater than or equal to 0 Sets the width (in px) of the lines bounding the marker points.      maxdisplayed  Parent: data[type=scattersmith].marker  Type: number greater than or equal to 0 Default: 0 Sets a maximum number of points to be drawn on the graph. "0" corresponds to no limit.    opacity  Parent: data[type=scattersmith].marker  Type: number or array of numbers between or equal to 0 and 1 Sets the marker opacity.    reversescale  Parent: data[type=scattersmith].marker  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.    showscale  Parent: data[type=scattersmith].marker  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.    size  Parent: data[type=scattersmith].marker  Type: number or array of numbers greater than or equal to 0 Default: 6 Sets the marker size (in px).    sizemin  Parent: data[type=scattersmith].marker  Type: number greater than or equal to 0 Default: 0 Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.    sizemode  Parent: data[type=scattersmith].marker  Type: enumerated , one of ( "diameter" | "area" ) Default: "diameter" Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.    sizeref  Parent: data[type=scattersmith].marker  Type: number Default: 1 Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.    standoff  Parent: data[type=scattersmith].marker  Type: number or array of numbers greater than or equal to 0 Default: 0 Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.    symbol  Parent: data[type=scattersmith].marker  Type: enumerated or array of enumerateds , one of ( "0" | "0" | "circle" | "100" | "100" | "circle-open" | "200" | "200" | "circle-dot" | "300" | "300" | "circle-open-dot" | "1" | "1" | "square" | "101" | "101" | "square-open" | "201" | "201" | "square-dot" | "301" | "301" | "square-open-dot" | "2" | "2" | "diamond" | "102" | "102" | "diamond-open" | "202" | "202" | "diamond-dot" | "302" | "302" | "diamond-open-dot" | "3" | "3" | "cross" | "103" | "103" | "cross-open" | "203" | "203" | "cross-dot" | "303" | "303" | "cross-open-dot" | "4" | "4" | "x" | "104" | "104" | "x-open" | "204" | "204" | "x-dot" | "304" | "304" | "x-open-dot" | "5" | "5" | "triangle-up" | "105" | "105" | "triangle-up-open" | "205" | "205" | "triangle-up-dot" | "305" | "305" | "triangle-up-open-dot" | "6" | "6" | "triangle-down" | "106" | "106" | "triangle-down-open" | "206" | "206" | "triangle-down-dot" | "306" | "306" | "triangle-down-open-dot" | "7" | "7" | "triangle-left" | "107" | "107" | "triangle-left-open" | "207" | "207" | "triangle-left-dot" | "307" | "307" | "triangle-left-open-dot" | "8" | "8" | "triangle-right" | "108" | "108" | "triangle-right-open" | "208" | "208" | "triangle-right-dot" | "308" | "308" | "triangle-right-open-dot" | "9" | "9" | "triangle-ne" | "109" | "109" | "triangle-ne-open" | "209" | "209" | "triangle-ne-dot" | "309" | "309" | "triangle-ne-open-dot" | "10" | "10" | "triangle-se" | "110" | "110" | "triangle-se-open" | "210" | "210" | "triangle-se-dot" | "310" | "310" | "triangle-se-open-dot" | "11" | "11" | "triangle-sw" | "111" | "111" | "triangle-sw-open" | "211" | "211" | "triangle-sw-dot" | "311" | "311" | "triangle-sw-open-dot" | "12" | "12" | "triangle-nw" | "112" | "112" | "triangle-nw-open" | "212" | "212" | "triangle-nw-dot" | "312" | "312" | "triangle-nw-open-dot" | "13" | "13" | "pentagon" | "113" | "113" | "pentagon-open" | "213" | "213" | "pentagon-dot" | "313" | "313" | "pentagon-open-dot" | "14" | "14" | "hexagon" | "114" | "114" | "hexagon-open" | "214" | "214" | "hexagon-dot" | "314" | "314" | "hexagon-open-dot" | "15" | "15" | "hexagon2" | "115" | "115" | "hexagon2-open" | "215" | "215" | "hexagon2-dot" | "315" | "315" | "hexagon2-open-dot" | "16" | "16" | "octagon" | "116" | "116" | "octagon-open" | "216" | "216" | "octagon-dot" | "316" | "316" | "octagon-open-dot" | "17" | "17" | "star" | "117" | "117" | "star-open" | "217" | "217" | "star-dot" | "317" | "317" | "star-open-dot" | "18" | "18" | "hexagram" | "118" | "118" | "hexagram-open" | "218" | "218" | "hexagram-dot" | "318" | "318" | "hexagram-open-dot" | "19" | "19" | "star-triangle-up" | "119" | "119" | "star-triangle-up-open" | "219" | "219" | "star-triangle-up-dot" | "319" | "319" | "star-triangle-up-open-dot" | "20" | "20" | "star-triangle-down" | "120" | "120" | "star-triangle-down-open" | "220" | "220" | "star-triangle-down-dot" | "320" | "320" | "star-triangle-down-open-dot" | "21" | "21" | "star-square" | "121" | "121" | "star-square-open" | "221" | "221" | "star-square-dot" | "321" | "321" | "star-square-open-dot" | "22" | "22" | "star-diamond" | "122" | "122" | "star-diamond-open" | "222" | "222" | "star-diamond-dot" | "322" | "322" | "star-diamond-open-dot" | "23" | "23" | "diamond-tall" | "123" | "123" | "diamond-tall-open" | "223" | "223" | "diamond-tall-dot" | "323" | "323" | "diamond-tall-open-dot" | "24" | "24" | "diamond-wide" | "124" | "124" | "diamond-wide-open" | "224" | "224" | "diamond-wide-dot" | "324" | "324" | "diamond-wide-open-dot" | "25" | "25" | "hourglass" | "125" | "125" | "hourglass-open" | "26" | "26" | "bowtie" | "126" | "126" | "bowtie-open" | "27" | "27" | "circle-cross" | "127" | "127" | "circle-cross-open" | "28" | "28" | "circle-x" | "128" | "128" | "circle-x-open" | "29" | "29" | "square-cross" | "129" | "129" | "square-cross-open" | "30" | "30" | "square-x" | "130" | "130" | "square-x-open" | "31" | "31" | "diamond-cross" | "131" | "131" | "diamond-cross-open" | "32" | "32" | "diamond-x" | "132" | "132" | "diamond-x-open" | "33" | "33" | "cross-thin" | "133" | "133" | "cross-thin-open" | "34" | "34" | "x-thin" | "134" | "134" | "x-thin-open" | "35" | "35" | "asterisk" | "135" | "135" | "asterisk-open" | "36" | "36" | "hash" | "136" | "136" | "hash-open" | "236" | "236" | "hash-dot" | "336" | "336" | "hash-open-dot" | "37" | "37" | "y-up" | "137" | "137" | "y-up-open" | "38" | "38" | "y-down" | "138" | "138" | "y-down-open" | "39" | "39" | "y-left" | "139" | "139" | "y-left-open" | "40" | "40" | "y-right" | "140" | "140" | "y-right-open" | "41" | "41" | "line-ew" | "141" | "141" | "line-ew-open" | "42" | "42" | "line-ns" | "142" | "142" | "line-ns-open" | "43" | "43" | "line-ne" | "143" | "143" | "line-ne-open" | "44" | "44" | "line-nw" | "144" | "144" | "line-nw-open" | "45" | "45" | "arrow-up" | "145" | "145" | "arrow-up-open" | "46" | "46" | "arrow-down" | "146" | "146" | "arrow-down-open" | "47" | "47" | "arrow-left" | "147" | "147" | "arrow-left-open" | "48" | "48" | "arrow-right" | "148" | "148" | "arrow-right-open" | "49" | "49" | "arrow-bar-up" | "149" | "149" | "arrow-bar-up-open" | "50" | "50" | "arrow-bar-down" | "150" | "150" | "arrow-bar-down-open" | "51" | "51" | "arrow-bar-left" | "151" | "151" | "arrow-bar-left-open" | "52" | "52" | "arrow-bar-right" | "152" | "152" | "arrow-bar-right-open" | "53" | "53" | "arrow" | "153" | "153" | "arrow-open" | "54" | "54" | "arrow-wide" | "154" | "154" | "arrow-wide-open" ) Default: "circle" Sets the marker symbol type. Adding 100 is equivalent to appending "-open" to a symbol name. Adding 200 is equivalent to appending "-dot" to a symbol name. Adding 300 is equivalent to appending "-open-dot" or "dot-open" to a symbol name.      line  Parent: data[type=scattersmith] Type: object containing one or more of the keys listed below.    backoff  Parent: data[type=scattersmith].line  Type: number or array of numbers greater than or equal to 0 Default: "auto" Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With "auto" the lines would trim before markers if `marker.angleref` is set to "previous".    color  Parent: data[type=scattersmith].line  Type: color Sets the line color.    dash  Parent: data[type=scattersmith].line  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    shape  Parent: data[type=scattersmith].line  Type: enumerated , one of ( "linear" | "spline" ) Default: "linear" Determines the line shape. With "spline" the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.    smoothing  Parent: data[type=scattersmith].line  Type: number between or equal to 0 and 1.3 Default: 1 Has an effect only if `shape` is set to "spline" Sets the amount of smoothing. "0" corresponds to no smoothing (equivalent to a "linear" shape).    width  Parent: data[type=scattersmith].line  Type: number greater than or equal to 0 Default: 2 Sets the line width (in px).      textfont  Parent: data[type=scattersmith] Type: object containing one or more of the keys listed below. Sets the text font.    color  Parent: data[type=scattersmith].textfont  Type: color or array of colors    family  Parent: data[type=scattersmith].textfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattersmith].textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattersmith].textfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattersmith].textfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=scattersmith].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattersmith].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattersmith].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattersmith].textfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      selectedpoints  Parent: data[type=scattersmith]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    selected  Parent: data[type=scattersmith] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=scattersmith].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattersmith].selected.marker  Type: color Sets the marker color of selected points.    opacity  Parent: data[type=scattersmith].selected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of selected points.    size  Parent: data[type=scattersmith].selected.marker  Type: number greater than or equal to 0 Sets the marker size of selected points.      textfont  Parent: data[type=scattersmith].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattersmith].selected.textfont  Type: color Sets the text font color of selected points.        unselected  Parent: data[type=scattersmith] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=scattersmith].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattersmith].unselected.marker  Type: color Sets the marker color of unselected points, applied only when a selection exists.    opacity  Parent: data[type=scattersmith].unselected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of unselected points, applied only when a selection exists.    size  Parent: data[type=scattersmith].unselected.marker  Type: number greater than or equal to 0 Sets the marker size of unselected points, applied only when a selection exists.      textfont  Parent: data[type=scattersmith].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattersmith].unselected.textfont  Type: color Sets the text font color of unselected points, applied only when a selection exists.        cliponaxis  Parent: data[type=scattersmith]  Type: boolean Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to "below traces".    connectgaps  Parent: data[type=scattersmith]  Type: boolean Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.    fill  Parent: data[type=scattersmith]  Type: enumerated , one of ( "none" | "toself" | "tonext" ) Default: "none" Sets the area to fill with a solid color. Use with `fillcolor` if not "none". scattersmith has a subset of the options available to scatter. "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. "tonext" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like "toself" if there is no trace before it. "tonext" should not be used if one trace does not enclose the other.    fillcolor  Parent: data[type=scattersmith]  Type: color Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.    hoverlabel  Parent: data[type=scattersmith] Type: object containing one or more of the keys listed below.    align  Parent: data[type=scattersmith].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=scattersmith].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=scattersmith].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=scattersmith].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=scattersmith].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=scattersmith].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattersmith].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattersmith].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattersmith].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=scattersmith].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattersmith].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattersmith].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattersmith].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=scattersmith].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      hoveron  Parent: data[type=scattersmith]  Type: flaglist string. Any combination of "points", "fills" joined with a "+" Examples: "points", "fills", "points+fills" Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is "toself" or "tonext" and there are no markers or text, then the default is "fills", otherwise it is "points".    uirevision  Parent: data[type=scattersmith]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      sunburst traces

      










 A sunburst trace is an object with the key "type" equal to "sunburst" (i.e. {"type": "sunburst"}) and any of the keys listed below. Visualize hierarchal data spanning outward radially from root to leaves. The sunburst sectors are determined by the entries in "labels" or "ids" and in "parents". 














   type  Parent: data[type=sunburst]  Type: "sunburst"    name  Parent: data[type=sunburst]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=sunburst]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    legend  Parent: data[type=sunburst]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=sunburst]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgrouptitle  Parent: data[type=sunburst] Type: object containing one or more of the keys listed below.    font  Parent: data[type=sunburst].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=sunburst].legendgrouptitle.font  Type: color    family  Parent: data[type=sunburst].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=sunburst].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=sunburst].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=sunburst].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=sunburst].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=sunburst].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=sunburst].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=sunburst].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=sunburst].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=sunburst]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=sunburst]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=sunburst]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    parents  Parent: data[type=sunburst]  Type: data array Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be "ids" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.    values  Parent: data[type=sunburst]  Type: data array Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.    labels  Parent: data[type=sunburst]  Type: data array Sets the labels of each of the sectors.    text  Parent: data[type=sunburst]  Type: data array Sets text elements associated with each sector. If trace `textinfo` contains a "text" flag, these elements will be seen on the chart. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    texttemplate  Parent: data[type=sunburst]  Type: string or array of strings Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry`, `percentParent`, `label` and `value`.    hovertext  Parent: data[type=sunburst]  Type: string or array of strings Default: "" Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a "text" flag.    hoverinfo  Parent: data[type=sunburst]  Type: flaglist string. Any combination of "label", "text", "value", "name", "current path", "percent root", "percent entry", "percent parent" joined with a "+" OR "all" or "none" or "skip". Examples: "label", "text", "label+text", "label+text+value", "all" Default: "label+text+value+name" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=sunburst]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry` and `percentParent`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    meta  Parent: data[type=sunburst]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=sunburst]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    domain  Parent: data[type=sunburst] Type: object containing one or more of the keys listed below.    column  Parent: data[type=sunburst].domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this column in the grid for this sunburst trace .    row  Parent: data[type=sunburst].domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this row in the grid for this sunburst trace .    x  Parent: data[type=sunburst].domain  Type: array Default: [0, 1] Sets the horizontal domain of this sunburst trace (in plot fraction).    y  Parent: data[type=sunburst].domain  Type: array Default: [0, 1] Sets the vertical domain of this sunburst trace (in plot fraction).      marker  Parent: data[type=sunburst] Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=sunburst].marker  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if colors is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=sunburst].marker  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if colors is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.    cmax  Parent: data[type=sunburst].marker  Type: number Sets the upper bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmin` must be set as well.    cmid  Parent: data[type=sunburst].marker  Type: number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if colors is set to a numerical array. Value should have the same units as colors. Has no effect when `marker.cauto` is `false`.    cmin  Parent: data[type=sunburst].marker  Type: number Sets the lower bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmax` must be set as well.    coloraxis  Parent: data[type=sunburst].marker  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=sunburst].marker Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=sunburst].marker.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=sunburst].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=sunburst].marker.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=sunburst].marker.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=sunburst].marker.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=sunburst].marker.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=sunburst].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=sunburst].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=sunburst].marker.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=sunburst].marker.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=sunburst].marker.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=sunburst].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=sunburst].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=sunburst].marker.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=sunburst].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=sunburst].marker.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=sunburst].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=sunburst].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=sunburst].marker.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=sunburst].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=sunburst].marker.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=sunburst].marker.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=sunburst].marker.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=sunburst].marker.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=sunburst].marker.colorbar.tickfont  Type: color    family  Parent: data[type=sunburst].marker.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=sunburst].marker.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=sunburst].marker.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=sunburst].marker.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=sunburst].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=sunburst].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=sunburst].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=sunburst].marker.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=sunburst].marker.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=sunburst].marker.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=sunburst].marker.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=sunburst].marker.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=sunburst].marker.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=sunburst].marker.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=sunburst].marker.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=sunburst].marker.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=sunburst].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=sunburst].marker.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=sunburst].marker.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=sunburst].marker.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=sunburst].marker.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=sunburst].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=sunburst].marker.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=sunburst].marker.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=sunburst].marker.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=sunburst].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=sunburst].marker.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=sunburst].marker.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=sunburst].marker.colorbar.title.font  Type: color    family  Parent: data[type=sunburst].marker.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=sunburst].marker.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=sunburst].marker.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=sunburst].marker.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=sunburst].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=sunburst].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=sunburst].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=sunburst].marker.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=sunburst].marker.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=sunburst].marker.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=sunburst].marker.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=sunburst].marker.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=sunburst].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=sunburst].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=sunburst].marker.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=sunburst].marker.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=sunburst].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=sunburst].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colors  Parent: data[type=sunburst].marker  Type: data array Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.    colorscale  Parent: data[type=sunburst].marker  Type: colorscale Sets the colorscale. Has an effect only if colors is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    line  Parent: data[type=sunburst].marker Type: object containing one or more of the keys listed below.    color  Parent: data[type=sunburst].marker.line  Type: color or array of colors Sets the color of the line enclosing each sector. Defaults to the `paper_bgcolor` value.    width  Parent: data[type=sunburst].marker.line  Type: number or array of numbers greater than or equal to 0 Default: 1 Sets the width (in px) of the line enclosing each sector.      pattern  Parent: data[type=sunburst].marker Type: object containing one or more of the keys listed below. Sets the pattern within the marker.    bgcolor  Parent: data[type=sunburst].marker.pattern  Type: color or array of colors When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is "overlay". Otherwise, defaults to a transparent background.    fgcolor  Parent: data[type=sunburst].marker.pattern  Type: color or array of colors When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is "replace". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.    fgopacity  Parent: data[type=sunburst].marker.pattern  Type: number between or equal to 0 and 1 Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is "overlay". Otherwise, defaults to 1.    fillmode  Parent: data[type=sunburst].marker.pattern  Type: enumerated , one of ( "replace" | "overlay" ) Default: "replace" Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.    shape  Parent: data[type=sunburst].marker.pattern  Type: enumerated or array of enumerateds , one of ( "" | "/" | "\" | "x" | "-" | "|" | "+" | "." ) Default: "" Sets the shape of the pattern fill. By default, no pattern is used for filling the area.    size  Parent: data[type=sunburst].marker.pattern  Type: number or array of numbers greater than or equal to 0 Default: 8 Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.    solidity  Parent: data[type=sunburst].marker.pattern  Type: number or array of numbers between or equal to 0 and 1 Default: 0.3 Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.      reversescale  Parent: data[type=sunburst].marker  Type: boolean Reverses the color mapping if true. Has an effect only if colors is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.    showscale  Parent: data[type=sunburst].marker  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if colors is set to a numerical array.      textfont  Parent: data[type=sunburst] Type: object containing one or more of the keys listed below. Sets the font used for `textinfo`.    color  Parent: data[type=sunburst].textfont  Type: color or array of colors    family  Parent: data[type=sunburst].textfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=sunburst].textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=sunburst].textfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=sunburst].textfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=sunburst].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=sunburst].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=sunburst].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=sunburst].textfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      textinfo  Parent: data[type=sunburst]  Type: flaglist string. Any combination of "label", "text", "value", "current path", "percent root", "percent entry", "percent parent" joined with a "+" OR "none". Examples: "label", "text", "label+text", "label+text+value", "none" Determines which trace information appear on the graph.    branchvalues  Parent: data[type=sunburst]  Type: enumerated , one of ( "remainder" | "total" ) Default: "remainder" Determines how the items in `values` are summed. When set to "total", items in `values` are taken to be value of all its descendants. When set to "remainder", items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.    count  Parent: data[type=sunburst]  Type: flaglist string. Any combination of "branches", "leaves" joined with a "+" Examples: "branches", "leaves", "branches+leaves" Default: "leaves" Determines default for `values` when it is not provided, by inferring a 1 for each of the "leaves" and/or "branches", otherwise 0.    hoverlabel  Parent: data[type=sunburst] Type: object containing one or more of the keys listed below.    align  Parent: data[type=sunburst].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=sunburst].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=sunburst].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=sunburst].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=sunburst].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=sunburst].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=sunburst].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=sunburst].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=sunburst].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=sunburst].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=sunburst].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=sunburst].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=sunburst].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=sunburst].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      insidetextfont  Parent: data[type=sunburst] Type: object containing one or more of the keys listed below. Sets the font used for `textinfo` lying inside the sector.    color  Parent: data[type=sunburst].insidetextfont  Type: color or array of colors    family  Parent: data[type=sunburst].insidetextfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=sunburst].insidetextfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=sunburst].insidetextfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=sunburst].insidetextfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=sunburst].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=sunburst].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=sunburst].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=sunburst].insidetextfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      insidetextorientation  Parent: data[type=sunburst]  Type: enumerated , one of ( "horizontal" | "radial" | "tangential" | "auto" ) Default: "auto" Controls the orientation of the text inside chart sectors. When set to "auto", text may be oriented in any direction in order to be as big as possible in the middle of a sector. The "horizontal" option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The "radial" option orients text along the radius of the sector. The "tangential" option orients text perpendicular to the radius of the sector.    outsidetextfont  Parent: data[type=sunburst] Type: object containing one or more of the keys listed below. Sets the font used for `textinfo` lying outside the sector. This option refers to the root of the hierarchy presented at the center of a sunburst graph. Please note that if a hierarchy has multiple root nodes, this option won't have any effect and `insidetextfont` would be used.    color  Parent: data[type=sunburst].outsidetextfont  Type: color or array of colors    family  Parent: data[type=sunburst].outsidetextfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=sunburst].outsidetextfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=sunburst].outsidetextfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=sunburst].outsidetextfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=sunburst].outsidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=sunburst].outsidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=sunburst].outsidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=sunburst].outsidetextfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      root  Parent: data[type=sunburst] Type: object containing one or more of the keys listed below.    color  Parent: data[type=sunburst].root  Type: color Default: "rgba(0,0,0,0)" sets the color of the root node for a sunburst/treemap/icicle trace. this has no effect when a colorscale is used to set the markers.      leaf  Parent: data[type=sunburst] Type: object containing one or more of the keys listed below.    opacity  Parent: data[type=sunburst].leaf  Type: number between or equal to 0 and 1 Sets the opacity of the leaves. With colorscale it is defaulted to 1; otherwise it is defaulted to 0.7      level  Parent: data[type=sunburst]  Type: number or categorical coordinate string Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an "id" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.    maxdepth  Parent: data[type=sunburst]  Type: integer Default: -1 Sets the number of rendered sectors from any given `level`. Set `maxdepth` to "-1" to render all the levels in the hierarchy.    rotation  Parent: data[type=sunburst]  Type: angle Default: 0 Rotates the whole diagram counterclockwise by some angle. By default the first slice starts at 3 o'clock.    sort  Parent: data[type=sunburst]  Type: boolean Default: true Determines whether or not the sectors are reordered from largest to smallest.    uirevision  Parent: data[type=sunburst]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      treemap traces

      










 A treemap trace is an object with the key "type" equal to "treemap" (i.e. {"type": "treemap"}) and any of the keys listed below. Visualize hierarchal data from leaves (and/or outer branches) towards root with rectangles. The treemap sectors are determined by the entries in "labels" or "ids" and in "parents". 














   type  Parent: data[type=treemap]  Type: "treemap"    name  Parent: data[type=treemap]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=treemap]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    legend  Parent: data[type=treemap]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=treemap]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgrouptitle  Parent: data[type=treemap] Type: object containing one or more of the keys listed below.    font  Parent: data[type=treemap].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=treemap].legendgrouptitle.font  Type: color    family  Parent: data[type=treemap].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=treemap].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=treemap].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=treemap].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=treemap].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=treemap].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=treemap].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=treemap].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=treemap].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=treemap]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=treemap]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=treemap]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    parents  Parent: data[type=treemap]  Type: data array Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be "ids" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.    values  Parent: data[type=treemap]  Type: data array Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.    labels  Parent: data[type=treemap]  Type: data array Sets the labels of each of the sectors.    text  Parent: data[type=treemap]  Type: data array Sets text elements associated with each sector. If trace `textinfo` contains a "text" flag, these elements will be seen on the chart. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    textposition  Parent: data[type=treemap]  Type: enumerated , one of ( "top left" | "top center" | "top right" | "middle left" | "middle center" | "middle right" | "bottom left" | "bottom center" | "bottom right" ) Default: "top left" Sets the positions of the `text` elements.    texttemplate  Parent: data[type=treemap]  Type: string or array of strings Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry`, `percentParent`, `label` and `value`.    hovertext  Parent: data[type=treemap]  Type: string or array of strings Default: "" Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a "text" flag.    hoverinfo  Parent: data[type=treemap]  Type: flaglist string. Any combination of "label", "text", "value", "name", "current path", "percent root", "percent entry", "percent parent" joined with a "+" OR "all" or "none" or "skip". Examples: "label", "text", "label+text", "label+text+value", "all" Default: "label+text+value+name" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=treemap]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry` and `percentParent`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    meta  Parent: data[type=treemap]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=treemap]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    domain  Parent: data[type=treemap] Type: object containing one or more of the keys listed below.    column  Parent: data[type=treemap].domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this column in the grid for this treemap trace .    row  Parent: data[type=treemap].domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this row in the grid for this treemap trace .    x  Parent: data[type=treemap].domain  Type: array Default: [0, 1] Sets the horizontal domain of this treemap trace (in plot fraction).    y  Parent: data[type=treemap].domain  Type: array Default: [0, 1] Sets the vertical domain of this treemap trace (in plot fraction).      marker  Parent: data[type=treemap] Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=treemap].marker  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if colors is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=treemap].marker  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if colors is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.    cmax  Parent: data[type=treemap].marker  Type: number Sets the upper bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmin` must be set as well.    cmid  Parent: data[type=treemap].marker  Type: number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if colors is set to a numerical array. Value should have the same units as colors. Has no effect when `marker.cauto` is `false`.    cmin  Parent: data[type=treemap].marker  Type: number Sets the lower bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmax` must be set as well.    coloraxis  Parent: data[type=treemap].marker  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=treemap].marker Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=treemap].marker.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=treemap].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=treemap].marker.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=treemap].marker.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=treemap].marker.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=treemap].marker.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=treemap].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=treemap].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=treemap].marker.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=treemap].marker.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=treemap].marker.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=treemap].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=treemap].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=treemap].marker.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=treemap].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=treemap].marker.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=treemap].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=treemap].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=treemap].marker.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=treemap].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=treemap].marker.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=treemap].marker.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=treemap].marker.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=treemap].marker.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=treemap].marker.colorbar.tickfont  Type: color    family  Parent: data[type=treemap].marker.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=treemap].marker.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=treemap].marker.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=treemap].marker.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=treemap].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=treemap].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=treemap].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=treemap].marker.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=treemap].marker.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=treemap].marker.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=treemap].marker.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=treemap].marker.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=treemap].marker.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=treemap].marker.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=treemap].marker.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=treemap].marker.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=treemap].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=treemap].marker.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=treemap].marker.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=treemap].marker.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=treemap].marker.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=treemap].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=treemap].marker.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=treemap].marker.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=treemap].marker.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=treemap].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=treemap].marker.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=treemap].marker.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=treemap].marker.colorbar.title.font  Type: color    family  Parent: data[type=treemap].marker.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=treemap].marker.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=treemap].marker.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=treemap].marker.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=treemap].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=treemap].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=treemap].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=treemap].marker.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=treemap].marker.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=treemap].marker.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=treemap].marker.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=treemap].marker.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=treemap].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=treemap].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=treemap].marker.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=treemap].marker.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=treemap].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=treemap].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colors  Parent: data[type=treemap].marker  Type: data array Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.    colorscale  Parent: data[type=treemap].marker  Type: colorscale Sets the colorscale. Has an effect only if colors is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    cornerradius  Parent: data[type=treemap].marker  Type: number greater than or equal to 0 Default: 0 Sets the maximum rounding of corners (in px).    depthfade  Parent: data[type=treemap].marker  Type: enumerated , one of ( true | false | "reversed" ) Determines if the sector colors are faded towards the background from the leaves up to the headers. This option is unavailable when a `colorscale` is present, defaults to false when `marker.colors` is set, but otherwise defaults to true. When set to "reversed", the fading direction is inverted, that is the top elements within hierarchy are drawn with fully saturated colors while the leaves are faded towards the background color.    line  Parent: data[type=treemap].marker Type: object containing one or more of the keys listed below.    color  Parent: data[type=treemap].marker.line  Type: color or array of colors Sets the color of the line enclosing each sector. Defaults to the `paper_bgcolor` value.    width  Parent: data[type=treemap].marker.line  Type: number or array of numbers greater than or equal to 0 Default: 1 Sets the width (in px) of the line enclosing each sector.      pad  Parent: data[type=treemap].marker Type: object containing one or more of the keys listed below.    b  Parent: data[type=treemap].marker.pad  Type: number greater than or equal to 0 Sets the padding form the bottom (in px).    l  Parent: data[type=treemap].marker.pad  Type: number greater than or equal to 0 Sets the padding form the left (in px).    r  Parent: data[type=treemap].marker.pad  Type: number greater than or equal to 0 Sets the padding form the right (in px).    t  Parent: data[type=treemap].marker.pad  Type: number greater than or equal to 0 Sets the padding form the top (in px).      pattern  Parent: data[type=treemap].marker Type: object containing one or more of the keys listed below. Sets the pattern within the marker.    bgcolor  Parent: data[type=treemap].marker.pattern  Type: color or array of colors When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is "overlay". Otherwise, defaults to a transparent background.    fgcolor  Parent: data[type=treemap].marker.pattern  Type: color or array of colors When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is "replace". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.    fgopacity  Parent: data[type=treemap].marker.pattern  Type: number between or equal to 0 and 1 Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is "overlay". Otherwise, defaults to 1.    fillmode  Parent: data[type=treemap].marker.pattern  Type: enumerated , one of ( "replace" | "overlay" ) Default: "replace" Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.    shape  Parent: data[type=treemap].marker.pattern  Type: enumerated or array of enumerateds , one of ( "" | "/" | "\" | "x" | "-" | "|" | "+" | "." ) Default: "" Sets the shape of the pattern fill. By default, no pattern is used for filling the area.    size  Parent: data[type=treemap].marker.pattern  Type: number or array of numbers greater than or equal to 0 Default: 8 Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.    solidity  Parent: data[type=treemap].marker.pattern  Type: number or array of numbers between or equal to 0 and 1 Default: 0.3 Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.      reversescale  Parent: data[type=treemap].marker  Type: boolean Reverses the color mapping if true. Has an effect only if colors is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.    showscale  Parent: data[type=treemap].marker  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if colors is set to a numerical array.      textfont  Parent: data[type=treemap] Type: object containing one or more of the keys listed below. Sets the font used for `textinfo`.    color  Parent: data[type=treemap].textfont  Type: color or array of colors    family  Parent: data[type=treemap].textfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=treemap].textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=treemap].textfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=treemap].textfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=treemap].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=treemap].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=treemap].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=treemap].textfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      textinfo  Parent: data[type=treemap]  Type: flaglist string. Any combination of "label", "text", "value", "current path", "percent root", "percent entry", "percent parent" joined with a "+" OR "none". Examples: "label", "text", "label+text", "label+text+value", "none" Determines which trace information appear on the graph.    branchvalues  Parent: data[type=treemap]  Type: enumerated , one of ( "remainder" | "total" ) Default: "remainder" Determines how the items in `values` are summed. When set to "total", items in `values` are taken to be value of all its descendants. When set to "remainder", items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.    count  Parent: data[type=treemap]  Type: flaglist string. Any combination of "branches", "leaves" joined with a "+" Examples: "branches", "leaves", "branches+leaves" Default: "leaves" Determines default for `values` when it is not provided, by inferring a 1 for each of the "leaves" and/or "branches", otherwise 0.    tiling  Parent: data[type=treemap] Type: object containing one or more of the keys listed below.    flip  Parent: data[type=treemap].tiling  Type: flaglist string. Any combination of "x", "y" joined with a "+" Examples: "x", "y", "x+y" Default: "" Determines if the positions obtained from solver are flipped on each axis.    packing  Parent: data[type=treemap].tiling  Type: enumerated , one of ( "squarify" | "binary" | "dice" | "slice" | "slice-dice" | "dice-slice" ) Default: "squarify" Determines d3 treemap solver. For more info please refer to https://github.com/d3/d3-hierarchy#treemap-tiling    pad  Parent: data[type=treemap].tiling  Type: number greater than or equal to 0 Default: 3 Sets the inner padding (in px).    squarifyratio  Parent: data[type=treemap].tiling  Type: number greater than or equal to 1 Default: 1 When using "squarify" `packing` algorithm, according to https://github.com/d3/d3-hierarchy/blob/v3.1.1/README.md#squarify_ratio this option specifies the desired aspect ratio of the generated rectangles. The ratio must be specified as a number greater than or equal to one. Note that the orientation of the generated rectangles (tall or wide) is not implied by the ratio; for example, a ratio of two will attempt to produce a mixture of rectangles whose width:height ratio is either 2:1 or 1:2. When using "squarify", unlike d3 which uses the Golden Ratio i.e. 1.618034, Plotly applies 1 to increase squares in treemap layouts.      pathbar  Parent: data[type=treemap] Type: object containing one or more of the keys listed below.    edgeshape  Parent: data[type=treemap].pathbar  Type: enumerated , one of ( ">" | "<" | "|" | "/" | "\" ) Default: ">" Determines which shape is used for edges between `barpath` labels.    side  Parent: data[type=treemap].pathbar  Type: enumerated , one of ( "top" | "bottom" ) Default: "top" Determines on which side of the the treemap the `pathbar` should be presented.    textfont  Parent: data[type=treemap].pathbar Type: object containing one or more of the keys listed below. Sets the font used inside `pathbar`.    color  Parent: data[type=treemap].pathbar.textfont  Type: color or array of colors    family  Parent: data[type=treemap].pathbar.textfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=treemap].pathbar.textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=treemap].pathbar.textfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=treemap].pathbar.textfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=treemap].pathbar.textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=treemap].pathbar.textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=treemap].pathbar.textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=treemap].pathbar.textfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      thickness  Parent: data[type=treemap].pathbar  Type: number greater than or equal to 12 Sets the thickness of `pathbar` (in px). If not specified the `pathbar.textfont.size` is used with 3 pixles extra padding on each side.    visible  Parent: data[type=treemap].pathbar  Type: boolean Default: true Determines if the path bar is drawn i.e. outside the trace `domain` and with one pixel gap.      hoverlabel  Parent: data[type=treemap] Type: object containing one or more of the keys listed below.    align  Parent: data[type=treemap].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=treemap].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=treemap].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=treemap].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=treemap].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=treemap].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=treemap].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=treemap].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=treemap].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=treemap].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=treemap].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=treemap].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=treemap].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=treemap].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      insidetextfont  Parent: data[type=treemap] Type: object containing one or more of the keys listed below. Sets the font used for `textinfo` lying inside the sector.    color  Parent: data[type=treemap].insidetextfont  Type: color or array of colors    family  Parent: data[type=treemap].insidetextfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=treemap].insidetextfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=treemap].insidetextfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=treemap].insidetextfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=treemap].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=treemap].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=treemap].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=treemap].insidetextfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      outsidetextfont  Parent: data[type=treemap] Type: object containing one or more of the keys listed below. Sets the font used for `textinfo` lying outside the sector. This option refers to the root of the hierarchy presented on top left corner of a treemap graph. Please note that if a hierarchy has multiple root nodes, this option won't have any effect and `insidetextfont` would be used.    color  Parent: data[type=treemap].outsidetextfont  Type: color or array of colors    family  Parent: data[type=treemap].outsidetextfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=treemap].outsidetextfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=treemap].outsidetextfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=treemap].outsidetextfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=treemap].outsidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=treemap].outsidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=treemap].outsidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=treemap].outsidetextfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      root  Parent: data[type=treemap] Type: object containing one or more of the keys listed below.    color  Parent: data[type=treemap].root  Type: color Default: "rgba(0,0,0,0)" sets the color of the root node for a sunburst/treemap/icicle trace. this has no effect when a colorscale is used to set the markers.      level  Parent: data[type=treemap]  Type: number or categorical coordinate string Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an "id" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.    maxdepth  Parent: data[type=treemap]  Type: integer Default: -1 Sets the number of rendered sectors from any given `level`. Set `maxdepth` to "-1" to render all the levels in the hierarchy.    sort  Parent: data[type=treemap]  Type: boolean Default: true Determines whether or not the sectors are reordered from largest to smallest.    uirevision  Parent: data[type=treemap]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      icicle traces

      










 A icicle trace is an object with the key "type" equal to "icicle" (i.e. {"type": "icicle"}) and any of the keys listed below. Visualize hierarchal data from leaves (and/or outer branches) towards root with rectangles. The icicle sectors are determined by the entries in "labels" or "ids" and in "parents". 














   type  Parent: data[type=icicle]  Type: "icicle"    name  Parent: data[type=icicle]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=icicle]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    legend  Parent: data[type=icicle]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=icicle]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgrouptitle  Parent: data[type=icicle] Type: object containing one or more of the keys listed below.    font  Parent: data[type=icicle].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=icicle].legendgrouptitle.font  Type: color    family  Parent: data[type=icicle].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=icicle].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=icicle].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=icicle].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=icicle].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=icicle].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=icicle].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=icicle].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=icicle].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=icicle]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=icicle]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=icicle]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    parents  Parent: data[type=icicle]  Type: data array Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be "ids" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.    values  Parent: data[type=icicle]  Type: data array Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.    labels  Parent: data[type=icicle]  Type: data array Sets the labels of each of the sectors.    text  Parent: data[type=icicle]  Type: data array Sets text elements associated with each sector. If trace `textinfo` contains a "text" flag, these elements will be seen on the chart. If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    textposition  Parent: data[type=icicle]  Type: enumerated , one of ( "top left" | "top center" | "top right" | "middle left" | "middle center" | "middle right" | "bottom left" | "bottom center" | "bottom right" ) Default: "top left" Sets the positions of the `text` elements.    texttemplate  Parent: data[type=icicle]  Type: string or array of strings Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry`, `percentParent`, `label` and `value`.    hovertext  Parent: data[type=icicle]  Type: string or array of strings Default: "" Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a "text" flag.    hoverinfo  Parent: data[type=icicle]  Type: flaglist string. Any combination of "label", "text", "value", "name", "current path", "percent root", "percent entry", "percent parent" joined with a "+" OR "all" or "none" or "skip". Examples: "label", "text", "label+text", "label+text+value", "all" Default: "label+text+value+name" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=icicle]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry` and `percentParent`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    meta  Parent: data[type=icicle]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=icicle]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    domain  Parent: data[type=icicle] Type: object containing one or more of the keys listed below.    column  Parent: data[type=icicle].domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this column in the grid for this icicle trace .    row  Parent: data[type=icicle].domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this row in the grid for this icicle trace .    x  Parent: data[type=icicle].domain  Type: array Default: [0, 1] Sets the horizontal domain of this icicle trace (in plot fraction).    y  Parent: data[type=icicle].domain  Type: array Default: [0, 1] Sets the vertical domain of this icicle trace (in plot fraction).      marker  Parent: data[type=icicle] Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=icicle].marker  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if colors is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=icicle].marker  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if colors is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.    cmax  Parent: data[type=icicle].marker  Type: number Sets the upper bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmin` must be set as well.    cmid  Parent: data[type=icicle].marker  Type: number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if colors is set to a numerical array. Value should have the same units as colors. Has no effect when `marker.cauto` is `false`.    cmin  Parent: data[type=icicle].marker  Type: number Sets the lower bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmax` must be set as well.    coloraxis  Parent: data[type=icicle].marker  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=icicle].marker Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=icicle].marker.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=icicle].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=icicle].marker.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=icicle].marker.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=icicle].marker.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=icicle].marker.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=icicle].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=icicle].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=icicle].marker.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=icicle].marker.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=icicle].marker.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=icicle].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=icicle].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=icicle].marker.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=icicle].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=icicle].marker.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=icicle].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=icicle].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=icicle].marker.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=icicle].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=icicle].marker.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=icicle].marker.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=icicle].marker.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=icicle].marker.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=icicle].marker.colorbar.tickfont  Type: color    family  Parent: data[type=icicle].marker.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=icicle].marker.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=icicle].marker.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=icicle].marker.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=icicle].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=icicle].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=icicle].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=icicle].marker.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=icicle].marker.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=icicle].marker.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=icicle].marker.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=icicle].marker.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=icicle].marker.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=icicle].marker.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=icicle].marker.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=icicle].marker.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=icicle].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=icicle].marker.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=icicle].marker.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=icicle].marker.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=icicle].marker.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=icicle].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=icicle].marker.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=icicle].marker.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=icicle].marker.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=icicle].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=icicle].marker.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=icicle].marker.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=icicle].marker.colorbar.title.font  Type: color    family  Parent: data[type=icicle].marker.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=icicle].marker.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=icicle].marker.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=icicle].marker.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=icicle].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=icicle].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=icicle].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=icicle].marker.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=icicle].marker.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=icicle].marker.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=icicle].marker.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=icicle].marker.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=icicle].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=icicle].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=icicle].marker.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=icicle].marker.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=icicle].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=icicle].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colors  Parent: data[type=icicle].marker  Type: data array Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.    colorscale  Parent: data[type=icicle].marker  Type: colorscale Sets the colorscale. Has an effect only if colors is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    line  Parent: data[type=icicle].marker Type: object containing one or more of the keys listed below.    color  Parent: data[type=icicle].marker.line  Type: color or array of colors Sets the color of the line enclosing each sector. Defaults to the `paper_bgcolor` value.    width  Parent: data[type=icicle].marker.line  Type: number or array of numbers greater than or equal to 0 Default: 1 Sets the width (in px) of the line enclosing each sector.      pattern  Parent: data[type=icicle].marker Type: object containing one or more of the keys listed below. Sets the pattern within the marker.    bgcolor  Parent: data[type=icicle].marker.pattern  Type: color or array of colors When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is "overlay". Otherwise, defaults to a transparent background.    fgcolor  Parent: data[type=icicle].marker.pattern  Type: color or array of colors When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is "replace". Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.    fgopacity  Parent: data[type=icicle].marker.pattern  Type: number between or equal to 0 and 1 Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is "overlay". Otherwise, defaults to 1.    fillmode  Parent: data[type=icicle].marker.pattern  Type: enumerated , one of ( "replace" | "overlay" ) Default: "replace" Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.    shape  Parent: data[type=icicle].marker.pattern  Type: enumerated or array of enumerateds , one of ( "" | "/" | "\" | "x" | "-" | "|" | "+" | "." ) Default: "" Sets the shape of the pattern fill. By default, no pattern is used for filling the area.    size  Parent: data[type=icicle].marker.pattern  Type: number or array of numbers greater than or equal to 0 Default: 8 Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.    solidity  Parent: data[type=icicle].marker.pattern  Type: number or array of numbers between or equal to 0 and 1 Default: 0.3 Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.      reversescale  Parent: data[type=icicle].marker  Type: boolean Reverses the color mapping if true. Has an effect only if colors is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.    showscale  Parent: data[type=icicle].marker  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if colors is set to a numerical array.      textfont  Parent: data[type=icicle] Type: object containing one or more of the keys listed below. Sets the font used for `textinfo`.    color  Parent: data[type=icicle].textfont  Type: color or array of colors    family  Parent: data[type=icicle].textfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=icicle].textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=icicle].textfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=icicle].textfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=icicle].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=icicle].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=icicle].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=icicle].textfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      textinfo  Parent: data[type=icicle]  Type: flaglist string. Any combination of "label", "text", "value", "current path", "percent root", "percent entry", "percent parent" joined with a "+" OR "none". Examples: "label", "text", "label+text", "label+text+value", "none" Determines which trace information appear on the graph.    branchvalues  Parent: data[type=icicle]  Type: enumerated , one of ( "remainder" | "total" ) Default: "remainder" Determines how the items in `values` are summed. When set to "total", items in `values` are taken to be value of all its descendants. When set to "remainder", items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.    count  Parent: data[type=icicle]  Type: flaglist string. Any combination of "branches", "leaves" joined with a "+" Examples: "branches", "leaves", "branches+leaves" Default: "leaves" Determines default for `values` when it is not provided, by inferring a 1 for each of the "leaves" and/or "branches", otherwise 0.    tiling  Parent: data[type=icicle] Type: object containing one or more of the keys listed below.    flip  Parent: data[type=icicle].tiling  Type: flaglist string. Any combination of "x", "y" joined with a "+" Examples: "x", "y", "x+y" Default: "" Determines if the positions obtained from solver are flipped on each axis.    orientation  Parent: data[type=icicle].tiling  Type: enumerated , one of ( "v" | "h" ) Default: "h" When set in conjunction with `tiling.flip`, determines on which side the root nodes are drawn in the chart. If `tiling.orientation` is "v" and `tiling.flip` is "", the root nodes appear at the top. If `tiling.orientation` is "v" and `tiling.flip` is "y", the root nodes appear at the bottom. If `tiling.orientation` is "h" and `tiling.flip` is "", the root nodes appear at the left. If `tiling.orientation` is "h" and `tiling.flip` is "x", the root nodes appear at the right.    pad  Parent: data[type=icicle].tiling  Type: number greater than or equal to 0 Default: 0 Sets the inner padding (in px).      pathbar  Parent: data[type=icicle] Type: object containing one or more of the keys listed below.    edgeshape  Parent: data[type=icicle].pathbar  Type: enumerated , one of ( ">" | "<" | "|" | "/" | "\" ) Default: ">" Determines which shape is used for edges between `barpath` labels.    side  Parent: data[type=icicle].pathbar  Type: enumerated , one of ( "top" | "bottom" ) Default: "top" Determines on which side of the the treemap the `pathbar` should be presented.    textfont  Parent: data[type=icicle].pathbar Type: object containing one or more of the keys listed below. Sets the font used inside `pathbar`.    color  Parent: data[type=icicle].pathbar.textfont  Type: color or array of colors    family  Parent: data[type=icicle].pathbar.textfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=icicle].pathbar.textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=icicle].pathbar.textfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=icicle].pathbar.textfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=icicle].pathbar.textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=icicle].pathbar.textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=icicle].pathbar.textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=icicle].pathbar.textfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      thickness  Parent: data[type=icicle].pathbar  Type: number greater than or equal to 12 Sets the thickness of `pathbar` (in px). If not specified the `pathbar.textfont.size` is used with 3 pixles extra padding on each side.    visible  Parent: data[type=icicle].pathbar  Type: boolean Default: true Determines if the path bar is drawn i.e. outside the trace `domain` and with one pixel gap.      hoverlabel  Parent: data[type=icicle] Type: object containing one or more of the keys listed below.    align  Parent: data[type=icicle].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=icicle].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=icicle].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=icicle].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=icicle].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=icicle].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=icicle].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=icicle].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=icicle].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=icicle].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=icicle].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=icicle].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=icicle].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=icicle].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      insidetextfont  Parent: data[type=icicle] Type: object containing one or more of the keys listed below. Sets the font used for `textinfo` lying inside the sector.    color  Parent: data[type=icicle].insidetextfont  Type: color or array of colors    family  Parent: data[type=icicle].insidetextfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=icicle].insidetextfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=icicle].insidetextfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=icicle].insidetextfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=icicle].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=icicle].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=icicle].insidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=icicle].insidetextfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      outsidetextfont  Parent: data[type=icicle] Type: object containing one or more of the keys listed below. Sets the font used for `textinfo` lying outside the sector. This option refers to the root of the hierarchy presented on top left corner of a treemap graph. Please note that if a hierarchy has multiple root nodes, this option won't have any effect and `insidetextfont` would be used.    color  Parent: data[type=icicle].outsidetextfont  Type: color or array of colors    family  Parent: data[type=icicle].outsidetextfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=icicle].outsidetextfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=icicle].outsidetextfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=icicle].outsidetextfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=icicle].outsidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=icicle].outsidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=icicle].outsidetextfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=icicle].outsidetextfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      root  Parent: data[type=icicle] Type: object containing one or more of the keys listed below.    color  Parent: data[type=icicle].root  Type: color Default: "rgba(0,0,0,0)" sets the color of the root node for a sunburst/treemap/icicle trace. this has no effect when a colorscale is used to set the markers.      leaf  Parent: data[type=icicle] Type: object containing one or more of the keys listed below.    opacity  Parent: data[type=icicle].leaf  Type: number between or equal to 0 and 1 Sets the opacity of the leaves. With colorscale it is defaulted to 1; otherwise it is defaulted to 0.7      level  Parent: data[type=icicle]  Type: number or categorical coordinate string Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an "id" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.    maxdepth  Parent: data[type=icicle]  Type: integer Default: -1 Sets the number of rendered sectors from any given `level`. Set `maxdepth` to "-1" to render all the levels in the hierarchy.    sort  Parent: data[type=icicle]  Type: boolean Default: true Determines whether or not the sectors are reordered from largest to smallest.    uirevision  Parent: data[type=icicle]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      sankey traces

      










 A sankey trace is an object with the key "type" equal to "sankey" (i.e. {"type": "sankey"}) and any of the keys listed below. Sankey plots for network flow data analysis. The nodes are specified in `nodes` and the links between sources and targets in `links`. The colors are set in `nodes[i].color` and `links[i].color`, otherwise defaults are used. 














   type  Parent: data[type=sankey]  Type: "sankey"    name  Parent: data[type=sankey]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=sankey]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    legend  Parent: data[type=sankey]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=sankey]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgrouptitle  Parent: data[type=sankey] Type: object containing one or more of the keys listed below.    font  Parent: data[type=sankey].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=sankey].legendgrouptitle.font  Type: color    family  Parent: data[type=sankey].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=sankey].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=sankey].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=sankey].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=sankey].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=sankey].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=sankey].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=sankey].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=sankey].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=sankey]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    ids  Parent: data[type=sankey]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    hoverinfo  Parent: data[type=sankey]  Type: flaglist string. Any combination of joined with a "+" OR "all" or "none" or "skip". Examples: "", "", "+", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired. Note that this attribute is superseded by `node.hoverinfo` and `node.hoverinfo` for nodes and links respectively.    meta  Parent: data[type=sankey]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=sankey]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    domain  Parent: data[type=sankey] Type: object containing one or more of the keys listed below.    column  Parent: data[type=sankey].domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this column in the grid for this sankey trace .    row  Parent: data[type=sankey].domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this row in the grid for this sankey trace .    x  Parent: data[type=sankey].domain  Type: array Default: [0, 1] Sets the horizontal domain of this sankey trace (in plot fraction).    y  Parent: data[type=sankey].domain  Type: array Default: [0, 1] Sets the vertical domain of this sankey trace (in plot fraction).      orientation  Parent: data[type=sankey]  Type: enumerated , one of ( "v" | "h" ) Default: "h" Sets the orientation of the Sankey diagram.    node  Parent: data[type=sankey] Type: object containing one or more of the keys listed below. The nodes of the Sankey plot.    align  Parent: data[type=sankey].node  Type: enumerated , one of ( "justify" | "left" | "right" | "center" ) Default: "justify" Sets the alignment method used to position the nodes along the horizontal axis.    color  Parent: data[type=sankey].node  Type: color or array of colors Sets the `node` color. It can be a single value, or an array for specifying color for each `node`. If `node.color` is omitted, then the default `Plotly` color palette will be cycled through to have a variety of colors. These defaults are not fully opaque, to allow some visibility of what is beneath the node.    customdata  Parent: data[type=sankey].node  Type: data array Assigns extra data to each node.    groups  Parent: data[type=sankey].node  Type: array Default: [] Groups of nodes. Each group is defined by an array with the indices of the nodes it contains. Multiple groups can be specified.    hoverinfo  Parent: data[type=sankey].node  Type: enumerated , one of ( "all" | "none" | "skip" ) Default: "all" Determines which trace information appear when hovering nodes. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hoverlabel  Parent: data[type=sankey].node Type: object containing one or more of the keys listed below.    align  Parent: data[type=sankey].node.hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=sankey].node.hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=sankey].node.hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=sankey].node.hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=sankey].node.hoverlabel.font  Type: color or array of colors    family  Parent: data[type=sankey].node.hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=sankey].node.hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=sankey].node.hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=sankey].node.hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=sankey].node.hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=sankey].node.hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=sankey].node.hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=sankey].node.hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=sankey].node.hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      hovertemplate  Parent: data[type=sankey].node  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Variables `sourceLinks` and `targetLinks` are arrays of link objects.Finally, the template string has access to variables `value` and `label`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    label  Parent: data[type=sankey].node  Type: data array Default:  The shown name of the node.    line  Parent: data[type=sankey].node Type: object containing one or more of the keys listed below.    color  Parent: data[type=sankey].node.line  Type: color or array of colors Default: "#444" Sets the color of the `line` around each `node`.    width  Parent: data[type=sankey].node.line  Type: number or array of numbers greater than or equal to 0 Default: 0.5 Sets the width (in px) of the `line` around each `node`.      pad  Parent: data[type=sankey].node  Type: number greater than or equal to 0 Default: 20 Sets the padding (in px) between the `nodes`.    thickness  Parent: data[type=sankey].node  Type: number greater than or equal to 1 Default: 20 Sets the thickness (in px) of the `nodes`.    x  Parent: data[type=sankey].node  Type: data array Default:  The normalized horizontal position of the node.    y  Parent: data[type=sankey].node  Type: data array Default:  The normalized vertical position of the node.      link  Parent: data[type=sankey] Type: object containing one or more of the keys listed below. The links of the Sankey plot.    arrowlen  Parent: data[type=sankey].link  Type: number greater than or equal to 0 Default: 0 Sets the length (in px) of the links arrow, if 0 no arrow will be drawn.    color  Parent: data[type=sankey].link  Type: color or array of colors Sets the `link` color. It can be a single value, or an array for specifying color for each `link`. If `link.color` is omitted, then by default, a translucent grey link will be used.    colorscales  Parent: data[type=sankey].link Type: array of object where each object has one or more of the keys listed below.     cmax  Parent: data[type=sankey].link.colorscales[]  Type: number Default: 1 Sets the upper bound of the color domain.    cmin  Parent: data[type=sankey].link.colorscales[]  Type: number Default: 0 Sets the lower bound of the color domain.    colorscale  Parent: data[type=sankey].link.colorscales[]  Type: colorscale Default: [[0, white], [1, black], ] Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    label  Parent: data[type=sankey].link.colorscales[]  Type: string Default: "" The label of the links to color based on their concentration within a flow.    name  Parent: data[type=sankey].link.colorscales[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=sankey].link.colorscales[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.      customdata  Parent: data[type=sankey].link  Type: data array Assigns extra data to each link.    hovercolor  Parent: data[type=sankey].link  Type: color or array of colors Sets the `link` hover color. It can be a single value, or an array for specifying hover colors for each `link`. If `link.hovercolor` is omitted, then by default, links will become slightly more opaque when hovered over.    hoverinfo  Parent: data[type=sankey].link  Type: enumerated , one of ( "all" | "none" | "skip" ) Default: "all" Determines which trace information appear when hovering links. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hoverlabel  Parent: data[type=sankey].link Type: object containing one or more of the keys listed below.    align  Parent: data[type=sankey].link.hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=sankey].link.hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=sankey].link.hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=sankey].link.hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=sankey].link.hoverlabel.font  Type: color or array of colors    family  Parent: data[type=sankey].link.hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=sankey].link.hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=sankey].link.hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=sankey].link.hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=sankey].link.hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=sankey].link.hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=sankey].link.hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=sankey].link.hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=sankey].link.hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      hovertemplate  Parent: data[type=sankey].link  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Variables `source` and `target` are node objects.Finally, the template string has access to variables `value` and `label`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    label  Parent: data[type=sankey].link  Type: data array Default:  The shown name of the link.    line  Parent: data[type=sankey].link Type: object containing one or more of the keys listed below.    color  Parent: data[type=sankey].link.line  Type: color or array of colors Default: "#444" Sets the color of the `line` around each `link`.    width  Parent: data[type=sankey].link.line  Type: number or array of numbers greater than or equal to 0 Default: 0 Sets the width (in px) of the `line` around each `link`.      source  Parent: data[type=sankey].link  Type: data array Default:  An integer number `[0..nodes.length - 1]` that represents the source node.    target  Parent: data[type=sankey].link  Type: data array Default:  An integer number `[0..nodes.length - 1]` that represents the target node.    value  Parent: data[type=sankey].link  Type: data array Default:  A numeric value representing the flow volume value.      textfont  Parent: data[type=sankey] Type: object containing one or more of the keys listed below. Sets the font for node labels    color  Parent: data[type=sankey].textfont  Type: color    family  Parent: data[type=sankey].textfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=sankey].textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=sankey].textfont  Type: string Default: "auto" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=sankey].textfont  Type: number greater than or equal to 1    style  Parent: data[type=sankey].textfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=sankey].textfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=sankey].textfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=sankey].textfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      selectedpoints  Parent: data[type=sankey]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    arrangement  Parent: data[type=sankey]  Type: enumerated , one of ( "snap" | "perpendicular" | "freeform" | "fixed" ) Default: "snap" If value is `snap` (the default), the node arrangement is assisted by automatic snapping of elements to preserve space between nodes specified via `nodepad`. If value is `perpendicular`, the nodes can only move along a line perpendicular to the flow. If value is `freeform`, the nodes can freely move on the plane. If value is `fixed`, the nodes are stationary.    hoverlabel  Parent: data[type=sankey] Type: object containing one or more of the keys listed below.    align  Parent: data[type=sankey].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=sankey].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=sankey].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=sankey].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=sankey].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=sankey].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=sankey].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=sankey].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=sankey].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=sankey].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=sankey].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=sankey].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=sankey].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=sankey].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      valueformat  Parent: data[type=sankey]  Type: string Default: ".3s" Sets the value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.    valuesuffix  Parent: data[type=sankey]  Type: string Default: "" Adds a unit to follow the value in the hover tooltip. Add a space if a separation is necessary from the value.    uirevision  Parent: data[type=sankey]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      splom traces

      










 A splom trace is an object with the key "type" equal to "splom" (i.e. {"type": "splom"}) and any of the keys listed below. Splom traces generate scatter plot matrix visualizations. Each splom `dimensions` items correspond to a generated axis. Values for each of those dimensions are set in `dimensions[i].values`. Splom traces support all `scattergl` marker style attributes. Specify `layout.grid` attributes and/or layout x-axis and y-axis attributes for more control over the axis positioning and style.  














   type  Parent: data[type=splom]  Type: "splom"    name  Parent: data[type=splom]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=splom]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=splom]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=splom]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=splom]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=splom]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=splom] Type: object containing one or more of the keys listed below.    font  Parent: data[type=splom].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=splom].legendgrouptitle.font  Type: color    family  Parent: data[type=splom].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=splom].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=splom].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=splom].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=splom].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=splom].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=splom].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=splom].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=splom].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=splom]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=splom]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=splom]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    text  Parent: data[type=splom]  Type: string or array of strings Default: "" Sets text elements associated with each (x,y) pair to appear on hover. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates.    dimensions  Parent: data[type=splom] Type: array of object where each object has one or more of the keys listed below.     axis  Parent: data[type=splom].dimensions[] Type: object containing one or more of the keys listed below.    matches  Parent: data[type=splom].dimensions[].axis  Type: boolean Determines whether or not the x & y axes generated by this dimension match. Equivalent to setting the `matches` axis attribute in the layout with the correct axis id.    type  Parent: data[type=splom].dimensions[].axis  Type: enumerated , one of ( "linear" | "log" | "date" | "category" ) Sets the axis type for this dimension's generated x and y axes. Note that the axis `type` values set in layout take precedence over this attribute.      label  Parent: data[type=splom].dimensions[]  Type: string Sets the label corresponding to this splom dimension.    name  Parent: data[type=splom].dimensions[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=splom].dimensions[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    values  Parent: data[type=splom].dimensions[]  Type: data array Sets the dimension values to be plotted.    visible  Parent: data[type=splom].dimensions[]  Type: boolean Default: true Determines whether or not this dimension is shown on the graph. Note that even visible false dimension contribute to the default grid generate by this splom trace.      hovertext  Parent: data[type=splom]  Type: string or array of strings Default: "" Same as `text`.    hoverinfo  Parent: data[type=splom]  Type: flaglist string. Any combination of "x", "y", "z", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "x", "y", "x+y", "x+y+z", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=splom]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    xhoverformat  Parent: data[type=splom]  Type: string Default: "" Sets the hover text formatting rulefor `x` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `xaxis.hoverformat`.    yhoverformat  Parent: data[type=splom]  Type: string Default: "" Sets the hover text formatting rulefor `y` using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"By default the values are formatted using `yaxis.hoverformat`.    meta  Parent: data[type=splom]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=splom]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    marker  Parent: data[type=splom] Type: object containing one or more of the keys listed below.    angle  Parent: data[type=splom].marker  Type: angle Default: 0 Sets the marker angle in respect to `angleref`.    autocolorscale  Parent: data[type=splom].marker  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=splom].marker  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.    cmax  Parent: data[type=splom].marker  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.    cmid  Parent: data[type=splom].marker  Type: number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.    cmin  Parent: data[type=splom].marker  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.    color  Parent: data[type=splom].marker  Type: color or array of colors Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.    coloraxis  Parent: data[type=splom].marker  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=splom].marker Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=splom].marker.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=splom].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=splom].marker.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=splom].marker.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=splom].marker.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=splom].marker.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=splom].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=splom].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=splom].marker.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=splom].marker.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=splom].marker.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=splom].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=splom].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=splom].marker.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=splom].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=splom].marker.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=splom].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=splom].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=splom].marker.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=splom].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=splom].marker.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=splom].marker.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=splom].marker.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=splom].marker.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=splom].marker.colorbar.tickfont  Type: color    family  Parent: data[type=splom].marker.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=splom].marker.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=splom].marker.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=splom].marker.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=splom].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=splom].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=splom].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=splom].marker.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=splom].marker.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=splom].marker.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=splom].marker.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=splom].marker.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=splom].marker.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=splom].marker.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=splom].marker.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=splom].marker.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=splom].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=splom].marker.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=splom].marker.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=splom].marker.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=splom].marker.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=splom].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=splom].marker.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=splom].marker.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=splom].marker.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=splom].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=splom].marker.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=splom].marker.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=splom].marker.colorbar.title.font  Type: color    family  Parent: data[type=splom].marker.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=splom].marker.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=splom].marker.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=splom].marker.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=splom].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=splom].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=splom].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=splom].marker.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=splom].marker.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=splom].marker.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=splom].marker.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=splom].marker.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=splom].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=splom].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=splom].marker.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=splom].marker.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=splom].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=splom].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colorscale  Parent: data[type=splom].marker  Type: colorscale Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    line  Parent: data[type=splom].marker Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=splom].marker.line  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=splom].marker.line  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.    cmax  Parent: data[type=splom].marker.line  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.    cmid  Parent: data[type=splom].marker.line  Type: number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.    cmin  Parent: data[type=splom].marker.line  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.    color  Parent: data[type=splom].marker.line  Type: color or array of colors Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.    coloraxis  Parent: data[type=splom].marker.line  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorscale  Parent: data[type=splom].marker.line  Type: colorscale Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    reversescale  Parent: data[type=splom].marker.line  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.    width  Parent: data[type=splom].marker.line  Type: number or array of numbers greater than or equal to 0 Sets the width (in px) of the lines bounding the marker points.      opacity  Parent: data[type=splom].marker  Type: number or array of numbers between or equal to 0 and 1 Sets the marker opacity.    reversescale  Parent: data[type=splom].marker  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.    showscale  Parent: data[type=splom].marker  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.    size  Parent: data[type=splom].marker  Type: number or array of numbers greater than or equal to 0 Default: 6 Sets the marker size (in px).    sizemin  Parent: data[type=splom].marker  Type: number greater than or equal to 0 Default: 0 Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.    sizemode  Parent: data[type=splom].marker  Type: enumerated , one of ( "diameter" | "area" ) Default: "diameter" Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.    sizeref  Parent: data[type=splom].marker  Type: number Default: 1 Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.    symbol  Parent: data[type=splom].marker  Type: enumerated or array of enumerateds , one of ( "0" | "0" | "circle" | "100" | "100" | "circle-open" | "200" | "200" | "circle-dot" | "300" | "300" | "circle-open-dot" | "1" | "1" | "square" | "101" | "101" | "square-open" | "201" | "201" | "square-dot" | "301" | "301" | "square-open-dot" | "2" | "2" | "diamond" | "102" | "102" | "diamond-open" | "202" | "202" | "diamond-dot" | "302" | "302" | "diamond-open-dot" | "3" | "3" | "cross" | "103" | "103" | "cross-open" | "203" | "203" | "cross-dot" | "303" | "303" | "cross-open-dot" | "4" | "4" | "x" | "104" | "104" | "x-open" | "204" | "204" | "x-dot" | "304" | "304" | "x-open-dot" | "5" | "5" | "triangle-up" | "105" | "105" | "triangle-up-open" | "205" | "205" | "triangle-up-dot" | "305" | "305" | "triangle-up-open-dot" | "6" | "6" | "triangle-down" | "106" | "106" | "triangle-down-open" | "206" | "206" | "triangle-down-dot" | "306" | "306" | "triangle-down-open-dot" | "7" | "7" | "triangle-left" | "107" | "107" | "triangle-left-open" | "207" | "207" | "triangle-left-dot" | "307" | "307" | "triangle-left-open-dot" | "8" | "8" | "triangle-right" | "108" | "108" | "triangle-right-open" | "208" | "208" | "triangle-right-dot" | "308" | "308" | "triangle-right-open-dot" | "9" | "9" | "triangle-ne" | "109" | "109" | "triangle-ne-open" | "209" | "209" | "triangle-ne-dot" | "309" | "309" | "triangle-ne-open-dot" | "10" | "10" | "triangle-se" | "110" | "110" | "triangle-se-open" | "210" | "210" | "triangle-se-dot" | "310" | "310" | "triangle-se-open-dot" | "11" | "11" | "triangle-sw" | "111" | "111" | "triangle-sw-open" | "211" | "211" | "triangle-sw-dot" | "311" | "311" | "triangle-sw-open-dot" | "12" | "12" | "triangle-nw" | "112" | "112" | "triangle-nw-open" | "212" | "212" | "triangle-nw-dot" | "312" | "312" | "triangle-nw-open-dot" | "13" | "13" | "pentagon" | "113" | "113" | "pentagon-open" | "213" | "213" | "pentagon-dot" | "313" | "313" | "pentagon-open-dot" | "14" | "14" | "hexagon" | "114" | "114" | "hexagon-open" | "214" | "214" | "hexagon-dot" | "314" | "314" | "hexagon-open-dot" | "15" | "15" | "hexagon2" | "115" | "115" | "hexagon2-open" | "215" | "215" | "hexagon2-dot" | "315" | "315" | "hexagon2-open-dot" | "16" | "16" | "octagon" | "116" | "116" | "octagon-open" | "216" | "216" | "octagon-dot" | "316" | "316" | "octagon-open-dot" | "17" | "17" | "star" | "117" | "117" | "star-open" | "217" | "217" | "star-dot" | "317" | "317" | "star-open-dot" | "18" | "18" | "hexagram" | "118" | "118" | "hexagram-open" | "218" | "218" | "hexagram-dot" | "318" | "318" | "hexagram-open-dot" | "19" | "19" | "star-triangle-up" | "119" | "119" | "star-triangle-up-open" | "219" | "219" | "star-triangle-up-dot" | "319" | "319" | "star-triangle-up-open-dot" | "20" | "20" | "star-triangle-down" | "120" | "120" | "star-triangle-down-open" | "220" | "220" | "star-triangle-down-dot" | "320" | "320" | "star-triangle-down-open-dot" | "21" | "21" | "star-square" | "121" | "121" | "star-square-open" | "221" | "221" | "star-square-dot" | "321" | "321" | "star-square-open-dot" | "22" | "22" | "star-diamond" | "122" | "122" | "star-diamond-open" | "222" | "222" | "star-diamond-dot" | "322" | "322" | "star-diamond-open-dot" | "23" | "23" | "diamond-tall" | "123" | "123" | "diamond-tall-open" | "223" | "223" | "diamond-tall-dot" | "323" | "323" | "diamond-tall-open-dot" | "24" | "24" | "diamond-wide" | "124" | "124" | "diamond-wide-open" | "224" | "224" | "diamond-wide-dot" | "324" | "324" | "diamond-wide-open-dot" | "25" | "25" | "hourglass" | "125" | "125" | "hourglass-open" | "26" | "26" | "bowtie" | "126" | "126" | "bowtie-open" | "27" | "27" | "circle-cross" | "127" | "127" | "circle-cross-open" | "28" | "28" | "circle-x" | "128" | "128" | "circle-x-open" | "29" | "29" | "square-cross" | "129" | "129" | "square-cross-open" | "30" | "30" | "square-x" | "130" | "130" | "square-x-open" | "31" | "31" | "diamond-cross" | "131" | "131" | "diamond-cross-open" | "32" | "32" | "diamond-x" | "132" | "132" | "diamond-x-open" | "33" | "33" | "cross-thin" | "133" | "133" | "cross-thin-open" | "34" | "34" | "x-thin" | "134" | "134" | "x-thin-open" | "35" | "35" | "asterisk" | "135" | "135" | "asterisk-open" | "36" | "36" | "hash" | "136" | "136" | "hash-open" | "236" | "236" | "hash-dot" | "336" | "336" | "hash-open-dot" | "37" | "37" | "y-up" | "137" | "137" | "y-up-open" | "38" | "38" | "y-down" | "138" | "138" | "y-down-open" | "39" | "39" | "y-left" | "139" | "139" | "y-left-open" | "40" | "40" | "y-right" | "140" | "140" | "y-right-open" | "41" | "41" | "line-ew" | "141" | "141" | "line-ew-open" | "42" | "42" | "line-ns" | "142" | "142" | "line-ns-open" | "43" | "43" | "line-ne" | "143" | "143" | "line-ne-open" | "44" | "44" | "line-nw" | "144" | "144" | "line-nw-open" | "45" | "45" | "arrow-up" | "145" | "145" | "arrow-up-open" | "46" | "46" | "arrow-down" | "146" | "146" | "arrow-down-open" | "47" | "47" | "arrow-left" | "147" | "147" | "arrow-left-open" | "48" | "48" | "arrow-right" | "148" | "148" | "arrow-right-open" | "49" | "49" | "arrow-bar-up" | "149" | "149" | "arrow-bar-up-open" | "50" | "50" | "arrow-bar-down" | "150" | "150" | "arrow-bar-down-open" | "51" | "51" | "arrow-bar-left" | "151" | "151" | "arrow-bar-left-open" | "52" | "52" | "arrow-bar-right" | "152" | "152" | "arrow-bar-right-open" | "53" | "53" | "arrow" | "153" | "153" | "arrow-open" | "54" | "54" | "arrow-wide" | "154" | "154" | "arrow-wide-open" ) Default: "circle" Sets the marker symbol type. Adding 100 is equivalent to appending "-open" to a symbol name. Adding 200 is equivalent to appending "-dot" to a symbol name. Adding 300 is equivalent to appending "-open-dot" or "dot-open" to a symbol name.      diagonal  Parent: data[type=splom] Type: object containing one or more of the keys listed below.    visible  Parent: data[type=splom].diagonal  Type: boolean Default: true Determines whether or not subplots on the diagonal are displayed.      xaxes  Parent: data[type=splom]  Type: array Sets the list of x axes corresponding to dimensions of this splom trace. By default, a splom will match the first N xaxes where N is the number of input dimensions. Note that, in case where `diagonal.visible` is false and `showupperhalf` or `showlowerhalf` is false, this splom trace will generate one less x-axis and one less y-axis.    yaxes  Parent: data[type=splom]  Type: array Sets the list of y axes corresponding to dimensions of this splom trace. By default, a splom will match the first N yaxes where N is the number of input dimensions. Note that, in case where `diagonal.visible` is false and `showupperhalf` or `showlowerhalf` is false, this splom trace will generate one less x-axis and one less y-axis.    showlowerhalf  Parent: data[type=splom]  Type: boolean Default: true Determines whether or not subplots on the lower half from the diagonal are displayed.    showupperhalf  Parent: data[type=splom]  Type: boolean Default: true Determines whether or not subplots on the upper half from the diagonal are displayed.    selectedpoints  Parent: data[type=splom]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    selected  Parent: data[type=splom] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=splom].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=splom].selected.marker  Type: color Sets the marker color of selected points.    opacity  Parent: data[type=splom].selected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of selected points.    size  Parent: data[type=splom].selected.marker  Type: number greater than or equal to 0 Sets the marker size of selected points.        unselected  Parent: data[type=splom] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=splom].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=splom].unselected.marker  Type: color Sets the marker color of unselected points, applied only when a selection exists.    opacity  Parent: data[type=splom].unselected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of unselected points, applied only when a selection exists.    size  Parent: data[type=splom].unselected.marker  Type: number greater than or equal to 0 Sets the marker size of unselected points, applied only when a selection exists.        hoverlabel  Parent: data[type=splom] Type: object containing one or more of the keys listed below.    align  Parent: data[type=splom].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=splom].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=splom].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=splom].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=splom].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=splom].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=splom].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=splom].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=splom].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=splom].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=splom].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=splom].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=splom].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=splom].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      uirevision  Parent: data[type=splom]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      parcoords traces

      










 A parcoords trace is an object with the key "type" equal to "parcoords" (i.e. {"type": "parcoords"}) and any of the keys listed below. Parallel coordinates for multidimensional exploratory data analysis. The samples are specified in `dimensions`. The colors are set in `line.color`. 














   type  Parent: data[type=parcoords]  Type: "parcoords"    name  Parent: data[type=parcoords]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=parcoords]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    legend  Parent: data[type=parcoords]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=parcoords]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgrouptitle  Parent: data[type=parcoords] Type: object containing one or more of the keys listed below.    font  Parent: data[type=parcoords].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=parcoords].legendgrouptitle.font  Type: color    family  Parent: data[type=parcoords].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=parcoords].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=parcoords].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=parcoords].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=parcoords].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=parcoords].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=parcoords].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=parcoords].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=parcoords].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=parcoords]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    ids  Parent: data[type=parcoords]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    dimensions  Parent: data[type=parcoords] Type: array of object where each object has one or more of the keys listed below.     constraintrange  Parent: data[type=parcoords].dimensions[]  Type: array The domain range to which the filter on the dimension is constrained. Must be an array of `[fromValue, toValue]` with `fromValue <= toValue`, or if `multiselect` is not disabled, you may give an array of arrays, where each inner array is `[fromValue, toValue]`.    label  Parent: data[type=parcoords].dimensions[]  Type: string The shown name of the dimension.    multiselect  Parent: data[type=parcoords].dimensions[]  Type: boolean Default: true Do we allow multiple selection ranges or just a single range?    name  Parent: data[type=parcoords].dimensions[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    range  Parent: data[type=parcoords].dimensions[]  Type: array The domain range that represents the full, shown axis extent. Defaults to the `values` extent. Must be an array of `[fromValue, toValue]` with finite numbers as elements.    templateitemname  Parent: data[type=parcoords].dimensions[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    tickformat  Parent: data[type=parcoords].dimensions[]  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    ticktext  Parent: data[type=parcoords].dimensions[]  Type: data array Sets the text displayed at the ticks position via `tickvals`.    tickvals  Parent: data[type=parcoords].dimensions[]  Type: data array Sets the values at which ticks on this axis appear.    values  Parent: data[type=parcoords].dimensions[]  Type: data array Dimension values. `values[n]` represents the value of the `n`th point in the dataset, therefore the `values` vector for all dimensions must be the same (longer vectors will be truncated). Each value must be a finite number.    visible  Parent: data[type=parcoords].dimensions[]  Type: boolean Default: true Shows the dimension when set to `true` (the default). Hides the dimension for `false`.      meta  Parent: data[type=parcoords]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=parcoords]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    domain  Parent: data[type=parcoords] Type: object containing one or more of the keys listed below.    column  Parent: data[type=parcoords].domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this column in the grid for this parcoords trace .    row  Parent: data[type=parcoords].domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this row in the grid for this parcoords trace .    x  Parent: data[type=parcoords].domain  Type: array Default: [0, 1] Sets the horizontal domain of this parcoords trace (in plot fraction).    y  Parent: data[type=parcoords].domain  Type: array Default: [0, 1] Sets the vertical domain of this parcoords trace (in plot fraction).      line  Parent: data[type=parcoords] Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=parcoords].line  Type: boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=parcoords].line  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax` Has an effect only if in `line.color` is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.    cmax  Parent: data[type=parcoords].line  Type: number Sets the upper bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.    cmid  Parent: data[type=parcoords].line  Type: number Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.    cmin  Parent: data[type=parcoords].line  Type: number Sets the lower bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.    color  Parent: data[type=parcoords].line  Type: color or array of colors Sets the line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `line.cmin` and `line.cmax` if set.    coloraxis  Parent: data[type=parcoords].line  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=parcoords].line Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=parcoords].line.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=parcoords].line.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=parcoords].line.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=parcoords].line.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=parcoords].line.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=parcoords].line.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=parcoords].line.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=parcoords].line.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=parcoords].line.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=parcoords].line.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=parcoords].line.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=parcoords].line.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=parcoords].line.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=parcoords].line.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=parcoords].line.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=parcoords].line.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=parcoords].line.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=parcoords].line.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=parcoords].line.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=parcoords].line.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=parcoords].line.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=parcoords].line.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=parcoords].line.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=parcoords].line.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=parcoords].line.colorbar.tickfont  Type: color    family  Parent: data[type=parcoords].line.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=parcoords].line.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=parcoords].line.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=parcoords].line.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=parcoords].line.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=parcoords].line.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=parcoords].line.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=parcoords].line.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=parcoords].line.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=parcoords].line.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=parcoords].line.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=parcoords].line.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=parcoords].line.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=parcoords].line.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=parcoords].line.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=parcoords].line.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=parcoords].line.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=parcoords].line.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=parcoords].line.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=parcoords].line.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=parcoords].line.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=parcoords].line.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=parcoords].line.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=parcoords].line.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=parcoords].line.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=parcoords].line.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=parcoords].line.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=parcoords].line.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=parcoords].line.colorbar.title.font  Type: color    family  Parent: data[type=parcoords].line.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=parcoords].line.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=parcoords].line.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=parcoords].line.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=parcoords].line.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=parcoords].line.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=parcoords].line.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=parcoords].line.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=parcoords].line.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=parcoords].line.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=parcoords].line.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=parcoords].line.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=parcoords].line.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=parcoords].line.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=parcoords].line.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=parcoords].line.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=parcoords].line.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=parcoords].line.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colorscale  Parent: data[type=parcoords].line  Type: colorscale Default: [[0, #440154], [0.06274509803921569, #48186a], [0.12549019607843137, #472d7b], [0.18823529411764706, #424086], [0.25098039215686274, #3b528b], [0.3137254901960784, #33638d], [0.3764705882352941, #2c728e], [0.4392156862745098, #26828e], [0.5019607843137255, #21918c], [0.5647058823529412, #1fa088], [0.6274509803921569, #28ae80], [0.6901960784313725, #3fbc73], [0.7529411764705882, #5ec962], [0.8156862745098039, #84d44b], [0.8784313725490196, #addc30], [0.9411764705882353, #d8e219], [1, #fde725], ] Sets the colorscale. Has an effect only if in `line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `line.cmin` and `line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    reversescale  Parent: data[type=parcoords].line  Type: boolean Reverses the color mapping if true. Has an effect only if in `line.color` is set to a numerical array. If true, `line.cmin` will correspond to the last color in the array and `line.cmax` will correspond to the first color.    showscale  Parent: data[type=parcoords].line  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `line.color` is set to a numerical array.      unselected  Parent: data[type=parcoords] Type: object containing one or more of the keys listed below.    line  Parent: data[type=parcoords].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=parcoords].unselected.line  Type: color Default: "#7f7f7f" Sets the base color of unselected lines. in connection with `unselected.line.opacity`.    opacity  Parent: data[type=parcoords].unselected.line  Type: number between or equal to 0 and 1 Default: "auto" Sets the opacity of unselected lines. The default "auto" decreases the opacity smoothly as the number of lines increases. Use "1" to achieve exact `unselected.line.color`.        labelangle  Parent: data[type=parcoords]  Type: angle Default: 0 Sets the angle of the labels with respect to the horizontal. For example, a `tickangle` of -90 draws the labels vertically. Tilted labels with "labelangle" may be positioned better inside margins when `labelposition` is set to "bottom".    labelfont  Parent: data[type=parcoords] Type: object containing one or more of the keys listed below. Sets the font for the `dimension` labels.    color  Parent: data[type=parcoords].labelfont  Type: color    family  Parent: data[type=parcoords].labelfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=parcoords].labelfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=parcoords].labelfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=parcoords].labelfont  Type: number greater than or equal to 1    style  Parent: data[type=parcoords].labelfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=parcoords].labelfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=parcoords].labelfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=parcoords].labelfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      labelside  Parent: data[type=parcoords]  Type: enumerated , one of ( "top" | "bottom" ) Default: "top" Specifies the location of the `label`. "top" positions labels above, next to the title "bottom" positions labels below the graph Tilted labels with "labelangle" may be positioned better inside margins when `labelposition` is set to "bottom".    rangefont  Parent: data[type=parcoords] Type: object containing one or more of the keys listed below. Sets the font for the `dimension` range values.    color  Parent: data[type=parcoords].rangefont  Type: color    family  Parent: data[type=parcoords].rangefont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=parcoords].rangefont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=parcoords].rangefont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=parcoords].rangefont  Type: number greater than or equal to 1    style  Parent: data[type=parcoords].rangefont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=parcoords].rangefont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=parcoords].rangefont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=parcoords].rangefont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickfont  Parent: data[type=parcoords] Type: object containing one or more of the keys listed below. Sets the font for the `dimension` tick values.    color  Parent: data[type=parcoords].tickfont  Type: color    family  Parent: data[type=parcoords].tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=parcoords].tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=parcoords].tickfont  Type: string Default: "auto" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=parcoords].tickfont  Type: number greater than or equal to 1    style  Parent: data[type=parcoords].tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=parcoords].tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=parcoords].tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=parcoords].tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      uirevision  Parent: data[type=parcoords]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      parcats traces

      










 A parcats trace is an object with the key "type" equal to "parcats" (i.e. {"type": "parcats"}) and any of the keys listed below. Parallel categories diagram for multidimensional categorical data. 














   type  Parent: data[type=parcats]  Type: "parcats"    name  Parent: data[type=parcats]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=parcats]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    legendgrouptitle  Parent: data[type=parcats] Type: object containing one or more of the keys listed below.    font  Parent: data[type=parcats].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=parcats].legendgrouptitle.font  Type: color    family  Parent: data[type=parcats].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=parcats].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=parcats].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=parcats].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=parcats].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=parcats].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=parcats].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=parcats].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=parcats].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=parcats]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    counts  Parent: data[type=parcats]  Type: number or array of numbers greater than or equal to 0 Default: 1 The number of observations represented by each state. Defaults to 1 so that each state represents one observation    dimensions  Parent: data[type=parcats] Type: array of object where each object has one or more of the keys listed below.     categoryarray  Parent: data[type=parcats].dimensions[]  Type: data array Sets the order in which categories in this dimension appear. Only has an effect if `categoryorder` is set to "array". Used with `categoryorder`.    categoryorder  Parent: data[type=parcats].dimensions[]  Type: enumerated , one of ( "trace" | "category ascending" | "category descending" | "array" ) Default: "trace" Specifies the ordering logic for the categories in the dimension. By default, plotly uses "trace", which specifies the order that is present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`.    displayindex  Parent: data[type=parcats].dimensions[]  Type: integer The display index of dimension, from left to right, zero indexed, defaults to dimension index.    label  Parent: data[type=parcats].dimensions[]  Type: string The shown name of the dimension.    ticktext  Parent: data[type=parcats].dimensions[]  Type: data array Sets alternative tick labels for the categories in this dimension. Only has an effect if `categoryorder` is set to "array". Should be an array the same length as `categoryarray` Used with `categoryorder`.    values  Parent: data[type=parcats].dimensions[]  Type: data array Default:  Dimension values. `values[n]` represents the category value of the `n`th point in the dataset, therefore the `values` vector for all dimensions must be the same (longer vectors will be truncated).    visible  Parent: data[type=parcats].dimensions[]  Type: boolean Default: true Shows the dimension when set to `true` (the default). Hides the dimension for `false`.      hoverinfo  Parent: data[type=parcats]  Type: flaglist string. Any combination of "count", "probability" joined with a "+" OR "all" or "none" or "skip". Examples: "count", "probability", "count+probability", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=parcats]  Type: string Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. This value here applies when hovering over dimensions. Note that `"categorycount`, "colorcount" and "bandcolorcount" are only available when `hoveron` contains the "color" flagFinally, the template string has access to variables `count`, `probability`, `category`, `categorycount`, `colorcount` and `bandcolorcount`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    meta  Parent: data[type=parcats]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    domain  Parent: data[type=parcats] Type: object containing one or more of the keys listed below.    column  Parent: data[type=parcats].domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this column in the grid for this parcats trace .    row  Parent: data[type=parcats].domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this row in the grid for this parcats trace .    x  Parent: data[type=parcats].domain  Type: array Default: [0, 1] Sets the horizontal domain of this parcats trace (in plot fraction).    y  Parent: data[type=parcats].domain  Type: array Default: [0, 1] Sets the vertical domain of this parcats trace (in plot fraction).      line  Parent: data[type=parcats] Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=parcats].line  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `line.colorscale`. Has an effect only if in `line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=parcats].line  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `line.color`) or the bounds set in `line.cmin` and `line.cmax` Has an effect only if in `line.color` is set to a numerical array. Defaults to `false` when `line.cmin` and `line.cmax` are set by the user.    cmax  Parent: data[type=parcats].line  Type: number Sets the upper bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmin` must be set as well.    cmid  Parent: data[type=parcats].line  Type: number Sets the mid-point of the color domain by scaling `line.cmin` and/or `line.cmax` to be equidistant to this point. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color`. Has no effect when `line.cauto` is `false`.    cmin  Parent: data[type=parcats].line  Type: number Sets the lower bound of the color domain. Has an effect only if in `line.color` is set to a numerical array. Value should have the same units as in `line.color` and if set, `line.cmax` must be set as well.    color  Parent: data[type=parcats].line  Type: color or array of colors Sets the line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `line.cmin` and `line.cmax` if set.    coloraxis  Parent: data[type=parcats].line  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=parcats].line Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=parcats].line.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=parcats].line.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=parcats].line.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=parcats].line.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=parcats].line.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=parcats].line.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=parcats].line.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=parcats].line.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=parcats].line.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=parcats].line.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=parcats].line.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=parcats].line.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=parcats].line.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=parcats].line.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=parcats].line.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=parcats].line.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=parcats].line.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=parcats].line.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=parcats].line.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=parcats].line.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=parcats].line.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=parcats].line.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=parcats].line.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=parcats].line.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=parcats].line.colorbar.tickfont  Type: color    family  Parent: data[type=parcats].line.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=parcats].line.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=parcats].line.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=parcats].line.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=parcats].line.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=parcats].line.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=parcats].line.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=parcats].line.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=parcats].line.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=parcats].line.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=parcats].line.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=parcats].line.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=parcats].line.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=parcats].line.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=parcats].line.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=parcats].line.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=parcats].line.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=parcats].line.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=parcats].line.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=parcats].line.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=parcats].line.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=parcats].line.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=parcats].line.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=parcats].line.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=parcats].line.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=parcats].line.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=parcats].line.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=parcats].line.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=parcats].line.colorbar.title.font  Type: color    family  Parent: data[type=parcats].line.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=parcats].line.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=parcats].line.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=parcats].line.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=parcats].line.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=parcats].line.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=parcats].line.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=parcats].line.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=parcats].line.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=parcats].line.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=parcats].line.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=parcats].line.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=parcats].line.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=parcats].line.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=parcats].line.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=parcats].line.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=parcats].line.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=parcats].line.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colorscale  Parent: data[type=parcats].line  Type: colorscale Sets the colorscale. Has an effect only if in `line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `line.cmin` and `line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    hovertemplate  Parent: data[type=parcats].line  Type: string Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. This value here applies when hovering over lines.Finally, the template string has access to variables `count` and `probability`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    reversescale  Parent: data[type=parcats].line  Type: boolean Reverses the color mapping if true. Has an effect only if in `line.color` is set to a numerical array. If true, `line.cmin` will correspond to the last color in the array and `line.cmax` will correspond to the first color.    shape  Parent: data[type=parcats].line  Type: enumerated , one of ( "linear" | "hspline" ) Default: "linear" Sets the shape of the paths. If `linear`, paths are composed of straight lines. If `hspline`, paths are composed of horizontal curved splines    showscale  Parent: data[type=parcats].line  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `line.color` is set to a numerical array.      arrangement  Parent: data[type=parcats]  Type: enumerated , one of ( "perpendicular" | "freeform" | "fixed" ) Default: "perpendicular" Sets the drag interaction mode for categories and dimensions. If `perpendicular`, the categories can only move along a line perpendicular to the paths. If `freeform`, the categories can freely move on the plane. If `fixed`, the categories and dimensions are stationary.    bundlecolors  Parent: data[type=parcats]  Type: boolean Default: true Sort paths so that like colors are bundled together within each category.    sortpaths  Parent: data[type=parcats]  Type: enumerated , one of ( "forward" | "backward" ) Default: "forward" Sets the path sorting algorithm. If `forward`, sort paths based on dimension categories from left to right. If `backward`, sort paths based on dimensions categories from right to left.    hoveron  Parent: data[type=parcats]  Type: enumerated , one of ( "category" | "color" | "dimension" ) Default: "category" Sets the hover interaction mode for the parcats diagram. If `category`, hover interaction take place per category. If `color`, hover interactions take place per color per category. If `dimension`, hover interactions take place across all categories per dimension.    labelfont  Parent: data[type=parcats] Type: object containing one or more of the keys listed below. Sets the font for the `dimension` labels.    color  Parent: data[type=parcats].labelfont  Type: color    family  Parent: data[type=parcats].labelfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=parcats].labelfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=parcats].labelfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=parcats].labelfont  Type: number greater than or equal to 1    style  Parent: data[type=parcats].labelfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=parcats].labelfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=parcats].labelfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=parcats].labelfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickfont  Parent: data[type=parcats] Type: object containing one or more of the keys listed below. Sets the font for the `category` labels.    color  Parent: data[type=parcats].tickfont  Type: color    family  Parent: data[type=parcats].tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=parcats].tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=parcats].tickfont  Type: string Default: "auto" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=parcats].tickfont  Type: number greater than or equal to 1    style  Parent: data[type=parcats].tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=parcats].tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=parcats].tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=parcats].tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      uirevision  Parent: data[type=parcats]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      carpet traces

      










 A carpet trace is an object with the key "type" equal to "carpet" (i.e. {"type": "carpet"}) and any of the keys listed below. The data describing carpet axis layout is set in `y` and (optionally) also `x`. If only `y` is present, `x` the plot is interpreted as a cheater plot and is filled in using the `y` values. `x` and `y` may either be 2D arrays matching with each dimension matching that of `a` and `b`, or they may be 1D arrays with total length equal to that of `a` and `b`. 














   type  Parent: data[type=carpet]  Type: "carpet"    name  Parent: data[type=carpet]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=carpet]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    legend  Parent: data[type=carpet]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=carpet]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgrouptitle  Parent: data[type=carpet] Type: object containing one or more of the keys listed below.    font  Parent: data[type=carpet].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=carpet].legendgrouptitle.font  Type: color    family  Parent: data[type=carpet].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=carpet].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=carpet].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=carpet].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=carpet].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=carpet].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=carpet].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=carpet].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=carpet].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=carpet]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=carpet]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=carpet]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    zorder  Parent: data[type=carpet]  Type: integer Default: 0 Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.    x  Parent: data[type=carpet]  Type: data array A two dimensional array of x coordinates at each carpet point. If omitted, the plot is a cheater plot and the xaxis is hidden by default.    y  Parent: data[type=carpet]  Type: data array A two dimensional array of y coordinates at each carpet point.    a  Parent: data[type=carpet]  Type: data array An array containing values of the first parameter value    a0  Parent: data[type=carpet]  Type: number Default: 0 Alternate to `a`. Builds a linear space of a coordinates. Use with `da` where `a0` is the starting coordinate and `da` the step.    da  Parent: data[type=carpet]  Type: number Default: 1 Sets the a coordinate step. See `a0` for more info.    b  Parent: data[type=carpet]  Type: data array A two dimensional array of y coordinates at each carpet point.    b0  Parent: data[type=carpet]  Type: number Default: 0 Alternate to `b`. Builds a linear space of a coordinates. Use with `db` where `b0` is the starting coordinate and `db` the step.    db  Parent: data[type=carpet]  Type: number Default: 1 Sets the b coordinate step. See `b0` for more info.    meta  Parent: data[type=carpet]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=carpet]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    aaxis  Parent: data[type=carpet] Type: object containing one or more of the keys listed below.    arraydtick  Parent: data[type=carpet].aaxis  Type: integer greater than or equal to 1 Default: 1 The stride between grid lines along the axis    arraytick0  Parent: data[type=carpet].aaxis  Type: integer greater than or equal to 0 Default: 0 The starting index of grid lines along the axis    autorange  Parent: data[type=carpet].aaxis  Type: enumerated , one of ( true | false | "reversed" ) Default: true Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to "false".    autotypenumbers  Parent: data[type=carpet].aaxis  Type: enumerated , one of ( "convert types" | "strict" ) Default: "convert types" Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.    categoryarray  Parent: data[type=carpet].aaxis  Type: data array Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to "array". Used with `categoryorder`.    categoryorder  Parent: data[type=carpet].aaxis  Type: enumerated , one of ( "trace" | "category ascending" | "category descending" | "array" ) Default: "trace" Specifies the ordering logic for the case of categorical variables. By default, plotly uses "trace", which specifies the order that is present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`.    cheatertype  Parent: data[type=carpet].aaxis  Type: enumerated , one of ( "index" | "value" ) Default: "value"    color  Parent: data[type=carpet].aaxis  Type: color Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.    dtick  Parent: data[type=carpet].aaxis  Type: number greater than or equal to 0 Default: 1 The stride between grid lines along the axis    endline  Parent: data[type=carpet].aaxis  Type: boolean Determines whether or not a line is drawn at along the final value of this axis. If "true", the end line is drawn on top of the grid lines.    endlinecolor  Parent: data[type=carpet].aaxis  Type: color Sets the line color of the end line.    endlinewidth  Parent: data[type=carpet].aaxis  Type: number Default: 1 Sets the width (in px) of the end line.    exponentformat  Parent: data[type=carpet].aaxis  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    fixedrange  Parent: data[type=carpet].aaxis  Type: boolean Determines whether or not this axis is zoom-able. If true, then zoom is disabled.    gridcolor  Parent: data[type=carpet].aaxis  Type: color Sets the axis line color.    griddash  Parent: data[type=carpet].aaxis  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    gridwidth  Parent: data[type=carpet].aaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    labelalias  Parent: data[type=carpet].aaxis  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    labelpadding  Parent: data[type=carpet].aaxis  Type: integer Default: 10 Extra padding between label and the axis    labelprefix  Parent: data[type=carpet].aaxis  Type: string Sets a axis label prefix.    labelsuffix  Parent: data[type=carpet].aaxis  Type: string Default: "" Sets a axis label suffix.    linecolor  Parent: data[type=carpet].aaxis  Type: color Default: "#444" Sets the axis line color.    linewidth  Parent: data[type=carpet].aaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    minexponent  Parent: data[type=carpet].aaxis  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number    minorgridcolor  Parent: data[type=carpet].aaxis  Type: color Default: "#eee" Sets the color of the grid lines.    minorgridcount  Parent: data[type=carpet].aaxis  Type: integer greater than or equal to 0 Default: 0 Sets the number of minor grid ticks per major grid tick    minorgriddash  Parent: data[type=carpet].aaxis  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    minorgridwidth  Parent: data[type=carpet].aaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the grid lines.    nticks  Parent: data[type=carpet].aaxis  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    range  Parent: data[type=carpet].aaxis  Type: array Sets the range of this axis. If the axis `type` is "log", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is "date", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is "category", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.    rangemode  Parent: data[type=carpet].aaxis  Type: enumerated , one of ( "normal" | "tozero" | "nonnegative" ) Default: "normal" If "normal", the range is computed in relation to the extrema of the input data. If "tozero"`, the range extends to 0, regardless of the input data If "nonnegative", the range is non-negative, regardless of the input data.    separatethousands  Parent: data[type=carpet].aaxis  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=carpet].aaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showgrid  Parent: data[type=carpet].aaxis  Type: boolean Default: true Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.    showline  Parent: data[type=carpet].aaxis  Type: boolean Determines whether or not a line bounding this axis is drawn.    showticklabels  Parent: data[type=carpet].aaxis  Type: enumerated , one of ( "start" | "end" | "both" | "none" ) Default: "start" Determines whether axis labels are drawn on the low side, the high side, both, or neither side of the axis.    showtickprefix  Parent: data[type=carpet].aaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=carpet].aaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    smoothing  Parent: data[type=carpet].aaxis  Type: number between or equal to 0 and 1.3 Default: 1    startline  Parent: data[type=carpet].aaxis  Type: boolean Determines whether or not a line is drawn at along the starting value of this axis. If "true", the start line is drawn on top of the grid lines.    startlinecolor  Parent: data[type=carpet].aaxis  Type: color Sets the line color of the start line.    startlinewidth  Parent: data[type=carpet].aaxis  Type: number Default: 1 Sets the width (in px) of the start line.    tick0  Parent: data[type=carpet].aaxis  Type: number greater than or equal to 0 Default: 0 The starting index of grid lines along the axis    tickangle  Parent: data[type=carpet].aaxis  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickfont  Parent: data[type=carpet].aaxis Type: object containing one or more of the keys listed below. Sets the tick font.    color  Parent: data[type=carpet].aaxis.tickfont  Type: color    family  Parent: data[type=carpet].aaxis.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=carpet].aaxis.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=carpet].aaxis.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=carpet].aaxis.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=carpet].aaxis.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=carpet].aaxis.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=carpet].aaxis.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=carpet].aaxis.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=carpet].aaxis  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=carpet].aaxis Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=carpet].aaxis.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=carpet].aaxis.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=carpet].aaxis.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=carpet].aaxis.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=carpet].aaxis.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      tickmode  Parent: data[type=carpet].aaxis  Type: enumerated , one of ( "linear" | "array" ) Default: "array"    tickprefix  Parent: data[type=carpet].aaxis  Type: string Default: "" Sets a tick label prefix.    ticksuffix  Parent: data[type=carpet].aaxis  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=carpet].aaxis  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=carpet].aaxis  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    title  Parent: data[type=carpet].aaxis Type: object containing one or more of the keys listed below.    font  Parent: data[type=carpet].aaxis.title Type: object containing one or more of the keys listed below. Sets this axis' title font.    color  Parent: data[type=carpet].aaxis.title.font  Type: color    family  Parent: data[type=carpet].aaxis.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=carpet].aaxis.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=carpet].aaxis.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=carpet].aaxis.title.font  Type: number greater than or equal to 1    style  Parent: data[type=carpet].aaxis.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=carpet].aaxis.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=carpet].aaxis.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=carpet].aaxis.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      offset  Parent: data[type=carpet].aaxis.title  Type: number Default: 10 An additional amount by which to offset the title from the tick labels, given in pixels.    text  Parent: data[type=carpet].aaxis.title  Type: string Default: "" Sets the title of this axis.      type  Parent: data[type=carpet].aaxis  Type: enumerated , one of ( "-" | "linear" | "date" | "category" ) Default: "-" Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.      baxis  Parent: data[type=carpet] Type: object containing one or more of the keys listed below.    arraydtick  Parent: data[type=carpet].baxis  Type: integer greater than or equal to 1 Default: 1 The stride between grid lines along the axis    arraytick0  Parent: data[type=carpet].baxis  Type: integer greater than or equal to 0 Default: 0 The starting index of grid lines along the axis    autorange  Parent: data[type=carpet].baxis  Type: enumerated , one of ( true | false | "reversed" ) Default: true Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided, then `autorange` is set to "false".    autotypenumbers  Parent: data[type=carpet].baxis  Type: enumerated , one of ( "convert types" | "strict" ) Default: "convert types" Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.    categoryarray  Parent: data[type=carpet].baxis  Type: data array Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to "array". Used with `categoryorder`.    categoryorder  Parent: data[type=carpet].baxis  Type: enumerated , one of ( "trace" | "category ascending" | "category descending" | "array" ) Default: "trace" Specifies the ordering logic for the case of categorical variables. By default, plotly uses "trace", which specifies the order that is present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`.    cheatertype  Parent: data[type=carpet].baxis  Type: enumerated , one of ( "index" | "value" ) Default: "value"    color  Parent: data[type=carpet].baxis  Type: color Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.    dtick  Parent: data[type=carpet].baxis  Type: number greater than or equal to 0 Default: 1 The stride between grid lines along the axis    endline  Parent: data[type=carpet].baxis  Type: boolean Determines whether or not a line is drawn at along the final value of this axis. If "true", the end line is drawn on top of the grid lines.    endlinecolor  Parent: data[type=carpet].baxis  Type: color Sets the line color of the end line.    endlinewidth  Parent: data[type=carpet].baxis  Type: number Default: 1 Sets the width (in px) of the end line.    exponentformat  Parent: data[type=carpet].baxis  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    fixedrange  Parent: data[type=carpet].baxis  Type: boolean Determines whether or not this axis is zoom-able. If true, then zoom is disabled.    gridcolor  Parent: data[type=carpet].baxis  Type: color Sets the axis line color.    griddash  Parent: data[type=carpet].baxis  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    gridwidth  Parent: data[type=carpet].baxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    labelalias  Parent: data[type=carpet].baxis  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    labelpadding  Parent: data[type=carpet].baxis  Type: integer Default: 10 Extra padding between label and the axis    labelprefix  Parent: data[type=carpet].baxis  Type: string Sets a axis label prefix.    labelsuffix  Parent: data[type=carpet].baxis  Type: string Default: "" Sets a axis label suffix.    linecolor  Parent: data[type=carpet].baxis  Type: color Default: "#444" Sets the axis line color.    linewidth  Parent: data[type=carpet].baxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    minexponent  Parent: data[type=carpet].baxis  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number    minorgridcolor  Parent: data[type=carpet].baxis  Type: color Default: "#eee" Sets the color of the grid lines.    minorgridcount  Parent: data[type=carpet].baxis  Type: integer greater than or equal to 0 Default: 0 Sets the number of minor grid ticks per major grid tick    minorgriddash  Parent: data[type=carpet].baxis  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    minorgridwidth  Parent: data[type=carpet].baxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the grid lines.    nticks  Parent: data[type=carpet].baxis  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    range  Parent: data[type=carpet].baxis  Type: array Sets the range of this axis. If the axis `type` is "log", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is "date", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is "category", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.    rangemode  Parent: data[type=carpet].baxis  Type: enumerated , one of ( "normal" | "tozero" | "nonnegative" ) Default: "normal" If "normal", the range is computed in relation to the extrema of the input data. If "tozero"`, the range extends to 0, regardless of the input data If "nonnegative", the range is non-negative, regardless of the input data.    separatethousands  Parent: data[type=carpet].baxis  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=carpet].baxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showgrid  Parent: data[type=carpet].baxis  Type: boolean Default: true Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.    showline  Parent: data[type=carpet].baxis  Type: boolean Determines whether or not a line bounding this axis is drawn.    showticklabels  Parent: data[type=carpet].baxis  Type: enumerated , one of ( "start" | "end" | "both" | "none" ) Default: "start" Determines whether axis labels are drawn on the low side, the high side, both, or neither side of the axis.    showtickprefix  Parent: data[type=carpet].baxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=carpet].baxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    smoothing  Parent: data[type=carpet].baxis  Type: number between or equal to 0 and 1.3 Default: 1    startline  Parent: data[type=carpet].baxis  Type: boolean Determines whether or not a line is drawn at along the starting value of this axis. If "true", the start line is drawn on top of the grid lines.    startlinecolor  Parent: data[type=carpet].baxis  Type: color Sets the line color of the start line.    startlinewidth  Parent: data[type=carpet].baxis  Type: number Default: 1 Sets the width (in px) of the start line.    tick0  Parent: data[type=carpet].baxis  Type: number greater than or equal to 0 Default: 0 The starting index of grid lines along the axis    tickangle  Parent: data[type=carpet].baxis  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickfont  Parent: data[type=carpet].baxis Type: object containing one or more of the keys listed below. Sets the tick font.    color  Parent: data[type=carpet].baxis.tickfont  Type: color    family  Parent: data[type=carpet].baxis.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=carpet].baxis.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=carpet].baxis.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=carpet].baxis.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=carpet].baxis.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=carpet].baxis.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=carpet].baxis.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=carpet].baxis.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=carpet].baxis  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=carpet].baxis Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=carpet].baxis.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=carpet].baxis.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=carpet].baxis.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=carpet].baxis.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=carpet].baxis.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      tickmode  Parent: data[type=carpet].baxis  Type: enumerated , one of ( "linear" | "array" ) Default: "array"    tickprefix  Parent: data[type=carpet].baxis  Type: string Default: "" Sets a tick label prefix.    ticksuffix  Parent: data[type=carpet].baxis  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=carpet].baxis  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=carpet].baxis  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    title  Parent: data[type=carpet].baxis Type: object containing one or more of the keys listed below.    font  Parent: data[type=carpet].baxis.title Type: object containing one or more of the keys listed below. Sets this axis' title font.    color  Parent: data[type=carpet].baxis.title.font  Type: color    family  Parent: data[type=carpet].baxis.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=carpet].baxis.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=carpet].baxis.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=carpet].baxis.title.font  Type: number greater than or equal to 1    style  Parent: data[type=carpet].baxis.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=carpet].baxis.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=carpet].baxis.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=carpet].baxis.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      offset  Parent: data[type=carpet].baxis.title  Type: number Default: 10 An additional amount by which to offset the title from the tick labels, given in pixels.    text  Parent: data[type=carpet].baxis.title  Type: string Default: "" Sets the title of this axis.      type  Parent: data[type=carpet].baxis  Type: enumerated , one of ( "-" | "linear" | "date" | "category" ) Default: "-" Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.      xaxis  Parent: data[type=carpet]  Type: subplotid Default: x Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.    yaxis  Parent: data[type=carpet]  Type: subplotid Default: y Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.    color  Parent: data[type=carpet]  Type: color Default: "#444" Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.    carpet  Parent: data[type=carpet]  Type: string An identifier for this carpet, so that `scattercarpet` and `contourcarpet` traces can specify a carpet plot on which they lie    cheaterslope  Parent: data[type=carpet]  Type: number Default: 1 The shift applied to each successive row of data in creating a cheater plot. Only used if `x` is been omitted.    font  Parent: data[type=carpet] Type: object containing one or more of the keys listed below. The default font used for axis & tick labels on this carpet    color  Parent: data[type=carpet].font  Type: color Default: "#444"    family  Parent: data[type=carpet].font  Type: string Default: ""Open Sans", verdana, arial, sans-serif" HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=carpet].font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=carpet].font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=carpet].font  Type: number greater than or equal to 1 Default: 12    style  Parent: data[type=carpet].font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=carpet].font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=carpet].font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=carpet].font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      uirevision  Parent: data[type=carpet]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      scattercarpet traces

      










 A scattercarpet trace is an object with the key "type" equal to "scattercarpet" (i.e. {"type": "scattercarpet"}) and any of the keys listed below. Plots a scatter trace on either the first carpet axis or the carpet axis with a matching `carpet` attribute. 














   type  Parent: data[type=scattercarpet]  Type: "scattercarpet"    name  Parent: data[type=scattercarpet]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=scattercarpet]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=scattercarpet]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=scattercarpet]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=scattercarpet]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=scattercarpet]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=scattercarpet] Type: object containing one or more of the keys listed below.    font  Parent: data[type=scattercarpet].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=scattercarpet].legendgrouptitle.font  Type: color    family  Parent: data[type=scattercarpet].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattercarpet].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattercarpet].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattercarpet].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=scattercarpet].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattercarpet].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattercarpet].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattercarpet].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=scattercarpet].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=scattercarpet]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=scattercarpet]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    mode  Parent: data[type=scattercarpet]  Type: flaglist string. Any combination of "lines", "markers", "text" joined with a "+" OR "none". Examples: "lines", "markers", "lines+markers", "lines+markers+text", "none" Default: "markers" Determines the drawing mode for this scatter trace. If the provided `mode` includes "text" then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is "lines+markers". Otherwise, "lines".    ids  Parent: data[type=scattercarpet]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    zorder  Parent: data[type=scattercarpet]  Type: integer Default: 0 Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.    a  Parent: data[type=scattercarpet]  Type: data array Sets the a-axis coordinates.    b  Parent: data[type=scattercarpet]  Type: data array Sets the b-axis coordinates.    text  Parent: data[type=scattercarpet]  Type: string or array of strings Default: "" Sets text elements associated with each (a,b) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b). If trace `hoverinfo` contains a "text" flag and "hovertext" is not set, these elements will be seen in the hover labels.    textposition  Parent: data[type=scattercarpet]  Type: enumerated or array of enumerateds , one of ( "top left" | "top center" | "top right" | "middle left" | "middle center" | "middle right" | "bottom left" | "bottom center" | "bottom right" ) Default: "middle center" Sets the positions of the `text` elements with respects to the (x,y) coordinates.    texttemplate  Parent: data[type=scattercarpet]  Type: string or array of strings Default: "" Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `a`, `b` and `text`.    hovertext  Parent: data[type=scattercarpet]  Type: string or array of strings Default: "" Sets hover text elements associated with each (a,b) point. If a single string, the same string appears over all the data points. If an array of strings, the items are mapped in order to the the data points in (a,b). To be seen, trace `hoverinfo` must contain a "text" flag.    hoverinfo  Parent: data[type=scattercarpet]  Type: flaglist string. Any combination of "a", "b", "text", "name" joined with a "+" OR "all" or "none" or "skip". Examples: "a", "b", "a+b", "a+b+text", "all" Default: "all" Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.    hovertemplate  Parent: data[type=scattercarpet]  Type: string or array of strings Default: "" Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, "xother" will be added to those with different x positions from the first point. An underscore before or after "(x|y)other" will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.    meta  Parent: data[type=scattercarpet]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=scattercarpet]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    xaxis  Parent: data[type=scattercarpet]  Type: subplotid Default: x Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.    yaxis  Parent: data[type=scattercarpet]  Type: subplotid Default: y Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.    marker  Parent: data[type=scattercarpet] Type: object containing one or more of the keys listed below.    angle  Parent: data[type=scattercarpet].marker  Type: angle Default: 0 Sets the marker angle in respect to `angleref`.    angleref  Parent: data[type=scattercarpet].marker  Type: enumerated , one of ( "previous" | "up" ) Default: "up" Sets the reference for marker angle. With "previous", angle 0 points along the line from the previous point to this one. With "up", angle 0 points toward the top of the screen.    autocolorscale  Parent: data[type=scattercarpet].marker  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=scattercarpet].marker  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.    cmax  Parent: data[type=scattercarpet].marker  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.    cmid  Parent: data[type=scattercarpet].marker  Type: number Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.    cmin  Parent: data[type=scattercarpet].marker  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.    color  Parent: data[type=scattercarpet].marker  Type: color or array of colors Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.    coloraxis  Parent: data[type=scattercarpet].marker  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorbar  Parent: data[type=scattercarpet].marker Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=scattercarpet].marker.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=scattercarpet].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=scattercarpet].marker.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=scattercarpet].marker.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=scattercarpet].marker.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=scattercarpet].marker.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=scattercarpet].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=scattercarpet].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=scattercarpet].marker.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=scattercarpet].marker.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=scattercarpet].marker.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=scattercarpet].marker.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=scattercarpet].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=scattercarpet].marker.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=scattercarpet].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=scattercarpet].marker.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=scattercarpet].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=scattercarpet].marker.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=scattercarpet].marker.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=scattercarpet].marker.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=scattercarpet].marker.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=scattercarpet].marker.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=scattercarpet].marker.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=scattercarpet].marker.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=scattercarpet].marker.colorbar.tickfont  Type: color    family  Parent: data[type=scattercarpet].marker.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattercarpet].marker.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattercarpet].marker.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattercarpet].marker.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=scattercarpet].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattercarpet].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattercarpet].marker.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattercarpet].marker.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=scattercarpet].marker.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=scattercarpet].marker.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=scattercarpet].marker.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=scattercarpet].marker.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=scattercarpet].marker.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=scattercarpet].marker.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=scattercarpet].marker.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=scattercarpet].marker.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=scattercarpet].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=scattercarpet].marker.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=scattercarpet].marker.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=scattercarpet].marker.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=scattercarpet].marker.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=scattercarpet].marker.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=scattercarpet].marker.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=scattercarpet].marker.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=scattercarpet].marker.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=scattercarpet].marker.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=scattercarpet].marker.colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=scattercarpet].marker.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=scattercarpet].marker.colorbar.title.font  Type: color    family  Parent: data[type=scattercarpet].marker.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattercarpet].marker.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattercarpet].marker.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattercarpet].marker.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=scattercarpet].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattercarpet].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattercarpet].marker.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattercarpet].marker.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=scattercarpet].marker.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=scattercarpet].marker.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=scattercarpet].marker.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=scattercarpet].marker.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=scattercarpet].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=scattercarpet].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=scattercarpet].marker.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=scattercarpet].marker.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=scattercarpet].marker.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=scattercarpet].marker.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colorscale  Parent: data[type=scattercarpet].marker  Type: colorscale Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    gradient  Parent: data[type=scattercarpet].marker Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattercarpet].marker.gradient  Type: color or array of colors Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.    type  Parent: data[type=scattercarpet].marker.gradient  Type: enumerated or array of enumerateds , one of ( "radial" | "horizontal" | "vertical" | "none" ) Default: "none" Sets the type of gradient used to fill the markers      line  Parent: data[type=scattercarpet].marker Type: object containing one or more of the keys listed below.    autocolorscale  Parent: data[type=scattercarpet].marker.line  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: data[type=scattercarpet].marker.line  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.    cmax  Parent: data[type=scattercarpet].marker.line  Type: number Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.    cmid  Parent: data[type=scattercarpet].marker.line  Type: number Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.    cmin  Parent: data[type=scattercarpet].marker.line  Type: number Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.    color  Parent: data[type=scattercarpet].marker.line  Type: color or array of colors Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.    coloraxis  Parent: data[type=scattercarpet].marker.line  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    colorscale  Parent: data[type=scattercarpet].marker.line  Type: colorscale Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    reversescale  Parent: data[type=scattercarpet].marker.line  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.    width  Parent: data[type=scattercarpet].marker.line  Type: number or array of numbers greater than or equal to 0 Sets the width (in px) of the lines bounding the marker points.      maxdisplayed  Parent: data[type=scattercarpet].marker  Type: number greater than or equal to 0 Default: 0 Sets a maximum number of points to be drawn on the graph. "0" corresponds to no limit.    opacity  Parent: data[type=scattercarpet].marker  Type: number or array of numbers between or equal to 0 and 1 Sets the marker opacity.    reversescale  Parent: data[type=scattercarpet].marker  Type: boolean Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.    showscale  Parent: data[type=scattercarpet].marker  Type: boolean Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.    size  Parent: data[type=scattercarpet].marker  Type: number or array of numbers greater than or equal to 0 Default: 6 Sets the marker size (in px).    sizemin  Parent: data[type=scattercarpet].marker  Type: number greater than or equal to 0 Default: 0 Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.    sizemode  Parent: data[type=scattercarpet].marker  Type: enumerated , one of ( "diameter" | "area" ) Default: "diameter" Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.    sizeref  Parent: data[type=scattercarpet].marker  Type: number Default: 1 Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.    standoff  Parent: data[type=scattercarpet].marker  Type: number or array of numbers greater than or equal to 0 Default: 0 Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.    symbol  Parent: data[type=scattercarpet].marker  Type: enumerated or array of enumerateds , one of ( "0" | "0" | "circle" | "100" | "100" | "circle-open" | "200" | "200" | "circle-dot" | "300" | "300" | "circle-open-dot" | "1" | "1" | "square" | "101" | "101" | "square-open" | "201" | "201" | "square-dot" | "301" | "301" | "square-open-dot" | "2" | "2" | "diamond" | "102" | "102" | "diamond-open" | "202" | "202" | "diamond-dot" | "302" | "302" | "diamond-open-dot" | "3" | "3" | "cross" | "103" | "103" | "cross-open" | "203" | "203" | "cross-dot" | "303" | "303" | "cross-open-dot" | "4" | "4" | "x" | "104" | "104" | "x-open" | "204" | "204" | "x-dot" | "304" | "304" | "x-open-dot" | "5" | "5" | "triangle-up" | "105" | "105" | "triangle-up-open" | "205" | "205" | "triangle-up-dot" | "305" | "305" | "triangle-up-open-dot" | "6" | "6" | "triangle-down" | "106" | "106" | "triangle-down-open" | "206" | "206" | "triangle-down-dot" | "306" | "306" | "triangle-down-open-dot" | "7" | "7" | "triangle-left" | "107" | "107" | "triangle-left-open" | "207" | "207" | "triangle-left-dot" | "307" | "307" | "triangle-left-open-dot" | "8" | "8" | "triangle-right" | "108" | "108" | "triangle-right-open" | "208" | "208" | "triangle-right-dot" | "308" | "308" | "triangle-right-open-dot" | "9" | "9" | "triangle-ne" | "109" | "109" | "triangle-ne-open" | "209" | "209" | "triangle-ne-dot" | "309" | "309" | "triangle-ne-open-dot" | "10" | "10" | "triangle-se" | "110" | "110" | "triangle-se-open" | "210" | "210" | "triangle-se-dot" | "310" | "310" | "triangle-se-open-dot" | "11" | "11" | "triangle-sw" | "111" | "111" | "triangle-sw-open" | "211" | "211" | "triangle-sw-dot" | "311" | "311" | "triangle-sw-open-dot" | "12" | "12" | "triangle-nw" | "112" | "112" | "triangle-nw-open" | "212" | "212" | "triangle-nw-dot" | "312" | "312" | "triangle-nw-open-dot" | "13" | "13" | "pentagon" | "113" | "113" | "pentagon-open" | "213" | "213" | "pentagon-dot" | "313" | "313" | "pentagon-open-dot" | "14" | "14" | "hexagon" | "114" | "114" | "hexagon-open" | "214" | "214" | "hexagon-dot" | "314" | "314" | "hexagon-open-dot" | "15" | "15" | "hexagon2" | "115" | "115" | "hexagon2-open" | "215" | "215" | "hexagon2-dot" | "315" | "315" | "hexagon2-open-dot" | "16" | "16" | "octagon" | "116" | "116" | "octagon-open" | "216" | "216" | "octagon-dot" | "316" | "316" | "octagon-open-dot" | "17" | "17" | "star" | "117" | "117" | "star-open" | "217" | "217" | "star-dot" | "317" | "317" | "star-open-dot" | "18" | "18" | "hexagram" | "118" | "118" | "hexagram-open" | "218" | "218" | "hexagram-dot" | "318" | "318" | "hexagram-open-dot" | "19" | "19" | "star-triangle-up" | "119" | "119" | "star-triangle-up-open" | "219" | "219" | "star-triangle-up-dot" | "319" | "319" | "star-triangle-up-open-dot" | "20" | "20" | "star-triangle-down" | "120" | "120" | "star-triangle-down-open" | "220" | "220" | "star-triangle-down-dot" | "320" | "320" | "star-triangle-down-open-dot" | "21" | "21" | "star-square" | "121" | "121" | "star-square-open" | "221" | "221" | "star-square-dot" | "321" | "321" | "star-square-open-dot" | "22" | "22" | "star-diamond" | "122" | "122" | "star-diamond-open" | "222" | "222" | "star-diamond-dot" | "322" | "322" | "star-diamond-open-dot" | "23" | "23" | "diamond-tall" | "123" | "123" | "diamond-tall-open" | "223" | "223" | "diamond-tall-dot" | "323" | "323" | "diamond-tall-open-dot" | "24" | "24" | "diamond-wide" | "124" | "124" | "diamond-wide-open" | "224" | "224" | "diamond-wide-dot" | "324" | "324" | "diamond-wide-open-dot" | "25" | "25" | "hourglass" | "125" | "125" | "hourglass-open" | "26" | "26" | "bowtie" | "126" | "126" | "bowtie-open" | "27" | "27" | "circle-cross" | "127" | "127" | "circle-cross-open" | "28" | "28" | "circle-x" | "128" | "128" | "circle-x-open" | "29" | "29" | "square-cross" | "129" | "129" | "square-cross-open" | "30" | "30" | "square-x" | "130" | "130" | "square-x-open" | "31" | "31" | "diamond-cross" | "131" | "131" | "diamond-cross-open" | "32" | "32" | "diamond-x" | "132" | "132" | "diamond-x-open" | "33" | "33" | "cross-thin" | "133" | "133" | "cross-thin-open" | "34" | "34" | "x-thin" | "134" | "134" | "x-thin-open" | "35" | "35" | "asterisk" | "135" | "135" | "asterisk-open" | "36" | "36" | "hash" | "136" | "136" | "hash-open" | "236" | "236" | "hash-dot" | "336" | "336" | "hash-open-dot" | "37" | "37" | "y-up" | "137" | "137" | "y-up-open" | "38" | "38" | "y-down" | "138" | "138" | "y-down-open" | "39" | "39" | "y-left" | "139" | "139" | "y-left-open" | "40" | "40" | "y-right" | "140" | "140" | "y-right-open" | "41" | "41" | "line-ew" | "141" | "141" | "line-ew-open" | "42" | "42" | "line-ns" | "142" | "142" | "line-ns-open" | "43" | "43" | "line-ne" | "143" | "143" | "line-ne-open" | "44" | "44" | "line-nw" | "144" | "144" | "line-nw-open" | "45" | "45" | "arrow-up" | "145" | "145" | "arrow-up-open" | "46" | "46" | "arrow-down" | "146" | "146" | "arrow-down-open" | "47" | "47" | "arrow-left" | "147" | "147" | "arrow-left-open" | "48" | "48" | "arrow-right" | "148" | "148" | "arrow-right-open" | "49" | "49" | "arrow-bar-up" | "149" | "149" | "arrow-bar-up-open" | "50" | "50" | "arrow-bar-down" | "150" | "150" | "arrow-bar-down-open" | "51" | "51" | "arrow-bar-left" | "151" | "151" | "arrow-bar-left-open" | "52" | "52" | "arrow-bar-right" | "152" | "152" | "arrow-bar-right-open" | "53" | "53" | "arrow" | "153" | "153" | "arrow-open" | "54" | "54" | "arrow-wide" | "154" | "154" | "arrow-wide-open" ) Default: "circle" Sets the marker symbol type. Adding 100 is equivalent to appending "-open" to a symbol name. Adding 200 is equivalent to appending "-dot" to a symbol name. Adding 300 is equivalent to appending "-open-dot" or "dot-open" to a symbol name.      line  Parent: data[type=scattercarpet] Type: object containing one or more of the keys listed below.    backoff  Parent: data[type=scattercarpet].line  Type: number or array of numbers greater than or equal to 0 Default: "auto" Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With "auto" the lines would trim before markers if `marker.angleref` is set to "previous".    color  Parent: data[type=scattercarpet].line  Type: color Sets the line color.    dash  Parent: data[type=scattercarpet].line  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    shape  Parent: data[type=scattercarpet].line  Type: enumerated , one of ( "linear" | "spline" ) Default: "linear" Determines the line shape. With "spline" the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.    smoothing  Parent: data[type=scattercarpet].line  Type: number between or equal to 0 and 1.3 Default: 1 Has an effect only if `shape` is set to "spline" Sets the amount of smoothing. "0" corresponds to no smoothing (equivalent to a "linear" shape).    width  Parent: data[type=scattercarpet].line  Type: number greater than or equal to 0 Default: 2 Sets the line width (in px).      textfont  Parent: data[type=scattercarpet] Type: object containing one or more of the keys listed below. Sets the text font.    color  Parent: data[type=scattercarpet].textfont  Type: color or array of colors    family  Parent: data[type=scattercarpet].textfont  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattercarpet].textfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattercarpet].textfont  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattercarpet].textfont  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=scattercarpet].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattercarpet].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattercarpet].textfont  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattercarpet].textfont  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      selectedpoints  Parent: data[type=scattercarpet]  Type: number or categorical coordinate string Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.    selected  Parent: data[type=scattercarpet] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=scattercarpet].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattercarpet].selected.marker  Type: color Sets the marker color of selected points.    opacity  Parent: data[type=scattercarpet].selected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of selected points.    size  Parent: data[type=scattercarpet].selected.marker  Type: number greater than or equal to 0 Sets the marker size of selected points.      textfont  Parent: data[type=scattercarpet].selected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattercarpet].selected.textfont  Type: color Sets the text font color of selected points.        unselected  Parent: data[type=scattercarpet] Type: object containing one or more of the keys listed below.    marker  Parent: data[type=scattercarpet].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattercarpet].unselected.marker  Type: color Sets the marker color of unselected points, applied only when a selection exists.    opacity  Parent: data[type=scattercarpet].unselected.marker  Type: number between or equal to 0 and 1 Sets the marker opacity of unselected points, applied only when a selection exists.    size  Parent: data[type=scattercarpet].unselected.marker  Type: number greater than or equal to 0 Sets the marker size of unselected points, applied only when a selection exists.      textfont  Parent: data[type=scattercarpet].unselected Type: object containing one or more of the keys listed below.    color  Parent: data[type=scattercarpet].unselected.textfont  Type: color Sets the text font color of unselected points, applied only when a selection exists.        carpet  Parent: data[type=scattercarpet]  Type: string An identifier for this carpet, so that `scattercarpet` and `contourcarpet` traces can specify a carpet plot on which they lie    connectgaps  Parent: data[type=scattercarpet]  Type: boolean Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.    fill  Parent: data[type=scattercarpet]  Type: enumerated , one of ( "none" | "toself" | "tonext" ) Default: "none" Sets the area to fill with a solid color. Use with `fillcolor` if not "none". scatterternary has a subset of the options available to scatter. "toself" connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. "tonext" fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like "toself" if there is no trace before it. "tonext" should not be used if one trace does not enclose the other.    fillcolor  Parent: data[type=scattercarpet]  Type: color Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.    hoverlabel  Parent: data[type=scattercarpet] Type: object containing one or more of the keys listed below.    align  Parent: data[type=scattercarpet].hoverlabel  Type: enumerated or array of enumerateds , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: data[type=scattercarpet].hoverlabel  Type: color or array of colors Sets the background color of the hover labels for this trace    bordercolor  Parent: data[type=scattercarpet].hoverlabel  Type: color or array of colors Sets the border color of the hover labels for this trace.    font  Parent: data[type=scattercarpet].hoverlabel Type: object containing one or more of the keys listed below. Sets the font used in hover labels.    color  Parent: data[type=scattercarpet].hoverlabel.font  Type: color or array of colors    family  Parent: data[type=scattercarpet].hoverlabel.font  Type: string or array of strings HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=scattercarpet].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=scattercarpet].hoverlabel.font  Type: string or array of strings Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=scattercarpet].hoverlabel.font  Type: number or array of numbers greater than or equal to 1    style  Parent: data[type=scattercarpet].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=scattercarpet].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=scattercarpet].hoverlabel.font  Type: enumerated or array of enumerateds , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=scattercarpet].hoverlabel.font  Type: integer or array of integers between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: data[type=scattercarpet].hoverlabel  Type: integer or array of integers greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      hoveron  Parent: data[type=scattercarpet]  Type: flaglist string. Any combination of "points", "fills" joined with a "+" Examples: "points", "fills", "points+fills" Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is "toself" or "tonext" and there are no markers or text, then the default is "fills", otherwise it is "points".    uirevision  Parent: data[type=scattercarpet]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  


      

      contourcarpet traces

      










 A contourcarpet trace is an object with the key "type" equal to "contourcarpet" (i.e. {"type": "contourcarpet"}) and any of the keys listed below. Plots contours on either the first carpet axis or the carpet axis with a matching `carpet` attribute. Data `z` is interpreted as matching that of the corresponding carpet axis. 














   type  Parent: data[type=contourcarpet]  Type: "contourcarpet"    name  Parent: data[type=contourcarpet]  Type: string Sets the trace name. The trace name appears as the legend item and on hover.    visible  Parent: data[type=contourcarpet]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this trace is visible. If "legendonly", the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).    showlegend  Parent: data[type=contourcarpet]  Type: boolean Default: true Determines whether or not an item corresponding to this trace is shown in the legend.    legend  Parent: data[type=contourcarpet]  Type: subplotid Default: legend Sets the reference to a legend to show this trace in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendrank  Parent: data[type=contourcarpet]  Type: number Default: 1000 Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendgroup  Parent: data[type=contourcarpet]  Type: string Default: "" Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: data[type=contourcarpet] Type: object containing one or more of the keys listed below.    font  Parent: data[type=contourcarpet].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: data[type=contourcarpet].legendgrouptitle.font  Type: color    family  Parent: data[type=contourcarpet].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=contourcarpet].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=contourcarpet].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=contourcarpet].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: data[type=contourcarpet].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=contourcarpet].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=contourcarpet].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=contourcarpet].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: data[type=contourcarpet].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendwidth  Parent: data[type=contourcarpet]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this trace.    opacity  Parent: data[type=contourcarpet]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the trace.    ids  Parent: data[type=contourcarpet]  Type: data array Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.    zorder  Parent: data[type=contourcarpet]  Type: integer Default: 0 Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.    z  Parent: data[type=contourcarpet]  Type: data array Sets the z data.    a  Parent: data[type=contourcarpet]  Type: data array Sets the x coordinates.    atype  Parent: data[type=contourcarpet]  Type: enumerated , one of ( "array" | "scaled" ) If "array", the heatmap's x coordinates are given by "x" (the default behavior when `x` is provided). If "scaled", the heatmap's x coordinates are given by "x0" and "dx" (the default behavior when `x` is not provided).    a0  Parent: data[type=contourcarpet]  Type: number or categorical coordinate string Default: 0 Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.    da  Parent: data[type=contourcarpet]  Type: number Default: 1 Sets the x coordinate step. See `x0` for more info.    b  Parent: data[type=contourcarpet]  Type: data array Sets the y coordinates.    btype  Parent: data[type=contourcarpet]  Type: enumerated , one of ( "array" | "scaled" ) If "array", the heatmap's y coordinates are given by "y" (the default behavior when `y` is provided) If "scaled", the heatmap's y coordinates are given by "y0" and "dy" (the default behavior when `y` is not provided)    b0  Parent: data[type=contourcarpet]  Type: number or categorical coordinate string Default: 0 Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.    db  Parent: data[type=contourcarpet]  Type: number Default: 1 Sets the y coordinate step. See `y0` for more info.    text  Parent: data[type=contourcarpet]  Type: data array Sets the text elements associated with each z value.    hovertext  Parent: data[type=contourcarpet]  Type: data array Same as `text`.    meta  Parent: data[type=contourcarpet]  Type: number or categorical coordinate string Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.    customdata  Parent: data[type=contourcarpet]  Type: data array Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, "scatter" traces also appends customdata items in the markers DOM elements    xaxis  Parent: data[type=contourcarpet]  Type: subplotid Default: x Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If "x" (the default value), the x coordinates refer to `layout.xaxis`. If "x2", the x coordinates refer to `layout.xaxis2`, and so on.    yaxis  Parent: data[type=contourcarpet]  Type: subplotid Default: y Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If "y" (the default value), the y coordinates refer to `layout.yaxis`. If "y2", the y coordinates refer to `layout.yaxis2`, and so on.    coloraxis  Parent: data[type=contourcarpet]  Type: subplotid Sets a reference to a shared color axis. References to these shared color axes are "coloraxis", "coloraxis2", "coloraxis3", etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.    line  Parent: data[type=contourcarpet] Type: object containing one or more of the keys listed below.    color  Parent: data[type=contourcarpet].line  Type: color Sets the color of the contour level. Has no effect if `contours.coloring` is set to "lines".    dash  Parent: data[type=contourcarpet].line  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    smoothing  Parent: data[type=contourcarpet].line  Type: number between or equal to 0 and 1.3 Default: 1 Sets the amount of smoothing for the contour lines, where "0" corresponds to no smoothing.    width  Parent: data[type=contourcarpet].line  Type: number greater than or equal to 0 Sets the contour line width in (in px) Defaults to "0.5" when `contours.type` is "levels". Defaults to "2" when `contour.type` is "constraint".      colorbar  Parent: data[type=contourcarpet] Type: object containing one or more of the keys listed below.    bgcolor  Parent: data[type=contourcarpet].colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: data[type=contourcarpet].colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: data[type=contourcarpet].colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: data[type=contourcarpet].colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: data[type=contourcarpet].colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: data[type=contourcarpet].colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: data[type=contourcarpet].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: data[type=contourcarpet].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: data[type=contourcarpet].colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: data[type=contourcarpet].colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: data[type=contourcarpet].colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: data[type=contourcarpet].colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: data[type=contourcarpet].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: data[type=contourcarpet].colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: data[type=contourcarpet].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: data[type=contourcarpet].colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: data[type=contourcarpet].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: data[type=contourcarpet].colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: data[type=contourcarpet].colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: data[type=contourcarpet].colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: data[type=contourcarpet].colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: data[type=contourcarpet].colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: data[type=contourcarpet].colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: data[type=contourcarpet].colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: data[type=contourcarpet].colorbar.tickfont  Type: color    family  Parent: data[type=contourcarpet].colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=contourcarpet].colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=contourcarpet].colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=contourcarpet].colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: data[type=contourcarpet].colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=contourcarpet].colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=contourcarpet].colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=contourcarpet].colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: data[type=contourcarpet].colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: data[type=contourcarpet].colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: data[type=contourcarpet].colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: data[type=contourcarpet].colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: data[type=contourcarpet].colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: data[type=contourcarpet].colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: data[type=contourcarpet].colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: data[type=contourcarpet].colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: data[type=contourcarpet].colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: data[type=contourcarpet].colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: data[type=contourcarpet].colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: data[type=contourcarpet].colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: data[type=contourcarpet].colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: data[type=contourcarpet].colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: data[type=contourcarpet].colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: data[type=contourcarpet].colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: data[type=contourcarpet].colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: data[type=contourcarpet].colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: data[type=contourcarpet].colorbar Type: object containing one or more of the keys listed below.    font  Parent: data[type=contourcarpet].colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: data[type=contourcarpet].colorbar.title.font  Type: color    family  Parent: data[type=contourcarpet].colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=contourcarpet].colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=contourcarpet].colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=contourcarpet].colorbar.title.font  Type: number greater than or equal to 1    style  Parent: data[type=contourcarpet].colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=contourcarpet].colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=contourcarpet].colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=contourcarpet].colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: data[type=contourcarpet].colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: data[type=contourcarpet].colorbar.title  Type: string Sets the title of the color bar.      x  Parent: data[type=contourcarpet].colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: data[type=contourcarpet].colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: data[type=contourcarpet].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: data[type=contourcarpet].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: data[type=contourcarpet].colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: data[type=contourcarpet].colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: data[type=contourcarpet].colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: data[type=contourcarpet].colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      autocolorscale  Parent: data[type=contourcarpet]  Type: boolean Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    colorscale  Parent: data[type=contourcarpet]  Type: colorscale Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    showscale  Parent: data[type=contourcarpet]  Type: boolean Default: true Determines whether or not a colorbar is displayed for this trace.    reversescale  Parent: data[type=contourcarpet]  Type: boolean Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.    zauto  Parent: data[type=contourcarpet]  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.    zmax  Parent: data[type=contourcarpet]  Type: number Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.    zmid  Parent: data[type=contourcarpet]  Type: number Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.    zmin  Parent: data[type=contourcarpet]  Type: number Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.    autocontour  Parent: data[type=contourcarpet]  Type: boolean Default: true Determines whether or not the contour level attributes are picked by an algorithm. If "true", the number of contour levels can be set in `ncontours`. If "false", set the contour level attributes in `contours`.    carpet  Parent: data[type=contourcarpet]  Type: string The `carpet` of the carpet axes on which this contour trace lies    contours  Parent: data[type=contourcarpet] Type: object containing one or more of the keys listed below.    coloring  Parent: data[type=contourcarpet].contours  Type: enumerated , one of ( "fill" | "lines" | "none" ) Default: "fill" Determines the coloring method showing the contour values. If "fill", coloring is done evenly between each contour level If "lines", coloring is done on the contour lines. If "none", no coloring is applied on this trace.    end  Parent: data[type=contourcarpet].contours  Type: number Sets the end contour level value. Must be more than `contours.start`    labelfont  Parent: data[type=contourcarpet].contours Type: object containing one or more of the keys listed below. Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.    color  Parent: data[type=contourcarpet].contours.labelfont  Type: color    family  Parent: data[type=contourcarpet].contours.labelfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: data[type=contourcarpet].contours.labelfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: data[type=contourcarpet].contours.labelfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: data[type=contourcarpet].contours.labelfont  Type: number greater than or equal to 1    style  Parent: data[type=contourcarpet].contours.labelfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: data[type=contourcarpet].contours.labelfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: data[type=contourcarpet].contours.labelfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: data[type=contourcarpet].contours.labelfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      labelformat  Parent: data[type=contourcarpet].contours  Type: string Default: "" Sets the contour label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.    operation  Parent: data[type=contourcarpet].contours  Type: enumerated , one of ( "=" | "<" | ">=" | ">" | "<=" | "[]" | "()" | "[)" | "(]" | "][" | ")(" | "](" | ")[" ) Default: "=" Sets the constraint operation. "=" keeps regions equal to `value` "<" and "<=" keep regions less than `value` ">" and ">=" keep regions greater than `value` "[]", "()", "[)", and "(]" keep regions inside `value[0]` to `value[1]` "][", ")(", "](", ")[" keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.    showlabels  Parent: data[type=contourcarpet].contours  Type: boolean Determines whether to label the contour lines with their values.    showlines  Parent: data[type=contourcarpet].contours  Type: boolean Default: true Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to "fill".    size  Parent: data[type=contourcarpet].contours  Type: number greater than or equal to 0 Sets the step between each contour level. Must be positive.    start  Parent: data[type=contourcarpet].contours  Type: number Sets the starting contour level value. Must be less than `contours.end`    type  Parent: data[type=contourcarpet].contours  Type: enumerated , one of ( "levels" | "constraint" ) Default: "levels" If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.    value  Parent: data[type=contourcarpet].contours  Type: number or categorical coordinate string Default: 0 Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (=,<,>=,>,<=) "value" is expected to be a number. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[) "value" is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.      fillcolor  Parent: data[type=contourcarpet]  Type: color Sets the fill color if `contours.type` is "constraint". Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.    ncontours  Parent: data[type=contourcarpet]  Type: integer greater than or equal to 1 Default: 15 Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is "true" or if `contours.size` is missing.    transpose  Parent: data[type=contourcarpet]  Type: boolean Transposes the z data.    uirevision  Parent: data[type=contourcarpet]  Type: number or categorical coordinate string Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.  

layout

    
    








   title  Parent: layout Type: object containing one or more of the keys listed below.    automargin  Parent: layout.title  Type: boolean Determines whether the title can automatically push the figure margins. If `yref='paper'` then the margin will expand to ensure that the title doesn’t overlap with the edges of the container. If `yref='container'` then the margins will ensure that the title doesn’t overlap with the plot area, tick labels, and axis titles. If `automargin=true` and the margins need to be expanded, then y will be set to a default 1 and yanchor will be set to an appropriate default to ensure that minimal margin space is needed. Note that when `yref='paper'`, only 1 or 0 are allowed y values. Invalid values will be reset to the default 1.    font  Parent: layout.title Type: object containing one or more of the keys listed below. Sets the title font.    color  Parent: layout.title.font  Type: color    family  Parent: layout.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.title.font  Type: number greater than or equal to 1    style  Parent: layout.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      pad  Parent: layout.title Type: object containing one or more of the keys listed below. Sets the padding of the title. Each padding value only applies when the corresponding `xanchor`/`yanchor` value is set accordingly. E.g. for left padding to take effect, `xanchor` must be set to "left". The same rule applies if `xanchor`/`yanchor` is determined automatically. Padding is muted if the respective anchor value is "middle"/"center".    b  Parent: layout.title.pad  Type: number Default: 0 The amount of padding (in px) along the bottom of the component.    l  Parent: layout.title.pad  Type: number Default: 0 The amount of padding (in px) on the left side of the component.    r  Parent: layout.title.pad  Type: number Default: 0 The amount of padding (in px) on the right side of the component.    t  Parent: layout.title.pad  Type: number Default: 0 The amount of padding (in px) along the top of the component.      subtitle  Parent: layout.title Type: object containing one or more of the keys listed below.    font  Parent: layout.title.subtitle Type: object containing one or more of the keys listed below. Sets the subtitle font.    color  Parent: layout.title.subtitle.font  Type: color    family  Parent: layout.title.subtitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.title.subtitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.title.subtitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.title.subtitle.font  Type: number greater than or equal to 1    style  Parent: layout.title.subtitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.title.subtitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.title.subtitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.title.subtitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: layout.title.subtitle  Type: string Sets the plot's subtitle.      text  Parent: layout.title  Type: string Sets the plot's title.    x  Parent: layout.title  Type: number between or equal to 0 and 1 Default: 0.5 Sets the x position with respect to `xref` in normalized coordinates from "0" (left) to "1" (right).    xanchor  Parent: layout.title  Type: enumerated , one of ( "auto" | "left" | "center" | "right" ) Default: "auto" Sets the title's horizontal alignment with respect to its x position. "left" means that the title starts at x, "right" means that the title ends at x and "center" means that the title's center is at x. "auto" divides `xref` by three and calculates the `xanchor` value automatically based on the value of `x`.    xref  Parent: layout.title  Type: enumerated , one of ( "container" | "paper" ) Default: "container" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: layout.title  Type: number between or equal to 0 and 1 Default: "auto" Sets the y position with respect to `yref` in normalized coordinates from "0" (bottom) to "1" (top). "auto" places the baseline of the title onto the vertical center of the top margin.    yanchor  Parent: layout.title  Type: enumerated , one of ( "auto" | "top" | "middle" | "bottom" ) Default: "auto" Sets the title's vertical alignment with respect to its y position. "top" means that the title's cap line is at y, "bottom" means that the title's baseline is at y and "middle" means that the title's midline is at y. "auto" divides `yref` by three and calculates the `yanchor` value automatically based on the value of `y`.    yref  Parent: layout.title  Type: enumerated , one of ( "container" | "paper" ) Default: "container" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      showlegend  Parent: layout  Type: boolean Determines whether or not a legend is drawn. Default is `true` if there is a trace to show and any of these: a) Two or more traces would by default be shown in the legend. b) One pie trace is shown in the legend. c) One trace is explicitly given with `showlegend: true`.    legend  Parent: layout Type: object containing one or more of the keys listed below.    bgcolor  Parent: layout.legend  Type: color Sets the legend background color. Defaults to `layout.paper_bgcolor`.    bordercolor  Parent: layout.legend  Type: color Default: "#444" Sets the color of the border enclosing the legend.    borderwidth  Parent: layout.legend  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) of the border enclosing the legend.    entrywidth  Parent: layout.legend  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend. Use 0 to size the entry based on the text width, when `entrywidthmode` is set to "pixels".    entrywidthmode  Parent: layout.legend  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines what entrywidth means.    font  Parent: layout.legend Type: object containing one or more of the keys listed below. Sets the font used to text the legend items.    color  Parent: layout.legend.font  Type: color    family  Parent: layout.legend.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.legend.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.legend.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.legend.font  Type: number greater than or equal to 1    style  Parent: layout.legend.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.legend.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.legend.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.legend.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      groupclick  Parent: layout.legend  Type: enumerated , one of ( "toggleitem" | "togglegroup" ) Default: "togglegroup" Determines the behavior on legend group item click. "toggleitem" toggles the visibility of the individual item clicked on the graph. "togglegroup" toggles the visibility of all items in the same legendgroup as the item clicked on the graph.    grouptitlefont  Parent: layout.legend Type: object containing one or more of the keys listed below. Sets the font for group titles in legend. Defaults to `legend.font` with its size increased about 10%.    color  Parent: layout.legend.grouptitlefont  Type: color    family  Parent: layout.legend.grouptitlefont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.legend.grouptitlefont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.legend.grouptitlefont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.legend.grouptitlefont  Type: number greater than or equal to 1    style  Parent: layout.legend.grouptitlefont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.legend.grouptitlefont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.legend.grouptitlefont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.legend.grouptitlefont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      indentation  Parent: layout.legend  Type: number greater than or equal to -15 Default: 0 Sets the indentation (in px) of the legend entries.    itemclick  Parent: layout.legend  Type: enumerated , one of ( "toggle" | "toggleothers" | false ) Default: "toggle" Determines the behavior on legend item click. "toggle" toggles the visibility of the item clicked on the graph. "toggleothers" makes the clicked item the sole visible item on the graph. "false" disables legend item click interactions.    itemdoubleclick  Parent: layout.legend  Type: enumerated , one of ( "toggle" | "toggleothers" | false ) Default: "toggleothers" Determines the behavior on legend item double-click. "toggle" toggles the visibility of the item clicked on the graph. "toggleothers" makes the clicked item the sole visible item on the graph. "false" disables legend item double-click interactions.    itemsizing  Parent: layout.legend  Type: enumerated , one of ( "trace" | "constant" ) Default: "trace" Determines if the legend items symbols scale with their corresponding "trace" attributes or remain "constant" independent of the symbol size on the graph.    itemwidth  Parent: layout.legend  Type: number greater than or equal to 30 Default: 30 Sets the width (in px) of the legend item symbols (the part other than the title.text).    orientation  Parent: layout.legend  Type: enumerated , one of ( "v" | "h" ) Default: "v" Sets the orientation of the legend.    title  Parent: layout.legend Type: object containing one or more of the keys listed below.    font  Parent: layout.legend.title Type: object containing one or more of the keys listed below. Sets this legend's title font. Defaults to `legend.font` with its size increased about 20%.    color  Parent: layout.legend.title.font  Type: color    family  Parent: layout.legend.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.legend.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.legend.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.legend.title.font  Type: number greater than or equal to 1    style  Parent: layout.legend.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.legend.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.legend.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.legend.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: layout.legend.title  Type: enumerated , one of ( "top" | "left" | "top left" | "top center" | "top right" ) Determines the location of legend's title with respect to the legend items. Defaulted to "top" with `orientation` is "h". Defaulted to "left" with `orientation` is "v". The "top left" options could be used to expand top center and top right are for horizontal alignment legend area in both x and y sides.    text  Parent: layout.legend.title  Type: string Default: "" Sets the title of the legend.      tracegroupgap  Parent: layout.legend  Type: number greater than or equal to 0 Default: 10 Sets the amount of vertical space (in px) between legend groups.    traceorder  Parent: layout.legend  Type: flaglist string. Any combination of "reversed", "grouped" joined with a "+" OR "normal". Examples: "reversed", "grouped", "reversed+grouped", "normal" Determines the order at which the legend items are displayed. If "normal", the items are displayed top-to-bottom in the same order as the input data. If "reversed", the items are displayed in the opposite order as "normal". If "grouped", the items are displayed in groups (when a trace `legendgroup` is provided). if "grouped+reversed", the items are displayed in the opposite order as "grouped".    uirevision  Parent: layout.legend  Type: number or categorical coordinate string Controls persistence of legend-driven changes in trace and pie label visibility. Defaults to `layout.uirevision`.    valign  Parent: layout.legend  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Default: "middle" Sets the vertical alignment of the symbols with respect to their associated text.    visible  Parent: layout.legend  Type: boolean Default: true Determines whether or not this legend is visible.    x  Parent: layout.legend  Type: number Sets the x position with respect to `xref` (in normalized coordinates) of the legend. When `xref` is "paper", defaults to "1.02" for vertical legends and defaults to "0" for horizontal legends. When `xref` is "container", defaults to "1" for vertical legends and defaults to "0" for horizontal legends. Must be between "0" and "1" if `xref` is "container". and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: layout.legend  Type: enumerated , one of ( "auto" | "left" | "center" | "right" ) Default: "left" Sets the legend's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the legend. Value "auto" anchors legends to the right for `x` values greater than or equal to 2/3, anchors legends to the left for `x` values less than or equal to 1/3 and anchors legends with respect to their center otherwise.    xref  Parent: layout.legend  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: layout.legend  Type: number Sets the y position with respect to `yref` (in normalized coordinates) of the legend. When `yref` is "paper", defaults to "1" for vertical legends, defaults to "-0.1" for horizontal legends on graphs w/o range sliders and defaults to "1.1" for horizontal legends on graph with one or multiple range sliders. When `yref` is "container", defaults to "1". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: layout.legend  Type: enumerated , one of ( "auto" | "top" | "middle" | "bottom" ) Sets the legend's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the legend. Value "auto" anchors legends at their bottom for `y` values less than or equal to 1/3, anchors legends to at their top for `y` values greater than or equal to 2/3 and anchors legends with respect to their middle otherwise.    yref  Parent: layout.legend  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      margin  Parent: layout Type: object containing one or more of the keys listed below.    autoexpand  Parent: layout.margin  Type: boolean Default: true Turns on/off margin expansion computations. Legends, colorbars, updatemenus, sliders, axis rangeselector and rangeslider are allowed to push the margins by defaults.    b  Parent: layout.margin  Type: number greater than or equal to 0 Default: 80 Sets the bottom margin (in px).    l  Parent: layout.margin  Type: number greater than or equal to 0 Default: 80 Sets the left margin (in px).    pad  Parent: layout.margin  Type: number greater than or equal to 0 Default: 0 Sets the amount of padding (in px) between the plotting area and the axis lines    r  Parent: layout.margin  Type: number greater than or equal to 0 Default: 80 Sets the right margin (in px).    t  Parent: layout.margin  Type: number greater than or equal to 0 Default: 100 Sets the top margin (in px).      autosize  Parent: layout  Type: boolean Determines whether or not a layout width or height that has been left undefined by the user is initialized on each relayout. Note that, regardless of this attribute, an undefined layout width or height is always initialized on the first call to plot.    width  Parent: layout  Type: number greater than or equal to 10 Default: 700 Sets the plot's width (in px).    height  Parent: layout  Type: number greater than or equal to 10 Default: 450 Sets the plot's height (in px).    font  Parent: layout Type: object containing one or more of the keys listed below. Sets the global font. Note that fonts used in traces and other layout components inherit from the global font.    color  Parent: layout.font  Type: color Default: "#444"    family  Parent: layout.font  Type: string Default: ""Open Sans", verdana, arial, sans-serif" HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.font  Type: number greater than or equal to 1 Default: 12    style  Parent: layout.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      uniformtext  Parent: layout Type: object containing one or more of the keys listed below.    minsize  Parent: layout.uniformtext  Type: number greater than or equal to 0 Default: 0 Sets the minimum text size between traces of the same type.    mode  Parent: layout.uniformtext  Type: enumerated , one of ( false | "hide" | "show" ) Determines how the font size for various text elements are uniformed between each trace type. If the computed text sizes were smaller than the minimum size defined by `uniformtext.minsize` using "hide" option hides the text; and using "show" option shows the text without further downscaling. Please note that if the size defined by `minsize` is greater than the font size defined by trace, then the `minsize` is used.      separators  Parent: layout  Type: string Sets the decimal and thousand separators. For example, ". " puts a '.' before decimals and a space between thousands. In English locales, dflt is ".," but other locales may alter this default.    paper_bgcolor  Parent: layout  Type: color Default: "#fff" Sets the background color of the paper where the graph is drawn.    plot_bgcolor  Parent: layout  Type: color Default: "#fff" Sets the background color of the plotting area in-between x and y axes.    autotypenumbers  Parent: layout  Type: enumerated , one of ( "convert types" | "strict" ) Default: "convert types" Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data may be treated as a number during automatic axis `type` detection. This is the default value; however it could be overridden for individual axes.    colorscale  Parent: layout Type: object containing one or more of the keys listed below.    diverging  Parent: layout.colorscale  Type: colorscale Default: [[0, rgb(5,10,172)], [0.35, rgb(106,137,247)], [0.5, rgb(190,190,190)], [0.6, rgb(220,170,132)], [0.7, rgb(230,145,90)], [1, rgb(178,10,28)], ] Sets the default diverging colorscale. Note that `autocolorscale` must be true for this attribute to work.    sequential  Parent: layout.colorscale  Type: colorscale Default: [[0, rgb(220,220,220)], [0.2, rgb(245,195,157)], [0.4, rgb(245,160,105)], [1, rgb(178,10,28)], ] Sets the default sequential colorscale for positive values. Note that `autocolorscale` must be true for this attribute to work.    sequentialminus  Parent: layout.colorscale  Type: colorscale Default: [[0, rgb(5,10,172)], [0.35, rgb(40,60,190)], [0.5, rgb(70,100,245)], [0.6, rgb(90,120,245)], [0.7, rgb(106,137,247)], [1, rgb(220,220,220)], ] Sets the default sequential colorscale for negative values. Note that `autocolorscale` must be true for this attribute to work.      colorway  Parent: layout  Type: colorlist Default: [#1f77b4, #ff7f0e, #2ca02c, #d62728, #9467bd, #8c564b, #e377c2, #7f7f7f, #bcbd22, #17becf] Sets the default trace colors.    coloraxis  Parent: layout Type: object containing one or more of the keys listed below.    autocolorscale  Parent: layout.coloraxis  Type: boolean Default: true Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.    cauto  Parent: layout.coloraxis  Type: boolean Default: true Determines whether or not the color domain is computed with respect to the input data (here corresponding trace color array(s)) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.    cmax  Parent: layout.coloraxis  Type: number Sets the upper bound of the color domain. Value should have the same units as corresponding trace color array(s) and if set, `cmin` must be set as well.    cmid  Parent: layout.coloraxis  Type: number Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as corresponding trace color array(s). Has no effect when `cauto` is `false`.    cmin  Parent: layout.coloraxis  Type: number Sets the lower bound of the color domain. Value should have the same units as corresponding trace color array(s) and if set, `cmax` must be set as well.    colorbar  Parent: layout.coloraxis Type: object containing one or more of the keys listed below.    bgcolor  Parent: layout.coloraxis.colorbar  Type: color Default: "rgba(0,0,0,0)" Sets the color of padded area.    bordercolor  Parent: layout.coloraxis.colorbar  Type: color Default: "#444" Sets the axis line color.    borderwidth  Parent: layout.coloraxis.colorbar  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) or the border enclosing this color bar.    dtick  Parent: layout.coloraxis.colorbar  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: layout.coloraxis.colorbar  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    labelalias  Parent: layout.coloraxis.colorbar  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    len  Parent: layout.coloraxis.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.    lenmode  Parent: layout.coloraxis.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minexponent  Parent: layout.coloraxis.colorbar  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: layout.coloraxis.colorbar  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    orientation  Parent: layout.coloraxis.colorbar  Type: enumerated , one of ( "h" | "v" ) Default: "v" Sets the orientation of the colorbar.    outlinecolor  Parent: layout.coloraxis.colorbar  Type: color Default: "#444" Sets the axis line color.    outlinewidth  Parent: layout.coloraxis.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    separatethousands  Parent: layout.coloraxis.colorbar  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: layout.coloraxis.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showticklabels  Parent: layout.coloraxis.colorbar  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: layout.coloraxis.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: layout.coloraxis.colorbar  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thickness  Parent: layout.coloraxis.colorbar  Type: number greater than or equal to 0 Default: 30 Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.    thicknessmode  Parent: layout.coloraxis.colorbar  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "pixels" Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot "fraction" or in "pixels". Use `thickness` to set the value.    tick0  Parent: layout.coloraxis.colorbar  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: layout.coloraxis.colorbar  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: layout.coloraxis.colorbar  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: layout.coloraxis.colorbar Type: object containing one or more of the keys listed below. Sets the color bar's tick label font    color  Parent: layout.coloraxis.colorbar.tickfont  Type: color    family  Parent: layout.coloraxis.colorbar.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.coloraxis.colorbar.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.coloraxis.colorbar.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.coloraxis.colorbar.tickfont  Type: number greater than or equal to 1    style  Parent: layout.coloraxis.colorbar.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.coloraxis.colorbar.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.coloraxis.colorbar.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.coloraxis.colorbar.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: layout.coloraxis.colorbar  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: layout.coloraxis.colorbar Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: layout.coloraxis.colorbar.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: layout.coloraxis.colorbar.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: layout.coloraxis.colorbar.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: layout.coloraxis.colorbar.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: layout.coloraxis.colorbar.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabeloverflow  Parent: layout.coloraxis.colorbar  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". In other cases the default is "hide past div".    ticklabelposition  Parent: layout.coloraxis.colorbar  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is "h", top and bottom when `orientation` is "v".    ticklabelstep  Parent: layout.coloraxis.colorbar  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: layout.coloraxis.colorbar  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: layout.coloraxis.colorbar  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: layout.coloraxis.colorbar  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: layout.coloraxis.colorbar  Type: enumerated , one of ( "outside" | "inside" | "" ) Default: "" Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: layout.coloraxis.colorbar  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: layout.coloraxis.colorbar  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: layout.coloraxis.colorbar  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: layout.coloraxis.colorbar  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: layout.coloraxis.colorbar Type: object containing one or more of the keys listed below.    font  Parent: layout.coloraxis.colorbar.title Type: object containing one or more of the keys listed below. Sets this color bar's title font.    color  Parent: layout.coloraxis.colorbar.title.font  Type: color    family  Parent: layout.coloraxis.colorbar.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.coloraxis.colorbar.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.coloraxis.colorbar.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.coloraxis.colorbar.title.font  Type: number greater than or equal to 1    style  Parent: layout.coloraxis.colorbar.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.coloraxis.colorbar.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.coloraxis.colorbar.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.coloraxis.colorbar.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      side  Parent: layout.coloraxis.colorbar.title  Type: enumerated , one of ( "right" | "top" | "bottom" ) Determines the location of color bar's title with respect to the color bar. Defaults to "top" when `orientation` if "v" and defaults to "right" when `orientation` if "h".    text  Parent: layout.coloraxis.colorbar.title  Type: string Sets the title of the color bar.      x  Parent: layout.coloraxis.colorbar  Type: number Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is "paper", defaults to 1.02 when `orientation` is "v" and 0.5 when `orientation` is "h". When `xref` is "container", defaults to "1" when `orientation` is "v" and 0.5 when `orientation` is "h". Must be between "0" and "1" if `xref` is "container" and between "-2" and "3" if `xref` is "paper".    xanchor  Parent: layout.coloraxis.colorbar  Type: enumerated , one of ( "left" | "center" | "right" ) Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the color bar. Defaults to "left" when `orientation` is "v" and "center" when `orientation` is "h".    xpad  Parent: layout.coloraxis.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the x direction.    xref  Parent: layout.coloraxis.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `x` refers to. "container" spans the entire `width` of the plot. "paper" refers to the width of the plotting area only.    y  Parent: layout.coloraxis.colorbar  Type: number Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is "paper", defaults to 0.5 when `orientation` is "v" and 1.02 when `orientation` is "h". When `yref` is "container", defaults to 0.5 when `orientation` is "v" and 1 when `orientation` is "h". Must be between "0" and "1" if `yref` is "container" and between "-2" and "3" if `yref` is "paper".    yanchor  Parent: layout.coloraxis.colorbar  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets this color bar's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the color bar. Defaults to "middle" when `orientation` is "v" and "bottom" when `orientation` is "h".    ypad  Parent: layout.coloraxis.colorbar  Type: number greater than or equal to 0 Default: 10 Sets the amount of padding (in px) along the y direction.    yref  Parent: layout.coloraxis.colorbar  Type: enumerated , one of ( "container" | "paper" ) Default: "paper" Sets the container `y` refers to. "container" spans the entire `height` of the plot. "paper" refers to the height of the plotting area only.      colorscale  Parent: layout.coloraxis  Type: colorscale Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.    reversescale  Parent: layout.coloraxis  Type: boolean Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.    showscale  Parent: layout.coloraxis  Type: boolean Default: true Determines whether or not a colorbar is displayed for this trace.      modebar  Parent: layout Type: object containing one or more of the keys listed below.    activecolor  Parent: layout.modebar  Type: color Sets the color of the active or hovered on icons in the modebar.    add  Parent: layout.modebar  Type: string or array of strings Default: "" Determines which predefined modebar buttons to add. Please note that these buttons will only be shown if they are compatible with all trace types used in a graph. Similar to `config.modeBarButtonsToAdd` option. This may include "v1hovermode", "hoverclosest", "hovercompare", "togglehover", "togglespikelines", "drawline", "drawopenpath", "drawclosedpath", "drawcircle", "drawrect", "eraseshape".    bgcolor  Parent: layout.modebar  Type: color Sets the background color of the modebar.    color  Parent: layout.modebar  Type: color Sets the color of the icons in the modebar.    orientation  Parent: layout.modebar  Type: enumerated , one of ( "v" | "h" ) Default: "h" Sets the orientation of the modebar.    remove  Parent: layout.modebar  Type: string or array of strings Default: "" Determines which predefined modebar buttons to remove. Similar to `config.modeBarButtonsToRemove` option. This may include "autoScale2d", "autoscale", "editInChartStudio", "editinchartstudio", "hoverCompareCartesian", "hovercompare", "lasso", "lasso2d", "orbitRotation", "orbitrotation", "pan", "pan2d", "pan3d", "reset", "resetCameraDefault3d", "resetCameraLastSave3d", "resetGeo", "resetSankeyGroup", "resetScale2d", "resetViewMap", "resetViewMapbox", "resetViews", "resetcameradefault", "resetcameralastsave", "resetsankeygroup", "resetscale", "resetview", "resetviews", "select", "select2d", "sendDataToCloud", "senddatatocloud", "tableRotation", "tablerotation", "toImage", "toggleHover", "toggleSpikelines", "togglehover", "togglespikelines", "toimage", "zoom", "zoom2d", "zoom3d", "zoomIn2d", "zoomInGeo", "zoomInMap", "zoomInMapbox", "zoomOut2d", "zoomOutGeo", "zoomOutMap", "zoomOutMapbox", "zoomin", "zoomout".    uirevision  Parent: layout.modebar  Type: number or categorical coordinate string Controls persistence of user-driven changes related to the modebar, including `hovermode`, `dragmode`, and `showspikes` at both the root level and inside subplots. Defaults to `layout.uirevision`.      hovermode  Parent: layout  Type: enumerated , one of ( "x" | "y" | "closest" | false | "x unified" | "y unified" ) Default: "closest" Determines the mode of hover interactions. If "closest", a single hoverlabel will appear for the "closest" point within the `hoverdistance`. If "x" (or "y"), multiple hoverlabels will appear for multiple points at the "closest" x- (or y-) coordinate within the `hoverdistance`, with the caveat that no more than one hoverlabel will appear per trace. If "x unified" (or "y unified"), a single hoverlabel will appear multiple points at the closest x- (or y-) coordinate within the `hoverdistance` with the caveat that no more than one hoverlabel will appear per trace. In this mode, spikelines are enabled by default perpendicular to the specified axis. If false, hover interactions are disabled.    hoversubplots  Parent: layout  Type: enumerated , one of ( "single" | "overlaying" | "axis" ) Default: "overlaying" Determines expansion of hover effects to other subplots If "single" just the axis pair of the primary point is included without overlaying subplots. If "overlaying" all subplots using the main axis and occupying the same space are included. If "axis", also include stacked subplots using the same axis when `hovermode` is set to "x", "x unified", "y" or "y unified".    clickmode  Parent: layout  Type: flaglist string. Any combination of "event", "select" joined with a "+" OR "none". Examples: "event", "select", "event+select", "none" Default: "event" Determines the mode of single click interactions. "event" is the default value and emits the `plotly_click` event. In addition this mode emits the `plotly_selected` event in drag modes "lasso" and "select", but with no event data attached (kept for compatibility reasons). The "select" flag enables selecting single data points via click. This mode also supports persistent selections, meaning that pressing Shift while clicking, adds to / subtracts from an existing selection. "select" with `hovermode`: "x" can be confusing, consider explicitly setting `hovermode`: "closest" when using this feature. Selection events are sent accordingly as long as "event" flag is set as well. When the "event" flag is missing, `plotly_click` and `plotly_selected` events are not fired.    dragmode  Parent: layout  Type: enumerated , one of ( "zoom" | "pan" | "select" | "lasso" | "drawclosedpath" | "drawopenpath" | "drawline" | "drawrect" | "drawcircle" | "orbit" | "turntable" | false ) Default: "zoom" Determines the mode of drag interactions. "select" and "lasso" apply only to scatter traces with markers or text. "orbit" and "turntable" apply only to 3D scenes.    selectdirection  Parent: layout  Type: enumerated , one of ( "h" | "v" | "d" | "any" ) Default: "any" When `dragmode` is set to "select", this limits the selection of the drag to horizontal, vertical or diagonal. "h" only allows horizontal selection, "v" only vertical, "d" only diagonal and "any" sets no limit.    activeselection  Parent: layout Type: object containing one or more of the keys listed below.    fillcolor  Parent: layout.activeselection  Type: color Default: "rgba(0,0,0,0)" Sets the color filling the active selection' interior.    opacity  Parent: layout.activeselection  Type: number between or equal to 0 and 1 Default: 0.5 Sets the opacity of the active selection.      newselection  Parent: layout Type: object containing one or more of the keys listed below.    line  Parent: layout.newselection Type: object containing one or more of the keys listed below.    color  Parent: layout.newselection.line  Type: color Sets the line color. By default uses either dark grey or white to increase contrast with background color.    dash  Parent: layout.newselection.line  Type: string Default: "dot" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    width  Parent: layout.newselection.line  Type: number greater than or equal to 1 Default: 1 Sets the line width (in px).      mode  Parent: layout.newselection  Type: enumerated , one of ( "immediate" | "gradual" ) Default: "immediate" Describes how a new selection is created. If `immediate`, a new selection is created after first mouse up. If `gradual`, a new selection is not created after first mouse. By adding to and subtracting from the initial selection, this option allows declaring extra outlines of the selection.      hoverdistance  Parent: layout  Type: integer greater than or equal to -1 Default: 20 Sets the default distance (in pixels) to look for data to add hover labels (-1 means no cutoff, 0 means no looking for data). This is only a real distance for hovering on point-like objects, like scatter points. For area-like objects (bars, scatter fills, etc) hovering is on inside the area and off outside, but these objects will not supersede hover on point-like objects in case of conflict.    spikedistance  Parent: layout  Type: integer greater than or equal to -1 Default: -1 Sets the default distance (in pixels) to look for data to draw spikelines to (-1 means no cutoff, 0 means no looking for data). As with hoverdistance, distance does not apply to area-like objects. In addition, some objects can be hovered on but will not generate spikelines, such as scatter fills.    hoverlabel  Parent: layout Type: object containing one or more of the keys listed below.    align  Parent: layout.hoverlabel  Type: enumerated , one of ( "left" | "right" | "auto" ) Default: "auto" Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines    bgcolor  Parent: layout.hoverlabel  Type: color Sets the background color of all hover labels on graph    bordercolor  Parent: layout.hoverlabel  Type: color Sets the border color of all hover labels on graph.    font  Parent: layout.hoverlabel Type: object containing one or more of the keys listed below. Sets the default hover label font used by all traces on the graph.    color  Parent: layout.hoverlabel.font  Type: color    family  Parent: layout.hoverlabel.font  Type: string Default: "Arial, sans-serif" HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.hoverlabel.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.hoverlabel.font  Type: number greater than or equal to 1 Default: 13    style  Parent: layout.hoverlabel.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.hoverlabel.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.hoverlabel.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.hoverlabel.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      grouptitlefont  Parent: layout.hoverlabel Type: object containing one or more of the keys listed below. Sets the font for group titles in hover (unified modes). Defaults to `hoverlabel.font`.    color  Parent: layout.hoverlabel.grouptitlefont  Type: color    family  Parent: layout.hoverlabel.grouptitlefont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.hoverlabel.grouptitlefont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.hoverlabel.grouptitlefont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.hoverlabel.grouptitlefont  Type: number greater than or equal to 1    style  Parent: layout.hoverlabel.grouptitlefont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.hoverlabel.grouptitlefont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.hoverlabel.grouptitlefont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.hoverlabel.grouptitlefont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      namelength  Parent: layout.hoverlabel  Type: integer greater than or equal to -1 Default: 15 Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.      transition  Parent: layout Type: object containing one or more of the keys listed below. Sets transition options used during Plotly.react updates.    duration  Parent: layout.transition  Type: number greater than or equal to 0 Default: 500 The duration of the transition, in milliseconds. If equal to zero, updates are synchronous.    easing  Parent: layout.transition  Type: enumerated , one of ( "linear" | "quad" | "cubic" | "sin" | "exp" | "circle" | "elastic" | "back" | "bounce" | "linear-in" | "quad-in" | "cubic-in" | "sin-in" | "exp-in" | "circle-in" | "elastic-in" | "back-in" | "bounce-in" | "linear-out" | "quad-out" | "cubic-out" | "sin-out" | "exp-out" | "circle-out" | "elastic-out" | "back-out" | "bounce-out" | "linear-in-out" | "quad-in-out" | "cubic-in-out" | "sin-in-out" | "exp-in-out" | "circle-in-out" | "elastic-in-out" | "back-in-out" | "bounce-in-out" ) Default: "cubic-in-out" The easing function used for the transition    ordering  Parent: layout.transition  Type: enumerated , one of ( "layout first" | "traces first" ) Default: "layout first" Determines whether the figure's layout or traces smoothly transitions during updates that make both traces and layout change.      datarevision  Parent: layout  Type: number or categorical coordinate string If provided, a changed value tells `Plotly.react` that one or more data arrays has changed. This way you can modify arrays in-place rather than making a complete new copy for an incremental change. If NOT provided, `Plotly.react` assumes that data arrays are being treated as immutable, thus any data array with a different identity from its predecessor contains new data.    uirevision  Parent: layout  Type: number or categorical coordinate string Used to allow user interactions with the plot to persist after `Plotly.react` calls that are unaware of these interactions. If `uirevision` is omitted, or if it is given and it changed from the previous `Plotly.react` call, the exact new figure is used. If `uirevision` is truthy and did NOT change, any attribute that has been affected by user interactions and did not receive a different value in the new figure will keep the interaction value. `layout.uirevision` attribute serves as the default for `uirevision` attributes in various sub-containers. For finer control you can set these sub-attributes directly. For example, if your app separately controls the data on the x and y axes you might set `xaxis.uirevision="time"` and `yaxis.uirevision="cost"`. Then if only the y data is changed, you can update `yaxis.uirevision="quantity"` and the y axis range will reset but the x axis range will retain any user-driven zoom.    editrevision  Parent: layout  Type: number or categorical coordinate string Controls persistence of user-driven changes in `editable: true` configuration, other than trace names and axis titles. Defaults to `layout.uirevision`.    selectionrevision  Parent: layout  Type: number or categorical coordinate string Controls persistence of user-driven changes in selected points from all traces.    template  Parent: layout  Type: number or categorical coordinate string Default attributes to be applied to the plot. Templates can be created from existing plots using `Plotly.makeTemplate`, or created manually. They should be objects with format: `{layout: layoutTemplate, data: {[type]: [traceTemplate, ...]}, ...}` `layoutTemplate` and `traceTemplate` are objects matching the attribute structure of `layout` and a data trace. Trace templates are applied cyclically to traces of each type. Container arrays (eg `annotations`) have special handling: An object ending in `defaults` (eg `annotationdefaults`) is applied to each array item. But if an item has a `templateitemname` key we look in the template array for an item with matching `name` and apply that instead. If no matching `name` is found we mark the item invisible. Any named template item not referenced is appended to the end of the array, so you can use this for a watermark annotation or a logo image, for example. To omit one of these items on the plot, make an item with matching `templateitemname` and `visible: false`.    meta  Parent: layout  Type: number or categorical coordinate string Assigns extra meta information that can be used in various `text` attributes. Attributes such as the graph, axis and colorbar `title.text`, annotation `text` `trace.name` in legend items, `rangeselector`, `updatemenus` and `sliders` `label` text all support `meta`. One can access `meta` fields using template strings: `%{meta[i]}` where `i` is the index of the `meta` item in question. `meta` can also be an object for example `{key: value}` which can be accessed %{meta[key]}.    computed  Parent: layout  Type: number or categorical coordinate string Placeholder for exporting automargin-impacting values namely `margin.t`, `margin.b`, `margin.l` and `margin.r` in "full-json" mode.    grid  Parent: layout Type: object containing one or more of the keys listed below.    columns  Parent: layout.grid  Type: integer greater than or equal to 1 The number of columns in the grid. If you provide a 2D `subplots` array, the length of its longest row is used as the default. If you give an `xaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.    domain  Parent: layout.grid Type: object containing one or more of the keys listed below.    x  Parent: layout.grid.domain  Type: array Default: [0, 1] Sets the horizontal domain of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.    y  Parent: layout.grid.domain  Type: array Default: [0, 1] Sets the vertical domain of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.      pattern  Parent: layout.grid  Type: enumerated , one of ( "independent" | "coupled" ) Default: "coupled" If no `subplots`, `xaxes`, or `yaxes` are given but we do have `rows` and `columns`, we can generate defaults using consecutive axis IDs, in two ways: "coupled" gives one x axis per column and one y axis per row. "independent" uses a new xy pair for each cell, left-to-right across each row then iterating rows according to `roworder`.    roworder  Parent: layout.grid  Type: enumerated , one of ( "top to bottom" | "bottom to top" ) Default: "top to bottom" Is the first row the top or the bottom? Note that columns are always enumerated from left to right.    rows  Parent: layout.grid  Type: integer greater than or equal to 1 The number of rows in the grid. If you provide a 2D `subplots` array or a `yaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.    subplots  Parent: layout.grid  Type: array Used for freeform grids, where some axes may be shared across subplots but others are not. Each entry should be a cartesian subplot id, like "xy" or "x3y2", or "" to leave that cell empty. You may reuse x axes within the same column, and y axes within the same row. Non-cartesian subplots and traces that support `domain` can place themselves in this grid separately using the `gridcell` attribute.    xaxes  Parent: layout.grid  Type: array Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an x axis id like "x", "x2", etc., or "" to not put an x axis in that column. Entries other than "" must be unique. Ignored if `subplots` is present. If missing but `yaxes` is present, will generate consecutive IDs.    xgap  Parent: layout.grid  Type: number between or equal to 0 and 1 Horizontal space between grid cells, expressed as a fraction of the total width available to one cell. Defaults to 0.1 for coupled-axes grids and 0.2 for independent grids.    xside  Parent: layout.grid  Type: enumerated , one of ( "bottom" | "bottom plot" | "top plot" | "top" ) Default: "bottom plot" Sets where the x axis labels and titles go. "bottom" means the very bottom of the grid. "bottom plot" is the lowest plot that each x axis is used in. "top" and "top plot" are similar.    yaxes  Parent: layout.grid  Type: array Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an y axis id like "y", "y2", etc., or "" to not put a y axis in that row. Entries other than "" must be unique. Ignored if `subplots` is present. If missing but `xaxes` is present, will generate consecutive IDs.    ygap  Parent: layout.grid  Type: number between or equal to 0 and 1 Vertical space between grid cells, expressed as a fraction of the total height available to one cell. Defaults to 0.1 for coupled-axes grids and 0.3 for independent grids.    yside  Parent: layout.grid  Type: enumerated , one of ( "left" | "left plot" | "right plot" | "right" ) Default: "left plot" Sets where the y axis labels and titles go. "left" means the very left edge of the grid. "left plot" is the leftmost plot that each y axis is used in. "right" and "right plot" are similar.      calendar  Parent: layout  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the default calendar system to use for interpreting and displaying dates throughout the plot.    minreducedheight  Parent: layout  Type: number greater than or equal to 2 Default: 64 Minimum height of the plot with margin.automargin applied (in px)    minreducedwidth  Parent: layout  Type: number greater than or equal to 2 Default: 64 Minimum width of the plot with margin.automargin applied (in px)    xaxis  Parent: layout Type: object containing one or more of the keys listed below.    anchor  Parent: layout.xaxis  Type: enumerated , one of ( "free" | "/^x([2-9]|[1-9][0-9]+)?( domain)?$/" | "/^y([2-9]|[1-9][0-9]+)?( domain)?$/" ) If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to "free", this axis' position is determined by `position`.    automargin  Parent: layout.xaxis  Type: flaglist string. Any combination of "height", "width", "left", "right", "top", "bottom" joined with a "+" OR true or false. Examples: "height", "width", "height+width", "height+width+left", "true" Determines whether long tick labels automatically grow the figure margins.    autorange  Parent: layout.xaxis  Type: enumerated , one of ( true | false | "reversed" | "min reversed" | "max reversed" | "min" | "max" ) Default: true Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to "false". Using "min" applies autorange only to set the minimum. Using "max" applies autorange only to set the maximum. Using "min reversed" applies autorange only to set the minimum on a reversed axis. Using "max reversed" applies autorange only to set the maximum on a reversed axis. Using "reversed" applies autorange on both ends and reverses the axis direction.    autorangeoptions  Parent: layout.xaxis Type: object containing one or more of the keys listed below.    clipmax  Parent: layout.xaxis.autorangeoptions  Type: number or categorical coordinate string Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.    clipmin  Parent: layout.xaxis.autorangeoptions  Type: number or categorical coordinate string Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.    include  Parent: layout.xaxis.autorangeoptions  Type: number or categorical coordinate string Ensure this value is included in autorange.    maxallowed  Parent: layout.xaxis.autorangeoptions  Type: number or categorical coordinate string Use this value exactly as autorange maximum.    minallowed  Parent: layout.xaxis.autorangeoptions  Type: number or categorical coordinate string Use this value exactly as autorange minimum.      autotickangles  Parent: layout.xaxis  Type: array Default: [0, 30, 90] When `tickangle` is set to "auto", it will be set to the first angle in this array that is large enough to prevent label overlap.    autotypenumbers  Parent: layout.xaxis  Type: enumerated , one of ( "convert types" | "strict" ) Default: "convert types" Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.    calendar  Parent: layout.xaxis  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`    categoryarray  Parent: layout.xaxis  Type: data array Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to "array". Used with `categoryorder`.    categoryorder  Parent: layout.xaxis  Type: enumerated , one of ( "trace" | "category ascending" | "category descending" | "array" | "total ascending" | "total descending" | "min ascending" | "min descending" | "max ascending" | "max descending" | "sum ascending" | "sum descending" | "mean ascending" | "mean descending" | "geometric mean ascending" | "geometric mean descending" | "median ascending" | "median descending" ) Default: "trace" Specifies the ordering logic for the case of categorical variables. By default, plotly uses "trace", which specifies the order that is present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to "total ascending" or "total descending" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.    color  Parent: layout.xaxis  Type: color Default: "#444" Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.    constrain  Parent: layout.xaxis  Type: enumerated , one of ( "range" | "domain" ) If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the "range", or by decreasing the "domain". Default is "domain" for axes containing image traces, "range" otherwise.    constraintoward  Parent: layout.xaxis  Type: enumerated , one of ( "left" | "center" | "right" | "top" | "middle" | "bottom" ) If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are "left", "center" (default), and "right" for x axes, and "top", "middle" (default), and "bottom" for y axes.    dividercolor  Parent: layout.xaxis  Type: color Default: "#444" Sets the color of the dividers Only has an effect on "multicategory" axes.    dividerwidth  Parent: layout.xaxis  Type: number Default: 1 Sets the width (in px) of the dividers Only has an effect on "multicategory" axes.    domain  Parent: layout.xaxis  Type: array Default: [0, 1] Sets the domain of this axis (in plot fraction).    dtick  Parent: layout.xaxis  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: layout.xaxis  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    fixedrange  Parent: layout.xaxis  Type: boolean Determines whether or not this axis is zoom-able. If true, then zoom is disabled.    gridcolor  Parent: layout.xaxis  Type: color Default: "#eee" Sets the color of the grid lines.    griddash  Parent: layout.xaxis  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    gridwidth  Parent: layout.xaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the grid lines.    hoverformat  Parent: layout.xaxis  Type: string Default: "" Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    insiderange  Parent: layout.xaxis  Type: array Could be used to set the desired inside range of this axis (excluding the labels) when `ticklabelposition` of the anchored axis has "inside". Not implemented for axes with `type` "log". This would be ignored when `range` is provided.    labelalias  Parent: layout.xaxis  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    layer  Parent: layout.xaxis  Type: enumerated , one of ( "above traces" | "below traces" ) Default: "above traces" Sets the layer on which this axis is displayed. If "above traces", this axis is displayed above all the subplot's traces If "below traces", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to "false" to show markers and/or text nodes above this axis.    linecolor  Parent: layout.xaxis  Type: color Default: "#444" Sets the axis line color.    linewidth  Parent: layout.xaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    matches  Parent: layout.xaxis  Type: enumerated , one of ( "/^x([2-9]|[1-9][0-9]+)?( domain)?$/" | "/^y([2-9]|[1-9][0-9]+)?( domain)?$/" ) If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes must have the same `type`.    maxallowed  Parent: layout.xaxis  Type: number or categorical coordinate string Determines the maximum range of this axis.    minallowed  Parent: layout.xaxis  Type: number or categorical coordinate string Determines the minimum range of this axis.    minexponent  Parent: layout.xaxis  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    minor  Parent: layout.xaxis Type: object containing one or more of the keys listed below.    dtick  Parent: layout.xaxis.minor  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    gridcolor  Parent: layout.xaxis.minor  Type: color Default: "#eee" Sets the color of the grid lines.    griddash  Parent: layout.xaxis.minor  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    gridwidth  Parent: layout.xaxis.minor  Type: number greater than or equal to 0 Sets the width (in px) of the grid lines.    nticks  Parent: layout.xaxis.minor  Type: integer greater than or equal to 0 Default: 5 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    showgrid  Parent: layout.xaxis.minor  Type: boolean Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.    tick0  Parent: layout.xaxis.minor  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickcolor  Parent: layout.xaxis.minor  Type: color Default: "#444" Sets the tick color.    ticklen  Parent: layout.xaxis.minor  Type: number greater than or equal to 0 Sets the tick length (in px).    tickmode  Parent: layout.xaxis.minor  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    ticks  Parent: layout.xaxis.minor  Type: enumerated , one of ( "outside" | "inside" | "" ) Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    tickvals  Parent: layout.xaxis.minor  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: layout.xaxis.minor  Type: number greater than or equal to 0 Sets the tick width (in px).      mirror  Parent: layout.xaxis  Type: enumerated , one of ( true | "ticks" | false | "all" | "allticks" ) Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If "true", the axis lines are mirrored. If "ticks", the axis lines and ticks are mirrored. If "false", mirroring is disable. If "all", axis lines are mirrored on all shared-axes subplots. If "allticks", axis lines and ticks are mirrored on all shared-axes subplots.    nticks  Parent: layout.xaxis  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    overlaying  Parent: layout.xaxis  Type: enumerated , one of ( "free" | "/^x([2-9]|[1-9][0-9]+)?( domain)?$/" | "/^y([2-9]|[1-9][0-9]+)?( domain)?$/" ) If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If "false", this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.    position  Parent: layout.xaxis  Type: number between or equal to 0 and 1 Default: 0 Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to "free".    range  Parent: layout.xaxis  Type: array Sets the range of this axis. If the axis `type` is "log", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is "date", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is "category", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.    rangebreaks  Parent: layout.xaxis Type: array of object where each object has one or more of the keys listed below.     bounds  Parent: layout.xaxis.rangebreaks[]  Type: array Sets the lower and upper bounds of this axis rangebreak. Can be used with `pattern`.    dvalue  Parent: layout.xaxis.rangebreaks[]  Type: number greater than or equal to 0 Default: 86400000 Sets the size of each `values` item. The default is one day in milliseconds.    enabled  Parent: layout.xaxis.rangebreaks[]  Type: boolean Default: true Determines whether this axis rangebreak is enabled or disabled. Please note that `rangebreaks` only work for "date" axis type.    name  Parent: layout.xaxis.rangebreaks[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    pattern  Parent: layout.xaxis.rangebreaks[]  Type: enumerated , one of ( "day of week" | "hour" | "" ) Determines a pattern on the time line that generates breaks. If "day of week" - days of the week in English e.g. 'Sunday' or `sun` (matching is case-insensitive and considers only the first three characters), as well as Sunday-based integers between 0 and 6. If "hour" - hour (24-hour clock) as decimal numbers between 0 and 24. for more info. Examples: - { pattern: 'day of week', bounds: [6, 1] } or simply { bounds: ['sat', 'mon'] } breaks from Saturday to Monday (i.e. skips the weekends). - { pattern: 'hour', bounds: [17, 8] } breaks from 5pm to 8am (i.e. skips non-work hours).    templateitemname  Parent: layout.xaxis.rangebreaks[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    values  Parent: layout.xaxis.rangebreaks[]  Type: array Sets the coordinate values corresponding to the rangebreaks. An alternative to `bounds`. Use `dvalue` to set the size of the values along the axis.      rangemode  Parent: layout.xaxis  Type: enumerated , one of ( "normal" | "tozero" | "nonnegative" ) Default: "normal" If "normal", the range is computed in relation to the extrema of the input data. If "tozero"`, the range extends to 0, regardless of the input data If "nonnegative", the range is non-negative, regardless of the input data. Applies only to linear axes.    rangeselector  Parent: layout.xaxis Type: object containing one or more of the keys listed below.    activecolor  Parent: layout.xaxis.rangeselector  Type: color Sets the background color of the active range selector button.    bgcolor  Parent: layout.xaxis.rangeselector  Type: color Default: "#eee" Sets the background color of the range selector buttons.    bordercolor  Parent: layout.xaxis.rangeselector  Type: color Default: "#444" Sets the color of the border enclosing the range selector.    borderwidth  Parent: layout.xaxis.rangeselector  Type: number greater than or equal to 0 Default: 0 Sets the width (in px) of the border enclosing the range selector.    buttons  Parent: layout.xaxis.rangeselector Type: array of object where each object has one or more of the keys listed below.     count  Parent: layout.xaxis.rangeselector.buttons[]  Type: number greater than or equal to 0 Default: 1 Sets the number of steps to take to update the range. Use with `step` to specify the update interval.    label  Parent: layout.xaxis.rangeselector.buttons[]  Type: string Sets the text label to appear on the button.    name  Parent: layout.xaxis.rangeselector.buttons[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    step  Parent: layout.xaxis.rangeselector.buttons[]  Type: enumerated , one of ( "month" | "year" | "day" | "hour" | "minute" | "second" | "all" ) Default: "month" The unit of measurement that the `count` value will set the range by.    stepmode  Parent: layout.xaxis.rangeselector.buttons[]  Type: enumerated , one of ( "backward" | "todate" ) Default: "backward" Sets the range update mode. If "backward", the range update shifts the start of range back "count" times "step" milliseconds. If "todate", the range update shifts the start of range back to the first timestamp from "count" times "step" milliseconds back. For example, with `step` set to "year" and `count` set to "1" the range update shifts the start of the range back to January 01 of the current year. Month and year "todate" are currently available only for the built-in (Gregorian) calendar.    templateitemname  Parent: layout.xaxis.rangeselector.buttons[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    visible  Parent: layout.xaxis.rangeselector.buttons[]  Type: boolean Default: true Determines whether or not this button is visible.      font  Parent: layout.xaxis.rangeselector Type: object containing one or more of the keys listed below. Sets the font of the range selector button text.    color  Parent: layout.xaxis.rangeselector.font  Type: color    family  Parent: layout.xaxis.rangeselector.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.xaxis.rangeselector.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.xaxis.rangeselector.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.xaxis.rangeselector.font  Type: number greater than or equal to 1    style  Parent: layout.xaxis.rangeselector.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.xaxis.rangeselector.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.xaxis.rangeselector.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.xaxis.rangeselector.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      visible  Parent: layout.xaxis.rangeselector  Type: boolean Determines whether or not this range selector is visible. Note that range selectors are only available for x axes of `type` set to or auto-typed to "date".    x  Parent: layout.xaxis.rangeselector  Type: number between or equal to -2 and 3 Sets the x position (in normalized coordinates) of the range selector.    xanchor  Parent: layout.xaxis.rangeselector  Type: enumerated , one of ( "auto" | "left" | "center" | "right" ) Default: "left" Sets the range selector's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the range selector.    y  Parent: layout.xaxis.rangeselector  Type: number between or equal to -2 and 3 Sets the y position (in normalized coordinates) of the range selector.    yanchor  Parent: layout.xaxis.rangeselector  Type: enumerated , one of ( "auto" | "top" | "middle" | "bottom" ) Default: "bottom" Sets the range selector's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the range selector.      rangeslider  Parent: layout.xaxis Type: object containing one or more of the keys listed below.    autorange  Parent: layout.xaxis.rangeslider  Type: boolean Default: true Determines whether or not the range slider range is computed in relation to the input data. If `range` is provided, then `autorange` is set to "false".    bgcolor  Parent: layout.xaxis.rangeslider  Type: color Default: "#fff" Sets the background color of the range slider.    bordercolor  Parent: layout.xaxis.rangeslider  Type: color Default: "#444" Sets the border color of the range slider.    borderwidth  Parent: layout.xaxis.rangeslider  Type: integer greater than or equal to 0 Default: 0 Sets the border width of the range slider.    range  Parent: layout.xaxis.rangeslider  Type: array Sets the range of the range slider. If not set, defaults to the full xaxis range. If the axis `type` is "log", then you must take the log of your desired range. If the axis `type` is "date", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is "category", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.    thickness  Parent: layout.xaxis.rangeslider  Type: number between or equal to 0 and 1 Default: 0.15 The height of the range slider as a fraction of the total plot area height.    visible  Parent: layout.xaxis.rangeslider  Type: boolean Default: true Determines whether or not the range slider will be visible. If visible, perpendicular axes will be set to `fixedrange`    yaxis  Parent: layout.xaxis.rangeslider Type: object containing one or more of the keys listed below.    range  Parent: layout.xaxis.rangeslider.yaxis  Type: array Sets the range of this axis for the rangeslider.    rangemode  Parent: layout.xaxis.rangeslider.yaxis  Type: enumerated , one of ( "auto" | "fixed" | "match" ) Default: "match" Determines whether or not the range of this axis in the rangeslider use the same value than in the main plot when zooming in/out. If "auto", the autorange will be used. If "fixed", the `range` is used. If "match", the current range of the corresponding y-axis on the main subplot is used.        scaleanchor  Parent: layout.xaxis  Type: enumerated , one of ( "/^x([2-9]|[1-9][0-9]+)?( domain)?$/" | "/^y([2-9]|[1-9][0-9]+)?( domain)?$/" | false ) If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: "x"}, xaxis2: {scaleanchor: "y"}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: "x"}, xaxis: {scaleanchor: "y"}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Setting `false` allows to remove a default constraint (occasionally, you may need to prevent a default `scaleanchor` constraint from being applied, eg. when having an image trace `yaxis: {scaleanchor: "x"}` is set automatically in order for pixels to be rendered as squares, setting `yaxis: {scaleanchor: false}` allows to remove the constraint).    scaleratio  Parent: layout.xaxis  Type: number greater than or equal to 0 Default: 1 If this axis is linked to another by `scaleanchor`, this determines the pixel to unit scale ratio. For example, if this value is 10, then every unit on this axis spans 10 times the number of pixels as a unit on the linked axis. Use this for example to create an elevation profile where the vertical scale is exaggerated a fixed amount with respect to the horizontal.    separatethousands  Parent: layout.xaxis  Type: boolean If "true", even 4-digit integers are separated    showdividers  Parent: layout.xaxis  Type: boolean Default: true Determines whether or not a dividers are drawn between the category levels of this axis. Only has an effect on "multicategory" axes.    showexponent  Parent: layout.xaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showgrid  Parent: layout.xaxis  Type: boolean Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.    showline  Parent: layout.xaxis  Type: boolean Determines whether or not a line bounding this axis is drawn.    showspikes  Parent: layout.xaxis  Type: boolean Determines whether or not spikes (aka droplines) are drawn for this axis. Note: This only takes affect when hovermode = closest    showticklabels  Parent: layout.xaxis  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: layout.xaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: layout.xaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    side  Parent: layout.xaxis  Type: enumerated , one of ( "top" | "bottom" | "left" | "right" ) Determines whether a x (y) axis is positioned at the "bottom" ("left") or "top" ("right") of the plotting area.    spikecolor  Parent: layout.xaxis  Type: color Sets the spike color. If undefined, will use the series color    spikedash  Parent: layout.xaxis  Type: string Default: "dash" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    spikemode  Parent: layout.xaxis  Type: flaglist string. Any combination of "toaxis", "across", "marker" joined with a "+" Examples: "toaxis", "across", "toaxis+across", "toaxis+across+marker" Default: "toaxis" Determines the drawing mode for the spike line If "toaxis", the line is drawn from the data point to the axis the series is plotted on. If "across", the line is drawn across the entire plot area, and supercedes "toaxis". If "marker", then a marker dot is drawn on the axis the series is plotted on    spikesnap  Parent: layout.xaxis  Type: enumerated , one of ( "data" | "cursor" | "hovered data" ) Default: "hovered data" Determines whether spikelines are stuck to the cursor or to the closest datapoints.    spikethickness  Parent: layout.xaxis  Type: number Default: 3 Sets the width (in px) of the zero line.    tick0  Parent: layout.xaxis  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: layout.xaxis  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: layout.xaxis  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: layout.xaxis Type: object containing one or more of the keys listed below. Sets the tick font.    color  Parent: layout.xaxis.tickfont  Type: color    family  Parent: layout.xaxis.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.xaxis.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.xaxis.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.xaxis.tickfont  Type: number greater than or equal to 1    style  Parent: layout.xaxis.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.xaxis.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.xaxis.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.xaxis.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: layout.xaxis  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: layout.xaxis Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: layout.xaxis.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: layout.xaxis.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: layout.xaxis.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: layout.xaxis.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: layout.xaxis.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabelindex  Parent: layout.xaxis  Type: integer or array of integers Only for axes with `type` "date" or "linear". Instead of drawing the major tick label, draw the label for the minor tick that is n positions away from the major tick. E.g. to always draw the label for the minor tick before each major tick, choose `ticklabelindex` -1. This is useful for date axes with `ticklabelmode` "period" if you want to label the period that ends with each major tick instead of the period that begins there.    ticklabelmode  Parent: layout.xaxis  Type: enumerated , one of ( "instant" | "period" ) Default: "instant" Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of `type` "date" When set to "period", tick labels are drawn in the middle of the period between ticks.    ticklabeloverflow  Parent: layout.xaxis  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". Otherwise on "category" and "multicategory" axes the default is "allow". In other cases the default is "hide past div".    ticklabelposition  Parent: layout.xaxis  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when `ticklabelmode` is set to "period". Similarly left or right has no effect on y axes or when `ticklabelmode` is set to "period". Has no effect on "multicategory" axes or when `tickson` is set to "boundaries". When used on axes linked by `matches` or `scaleanchor`, no extra padding for inside labels would be added by autorange, so that the scales could match.    ticklabelshift  Parent: layout.xaxis  Type: integer Default: 0 Shifts the tick labels by the specified number of pixels in parallel to the axis. Positive values move the labels in the positive direction of the axis.    ticklabelstandoff  Parent: layout.xaxis  Type: integer Default: 0 Sets the standoff distance (in px) between the axis tick labels and their default position. A positive `ticklabelstandoff` moves the labels farther away from the plot area if `ticklabelposition` is "outside", and deeper into the plot area if `ticklabelposition` is "inside". A negative `ticklabelstandoff` works in the opposite direction, moving outside ticks towards the plot area and inside ticks towards the outside. If the negative value is large enough, inside ticks can even end up outside and vice versa.    ticklabelstep  Parent: layout.xaxis  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: layout.xaxis  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: layout.xaxis  Type: enumerated , one of ( "auto" | "linear" | "array" | "sync" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided). If "sync", the number of ticks will sync with the overlayed axis set by `overlaying` property.    tickprefix  Parent: layout.xaxis  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: layout.xaxis  Type: enumerated , one of ( "outside" | "inside" | "" ) Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    tickson  Parent: layout.xaxis  Type: enumerated , one of ( "labels" | "boundaries" ) Default: "labels" Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of `type` "category" or "multicategory". When set to "boundaries", ticks and grid lines are drawn half a category to the left/bottom of labels.    ticksuffix  Parent: layout.xaxis  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: layout.xaxis  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: layout.xaxis  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: layout.xaxis  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: layout.xaxis Type: object containing one or more of the keys listed below.    font  Parent: layout.xaxis.title Type: object containing one or more of the keys listed below. Sets this axis' title font.    color  Parent: layout.xaxis.title.font  Type: color    family  Parent: layout.xaxis.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.xaxis.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.xaxis.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.xaxis.title.font  Type: number greater than or equal to 1    style  Parent: layout.xaxis.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.xaxis.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.xaxis.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.xaxis.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      standoff  Parent: layout.xaxis.title  Type: number greater than or equal to 0 Sets the standoff distance (in px) between the axis labels and the title text The default value is a function of the axis tick labels, the title `font.size` and the axis `linewidth`. Note that the axis title position is always constrained within the margins, so the actual standoff distance is always less than the set or default value. By setting `standoff` and turning on `automargin`, plotly.js will push the margins to fit the axis title at given standoff distance.    text  Parent: layout.xaxis.title  Type: string Sets the title of this axis.      type  Parent: layout.xaxis  Type: enumerated , one of ( "-" | "linear" | "log" | "date" | "category" | "multicategory" ) Default: "-" Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.    uirevision  Parent: layout.xaxis  Type: number or categorical coordinate string Controls persistence of user-driven changes in axis `range`, `autorange`, and `title` if in `editable: true` configuration. Defaults to `layout.uirevision`.    visible  Parent: layout.xaxis  Type: boolean A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false    zeroline  Parent: layout.xaxis  Type: boolean Determines whether or not a line is drawn at along the 0 value of this axis. If "true", the zero line is drawn on top of the grid lines.    zerolinecolor  Parent: layout.xaxis  Type: color Default: "#444" Sets the line color of the zero line.    zerolinewidth  Parent: layout.xaxis  Type: number Default: 1 Sets the width (in px) of the zero line.      yaxis  Parent: layout Type: object containing one or more of the keys listed below.    anchor  Parent: layout.yaxis  Type: enumerated , one of ( "free" | "/^x([2-9]|[1-9][0-9]+)?( domain)?$/" | "/^y([2-9]|[1-9][0-9]+)?( domain)?$/" ) If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to "free", this axis' position is determined by `position`.    automargin  Parent: layout.yaxis  Type: flaglist string. Any combination of "height", "width", "left", "right", "top", "bottom" joined with a "+" OR true or false. Examples: "height", "width", "height+width", "height+width+left", "true" Determines whether long tick labels automatically grow the figure margins.    autorange  Parent: layout.yaxis  Type: enumerated , one of ( true | false | "reversed" | "min reversed" | "max reversed" | "min" | "max" ) Default: true Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to "false". Using "min" applies autorange only to set the minimum. Using "max" applies autorange only to set the maximum. Using "min reversed" applies autorange only to set the minimum on a reversed axis. Using "max reversed" applies autorange only to set the maximum on a reversed axis. Using "reversed" applies autorange on both ends and reverses the axis direction.    autorangeoptions  Parent: layout.yaxis Type: object containing one or more of the keys listed below.    clipmax  Parent: layout.yaxis.autorangeoptions  Type: number or categorical coordinate string Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.    clipmin  Parent: layout.yaxis.autorangeoptions  Type: number or categorical coordinate string Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.    include  Parent: layout.yaxis.autorangeoptions  Type: number or categorical coordinate string Ensure this value is included in autorange.    maxallowed  Parent: layout.yaxis.autorangeoptions  Type: number or categorical coordinate string Use this value exactly as autorange maximum.    minallowed  Parent: layout.yaxis.autorangeoptions  Type: number or categorical coordinate string Use this value exactly as autorange minimum.      autoshift  Parent: layout.yaxis  Type: boolean Automatically reposition the axis to avoid overlap with other axes with the same `overlaying` value. This repositioning will account for any `shift` amount applied to other axes on the same side with `autoshift` is set to true. Only has an effect if `anchor` is set to "free".    autotickangles  Parent: layout.yaxis  Type: array Default: [0, 30, 90] When `tickangle` is set to "auto", it will be set to the first angle in this array that is large enough to prevent label overlap.    autotypenumbers  Parent: layout.yaxis  Type: enumerated , one of ( "convert types" | "strict" ) Default: "convert types" Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.    calendar  Parent: layout.yaxis  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`    categoryarray  Parent: layout.yaxis  Type: data array Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to "array". Used with `categoryorder`.    categoryorder  Parent: layout.yaxis  Type: enumerated , one of ( "trace" | "category ascending" | "category descending" | "array" | "total ascending" | "total descending" | "min ascending" | "min descending" | "max ascending" | "max descending" | "sum ascending" | "sum descending" | "mean ascending" | "mean descending" | "geometric mean ascending" | "geometric mean descending" | "median ascending" | "median descending" ) Default: "trace" Specifies the ordering logic for the case of categorical variables. By default, plotly uses "trace", which specifies the order that is present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to "total ascending" or "total descending" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.    color  Parent: layout.yaxis  Type: color Default: "#444" Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.    constrain  Parent: layout.yaxis  Type: enumerated , one of ( "range" | "domain" ) If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the "range", or by decreasing the "domain". Default is "domain" for axes containing image traces, "range" otherwise.    constraintoward  Parent: layout.yaxis  Type: enumerated , one of ( "left" | "center" | "right" | "top" | "middle" | "bottom" ) If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are "left", "center" (default), and "right" for x axes, and "top", "middle" (default), and "bottom" for y axes.    dividercolor  Parent: layout.yaxis  Type: color Default: "#444" Sets the color of the dividers Only has an effect on "multicategory" axes.    dividerwidth  Parent: layout.yaxis  Type: number Default: 1 Sets the width (in px) of the dividers Only has an effect on "multicategory" axes.    domain  Parent: layout.yaxis  Type: array Default: [0, 1] Sets the domain of this axis (in plot fraction).    dtick  Parent: layout.yaxis  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: layout.yaxis  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    fixedrange  Parent: layout.yaxis  Type: boolean Determines whether or not this axis is zoom-able. If true, then zoom is disabled.    gridcolor  Parent: layout.yaxis  Type: color Default: "#eee" Sets the color of the grid lines.    griddash  Parent: layout.yaxis  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    gridwidth  Parent: layout.yaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the grid lines.    hoverformat  Parent: layout.yaxis  Type: string Default: "" Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    insiderange  Parent: layout.yaxis  Type: array Could be used to set the desired inside range of this axis (excluding the labels) when `ticklabelposition` of the anchored axis has "inside". Not implemented for axes with `type` "log". This would be ignored when `range` is provided.    labelalias  Parent: layout.yaxis  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    layer  Parent: layout.yaxis  Type: enumerated , one of ( "above traces" | "below traces" ) Default: "above traces" Sets the layer on which this axis is displayed. If "above traces", this axis is displayed above all the subplot's traces If "below traces", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to "false" to show markers and/or text nodes above this axis.    linecolor  Parent: layout.yaxis  Type: color Default: "#444" Sets the axis line color.    linewidth  Parent: layout.yaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    matches  Parent: layout.yaxis  Type: enumerated , one of ( "/^x([2-9]|[1-9][0-9]+)?( domain)?$/" | "/^y([2-9]|[1-9][0-9]+)?( domain)?$/" ) If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes must have the same `type`.    maxallowed  Parent: layout.yaxis  Type: number or categorical coordinate string Determines the maximum range of this axis.    minallowed  Parent: layout.yaxis  Type: number or categorical coordinate string Determines the minimum range of this axis.    minexponent  Parent: layout.yaxis  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    minor  Parent: layout.yaxis Type: object containing one or more of the keys listed below.    dtick  Parent: layout.yaxis.minor  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    gridcolor  Parent: layout.yaxis.minor  Type: color Default: "#eee" Sets the color of the grid lines.    griddash  Parent: layout.yaxis.minor  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    gridwidth  Parent: layout.yaxis.minor  Type: number greater than or equal to 0 Sets the width (in px) of the grid lines.    nticks  Parent: layout.yaxis.minor  Type: integer greater than or equal to 0 Default: 5 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    showgrid  Parent: layout.yaxis.minor  Type: boolean Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.    tick0  Parent: layout.yaxis.minor  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickcolor  Parent: layout.yaxis.minor  Type: color Default: "#444" Sets the tick color.    ticklen  Parent: layout.yaxis.minor  Type: number greater than or equal to 0 Sets the tick length (in px).    tickmode  Parent: layout.yaxis.minor  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    ticks  Parent: layout.yaxis.minor  Type: enumerated , one of ( "outside" | "inside" | "" ) Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    tickvals  Parent: layout.yaxis.minor  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: layout.yaxis.minor  Type: number greater than or equal to 0 Sets the tick width (in px).      mirror  Parent: layout.yaxis  Type: enumerated , one of ( true | "ticks" | false | "all" | "allticks" ) Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If "true", the axis lines are mirrored. If "ticks", the axis lines and ticks are mirrored. If "false", mirroring is disable. If "all", axis lines are mirrored on all shared-axes subplots. If "allticks", axis lines and ticks are mirrored on all shared-axes subplots.    nticks  Parent: layout.yaxis  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    overlaying  Parent: layout.yaxis  Type: enumerated , one of ( "free" | "/^x([2-9]|[1-9][0-9]+)?( domain)?$/" | "/^y([2-9]|[1-9][0-9]+)?( domain)?$/" ) If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If "false", this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.    position  Parent: layout.yaxis  Type: number between or equal to 0 and 1 Default: 0 Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to "free".    range  Parent: layout.yaxis  Type: array Sets the range of this axis. If the axis `type` is "log", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is "date", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is "category", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.    rangebreaks  Parent: layout.yaxis Type: array of object where each object has one or more of the keys listed below.     bounds  Parent: layout.yaxis.rangebreaks[]  Type: array Sets the lower and upper bounds of this axis rangebreak. Can be used with `pattern`.    dvalue  Parent: layout.yaxis.rangebreaks[]  Type: number greater than or equal to 0 Default: 86400000 Sets the size of each `values` item. The default is one day in milliseconds.    enabled  Parent: layout.yaxis.rangebreaks[]  Type: boolean Default: true Determines whether this axis rangebreak is enabled or disabled. Please note that `rangebreaks` only work for "date" axis type.    name  Parent: layout.yaxis.rangebreaks[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    pattern  Parent: layout.yaxis.rangebreaks[]  Type: enumerated , one of ( "day of week" | "hour" | "" ) Determines a pattern on the time line that generates breaks. If "day of week" - days of the week in English e.g. 'Sunday' or `sun` (matching is case-insensitive and considers only the first three characters), as well as Sunday-based integers between 0 and 6. If "hour" - hour (24-hour clock) as decimal numbers between 0 and 24. for more info. Examples: - { pattern: 'day of week', bounds: [6, 1] } or simply { bounds: ['sat', 'mon'] } breaks from Saturday to Monday (i.e. skips the weekends). - { pattern: 'hour', bounds: [17, 8] } breaks from 5pm to 8am (i.e. skips non-work hours).    templateitemname  Parent: layout.yaxis.rangebreaks[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    values  Parent: layout.yaxis.rangebreaks[]  Type: array Sets the coordinate values corresponding to the rangebreaks. An alternative to `bounds`. Use `dvalue` to set the size of the values along the axis.      rangemode  Parent: layout.yaxis  Type: enumerated , one of ( "normal" | "tozero" | "nonnegative" ) Default: "normal" If "normal", the range is computed in relation to the extrema of the input data. If "tozero"`, the range extends to 0, regardless of the input data If "nonnegative", the range is non-negative, regardless of the input data. Applies only to linear axes.    scaleanchor  Parent: layout.yaxis  Type: enumerated , one of ( "/^x([2-9]|[1-9][0-9]+)?( domain)?$/" | "/^y([2-9]|[1-9][0-9]+)?( domain)?$/" | false ) If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: "x"}, xaxis2: {scaleanchor: "y"}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: "x"}, xaxis: {scaleanchor: "y"}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Setting `false` allows to remove a default constraint (occasionally, you may need to prevent a default `scaleanchor` constraint from being applied, eg. when having an image trace `yaxis: {scaleanchor: "x"}` is set automatically in order for pixels to be rendered as squares, setting `yaxis: {scaleanchor: false}` allows to remove the constraint).    scaleratio  Parent: layout.yaxis  Type: number greater than or equal to 0 Default: 1 If this axis is linked to another by `scaleanchor`, this determines the pixel to unit scale ratio. For example, if this value is 10, then every unit on this axis spans 10 times the number of pixels as a unit on the linked axis. Use this for example to create an elevation profile where the vertical scale is exaggerated a fixed amount with respect to the horizontal.    separatethousands  Parent: layout.yaxis  Type: boolean If "true", even 4-digit integers are separated    shift  Parent: layout.yaxis  Type: number Moves the axis a given number of pixels from where it would have been otherwise. Accepts both positive and negative values, which will shift the axis either right or left, respectively. If `autoshift` is set to true, then this defaults to a padding of -3 if `side` is set to "left". and defaults to +3 if `side` is set to "right". Defaults to 0 if `autoshift` is set to false. Only has an effect if `anchor` is set to "free".    showdividers  Parent: layout.yaxis  Type: boolean Default: true Determines whether or not a dividers are drawn between the category levels of this axis. Only has an effect on "multicategory" axes.    showexponent  Parent: layout.yaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showgrid  Parent: layout.yaxis  Type: boolean Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.    showline  Parent: layout.yaxis  Type: boolean Determines whether or not a line bounding this axis is drawn.    showspikes  Parent: layout.yaxis  Type: boolean Determines whether or not spikes (aka droplines) are drawn for this axis. Note: This only takes affect when hovermode = closest    showticklabels  Parent: layout.yaxis  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: layout.yaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: layout.yaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    side  Parent: layout.yaxis  Type: enumerated , one of ( "top" | "bottom" | "left" | "right" ) Determines whether a x (y) axis is positioned at the "bottom" ("left") or "top" ("right") of the plotting area.    spikecolor  Parent: layout.yaxis  Type: color Sets the spike color. If undefined, will use the series color    spikedash  Parent: layout.yaxis  Type: string Default: "dash" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    spikemode  Parent: layout.yaxis  Type: flaglist string. Any combination of "toaxis", "across", "marker" joined with a "+" Examples: "toaxis", "across", "toaxis+across", "toaxis+across+marker" Default: "toaxis" Determines the drawing mode for the spike line If "toaxis", the line is drawn from the data point to the axis the series is plotted on. If "across", the line is drawn across the entire plot area, and supercedes "toaxis". If "marker", then a marker dot is drawn on the axis the series is plotted on    spikesnap  Parent: layout.yaxis  Type: enumerated , one of ( "data" | "cursor" | "hovered data" ) Default: "hovered data" Determines whether spikelines are stuck to the cursor or to the closest datapoints.    spikethickness  Parent: layout.yaxis  Type: number Default: 3 Sets the width (in px) of the zero line.    tick0  Parent: layout.yaxis  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: layout.yaxis  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: layout.yaxis  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: layout.yaxis Type: object containing one or more of the keys listed below. Sets the tick font.    color  Parent: layout.yaxis.tickfont  Type: color    family  Parent: layout.yaxis.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.yaxis.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.yaxis.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.yaxis.tickfont  Type: number greater than or equal to 1    style  Parent: layout.yaxis.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.yaxis.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.yaxis.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.yaxis.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: layout.yaxis  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: layout.yaxis Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: layout.yaxis.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: layout.yaxis.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: layout.yaxis.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: layout.yaxis.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: layout.yaxis.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabelindex  Parent: layout.yaxis  Type: integer or array of integers Only for axes with `type` "date" or "linear". Instead of drawing the major tick label, draw the label for the minor tick that is n positions away from the major tick. E.g. to always draw the label for the minor tick before each major tick, choose `ticklabelindex` -1. This is useful for date axes with `ticklabelmode` "period" if you want to label the period that ends with each major tick instead of the period that begins there.    ticklabelmode  Parent: layout.yaxis  Type: enumerated , one of ( "instant" | "period" ) Default: "instant" Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of `type` "date" When set to "period", tick labels are drawn in the middle of the period between ticks.    ticklabeloverflow  Parent: layout.yaxis  Type: enumerated , one of ( "allow" | "hide past div" | "hide past domain" ) Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is "hide past domain". Otherwise on "category" and "multicategory" axes the default is "allow". In other cases the default is "hide past div".    ticklabelposition  Parent: layout.yaxis  Type: enumerated , one of ( "outside" | "inside" | "outside top" | "inside top" | "outside left" | "inside left" | "outside right" | "inside right" | "outside bottom" | "inside bottom" ) Default: "outside" Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when `ticklabelmode` is set to "period". Similarly left or right has no effect on y axes or when `ticklabelmode` is set to "period". Has no effect on "multicategory" axes or when `tickson` is set to "boundaries". When used on axes linked by `matches` or `scaleanchor`, no extra padding for inside labels would be added by autorange, so that the scales could match.    ticklabelshift  Parent: layout.yaxis  Type: integer Default: 0 Shifts the tick labels by the specified number of pixels in parallel to the axis. Positive values move the labels in the positive direction of the axis.    ticklabelstandoff  Parent: layout.yaxis  Type: integer Default: 0 Sets the standoff distance (in px) between the axis tick labels and their default position. A positive `ticklabelstandoff` moves the labels farther away from the plot area if `ticklabelposition` is "outside", and deeper into the plot area if `ticklabelposition` is "inside". A negative `ticklabelstandoff` works in the opposite direction, moving outside ticks towards the plot area and inside ticks towards the outside. If the negative value is large enough, inside ticks can even end up outside and vice versa.    ticklabelstep  Parent: layout.yaxis  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: layout.yaxis  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: layout.yaxis  Type: enumerated , one of ( "auto" | "linear" | "array" | "sync" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided). If "sync", the number of ticks will sync with the overlayed axis set by `overlaying` property.    tickprefix  Parent: layout.yaxis  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: layout.yaxis  Type: enumerated , one of ( "outside" | "inside" | "" ) Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    tickson  Parent: layout.yaxis  Type: enumerated , one of ( "labels" | "boundaries" ) Default: "labels" Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of `type` "category" or "multicategory". When set to "boundaries", ticks and grid lines are drawn half a category to the left/bottom of labels.    ticksuffix  Parent: layout.yaxis  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: layout.yaxis  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: layout.yaxis  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: layout.yaxis  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: layout.yaxis Type: object containing one or more of the keys listed below.    font  Parent: layout.yaxis.title Type: object containing one or more of the keys listed below. Sets this axis' title font.    color  Parent: layout.yaxis.title.font  Type: color    family  Parent: layout.yaxis.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.yaxis.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.yaxis.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.yaxis.title.font  Type: number greater than or equal to 1    style  Parent: layout.yaxis.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.yaxis.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.yaxis.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.yaxis.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      standoff  Parent: layout.yaxis.title  Type: number greater than or equal to 0 Sets the standoff distance (in px) between the axis labels and the title text The default value is a function of the axis tick labels, the title `font.size` and the axis `linewidth`. Note that the axis title position is always constrained within the margins, so the actual standoff distance is always less than the set or default value. By setting `standoff` and turning on `automargin`, plotly.js will push the margins to fit the axis title at given standoff distance.    text  Parent: layout.yaxis.title  Type: string Sets the title of this axis.      type  Parent: layout.yaxis  Type: enumerated , one of ( "-" | "linear" | "log" | "date" | "category" | "multicategory" ) Default: "-" Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.    uirevision  Parent: layout.yaxis  Type: number or categorical coordinate string Controls persistence of user-driven changes in axis `range`, `autorange`, and `title` if in `editable: true` configuration. Defaults to `layout.uirevision`.    visible  Parent: layout.yaxis  Type: boolean A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false    zeroline  Parent: layout.yaxis  Type: boolean Determines whether or not a line is drawn at along the 0 value of this axis. If "true", the zero line is drawn on top of the grid lines.    zerolinecolor  Parent: layout.yaxis  Type: color Default: "#444" Sets the line color of the zero line.    zerolinewidth  Parent: layout.yaxis  Type: number Default: 1 Sets the width (in px) of the zero line.      ternary  Parent: layout Type: object containing one or more of the keys listed below.    aaxis  Parent: layout.ternary Type: object containing one or more of the keys listed below.    color  Parent: layout.ternary.aaxis  Type: color Default: "#444" Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.    dtick  Parent: layout.ternary.aaxis  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: layout.ternary.aaxis  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    gridcolor  Parent: layout.ternary.aaxis  Type: color Default: "#eee" Sets the color of the grid lines.    griddash  Parent: layout.ternary.aaxis  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    gridwidth  Parent: layout.ternary.aaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the grid lines.    hoverformat  Parent: layout.ternary.aaxis  Type: string Default: "" Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    labelalias  Parent: layout.ternary.aaxis  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    layer  Parent: layout.ternary.aaxis  Type: enumerated , one of ( "above traces" | "below traces" ) Default: "above traces" Sets the layer on which this axis is displayed. If "above traces", this axis is displayed above all the subplot's traces If "below traces", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to "false" to show markers and/or text nodes above this axis.    linecolor  Parent: layout.ternary.aaxis  Type: color Default: "#444" Sets the axis line color.    linewidth  Parent: layout.ternary.aaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    min  Parent: layout.ternary.aaxis  Type: number greater than or equal to 0 Default: 0 The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.    minexponent  Parent: layout.ternary.aaxis  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: layout.ternary.aaxis  Type: integer greater than or equal to 1 Default: 6 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    separatethousands  Parent: layout.ternary.aaxis  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: layout.ternary.aaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showgrid  Parent: layout.ternary.aaxis  Type: boolean Default: true Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.    showline  Parent: layout.ternary.aaxis  Type: boolean Default: true Determines whether or not a line bounding this axis is drawn.    showticklabels  Parent: layout.ternary.aaxis  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: layout.ternary.aaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: layout.ternary.aaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    tick0  Parent: layout.ternary.aaxis  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: layout.ternary.aaxis  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: layout.ternary.aaxis  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: layout.ternary.aaxis Type: object containing one or more of the keys listed below. Sets the tick font.    color  Parent: layout.ternary.aaxis.tickfont  Type: color    family  Parent: layout.ternary.aaxis.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.ternary.aaxis.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.ternary.aaxis.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.ternary.aaxis.tickfont  Type: number greater than or equal to 1    style  Parent: layout.ternary.aaxis.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.ternary.aaxis.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.ternary.aaxis.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.ternary.aaxis.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: layout.ternary.aaxis  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: layout.ternary.aaxis Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: layout.ternary.aaxis.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: layout.ternary.aaxis.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: layout.ternary.aaxis.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: layout.ternary.aaxis.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: layout.ternary.aaxis.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabelstep  Parent: layout.ternary.aaxis  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: layout.ternary.aaxis  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: layout.ternary.aaxis  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: layout.ternary.aaxis  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: layout.ternary.aaxis  Type: enumerated , one of ( "outside" | "inside" | "" ) Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: layout.ternary.aaxis  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: layout.ternary.aaxis  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: layout.ternary.aaxis  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: layout.ternary.aaxis  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: layout.ternary.aaxis Type: object containing one or more of the keys listed below.    font  Parent: layout.ternary.aaxis.title Type: object containing one or more of the keys listed below. Sets this axis' title font.    color  Parent: layout.ternary.aaxis.title.font  Type: color    family  Parent: layout.ternary.aaxis.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.ternary.aaxis.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.ternary.aaxis.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.ternary.aaxis.title.font  Type: number greater than or equal to 1    style  Parent: layout.ternary.aaxis.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.ternary.aaxis.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.ternary.aaxis.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.ternary.aaxis.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: layout.ternary.aaxis.title  Type: string Sets the title of this axis.      uirevision  Parent: layout.ternary.aaxis  Type: number or categorical coordinate string Controls persistence of user-driven changes in axis `min`, and `title` if in `editable: true` configuration. Defaults to `ternary<N>.uirevision`.      baxis  Parent: layout.ternary Type: object containing one or more of the keys listed below.    color  Parent: layout.ternary.baxis  Type: color Default: "#444" Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.    dtick  Parent: layout.ternary.baxis  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: layout.ternary.baxis  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    gridcolor  Parent: layout.ternary.baxis  Type: color Default: "#eee" Sets the color of the grid lines.    griddash  Parent: layout.ternary.baxis  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    gridwidth  Parent: layout.ternary.baxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the grid lines.    hoverformat  Parent: layout.ternary.baxis  Type: string Default: "" Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    labelalias  Parent: layout.ternary.baxis  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    layer  Parent: layout.ternary.baxis  Type: enumerated , one of ( "above traces" | "below traces" ) Default: "above traces" Sets the layer on which this axis is displayed. If "above traces", this axis is displayed above all the subplot's traces If "below traces", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to "false" to show markers and/or text nodes above this axis.    linecolor  Parent: layout.ternary.baxis  Type: color Default: "#444" Sets the axis line color.    linewidth  Parent: layout.ternary.baxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    min  Parent: layout.ternary.baxis  Type: number greater than or equal to 0 Default: 0 The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.    minexponent  Parent: layout.ternary.baxis  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: layout.ternary.baxis  Type: integer greater than or equal to 1 Default: 6 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    separatethousands  Parent: layout.ternary.baxis  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: layout.ternary.baxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showgrid  Parent: layout.ternary.baxis  Type: boolean Default: true Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.    showline  Parent: layout.ternary.baxis  Type: boolean Default: true Determines whether or not a line bounding this axis is drawn.    showticklabels  Parent: layout.ternary.baxis  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: layout.ternary.baxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: layout.ternary.baxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    tick0  Parent: layout.ternary.baxis  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: layout.ternary.baxis  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: layout.ternary.baxis  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: layout.ternary.baxis Type: object containing one or more of the keys listed below. Sets the tick font.    color  Parent: layout.ternary.baxis.tickfont  Type: color    family  Parent: layout.ternary.baxis.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.ternary.baxis.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.ternary.baxis.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.ternary.baxis.tickfont  Type: number greater than or equal to 1    style  Parent: layout.ternary.baxis.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.ternary.baxis.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.ternary.baxis.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.ternary.baxis.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: layout.ternary.baxis  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: layout.ternary.baxis Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: layout.ternary.baxis.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: layout.ternary.baxis.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: layout.ternary.baxis.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: layout.ternary.baxis.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: layout.ternary.baxis.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabelstep  Parent: layout.ternary.baxis  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: layout.ternary.baxis  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: layout.ternary.baxis  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: layout.ternary.baxis  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: layout.ternary.baxis  Type: enumerated , one of ( "outside" | "inside" | "" ) Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: layout.ternary.baxis  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: layout.ternary.baxis  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: layout.ternary.baxis  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: layout.ternary.baxis  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: layout.ternary.baxis Type: object containing one or more of the keys listed below.    font  Parent: layout.ternary.baxis.title Type: object containing one or more of the keys listed below. Sets this axis' title font.    color  Parent: layout.ternary.baxis.title.font  Type: color    family  Parent: layout.ternary.baxis.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.ternary.baxis.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.ternary.baxis.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.ternary.baxis.title.font  Type: number greater than or equal to 1    style  Parent: layout.ternary.baxis.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.ternary.baxis.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.ternary.baxis.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.ternary.baxis.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: layout.ternary.baxis.title  Type: string Sets the title of this axis.      uirevision  Parent: layout.ternary.baxis  Type: number or categorical coordinate string Controls persistence of user-driven changes in axis `min`, and `title` if in `editable: true` configuration. Defaults to `ternary<N>.uirevision`.      bgcolor  Parent: layout.ternary  Type: color Default: "#fff" Set the background color of the subplot    caxis  Parent: layout.ternary Type: object containing one or more of the keys listed below.    color  Parent: layout.ternary.caxis  Type: color Default: "#444" Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.    dtick  Parent: layout.ternary.caxis  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: layout.ternary.caxis  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    gridcolor  Parent: layout.ternary.caxis  Type: color Default: "#eee" Sets the color of the grid lines.    griddash  Parent: layout.ternary.caxis  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    gridwidth  Parent: layout.ternary.caxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the grid lines.    hoverformat  Parent: layout.ternary.caxis  Type: string Default: "" Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    labelalias  Parent: layout.ternary.caxis  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    layer  Parent: layout.ternary.caxis  Type: enumerated , one of ( "above traces" | "below traces" ) Default: "above traces" Sets the layer on which this axis is displayed. If "above traces", this axis is displayed above all the subplot's traces If "below traces", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to "false" to show markers and/or text nodes above this axis.    linecolor  Parent: layout.ternary.caxis  Type: color Default: "#444" Sets the axis line color.    linewidth  Parent: layout.ternary.caxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    min  Parent: layout.ternary.caxis  Type: number greater than or equal to 0 Default: 0 The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.    minexponent  Parent: layout.ternary.caxis  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: layout.ternary.caxis  Type: integer greater than or equal to 1 Default: 6 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    separatethousands  Parent: layout.ternary.caxis  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: layout.ternary.caxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showgrid  Parent: layout.ternary.caxis  Type: boolean Default: true Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.    showline  Parent: layout.ternary.caxis  Type: boolean Default: true Determines whether or not a line bounding this axis is drawn.    showticklabels  Parent: layout.ternary.caxis  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: layout.ternary.caxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: layout.ternary.caxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    tick0  Parent: layout.ternary.caxis  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: layout.ternary.caxis  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: layout.ternary.caxis  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: layout.ternary.caxis Type: object containing one or more of the keys listed below. Sets the tick font.    color  Parent: layout.ternary.caxis.tickfont  Type: color    family  Parent: layout.ternary.caxis.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.ternary.caxis.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.ternary.caxis.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.ternary.caxis.tickfont  Type: number greater than or equal to 1    style  Parent: layout.ternary.caxis.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.ternary.caxis.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.ternary.caxis.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.ternary.caxis.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: layout.ternary.caxis  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: layout.ternary.caxis Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: layout.ternary.caxis.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: layout.ternary.caxis.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: layout.ternary.caxis.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: layout.ternary.caxis.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: layout.ternary.caxis.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabelstep  Parent: layout.ternary.caxis  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: layout.ternary.caxis  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: layout.ternary.caxis  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: layout.ternary.caxis  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: layout.ternary.caxis  Type: enumerated , one of ( "outside" | "inside" | "" ) Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: layout.ternary.caxis  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: layout.ternary.caxis  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: layout.ternary.caxis  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: layout.ternary.caxis  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: layout.ternary.caxis Type: object containing one or more of the keys listed below.    font  Parent: layout.ternary.caxis.title Type: object containing one or more of the keys listed below. Sets this axis' title font.    color  Parent: layout.ternary.caxis.title.font  Type: color    family  Parent: layout.ternary.caxis.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.ternary.caxis.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.ternary.caxis.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.ternary.caxis.title.font  Type: number greater than or equal to 1    style  Parent: layout.ternary.caxis.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.ternary.caxis.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.ternary.caxis.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.ternary.caxis.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: layout.ternary.caxis.title  Type: string Sets the title of this axis.      uirevision  Parent: layout.ternary.caxis  Type: number or categorical coordinate string Controls persistence of user-driven changes in axis `min`, and `title` if in `editable: true` configuration. Defaults to `ternary<N>.uirevision`.      domain  Parent: layout.ternary Type: object containing one or more of the keys listed below.    column  Parent: layout.ternary.domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this column in the grid for this ternary subplot .    row  Parent: layout.ternary.domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this row in the grid for this ternary subplot .    x  Parent: layout.ternary.domain  Type: array Default: [0, 1] Sets the horizontal domain of this ternary subplot (in plot fraction).    y  Parent: layout.ternary.domain  Type: array Default: [0, 1] Sets the vertical domain of this ternary subplot (in plot fraction).      sum  Parent: layout.ternary  Type: number greater than or equal to 0 Default: 1 The number each triplet should sum to, and the maximum range of each axis    uirevision  Parent: layout.ternary  Type: number or categorical coordinate string Controls persistence of user-driven changes in axis `min` and `title`, if not overridden in the individual axes. Defaults to `layout.uirevision`.      scene  Parent: layout Type: object containing one or more of the keys listed below.    annotations  Parent: layout.scene Type: array of object where each object has one or more of the keys listed below. An annotation is a text element that can be placed anywhere in the plot. It can be positioned with respect to relative coordinates in the plot or with respect to the actual data coordinates of the graph. Annotations can be shown with or without an arrow.     align  Parent: layout.scene.annotations[]  Type: enumerated , one of ( "left" | "center" | "right" ) Default: "center" Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.    arrowcolor  Parent: layout.scene.annotations[]  Type: color Sets the color of the annotation arrow.    arrowhead  Parent: layout.scene.annotations[]  Type: integer between or equal to 0 and 8 Default: 1 Sets the end annotation arrow head style.    arrowside  Parent: layout.scene.annotations[]  Type: flaglist string. Any combination of "end", "start" joined with a "+" OR "none". Examples: "end", "start", "end+start", "none" Default: "end" Sets the annotation arrow head position.    arrowsize  Parent: layout.scene.annotations[]  Type: number greater than or equal to 0.3 Default: 1 Sets the size of the end annotation arrow head, relative to `arrowwidth`. A value of 1 (default) gives a head about 3x as wide as the line.    arrowwidth  Parent: layout.scene.annotations[]  Type: number greater than or equal to 0.1 Sets the width (in px) of annotation arrow line.    ax  Parent: layout.scene.annotations[]  Type: number Sets the x component of the arrow tail about the arrow head (in pixels).    ay  Parent: layout.scene.annotations[]  Type: number Sets the y component of the arrow tail about the arrow head (in pixels).    bgcolor  Parent: layout.scene.annotations[]  Type: color Default: "rgba(0,0,0,0)" Sets the background color of the annotation.    bordercolor  Parent: layout.scene.annotations[]  Type: color Default: "rgba(0,0,0,0)" Sets the color of the border enclosing the annotation `text`.    borderpad  Parent: layout.scene.annotations[]  Type: number greater than or equal to 0 Default: 1 Sets the padding (in px) between the `text` and the enclosing border.    borderwidth  Parent: layout.scene.annotations[]  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the border enclosing the annotation `text`.    captureevents  Parent: layout.scene.annotations[]  Type: boolean Determines whether the annotation text box captures mouse move and click events, or allows those events to pass through to data points in the plot that may be behind the annotation. By default `captureevents` is "false" unless `hovertext` is provided. If you use the event `plotly_clickannotation` without `hovertext` you must explicitly enable `captureevents`.    font  Parent: layout.scene.annotations[] Type: object containing one or more of the keys listed below. Sets the annotation text font.    color  Parent: layout.scene.annotations[].font  Type: color    family  Parent: layout.scene.annotations[].font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.scene.annotations[].font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.scene.annotations[].font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.scene.annotations[].font  Type: number greater than or equal to 1    style  Parent: layout.scene.annotations[].font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.scene.annotations[].font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.scene.annotations[].font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.scene.annotations[].font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      height  Parent: layout.scene.annotations[]  Type: number greater than or equal to 1 Sets an explicit height for the text box. null (default) lets the text set the box height. Taller text will be clipped.    hoverlabel  Parent: layout.scene.annotations[] Type: object containing one or more of the keys listed below.    bgcolor  Parent: layout.scene.annotations[].hoverlabel  Type: color Sets the background color of the hover label. By default uses the annotation's `bgcolor` made opaque, or white if it was transparent.    bordercolor  Parent: layout.scene.annotations[].hoverlabel  Type: color Sets the border color of the hover label. By default uses either dark grey or white, for maximum contrast with `hoverlabel.bgcolor`.    font  Parent: layout.scene.annotations[].hoverlabel Type: object containing one or more of the keys listed below. Sets the hover label text font. By default uses the global hover font and size, with color from `hoverlabel.bordercolor`.    color  Parent: layout.scene.annotations[].hoverlabel.font  Type: color    family  Parent: layout.scene.annotations[].hoverlabel.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.scene.annotations[].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.scene.annotations[].hoverlabel.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.scene.annotations[].hoverlabel.font  Type: number greater than or equal to 1    style  Parent: layout.scene.annotations[].hoverlabel.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.scene.annotations[].hoverlabel.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.scene.annotations[].hoverlabel.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.scene.annotations[].hoverlabel.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.        hovertext  Parent: layout.scene.annotations[]  Type: string Sets text to appear when hovering over this annotation. If omitted or blank, no hover label will appear.    name  Parent: layout.scene.annotations[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    opacity  Parent: layout.scene.annotations[]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the annotation (text + arrow).    showarrow  Parent: layout.scene.annotations[]  Type: boolean Default: true Determines whether or not the annotation is drawn with an arrow. If "true", `text` is placed near the arrow's tail. If "false", `text` lines up with the `x` and `y` provided.    standoff  Parent: layout.scene.annotations[]  Type: number greater than or equal to 0 Default: 0 Sets a distance, in pixels, to move the end arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the `ax` / `ay` vector, in contrast to `xshift` / `yshift` which moves everything by this amount.    startarrowhead  Parent: layout.scene.annotations[]  Type: integer between or equal to 0 and 8 Default: 1 Sets the start annotation arrow head style.    startarrowsize  Parent: layout.scene.annotations[]  Type: number greater than or equal to 0.3 Default: 1 Sets the size of the start annotation arrow head, relative to `arrowwidth`. A value of 1 (default) gives a head about 3x as wide as the line.    startstandoff  Parent: layout.scene.annotations[]  Type: number greater than or equal to 0 Default: 0 Sets a distance, in pixels, to move the start arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the `ax` / `ay` vector, in contrast to `xshift` / `yshift` which moves everything by this amount.    templateitemname  Parent: layout.scene.annotations[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    text  Parent: layout.scene.annotations[]  Type: string Sets the text associated with this annotation. Plotly uses a subset of HTML tags to do things like newline (<br>), bold (<b></b>), italics (<i></i>), hyperlinks (<a href='...'></a>). Tags <em>, <sup>, <sub>, <s>, <u> <span> are also supported.    textangle  Parent: layout.scene.annotations[]  Type: angle Default: 0 Sets the angle at which the `text` is drawn with respect to the horizontal.    valign  Parent: layout.scene.annotations[]  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Default: "middle" Sets the vertical alignment of the `text` within the box. Has an effect only if an explicit height is set to override the text height.    visible  Parent: layout.scene.annotations[]  Type: boolean Default: true Determines whether or not this annotation is visible.    width  Parent: layout.scene.annotations[]  Type: number greater than or equal to 1 Sets an explicit width for the text box. null (default) lets the text set the box width. Wider text will be clipped. There is no automatic wrapping; use <br> to start a new line.    x  Parent: layout.scene.annotations[]  Type: number or categorical coordinate string Sets the annotation's x position.    xanchor  Parent: layout.scene.annotations[]  Type: enumerated , one of ( "auto" | "left" | "center" | "right" ) Default: "auto" Sets the text box's horizontal position anchor This anchor binds the `x` position to the "left", "center" or "right" of the annotation. For example, if `x` is set to 1, `xref` to "paper" and `xanchor` to "right" then the right-most portion of the annotation lines up with the right-most edge of the plotting area. If "auto", the anchor is equivalent to "center" for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.    xshift  Parent: layout.scene.annotations[]  Type: number Default: 0 Shifts the position of the whole annotation and arrow to the right (positive) or left (negative) by this many pixels.    y  Parent: layout.scene.annotations[]  Type: number or categorical coordinate string Sets the annotation's y position.    yanchor  Parent: layout.scene.annotations[]  Type: enumerated , one of ( "auto" | "top" | "middle" | "bottom" ) Default: "auto" Sets the text box's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the annotation. For example, if `y` is set to 1, `yref` to "paper" and `yanchor` to "top" then the top-most portion of the annotation lines up with the top-most edge of the plotting area. If "auto", the anchor is equivalent to "middle" for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.    yshift  Parent: layout.scene.annotations[]  Type: number Default: 0 Shifts the position of the whole annotation and arrow up (positive) or down (negative) by this many pixels.    z  Parent: layout.scene.annotations[]  Type: number or categorical coordinate string Sets the annotation's z position.      aspectmode  Parent: layout.scene  Type: enumerated , one of ( "auto" | "cube" | "data" | "manual" ) Default: "auto" If "cube", this scene's axes are drawn as a cube, regardless of the axes' ranges. If "data", this scene's axes are drawn in proportion with the axes' ranges. If "manual", this scene's axes are drawn in proportion with the input of "aspectratio" (the default behavior if "aspectratio" is provided). If "auto", this scene's axes are drawn using the results of "data" except when one axis is more than four times the size of the two others, where in that case the results of "cube" are used.    aspectratio  Parent: layout.scene Type: object containing one or more of the keys listed below. Sets this scene's axis aspectratio.    x  Parent: layout.scene.aspectratio  Type: number greater than or equal to 0    y  Parent: layout.scene.aspectratio  Type: number greater than or equal to 0    z  Parent: layout.scene.aspectratio  Type: number greater than or equal to 0      bgcolor  Parent: layout.scene  Type: color Default: "rgba(0,0,0,0)"    camera  Parent: layout.scene Type: object containing one or more of the keys listed below.    center  Parent: layout.scene.camera Type: object containing one or more of the keys listed below. Sets the (x,y,z) components of the 'center' camera vector This vector determines the translation (x,y,z) space about the center of this scene. By default, there is no such translation.    x  Parent: layout.scene.camera.center  Type: number Default: 0    y  Parent: layout.scene.camera.center  Type: number Default: 0    z  Parent: layout.scene.camera.center  Type: number Default: 0      eye  Parent: layout.scene.camera Type: object containing one or more of the keys listed below. Sets the (x,y,z) components of the 'eye' camera vector. This vector determines the view point about the origin of this scene.    x  Parent: layout.scene.camera.eye  Type: number Default: 1.25    y  Parent: layout.scene.camera.eye  Type: number Default: 1.25    z  Parent: layout.scene.camera.eye  Type: number Default: 1.25      projection  Parent: layout.scene.camera Type: object containing one or more of the keys listed below.    type  Parent: layout.scene.camera.projection  Type: enumerated , one of ( "perspective" | "orthographic" ) Default: "perspective" Sets the projection type. The projection type could be either "perspective" or "orthographic". The default is "perspective".      up  Parent: layout.scene.camera Type: object containing one or more of the keys listed below. Sets the (x,y,z) components of the 'up' camera vector. This vector determines the up direction of this scene with respect to the page. The default is "{x: 0, y: 0, z: 1}" which means that the z axis points up.    x  Parent: layout.scene.camera.up  Type: number Default: 0    y  Parent: layout.scene.camera.up  Type: number Default: 0    z  Parent: layout.scene.camera.up  Type: number Default: 1        domain  Parent: layout.scene Type: object containing one or more of the keys listed below.    column  Parent: layout.scene.domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this column in the grid for this scene subplot .    row  Parent: layout.scene.domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this row in the grid for this scene subplot .    x  Parent: layout.scene.domain  Type: array Default: [0, 1] Sets the horizontal domain of this scene subplot (in plot fraction).    y  Parent: layout.scene.domain  Type: array Default: [0, 1] Sets the vertical domain of this scene subplot (in plot fraction).      dragmode  Parent: layout.scene  Type: enumerated , one of ( "orbit" | "turntable" | "zoom" | "pan" | false ) Determines the mode of drag interactions for this scene.    hovermode  Parent: layout.scene  Type: enumerated , one of ( "closest" | false ) Default: "closest" Determines the mode of hover interactions for this scene.    uirevision  Parent: layout.scene  Type: number or categorical coordinate string Controls persistence of user-driven changes in camera attributes. Defaults to `layout.uirevision`.    xaxis  Parent: layout.scene Type: object containing one or more of the keys listed below.    autorange  Parent: layout.scene.xaxis  Type: enumerated , one of ( true | false | "reversed" | "min reversed" | "max reversed" | "min" | "max" ) Default: true Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to "false". Using "min" applies autorange only to set the minimum. Using "max" applies autorange only to set the maximum. Using "min reversed" applies autorange only to set the minimum on a reversed axis. Using "max reversed" applies autorange only to set the maximum on a reversed axis. Using "reversed" applies autorange on both ends and reverses the axis direction.    autorangeoptions  Parent: layout.scene.xaxis Type: object containing one or more of the keys listed below.    clipmax  Parent: layout.scene.xaxis.autorangeoptions  Type: number or categorical coordinate string Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.    clipmin  Parent: layout.scene.xaxis.autorangeoptions  Type: number or categorical coordinate string Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.    include  Parent: layout.scene.xaxis.autorangeoptions  Type: number or categorical coordinate string Ensure this value is included in autorange.    maxallowed  Parent: layout.scene.xaxis.autorangeoptions  Type: number or categorical coordinate string Use this value exactly as autorange maximum.    minallowed  Parent: layout.scene.xaxis.autorangeoptions  Type: number or categorical coordinate string Use this value exactly as autorange minimum.      autotypenumbers  Parent: layout.scene.xaxis  Type: enumerated , one of ( "convert types" | "strict" ) Default: "convert types" Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.    backgroundcolor  Parent: layout.scene.xaxis  Type: color Default: "rgba(204, 204, 204, 0.5)" Sets the background color of this axis' wall.    calendar  Parent: layout.scene.xaxis  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`    categoryarray  Parent: layout.scene.xaxis  Type: data array Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to "array". Used with `categoryorder`.    categoryorder  Parent: layout.scene.xaxis  Type: enumerated , one of ( "trace" | "category ascending" | "category descending" | "array" | "total ascending" | "total descending" | "min ascending" | "min descending" | "max ascending" | "max descending" | "sum ascending" | "sum descending" | "mean ascending" | "mean descending" | "geometric mean ascending" | "geometric mean descending" | "median ascending" | "median descending" ) Default: "trace" Specifies the ordering logic for the case of categorical variables. By default, plotly uses "trace", which specifies the order that is present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to "total ascending" or "total descending" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.    color  Parent: layout.scene.xaxis  Type: color Default: "#444" Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.    dtick  Parent: layout.scene.xaxis  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: layout.scene.xaxis  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    gridcolor  Parent: layout.scene.xaxis  Type: color Default: "rgb(204, 204, 204)" Sets the color of the grid lines.    gridwidth  Parent: layout.scene.xaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the grid lines.    hoverformat  Parent: layout.scene.xaxis  Type: string Default: "" Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    labelalias  Parent: layout.scene.xaxis  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    linecolor  Parent: layout.scene.xaxis  Type: color Default: "#444" Sets the axis line color.    linewidth  Parent: layout.scene.xaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    maxallowed  Parent: layout.scene.xaxis  Type: number or categorical coordinate string Determines the maximum range of this axis.    minallowed  Parent: layout.scene.xaxis  Type: number or categorical coordinate string Determines the minimum range of this axis.    minexponent  Parent: layout.scene.xaxis  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    mirror  Parent: layout.scene.xaxis  Type: enumerated , one of ( true | "ticks" | false | "all" | "allticks" ) Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If "true", the axis lines are mirrored. If "ticks", the axis lines and ticks are mirrored. If "false", mirroring is disable. If "all", axis lines are mirrored on all shared-axes subplots. If "allticks", axis lines and ticks are mirrored on all shared-axes subplots.    nticks  Parent: layout.scene.xaxis  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    range  Parent: layout.scene.xaxis  Type: array Sets the range of this axis. If the axis `type` is "log", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is "date", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is "category", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.    rangemode  Parent: layout.scene.xaxis  Type: enumerated , one of ( "normal" | "tozero" | "nonnegative" ) Default: "normal" If "normal", the range is computed in relation to the extrema of the input data. If "tozero"`, the range extends to 0, regardless of the input data If "nonnegative", the range is non-negative, regardless of the input data. Applies only to linear axes.    separatethousands  Parent: layout.scene.xaxis  Type: boolean If "true", even 4-digit integers are separated    showaxeslabels  Parent: layout.scene.xaxis  Type: boolean Default: true Sets whether or not this axis is labeled    showbackground  Parent: layout.scene.xaxis  Type: boolean Sets whether or not this axis' wall has a background color.    showexponent  Parent: layout.scene.xaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showgrid  Parent: layout.scene.xaxis  Type: boolean Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.    showline  Parent: layout.scene.xaxis  Type: boolean Determines whether or not a line bounding this axis is drawn.    showspikes  Parent: layout.scene.xaxis  Type: boolean Default: true Sets whether or not spikes starting from data points to this axis' wall are shown on hover.    showticklabels  Parent: layout.scene.xaxis  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: layout.scene.xaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: layout.scene.xaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    spikecolor  Parent: layout.scene.xaxis  Type: color Default: "#444" Sets the color of the spikes.    spikesides  Parent: layout.scene.xaxis  Type: boolean Default: true Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.    spikethickness  Parent: layout.scene.xaxis  Type: number greater than or equal to 0 Default: 2 Sets the thickness (in px) of the spikes.    tick0  Parent: layout.scene.xaxis  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: layout.scene.xaxis  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: layout.scene.xaxis  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: layout.scene.xaxis Type: object containing one or more of the keys listed below. Sets the tick font.    color  Parent: layout.scene.xaxis.tickfont  Type: color    family  Parent: layout.scene.xaxis.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.scene.xaxis.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.scene.xaxis.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.scene.xaxis.tickfont  Type: number greater than or equal to 1    style  Parent: layout.scene.xaxis.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.scene.xaxis.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.scene.xaxis.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.scene.xaxis.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: layout.scene.xaxis  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: layout.scene.xaxis Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: layout.scene.xaxis.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: layout.scene.xaxis.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: layout.scene.xaxis.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: layout.scene.xaxis.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: layout.scene.xaxis.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklen  Parent: layout.scene.xaxis  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: layout.scene.xaxis  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: layout.scene.xaxis  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: layout.scene.xaxis  Type: enumerated , one of ( "outside" | "inside" | "" ) Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: layout.scene.xaxis  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: layout.scene.xaxis  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: layout.scene.xaxis  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: layout.scene.xaxis  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: layout.scene.xaxis Type: object containing one or more of the keys listed below.    font  Parent: layout.scene.xaxis.title Type: object containing one or more of the keys listed below. Sets this axis' title font.    color  Parent: layout.scene.xaxis.title.font  Type: color    family  Parent: layout.scene.xaxis.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.scene.xaxis.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.scene.xaxis.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.scene.xaxis.title.font  Type: number greater than or equal to 1    style  Parent: layout.scene.xaxis.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.scene.xaxis.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.scene.xaxis.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.scene.xaxis.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: layout.scene.xaxis.title  Type: string Sets the title of this axis.      type  Parent: layout.scene.xaxis  Type: enumerated , one of ( "-" | "linear" | "log" | "date" | "category" ) Default: "-" Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.    visible  Parent: layout.scene.xaxis  Type: boolean A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false    zeroline  Parent: layout.scene.xaxis  Type: boolean Determines whether or not a line is drawn at along the 0 value of this axis. If "true", the zero line is drawn on top of the grid lines.    zerolinecolor  Parent: layout.scene.xaxis  Type: color Default: "#444" Sets the line color of the zero line.    zerolinewidth  Parent: layout.scene.xaxis  Type: number Default: 1 Sets the width (in px) of the zero line.      yaxis  Parent: layout.scene Type: object containing one or more of the keys listed below.    autorange  Parent: layout.scene.yaxis  Type: enumerated , one of ( true | false | "reversed" | "min reversed" | "max reversed" | "min" | "max" ) Default: true Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to "false". Using "min" applies autorange only to set the minimum. Using "max" applies autorange only to set the maximum. Using "min reversed" applies autorange only to set the minimum on a reversed axis. Using "max reversed" applies autorange only to set the maximum on a reversed axis. Using "reversed" applies autorange on both ends and reverses the axis direction.    autorangeoptions  Parent: layout.scene.yaxis Type: object containing one or more of the keys listed below.    clipmax  Parent: layout.scene.yaxis.autorangeoptions  Type: number or categorical coordinate string Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.    clipmin  Parent: layout.scene.yaxis.autorangeoptions  Type: number or categorical coordinate string Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.    include  Parent: layout.scene.yaxis.autorangeoptions  Type: number or categorical coordinate string Ensure this value is included in autorange.    maxallowed  Parent: layout.scene.yaxis.autorangeoptions  Type: number or categorical coordinate string Use this value exactly as autorange maximum.    minallowed  Parent: layout.scene.yaxis.autorangeoptions  Type: number or categorical coordinate string Use this value exactly as autorange minimum.      autotypenumbers  Parent: layout.scene.yaxis  Type: enumerated , one of ( "convert types" | "strict" ) Default: "convert types" Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.    backgroundcolor  Parent: layout.scene.yaxis  Type: color Default: "rgba(204, 204, 204, 0.5)" Sets the background color of this axis' wall.    calendar  Parent: layout.scene.yaxis  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`    categoryarray  Parent: layout.scene.yaxis  Type: data array Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to "array". Used with `categoryorder`.    categoryorder  Parent: layout.scene.yaxis  Type: enumerated , one of ( "trace" | "category ascending" | "category descending" | "array" | "total ascending" | "total descending" | "min ascending" | "min descending" | "max ascending" | "max descending" | "sum ascending" | "sum descending" | "mean ascending" | "mean descending" | "geometric mean ascending" | "geometric mean descending" | "median ascending" | "median descending" ) Default: "trace" Specifies the ordering logic for the case of categorical variables. By default, plotly uses "trace", which specifies the order that is present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to "total ascending" or "total descending" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.    color  Parent: layout.scene.yaxis  Type: color Default: "#444" Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.    dtick  Parent: layout.scene.yaxis  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: layout.scene.yaxis  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    gridcolor  Parent: layout.scene.yaxis  Type: color Default: "rgb(204, 204, 204)" Sets the color of the grid lines.    gridwidth  Parent: layout.scene.yaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the grid lines.    hoverformat  Parent: layout.scene.yaxis  Type: string Default: "" Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    labelalias  Parent: layout.scene.yaxis  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    linecolor  Parent: layout.scene.yaxis  Type: color Default: "#444" Sets the axis line color.    linewidth  Parent: layout.scene.yaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    maxallowed  Parent: layout.scene.yaxis  Type: number or categorical coordinate string Determines the maximum range of this axis.    minallowed  Parent: layout.scene.yaxis  Type: number or categorical coordinate string Determines the minimum range of this axis.    minexponent  Parent: layout.scene.yaxis  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    mirror  Parent: layout.scene.yaxis  Type: enumerated , one of ( true | "ticks" | false | "all" | "allticks" ) Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If "true", the axis lines are mirrored. If "ticks", the axis lines and ticks are mirrored. If "false", mirroring is disable. If "all", axis lines are mirrored on all shared-axes subplots. If "allticks", axis lines and ticks are mirrored on all shared-axes subplots.    nticks  Parent: layout.scene.yaxis  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    range  Parent: layout.scene.yaxis  Type: array Sets the range of this axis. If the axis `type` is "log", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is "date", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is "category", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.    rangemode  Parent: layout.scene.yaxis  Type: enumerated , one of ( "normal" | "tozero" | "nonnegative" ) Default: "normal" If "normal", the range is computed in relation to the extrema of the input data. If "tozero"`, the range extends to 0, regardless of the input data If "nonnegative", the range is non-negative, regardless of the input data. Applies only to linear axes.    separatethousands  Parent: layout.scene.yaxis  Type: boolean If "true", even 4-digit integers are separated    showaxeslabels  Parent: layout.scene.yaxis  Type: boolean Default: true Sets whether or not this axis is labeled    showbackground  Parent: layout.scene.yaxis  Type: boolean Sets whether or not this axis' wall has a background color.    showexponent  Parent: layout.scene.yaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showgrid  Parent: layout.scene.yaxis  Type: boolean Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.    showline  Parent: layout.scene.yaxis  Type: boolean Determines whether or not a line bounding this axis is drawn.    showspikes  Parent: layout.scene.yaxis  Type: boolean Default: true Sets whether or not spikes starting from data points to this axis' wall are shown on hover.    showticklabels  Parent: layout.scene.yaxis  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: layout.scene.yaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: layout.scene.yaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    spikecolor  Parent: layout.scene.yaxis  Type: color Default: "#444" Sets the color of the spikes.    spikesides  Parent: layout.scene.yaxis  Type: boolean Default: true Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.    spikethickness  Parent: layout.scene.yaxis  Type: number greater than or equal to 0 Default: 2 Sets the thickness (in px) of the spikes.    tick0  Parent: layout.scene.yaxis  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: layout.scene.yaxis  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: layout.scene.yaxis  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: layout.scene.yaxis Type: object containing one or more of the keys listed below. Sets the tick font.    color  Parent: layout.scene.yaxis.tickfont  Type: color    family  Parent: layout.scene.yaxis.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.scene.yaxis.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.scene.yaxis.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.scene.yaxis.tickfont  Type: number greater than or equal to 1    style  Parent: layout.scene.yaxis.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.scene.yaxis.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.scene.yaxis.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.scene.yaxis.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: layout.scene.yaxis  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: layout.scene.yaxis Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: layout.scene.yaxis.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: layout.scene.yaxis.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: layout.scene.yaxis.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: layout.scene.yaxis.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: layout.scene.yaxis.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklen  Parent: layout.scene.yaxis  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: layout.scene.yaxis  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: layout.scene.yaxis  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: layout.scene.yaxis  Type: enumerated , one of ( "outside" | "inside" | "" ) Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: layout.scene.yaxis  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: layout.scene.yaxis  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: layout.scene.yaxis  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: layout.scene.yaxis  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: layout.scene.yaxis Type: object containing one or more of the keys listed below.    font  Parent: layout.scene.yaxis.title Type: object containing one or more of the keys listed below. Sets this axis' title font.    color  Parent: layout.scene.yaxis.title.font  Type: color    family  Parent: layout.scene.yaxis.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.scene.yaxis.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.scene.yaxis.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.scene.yaxis.title.font  Type: number greater than or equal to 1    style  Parent: layout.scene.yaxis.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.scene.yaxis.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.scene.yaxis.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.scene.yaxis.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: layout.scene.yaxis.title  Type: string Sets the title of this axis.      type  Parent: layout.scene.yaxis  Type: enumerated , one of ( "-" | "linear" | "log" | "date" | "category" ) Default: "-" Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.    visible  Parent: layout.scene.yaxis  Type: boolean A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false    zeroline  Parent: layout.scene.yaxis  Type: boolean Determines whether or not a line is drawn at along the 0 value of this axis. If "true", the zero line is drawn on top of the grid lines.    zerolinecolor  Parent: layout.scene.yaxis  Type: color Default: "#444" Sets the line color of the zero line.    zerolinewidth  Parent: layout.scene.yaxis  Type: number Default: 1 Sets the width (in px) of the zero line.      zaxis  Parent: layout.scene Type: object containing one or more of the keys listed below.    autorange  Parent: layout.scene.zaxis  Type: enumerated , one of ( true | false | "reversed" | "min reversed" | "max reversed" | "min" | "max" ) Default: true Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to "false". Using "min" applies autorange only to set the minimum. Using "max" applies autorange only to set the maximum. Using "min reversed" applies autorange only to set the minimum on a reversed axis. Using "max reversed" applies autorange only to set the maximum on a reversed axis. Using "reversed" applies autorange on both ends and reverses the axis direction.    autorangeoptions  Parent: layout.scene.zaxis Type: object containing one or more of the keys listed below.    clipmax  Parent: layout.scene.zaxis.autorangeoptions  Type: number or categorical coordinate string Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.    clipmin  Parent: layout.scene.zaxis.autorangeoptions  Type: number or categorical coordinate string Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.    include  Parent: layout.scene.zaxis.autorangeoptions  Type: number or categorical coordinate string Ensure this value is included in autorange.    maxallowed  Parent: layout.scene.zaxis.autorangeoptions  Type: number or categorical coordinate string Use this value exactly as autorange maximum.    minallowed  Parent: layout.scene.zaxis.autorangeoptions  Type: number or categorical coordinate string Use this value exactly as autorange minimum.      autotypenumbers  Parent: layout.scene.zaxis  Type: enumerated , one of ( "convert types" | "strict" ) Default: "convert types" Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.    backgroundcolor  Parent: layout.scene.zaxis  Type: color Default: "rgba(204, 204, 204, 0.5)" Sets the background color of this axis' wall.    calendar  Parent: layout.scene.zaxis  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`    categoryarray  Parent: layout.scene.zaxis  Type: data array Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to "array". Used with `categoryorder`.    categoryorder  Parent: layout.scene.zaxis  Type: enumerated , one of ( "trace" | "category ascending" | "category descending" | "array" | "total ascending" | "total descending" | "min ascending" | "min descending" | "max ascending" | "max descending" | "sum ascending" | "sum descending" | "mean ascending" | "mean descending" | "geometric mean ascending" | "geometric mean descending" | "median ascending" | "median descending" ) Default: "trace" Specifies the ordering logic for the case of categorical variables. By default, plotly uses "trace", which specifies the order that is present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to "total ascending" or "total descending" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.    color  Parent: layout.scene.zaxis  Type: color Default: "#444" Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.    dtick  Parent: layout.scene.zaxis  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: layout.scene.zaxis  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    gridcolor  Parent: layout.scene.zaxis  Type: color Default: "rgb(204, 204, 204)" Sets the color of the grid lines.    gridwidth  Parent: layout.scene.zaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the grid lines.    hoverformat  Parent: layout.scene.zaxis  Type: string Default: "" Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    labelalias  Parent: layout.scene.zaxis  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    linecolor  Parent: layout.scene.zaxis  Type: color Default: "#444" Sets the axis line color.    linewidth  Parent: layout.scene.zaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    maxallowed  Parent: layout.scene.zaxis  Type: number or categorical coordinate string Determines the maximum range of this axis.    minallowed  Parent: layout.scene.zaxis  Type: number or categorical coordinate string Determines the minimum range of this axis.    minexponent  Parent: layout.scene.zaxis  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    mirror  Parent: layout.scene.zaxis  Type: enumerated , one of ( true | "ticks" | false | "all" | "allticks" ) Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If "true", the axis lines are mirrored. If "ticks", the axis lines and ticks are mirrored. If "false", mirroring is disable. If "all", axis lines are mirrored on all shared-axes subplots. If "allticks", axis lines and ticks are mirrored on all shared-axes subplots.    nticks  Parent: layout.scene.zaxis  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    range  Parent: layout.scene.zaxis  Type: array Sets the range of this axis. If the axis `type` is "log", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is "date", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is "category", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.    rangemode  Parent: layout.scene.zaxis  Type: enumerated , one of ( "normal" | "tozero" | "nonnegative" ) Default: "normal" If "normal", the range is computed in relation to the extrema of the input data. If "tozero"`, the range extends to 0, regardless of the input data If "nonnegative", the range is non-negative, regardless of the input data. Applies only to linear axes.    separatethousands  Parent: layout.scene.zaxis  Type: boolean If "true", even 4-digit integers are separated    showaxeslabels  Parent: layout.scene.zaxis  Type: boolean Default: true Sets whether or not this axis is labeled    showbackground  Parent: layout.scene.zaxis  Type: boolean Sets whether or not this axis' wall has a background color.    showexponent  Parent: layout.scene.zaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showgrid  Parent: layout.scene.zaxis  Type: boolean Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.    showline  Parent: layout.scene.zaxis  Type: boolean Determines whether or not a line bounding this axis is drawn.    showspikes  Parent: layout.scene.zaxis  Type: boolean Default: true Sets whether or not spikes starting from data points to this axis' wall are shown on hover.    showticklabels  Parent: layout.scene.zaxis  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: layout.scene.zaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: layout.scene.zaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    spikecolor  Parent: layout.scene.zaxis  Type: color Default: "#444" Sets the color of the spikes.    spikesides  Parent: layout.scene.zaxis  Type: boolean Default: true Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.    spikethickness  Parent: layout.scene.zaxis  Type: number greater than or equal to 0 Default: 2 Sets the thickness (in px) of the spikes.    tick0  Parent: layout.scene.zaxis  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: layout.scene.zaxis  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: layout.scene.zaxis  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: layout.scene.zaxis Type: object containing one or more of the keys listed below. Sets the tick font.    color  Parent: layout.scene.zaxis.tickfont  Type: color    family  Parent: layout.scene.zaxis.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.scene.zaxis.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.scene.zaxis.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.scene.zaxis.tickfont  Type: number greater than or equal to 1    style  Parent: layout.scene.zaxis.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.scene.zaxis.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.scene.zaxis.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.scene.zaxis.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: layout.scene.zaxis  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: layout.scene.zaxis Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: layout.scene.zaxis.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: layout.scene.zaxis.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: layout.scene.zaxis.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: layout.scene.zaxis.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: layout.scene.zaxis.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklen  Parent: layout.scene.zaxis  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: layout.scene.zaxis  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: layout.scene.zaxis  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: layout.scene.zaxis  Type: enumerated , one of ( "outside" | "inside" | "" ) Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: layout.scene.zaxis  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: layout.scene.zaxis  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: layout.scene.zaxis  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: layout.scene.zaxis  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: layout.scene.zaxis Type: object containing one or more of the keys listed below.    font  Parent: layout.scene.zaxis.title Type: object containing one or more of the keys listed below. Sets this axis' title font.    color  Parent: layout.scene.zaxis.title.font  Type: color    family  Parent: layout.scene.zaxis.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.scene.zaxis.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.scene.zaxis.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.scene.zaxis.title.font  Type: number greater than or equal to 1    style  Parent: layout.scene.zaxis.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.scene.zaxis.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.scene.zaxis.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.scene.zaxis.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: layout.scene.zaxis.title  Type: string Sets the title of this axis.      type  Parent: layout.scene.zaxis  Type: enumerated , one of ( "-" | "linear" | "log" | "date" | "category" ) Default: "-" Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.    visible  Parent: layout.scene.zaxis  Type: boolean A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false    zeroline  Parent: layout.scene.zaxis  Type: boolean Determines whether or not a line is drawn at along the 0 value of this axis. If "true", the zero line is drawn on top of the grid lines.    zerolinecolor  Parent: layout.scene.zaxis  Type: color Default: "#444" Sets the line color of the zero line.    zerolinewidth  Parent: layout.scene.zaxis  Type: number Default: 1 Sets the width (in px) of the zero line.        geo  Parent: layout Type: object containing one or more of the keys listed below.    bgcolor  Parent: layout.geo  Type: color Default: "#fff" Set the background color of the map    center  Parent: layout.geo Type: object containing one or more of the keys listed below.    lat  Parent: layout.geo.center  Type: number Sets the latitude of the map's center. For all projection types, the map's latitude center lies at the middle of the latitude range by default.    lon  Parent: layout.geo.center  Type: number Sets the longitude of the map's center. By default, the map's longitude center lies at the middle of the longitude range for scoped projection and above `projection.rotation.lon` otherwise.      coastlinecolor  Parent: layout.geo  Type: color Default: "#444" Sets the coastline color.    coastlinewidth  Parent: layout.geo  Type: number greater than or equal to 0 Default: 1 Sets the coastline stroke width (in px).    countrycolor  Parent: layout.geo  Type: color Default: "#444" Sets line color of the country boundaries.    countrywidth  Parent: layout.geo  Type: number greater than or equal to 0 Default: 1 Sets line width (in px) of the country boundaries.    domain  Parent: layout.geo Type: object containing one or more of the keys listed below.    column  Parent: layout.geo.domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this column in the grid for this geo subplot . Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.    row  Parent: layout.geo.domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this row in the grid for this geo subplot . Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.    x  Parent: layout.geo.domain  Type: array Default: [0, 1] Sets the horizontal domain of this geo subplot (in plot fraction). Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.    y  Parent: layout.geo.domain  Type: array Default: [0, 1] Sets the vertical domain of this geo subplot (in plot fraction). Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.      fitbounds  Parent: layout.geo  Type: enumerated , one of ( false | "locations" | "geojson" ) Determines if this subplot's view settings are auto-computed to fit trace data. On scoped maps, setting `fitbounds` leads to `center.lon` and `center.lat` getting auto-filled. On maps with a non-clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`, and `projection.rotation.lon` getting auto-filled. On maps with a clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`, `projection.rotation.lon`, `projection.rotation.lat`, `lonaxis.range` and `lataxis.range` getting auto-filled. If "locations", only the trace's visible locations are considered in the `fitbounds` computations. If "geojson", the entire trace input `geojson` (if provided) is considered in the `fitbounds` computations, Defaults to "false".    framecolor  Parent: layout.geo  Type: color Default: "#444" Sets the color the frame.    framewidth  Parent: layout.geo  Type: number greater than or equal to 0 Default: 1 Sets the stroke width (in px) of the frame.    lakecolor  Parent: layout.geo  Type: color Default: "#3399FF" Sets the color of the lakes.    landcolor  Parent: layout.geo  Type: color Default: "#F0DC82" Sets the land mass color.    lataxis  Parent: layout.geo Type: object containing one or more of the keys listed below.    dtick  Parent: layout.geo.lataxis  Type: number Sets the graticule's longitude/latitude tick step.    gridcolor  Parent: layout.geo.lataxis  Type: color Default: "#eee" Sets the graticule's stroke color.    griddash  Parent: layout.geo.lataxis  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    gridwidth  Parent: layout.geo.lataxis  Type: number greater than or equal to 0 Default: 1 Sets the graticule's stroke width (in px).    range  Parent: layout.geo.lataxis  Type: array Sets the range of this axis (in degrees), sets the map's clipped coordinates.    showgrid  Parent: layout.geo.lataxis  Type: boolean Sets whether or not graticule are shown on the map.    tick0  Parent: layout.geo.lataxis  Type: number Default: 0 Sets the graticule's starting tick longitude/latitude.      lonaxis  Parent: layout.geo Type: object containing one or more of the keys listed below.    dtick  Parent: layout.geo.lonaxis  Type: number Sets the graticule's longitude/latitude tick step.    gridcolor  Parent: layout.geo.lonaxis  Type: color Default: "#eee" Sets the graticule's stroke color.    griddash  Parent: layout.geo.lonaxis  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    gridwidth  Parent: layout.geo.lonaxis  Type: number greater than or equal to 0 Default: 1 Sets the graticule's stroke width (in px).    range  Parent: layout.geo.lonaxis  Type: array Sets the range of this axis (in degrees), sets the map's clipped coordinates.    showgrid  Parent: layout.geo.lonaxis  Type: boolean Sets whether or not graticule are shown on the map.    tick0  Parent: layout.geo.lonaxis  Type: number Default: 0 Sets the graticule's starting tick longitude/latitude.      oceancolor  Parent: layout.geo  Type: color Default: "#3399FF" Sets the ocean color    projection  Parent: layout.geo Type: object containing one or more of the keys listed below.    distance  Parent: layout.geo.projection  Type: number greater than or equal to 1.001 Default: 2 For satellite projection type only. Sets the distance from the center of the sphere to the point of view as a proportion of the sphere’s radius.    parallels  Parent: layout.geo.projection  Type: array For conic projection types only. Sets the parallels (tangent, secant) where the cone intersects the sphere.    rotation  Parent: layout.geo.projection Type: object containing one or more of the keys listed below.    lat  Parent: layout.geo.projection.rotation  Type: number Rotates the map along meridians (in degrees North).    lon  Parent: layout.geo.projection.rotation  Type: number Rotates the map along parallels (in degrees East). Defaults to the center of the `lonaxis.range` values.    roll  Parent: layout.geo.projection.rotation  Type: number Roll the map (in degrees) For example, a roll of "180" makes the map appear upside down.      scale  Parent: layout.geo.projection  Type: number greater than or equal to 0 Default: 1 Zooms in or out on the map view. A scale of "1" corresponds to the largest zoom level that fits the map's lon and lat ranges.     tilt  Parent: layout.geo.projection  Type: number Default: 0 For satellite projection type only. Sets the tilt angle of perspective projection.    type  Parent: layout.geo.projection  Type: enumerated , one of ( "airy" | "aitoff" | "albers" | "albers usa" | "august" | "azimuthal equal area" | "azimuthal equidistant" | "baker" | "bertin1953" | "boggs" | "bonne" | "bottomley" | "bromley" | "collignon" | "conic conformal" | "conic equal area" | "conic equidistant" | "craig" | "craster" | "cylindrical equal area" | "cylindrical stereographic" | "eckert1" | "eckert2" | "eckert3" | "eckert4" | "eckert5" | "eckert6" | "eisenlohr" | "equal earth" | "equirectangular" | "fahey" | "foucaut" | "foucaut sinusoidal" | "ginzburg4" | "ginzburg5" | "ginzburg6" | "ginzburg8" | "ginzburg9" | "gnomonic" | "gringorten" | "gringorten quincuncial" | "guyou" | "hammer" | "hill" | "homolosine" | "hufnagel" | "hyperelliptical" | "kavrayskiy7" | "lagrange" | "larrivee" | "laskowski" | "loximuthal" | "mercator" | "miller" | "mollweide" | "mt flat polar parabolic" | "mt flat polar quartic" | "mt flat polar sinusoidal" | "natural earth" | "natural earth1" | "natural earth2" | "nell hammer" | "nicolosi" | "orthographic" | "patterson" | "peirce quincuncial" | "polyconic" | "rectangular polyconic" | "robinson" | "satellite" | "sinu mollweide" | "sinusoidal" | "stereographic" | "times" | "transverse mercator" | "van der grinten" | "van der grinten2" | "van der grinten3" | "van der grinten4" | "wagner4" | "wagner6" | "wiechel" | "winkel tripel" | "winkel3" ) Sets the projection type.      resolution  Parent: layout.geo  Type: enumerated , one of ( "110" | "50" ) Default: "110" Sets the resolution of the base layers. The values have units of km/mm e.g. 110 corresponds to a scale ratio of 1:110,000,000.    rivercolor  Parent: layout.geo  Type: color Default: "#3399FF" Sets color of the rivers.    riverwidth  Parent: layout.geo  Type: number greater than or equal to 0 Default: 1 Sets the stroke width (in px) of the rivers.    scope  Parent: layout.geo  Type: enumerated , one of ( "africa" | "asia" | "europe" | "north america" | "south america" | "usa" | "world" ) Default: "world" Set the scope of the map.    showcoastlines  Parent: layout.geo  Type: boolean Sets whether or not the coastlines are drawn.    showcountries  Parent: layout.geo  Type: boolean Sets whether or not country boundaries are drawn.    showframe  Parent: layout.geo  Type: boolean Sets whether or not a frame is drawn around the map.    showlakes  Parent: layout.geo  Type: boolean Sets whether or not lakes are drawn.    showland  Parent: layout.geo  Type: boolean Sets whether or not land masses are filled in color.    showocean  Parent: layout.geo  Type: boolean Sets whether or not oceans are filled in color.    showrivers  Parent: layout.geo  Type: boolean Sets whether or not rivers are drawn.    showsubunits  Parent: layout.geo  Type: boolean Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn.    subunitcolor  Parent: layout.geo  Type: color Default: "#444" Sets the color of the subunits boundaries.    subunitwidth  Parent: layout.geo  Type: number greater than or equal to 0 Default: 1 Sets the stroke width (in px) of the subunits boundaries.    uirevision  Parent: layout.geo  Type: number or categorical coordinate string Controls persistence of user-driven changes in the view (projection and center). Defaults to `layout.uirevision`.    visible  Parent: layout.geo  Type: boolean Default: true Sets the default visibility of the base layers.      map  Parent: layout Type: object containing one or more of the keys listed below.    bearing  Parent: layout.map  Type: number Default: 0 Sets the bearing angle of the map in degrees counter-clockwise from North (map.bearing).    bounds  Parent: layout.map Type: object containing one or more of the keys listed below.    east  Parent: layout.map.bounds  Type: number Sets the maximum longitude of the map (in degrees East) if `west`, `south` and `north` are declared.    north  Parent: layout.map.bounds  Type: number Sets the maximum latitude of the map (in degrees North) if `east`, `west` and `south` are declared.    south  Parent: layout.map.bounds  Type: number Sets the minimum latitude of the map (in degrees North) if `east`, `west` and `north` are declared.    west  Parent: layout.map.bounds  Type: number Sets the minimum longitude of the map (in degrees East) if `east`, `south` and `north` are declared.      center  Parent: layout.map Type: object containing one or more of the keys listed below.    lat  Parent: layout.map.center  Type: number Default: 0 Sets the latitude of the center of the map (in degrees North).    lon  Parent: layout.map.center  Type: number Default: 0 Sets the longitude of the center of the map (in degrees East).      domain  Parent: layout.map Type: object containing one or more of the keys listed below.    column  Parent: layout.map.domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this column in the grid for this map subplot .    row  Parent: layout.map.domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this row in the grid for this map subplot .    x  Parent: layout.map.domain  Type: array Default: [0, 1] Sets the horizontal domain of this map subplot (in plot fraction).    y  Parent: layout.map.domain  Type: array Default: [0, 1] Sets the vertical domain of this map subplot (in plot fraction).      layers  Parent: layout.map Type: array of object where each object has one or more of the keys listed below.     below  Parent: layout.map.layers[]  Type: string Determines if the layer will be inserted before the layer with the specified ID. If omitted or set to '', the layer will be inserted above every existing layer.    circle  Parent: layout.map.layers[] Type: object containing one or more of the keys listed below.    radius  Parent: layout.map.layers[].circle  Type: number Default: 15 Sets the circle radius (map.layer.paint.circle-radius). Has an effect only when `type` is set to "circle".      color  Parent: layout.map.layers[]  Type: color Default: "#444" Sets the primary layer color. If `type` is "circle", color corresponds to the circle color (map.layer.paint.circle-color) If `type` is "line", color corresponds to the line color (map.layer.paint.line-color) If `type` is "fill", color corresponds to the fill color (map.layer.paint.fill-color) If `type` is "symbol", color corresponds to the icon color (map.layer.paint.icon-color)    coordinates  Parent: layout.map.layers[]  Type: number or categorical coordinate string Sets the coordinates array contains [longitude, latitude] pairs for the image corners listed in clockwise order: top left, top right, bottom right, bottom left. Only has an effect for "image" `sourcetype`.    fill  Parent: layout.map.layers[] Type: object containing one or more of the keys listed below.    outlinecolor  Parent: layout.map.layers[].fill  Type: color Default: "#444" Sets the fill outline color (map.layer.paint.fill-outline-color). Has an effect only when `type` is set to "fill".      line  Parent: layout.map.layers[] Type: object containing one or more of the keys listed below.    dash  Parent: layout.map.layers[].line  Type: data array Sets the length of dashes and gaps (map.layer.paint.line-dasharray). Has an effect only when `type` is set to "line".    width  Parent: layout.map.layers[].line  Type: number Default: 2 Sets the line width (map.layer.paint.line-width). Has an effect only when `type` is set to "line".      maxzoom  Parent: layout.map.layers[]  Type: number between or equal to 0 and 24 Default: 24 Sets the maximum zoom level (map.layer.maxzoom). At zoom levels equal to or greater than the maxzoom, the layer will be hidden.    minzoom  Parent: layout.map.layers[]  Type: number between or equal to 0 and 24 Default: 0 Sets the minimum zoom level (map.layer.minzoom). At zoom levels less than the minzoom, the layer will be hidden.    name  Parent: layout.map.layers[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    opacity  Parent: layout.map.layers[]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the layer. If `type` is "circle", opacity corresponds to the circle opacity (map.layer.paint.circle-opacity) If `type` is "line", opacity corresponds to the line opacity (map.layer.paint.line-opacity) If `type` is "fill", opacity corresponds to the fill opacity (map.layer.paint.fill-opacity) If `type` is "symbol", opacity corresponds to the icon/text opacity (map.layer.paint.text-opacity)    source  Parent: layout.map.layers[]  Type: number or categorical coordinate string Sets the source data for this layer (map.layer.source). When `sourcetype` is set to "geojson", `source` can be a URL to a GeoJSON or a GeoJSON object. When `sourcetype` is set to "vector" or "raster", `source` can be a URL or an array of tile URLs. When `sourcetype` is set to "image", `source` can be a URL to an image.    sourceattribution  Parent: layout.map.layers[]  Type: string Sets the attribution for this source.    sourcelayer  Parent: layout.map.layers[]  Type: string Default: "" Specifies the layer to use from a vector tile source (map.layer.source-layer). Required for "vector" source type that supports multiple layers.    sourcetype  Parent: layout.map.layers[]  Type: enumerated , one of ( "geojson" | "vector" | "raster" | "image" ) Default: "geojson" Sets the source type for this layer, that is the type of the layer data.    symbol  Parent: layout.map.layers[] Type: object containing one or more of the keys listed below.    icon  Parent: layout.map.layers[].symbol  Type: string Default: "marker" Sets the symbol icon image (map.layer.layout.icon-image). Full list: https://www.map.com/maki-icons/    iconsize  Parent: layout.map.layers[].symbol  Type: number Default: 10 Sets the symbol icon size (map.layer.layout.icon-size). Has an effect only when `type` is set to "symbol".    placement  Parent: layout.map.layers[].symbol  Type: enumerated , one of ( "point" | "line" | "line-center" ) Default: "point" Sets the symbol and/or text placement (map.layer.layout.symbol-placement). If `placement` is "point", the label is placed where the geometry is located If `placement` is "line", the label is placed along the line of the geometry If `placement` is "line-center", the label is placed on the center of the geometry    text  Parent: layout.map.layers[].symbol  Type: string Default: "" Sets the symbol text (map.layer.layout.text-field).    textfont  Parent: layout.map.layers[].symbol Type: object containing one or more of the keys listed below. Sets the icon text font (color=map.layer.paint.text-color, size=map.layer.layout.text-size). Has an effect only when `type` is set to "symbol".    color  Parent: layout.map.layers[].symbol.textfont  Type: color    family  Parent: layout.map.layers[].symbol.textfont  Type: string Default: "Open Sans Regular, Arial Unicode MS Regular" HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    size  Parent: layout.map.layers[].symbol.textfont  Type: number greater than or equal to 1    style  Parent: layout.map.layers[].symbol.textfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    weight  Parent: layout.map.layers[].symbol.textfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      textposition  Parent: layout.map.layers[].symbol  Type: enumerated , one of ( "top left" | "top center" | "top right" | "middle left" | "middle center" | "middle right" | "bottom left" | "bottom center" | "bottom right" ) Default: "middle center" Sets the positions of the `text` elements with respects to the (x,y) coordinates.      templateitemname  Parent: layout.map.layers[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    type  Parent: layout.map.layers[]  Type: enumerated , one of ( "circle" | "line" | "fill" | "symbol" | "raster" ) Default: "circle" Sets the layer type, that is the how the layer data set in `source` will be rendered With `sourcetype` set to "geojson", the following values are allowed: "circle", "line", "fill" and "symbol". but note that "line" and "fill" are not compatible with Point GeoJSON geometries. With `sourcetype` set to "vector", the following values are allowed: "circle", "line", "fill" and "symbol". With `sourcetype` set to "raster" or `"image"`, only the "raster" value is allowed.    visible  Parent: layout.map.layers[]  Type: boolean Default: true Determines whether this layer is displayed      pitch  Parent: layout.map  Type: number Default: 0 Sets the pitch angle of the map (in degrees, where "0" means perpendicular to the surface of the map) (map.pitch).    style  Parent: layout.map  Type: number or categorical coordinate string Default: basic Defines the map layers that are rendered by default below the trace layers defined in `data`, which are themselves by default rendered below the layers defined in `layout.map.layers`. These layers can be defined either explicitly as a Map Style object which can contain multiple layer definitions that load data from any public or private Tile Map Service (TMS or XYZ) or Web Map Service (WMS) or implicitly by using one of the built-in style objects which use WMSes or by using a custom style URL Map Style objects are of the form described in the MapLibre GL JS documentation available at https://maplibre.org/maplibre-style-spec/ The built-in plotly.js styles objects are: basic, carto-darkmatter, carto-darkmatter-nolabels, carto-positron, carto-positron-nolabels, carto-voyager, carto-voyager-nolabels, dark, light, open-street-map, outdoors, satellite, satellite-streets, streets, white-bg.    uirevision  Parent: layout.map  Type: number or categorical coordinate string Controls persistence of user-driven changes in the view: `center`, `zoom`, `bearing`, `pitch`. Defaults to `layout.uirevision`.    zoom  Parent: layout.map  Type: number Default: 1 Sets the zoom level of the map (map.zoom).      mapbox  Parent: layout Type: object containing one or more of the keys listed below.    accesstoken  Parent: layout.mapbox  Type: string Sets the mapbox access token to be used for this mapbox map. Alternatively, the mapbox access token can be set in the configuration options under `mapboxAccessToken`. Note that accessToken are only required when `style` (e.g with values : basic, streets, outdoors, light, dark, satellite, satellite-streets ) and/or a layout layer references the Mapbox server.    bearing  Parent: layout.mapbox  Type: number Default: 0 Sets the bearing angle of the map in degrees counter-clockwise from North (mapbox.bearing).    bounds  Parent: layout.mapbox Type: object containing one or more of the keys listed below.    east  Parent: layout.mapbox.bounds  Type: number Sets the maximum longitude of the map (in degrees East) if `west`, `south` and `north` are declared.    north  Parent: layout.mapbox.bounds  Type: number Sets the maximum latitude of the map (in degrees North) if `east`, `west` and `south` are declared.    south  Parent: layout.mapbox.bounds  Type: number Sets the minimum latitude of the map (in degrees North) if `east`, `west` and `north` are declared.    west  Parent: layout.mapbox.bounds  Type: number Sets the minimum longitude of the map (in degrees East) if `east`, `south` and `north` are declared.      center  Parent: layout.mapbox Type: object containing one or more of the keys listed below.    lat  Parent: layout.mapbox.center  Type: number Default: 0 Sets the latitude of the center of the map (in degrees North).    lon  Parent: layout.mapbox.center  Type: number Default: 0 Sets the longitude of the center of the map (in degrees East).      domain  Parent: layout.mapbox Type: object containing one or more of the keys listed below.    column  Parent: layout.mapbox.domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this column in the grid for this mapbox subplot .    row  Parent: layout.mapbox.domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this row in the grid for this mapbox subplot .    x  Parent: layout.mapbox.domain  Type: array Default: [0, 1] Sets the horizontal domain of this mapbox subplot (in plot fraction).    y  Parent: layout.mapbox.domain  Type: array Default: [0, 1] Sets the vertical domain of this mapbox subplot (in plot fraction).      layers  Parent: layout.mapbox Type: array of object where each object has one or more of the keys listed below.     below  Parent: layout.mapbox.layers[]  Type: string Determines if the layer will be inserted before the layer with the specified ID. If omitted or set to '', the layer will be inserted above every existing layer.    circle  Parent: layout.mapbox.layers[] Type: object containing one or more of the keys listed below.    radius  Parent: layout.mapbox.layers[].circle  Type: number Default: 15 Sets the circle radius (mapbox.layer.paint.circle-radius). Has an effect only when `type` is set to "circle".      color  Parent: layout.mapbox.layers[]  Type: color Default: "#444" Sets the primary layer color. If `type` is "circle", color corresponds to the circle color (mapbox.layer.paint.circle-color) If `type` is "line", color corresponds to the line color (mapbox.layer.paint.line-color) If `type` is "fill", color corresponds to the fill color (mapbox.layer.paint.fill-color) If `type` is "symbol", color corresponds to the icon color (mapbox.layer.paint.icon-color)    coordinates  Parent: layout.mapbox.layers[]  Type: number or categorical coordinate string Sets the coordinates array contains [longitude, latitude] pairs for the image corners listed in clockwise order: top left, top right, bottom right, bottom left. Only has an effect for "image" `sourcetype`.    fill  Parent: layout.mapbox.layers[] Type: object containing one or more of the keys listed below.    outlinecolor  Parent: layout.mapbox.layers[].fill  Type: color Default: "#444" Sets the fill outline color (mapbox.layer.paint.fill-outline-color). Has an effect only when `type` is set to "fill".      line  Parent: layout.mapbox.layers[] Type: object containing one or more of the keys listed below.    dash  Parent: layout.mapbox.layers[].line  Type: data array Sets the length of dashes and gaps (mapbox.layer.paint.line-dasharray). Has an effect only when `type` is set to "line".    width  Parent: layout.mapbox.layers[].line  Type: number Default: 2 Sets the line width (mapbox.layer.paint.line-width). Has an effect only when `type` is set to "line".      maxzoom  Parent: layout.mapbox.layers[]  Type: number between or equal to 0 and 24 Default: 24 Sets the maximum zoom level (mapbox.layer.maxzoom). At zoom levels equal to or greater than the maxzoom, the layer will be hidden.    minzoom  Parent: layout.mapbox.layers[]  Type: number between or equal to 0 and 24 Default: 0 Sets the minimum zoom level (mapbox.layer.minzoom). At zoom levels less than the minzoom, the layer will be hidden.    name  Parent: layout.mapbox.layers[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    opacity  Parent: layout.mapbox.layers[]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the layer. If `type` is "circle", opacity corresponds to the circle opacity (mapbox.layer.paint.circle-opacity) If `type` is "line", opacity corresponds to the line opacity (mapbox.layer.paint.line-opacity) If `type` is "fill", opacity corresponds to the fill opacity (mapbox.layer.paint.fill-opacity) If `type` is "symbol", opacity corresponds to the icon/text opacity (mapbox.layer.paint.text-opacity)    source  Parent: layout.mapbox.layers[]  Type: number or categorical coordinate string Sets the source data for this layer (mapbox.layer.source). When `sourcetype` is set to "geojson", `source` can be a URL to a GeoJSON or a GeoJSON object. When `sourcetype` is set to "vector" or "raster", `source` can be a URL or an array of tile URLs. When `sourcetype` is set to "image", `source` can be a URL to an image.    sourceattribution  Parent: layout.mapbox.layers[]  Type: string Sets the attribution for this source.    sourcelayer  Parent: layout.mapbox.layers[]  Type: string Default: "" Specifies the layer to use from a vector tile source (mapbox.layer.source-layer). Required for "vector" source type that supports multiple layers.    sourcetype  Parent: layout.mapbox.layers[]  Type: enumerated , one of ( "geojson" | "vector" | "raster" | "image" ) Default: "geojson" Sets the source type for this layer, that is the type of the layer data.    symbol  Parent: layout.mapbox.layers[] Type: object containing one or more of the keys listed below.    icon  Parent: layout.mapbox.layers[].symbol  Type: string Default: "marker" Sets the symbol icon image (mapbox.layer.layout.icon-image). Full list: https://www.mapbox.com/maki-icons/    iconsize  Parent: layout.mapbox.layers[].symbol  Type: number Default: 10 Sets the symbol icon size (mapbox.layer.layout.icon-size). Has an effect only when `type` is set to "symbol".    placement  Parent: layout.mapbox.layers[].symbol  Type: enumerated , one of ( "point" | "line" | "line-center" ) Default: "point" Sets the symbol and/or text placement (mapbox.layer.layout.symbol-placement). If `placement` is "point", the label is placed where the geometry is located If `placement` is "line", the label is placed along the line of the geometry If `placement` is "line-center", the label is placed on the center of the geometry    text  Parent: layout.mapbox.layers[].symbol  Type: string Default: "" Sets the symbol text (mapbox.layer.layout.text-field).    textfont  Parent: layout.mapbox.layers[].symbol Type: object containing one or more of the keys listed below. Sets the icon text font (color=mapbox.layer.paint.text-color, size=mapbox.layer.layout.text-size). Has an effect only when `type` is set to "symbol".    color  Parent: layout.mapbox.layers[].symbol.textfont  Type: color    family  Parent: layout.mapbox.layers[].symbol.textfont  Type: string Default: "Open Sans Regular, Arial Unicode MS Regular" HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    size  Parent: layout.mapbox.layers[].symbol.textfont  Type: number greater than or equal to 1    style  Parent: layout.mapbox.layers[].symbol.textfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    weight  Parent: layout.mapbox.layers[].symbol.textfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      textposition  Parent: layout.mapbox.layers[].symbol  Type: enumerated , one of ( "top left" | "top center" | "top right" | "middle left" | "middle center" | "middle right" | "bottom left" | "bottom center" | "bottom right" ) Default: "middle center" Sets the positions of the `text` elements with respects to the (x,y) coordinates.      templateitemname  Parent: layout.mapbox.layers[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    type  Parent: layout.mapbox.layers[]  Type: enumerated , one of ( "circle" | "line" | "fill" | "symbol" | "raster" ) Default: "circle" Sets the layer type, that is the how the layer data set in `source` will be rendered With `sourcetype` set to "geojson", the following values are allowed: "circle", "line", "fill" and "symbol". but note that "line" and "fill" are not compatible with Point GeoJSON geometries. With `sourcetype` set to "vector", the following values are allowed: "circle", "line", "fill" and "symbol". With `sourcetype` set to "raster" or `"image"`, only the "raster" value is allowed.    visible  Parent: layout.mapbox.layers[]  Type: boolean Default: true Determines whether this layer is displayed      pitch  Parent: layout.mapbox  Type: number Default: 0 Sets the pitch angle of the map (in degrees, where "0" means perpendicular to the surface of the map) (mapbox.pitch).    style  Parent: layout.mapbox  Type: number or categorical coordinate string Default: basic Defines the map layers that are rendered by default below the trace layers defined in `data`, which are themselves by default rendered below the layers defined in `layout.mapbox.layers`. These layers can be defined either explicitly as a Mapbox Style object which can contain multiple layer definitions that load data from any public or private Tile Map Service (TMS or XYZ) or Web Map Service (WMS) or implicitly by using one of the built-in style objects which use WMSes which do not require any access tokens, or by using a default Mapbox style or custom Mapbox style URL, both of which require a Mapbox access token Note that Mapbox access token can be set in the `accesstoken` attribute or in the `mapboxAccessToken` config option. Mapbox Style objects are of the form described in the Mapbox GL JS documentation available at https://docs.mapbox.com/mapbox-gl-js/style-spec The built-in plotly.js styles objects are: carto-darkmatter, carto-positron, open-street-map, stamen-terrain, stamen-toner, stamen-watercolor, white-bg The built-in Mapbox styles are: basic, streets, outdoors, light, dark, satellite, satellite-streets Mapbox style URLs are of the form: mapbox://mapbox.mapbox-<name>-<version>    uirevision  Parent: layout.mapbox  Type: number or categorical coordinate string Controls persistence of user-driven changes in the view: `center`, `zoom`, `bearing`, `pitch`. Defaults to `layout.uirevision`.    zoom  Parent: layout.mapbox  Type: number Default: 1 Sets the zoom level of the map (mapbox.zoom).      polar  Parent: layout Type: object containing one or more of the keys listed below.    angularaxis  Parent: layout.polar Type: object containing one or more of the keys listed below.    autotypenumbers  Parent: layout.polar.angularaxis  Type: enumerated , one of ( "convert types" | "strict" ) Default: "convert types" Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.    categoryarray  Parent: layout.polar.angularaxis  Type: data array Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to "array". Used with `categoryorder`.    categoryorder  Parent: layout.polar.angularaxis  Type: enumerated , one of ( "trace" | "category ascending" | "category descending" | "array" | "total ascending" | "total descending" | "min ascending" | "min descending" | "max ascending" | "max descending" | "sum ascending" | "sum descending" | "mean ascending" | "mean descending" | "geometric mean ascending" | "geometric mean descending" | "median ascending" | "median descending" ) Default: "trace" Specifies the ordering logic for the case of categorical variables. By default, plotly uses "trace", which specifies the order that is present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to "total ascending" or "total descending" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.    color  Parent: layout.polar.angularaxis  Type: color Default: "#444" Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.    direction  Parent: layout.polar.angularaxis  Type: enumerated , one of ( "counterclockwise" | "clockwise" ) Default: "counterclockwise" Sets the direction corresponding to positive angles.    dtick  Parent: layout.polar.angularaxis  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: layout.polar.angularaxis  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    gridcolor  Parent: layout.polar.angularaxis  Type: color Default: "#eee" Sets the color of the grid lines.    griddash  Parent: layout.polar.angularaxis  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    gridwidth  Parent: layout.polar.angularaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the grid lines.    hoverformat  Parent: layout.polar.angularaxis  Type: string Default: "" Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    labelalias  Parent: layout.polar.angularaxis  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    layer  Parent: layout.polar.angularaxis  Type: enumerated , one of ( "above traces" | "below traces" ) Default: "above traces" Sets the layer on which this axis is displayed. If "above traces", this axis is displayed above all the subplot's traces If "below traces", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to "false" to show markers and/or text nodes above this axis.    linecolor  Parent: layout.polar.angularaxis  Type: color Default: "#444" Sets the axis line color.    linewidth  Parent: layout.polar.angularaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    minexponent  Parent: layout.polar.angularaxis  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: layout.polar.angularaxis  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    period  Parent: layout.polar.angularaxis  Type: number greater than or equal to 0 Set the angular period. Has an effect only when `angularaxis.type` is "category".    rotation  Parent: layout.polar.angularaxis  Type: angle Sets that start position (in degrees) of the angular axis By default, polar subplots with `direction` set to "counterclockwise" get a `rotation` of "0" which corresponds to due East (like what mathematicians prefer). In turn, polar with `direction` set to "clockwise" get a rotation of "90" which corresponds to due North (like on a compass),    separatethousands  Parent: layout.polar.angularaxis  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: layout.polar.angularaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showgrid  Parent: layout.polar.angularaxis  Type: boolean Default: true Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.    showline  Parent: layout.polar.angularaxis  Type: boolean Default: true Determines whether or not a line bounding this axis is drawn.    showticklabels  Parent: layout.polar.angularaxis  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: layout.polar.angularaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: layout.polar.angularaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    thetaunit  Parent: layout.polar.angularaxis  Type: enumerated , one of ( "radians" | "degrees" ) Default: "degrees" Sets the format unit of the formatted "theta" values. Has an effect only when `angularaxis.type` is "linear".    tick0  Parent: layout.polar.angularaxis  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: layout.polar.angularaxis  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: layout.polar.angularaxis  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: layout.polar.angularaxis Type: object containing one or more of the keys listed below. Sets the tick font.    color  Parent: layout.polar.angularaxis.tickfont  Type: color    family  Parent: layout.polar.angularaxis.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.polar.angularaxis.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.polar.angularaxis.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.polar.angularaxis.tickfont  Type: number greater than or equal to 1    style  Parent: layout.polar.angularaxis.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.polar.angularaxis.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.polar.angularaxis.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.polar.angularaxis.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: layout.polar.angularaxis  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: layout.polar.angularaxis Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: layout.polar.angularaxis.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: layout.polar.angularaxis.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: layout.polar.angularaxis.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: layout.polar.angularaxis.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: layout.polar.angularaxis.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabelstep  Parent: layout.polar.angularaxis  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: layout.polar.angularaxis  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: layout.polar.angularaxis  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: layout.polar.angularaxis  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: layout.polar.angularaxis  Type: enumerated , one of ( "outside" | "inside" | "" ) Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: layout.polar.angularaxis  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: layout.polar.angularaxis  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: layout.polar.angularaxis  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: layout.polar.angularaxis  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    type  Parent: layout.polar.angularaxis  Type: enumerated , one of ( "-" | "linear" | "category" ) Default: "-" Sets the angular axis type. If "linear", set `thetaunit` to determine the unit in which axis value are shown. If "category, use `period` to set the number of integer coordinates around polar axis.    uirevision  Parent: layout.polar.angularaxis  Type: number or categorical coordinate string Controls persistence of user-driven changes in axis `rotation`. Defaults to `polar<N>.uirevision`.    visible  Parent: layout.polar.angularaxis  Type: boolean Default: true A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false      bgcolor  Parent: layout.polar  Type: color Default: "#fff" Set the background color of the subplot    domain  Parent: layout.polar Type: object containing one or more of the keys listed below.    column  Parent: layout.polar.domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this column in the grid for this polar subplot .    row  Parent: layout.polar.domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this row in the grid for this polar subplot .    x  Parent: layout.polar.domain  Type: array Default: [0, 1] Sets the horizontal domain of this polar subplot (in plot fraction).    y  Parent: layout.polar.domain  Type: array Default: [0, 1] Sets the vertical domain of this polar subplot (in plot fraction).      gridshape  Parent: layout.polar  Type: enumerated , one of ( "circular" | "linear" ) Default: "circular" Determines if the radial axis grid lines and angular axis line are drawn as "circular" sectors or as "linear" (polygon) sectors. Has an effect only when the angular axis has `type` "category". Note that `radialaxis.angle` is snapped to the angle of the closest vertex when `gridshape` is "circular" (so that radial axis scale is the same as the data scale).    hole  Parent: layout.polar  Type: number between or equal to 0 and 1 Default: 0 Sets the fraction of the radius to cut out of the polar subplot.    radialaxis  Parent: layout.polar Type: object containing one or more of the keys listed below.    angle  Parent: layout.polar.radialaxis  Type: angle Sets the angle (in degrees) from which the radial axis is drawn. Note that by default, radial axis line on the theta=0 line corresponds to a line pointing right (like what mathematicians prefer). Defaults to the first `polar.sector` angle.    autorange  Parent: layout.polar.radialaxis  Type: enumerated , one of ( true | false | "reversed" | "min reversed" | "max reversed" | "min" | "max" ) Default: true Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to "false". Using "min" applies autorange only to set the minimum. Using "max" applies autorange only to set the maximum. Using "min reversed" applies autorange only to set the minimum on a reversed axis. Using "max reversed" applies autorange only to set the maximum on a reversed axis. Using "reversed" applies autorange on both ends and reverses the axis direction.    autorangeoptions  Parent: layout.polar.radialaxis Type: object containing one or more of the keys listed below.    clipmax  Parent: layout.polar.radialaxis.autorangeoptions  Type: number or categorical coordinate string Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.    clipmin  Parent: layout.polar.radialaxis.autorangeoptions  Type: number or categorical coordinate string Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.    include  Parent: layout.polar.radialaxis.autorangeoptions  Type: number or categorical coordinate string Ensure this value is included in autorange.    maxallowed  Parent: layout.polar.radialaxis.autorangeoptions  Type: number or categorical coordinate string Use this value exactly as autorange maximum.    minallowed  Parent: layout.polar.radialaxis.autorangeoptions  Type: number or categorical coordinate string Use this value exactly as autorange minimum.      autotickangles  Parent: layout.polar.radialaxis  Type: array Default: [0, 30, 90] When `tickangle` is set to "auto", it will be set to the first angle in this array that is large enough to prevent label overlap.    autotypenumbers  Parent: layout.polar.radialaxis  Type: enumerated , one of ( "convert types" | "strict" ) Default: "convert types" Using "strict" a numeric string in trace data is not converted to a number. Using "convert types" a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.    calendar  Parent: layout.polar.radialaxis  Type: enumerated , one of ( "chinese" | "coptic" | "discworld" | "ethiopian" | "gregorian" | "hebrew" | "islamic" | "jalali" | "julian" | "mayan" | "nanakshahi" | "nepali" | "persian" | "taiwan" | "thai" | "ummalqura" ) Default: "gregorian" Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`    categoryarray  Parent: layout.polar.radialaxis  Type: data array Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to "array". Used with `categoryorder`.    categoryorder  Parent: layout.polar.radialaxis  Type: enumerated , one of ( "trace" | "category ascending" | "category descending" | "array" | "total ascending" | "total descending" | "min ascending" | "min descending" | "max ascending" | "max descending" | "sum ascending" | "sum descending" | "mean ascending" | "mean descending" | "geometric mean ascending" | "geometric mean descending" | "median ascending" | "median descending" ) Default: "trace" Specifies the ordering logic for the case of categorical variables. By default, plotly uses "trace", which specifies the order that is present in the data supplied. Set `categoryorder` to "category ascending" or "category descending" if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to "array" to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the "trace" mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to "total ascending" or "total descending" if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.    color  Parent: layout.polar.radialaxis  Type: color Default: "#444" Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.    dtick  Parent: layout.polar.radialaxis  Type: number or categorical coordinate string Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to "log" and "date" axes. If the axis `type` is "log", then ticks are set every 10^(n"dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. "log" has several special values; "L<f>", where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = "L0.5" will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use "D1" (all digits) or "D2" (only 2 and 5). `tick0` is ignored for "D1" and "D2". If the axis `type` is "date", then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. "date" also has special values "M<n>" gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to "2000-01-15" and `dtick` to "M3". To set ticks every 4 years, set `dtick` to "M48"    exponentformat  Parent: layout.polar.radialaxis  Type: enumerated , one of ( "none" | "e" | "E" | "power" | "SI" | "B" ) Default: "B" Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If "none", it appears as 1,000,000,000. If "e", 1e+9. If "E", 1E+9. If "power", 1x10^9 (with 9 in a super script). If "SI", 1G. If "B", 1B.    gridcolor  Parent: layout.polar.radialaxis  Type: color Default: "#eee" Sets the color of the grid lines.    griddash  Parent: layout.polar.radialaxis  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    gridwidth  Parent: layout.polar.radialaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the grid lines.    hoverformat  Parent: layout.polar.radialaxis  Type: string Default: "" Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    labelalias  Parent: layout.polar.radialaxis  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    layer  Parent: layout.polar.radialaxis  Type: enumerated , one of ( "above traces" | "below traces" ) Default: "above traces" Sets the layer on which this axis is displayed. If "above traces", this axis is displayed above all the subplot's traces If "below traces", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to "false" to show markers and/or text nodes above this axis.    linecolor  Parent: layout.polar.radialaxis  Type: color Default: "#444" Sets the axis line color.    linewidth  Parent: layout.polar.radialaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    maxallowed  Parent: layout.polar.radialaxis  Type: number or categorical coordinate string Determines the maximum range of this axis.    minallowed  Parent: layout.polar.radialaxis  Type: number or categorical coordinate string Determines the minimum range of this axis.    minexponent  Parent: layout.polar.radialaxis  Type: number greater than or equal to 0 Default: 3 Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is "SI" or "B".    nticks  Parent: layout.polar.radialaxis  Type: integer greater than or equal to 0 Default: 0 Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to "auto".    range  Parent: layout.polar.radialaxis  Type: array Sets the range of this axis. If the axis `type` is "log", then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is "date", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is "category", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.    rangemode  Parent: layout.polar.radialaxis  Type: enumerated , one of ( "tozero" | "nonnegative" | "normal" ) Default: "tozero" If "tozero"`, the range extends to 0, regardless of the input data If "nonnegative", the range is non-negative, regardless of the input data. If "normal", the range is computed in relation to the extrema of the input data (same behavior as for cartesian axes).    separatethousands  Parent: layout.polar.radialaxis  Type: boolean If "true", even 4-digit integers are separated    showexponent  Parent: layout.polar.radialaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all exponents are shown besides their significands. If "first", only the exponent of the first tick is shown. If "last", only the exponent of the last tick is shown. If "none", no exponents appear.    showgrid  Parent: layout.polar.radialaxis  Type: boolean Default: true Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.    showline  Parent: layout.polar.radialaxis  Type: boolean Default: true Determines whether or not a line bounding this axis is drawn.    showticklabels  Parent: layout.polar.radialaxis  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: layout.polar.radialaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: layout.polar.radialaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    side  Parent: layout.polar.radialaxis  Type: enumerated , one of ( "clockwise" | "counterclockwise" ) Default: "clockwise" Determines on which side of radial axis line the tick and tick labels appear.    tick0  Parent: layout.polar.radialaxis  Type: number or categorical coordinate string Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is "log", then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`="L<f>" (see `dtick` for more info). If the axis `type` is "date", it should be a date string, like date data. If the axis `type` is "category", it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.    tickangle  Parent: layout.polar.radialaxis  Type: angle Default: "auto" Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: layout.polar.radialaxis  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: layout.polar.radialaxis Type: object containing one or more of the keys listed below. Sets the tick font.    color  Parent: layout.polar.radialaxis.tickfont  Type: color    family  Parent: layout.polar.radialaxis.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.polar.radialaxis.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.polar.radialaxis.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.polar.radialaxis.tickfont  Type: number greater than or equal to 1    style  Parent: layout.polar.radialaxis.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.polar.radialaxis.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.polar.radialaxis.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.polar.radialaxis.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: layout.polar.radialaxis  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    tickformatstops  Parent: layout.polar.radialaxis Type: array of object where each object has one or more of the keys listed below.     dtickrange  Parent: layout.polar.radialaxis.tickformatstops[]  Type: array range ["min", "max"], where "min", "max" - dtick values which describe some zoom level, it is possible to omit "min" or "max" value by passing "null"    enabled  Parent: layout.polar.radialaxis.tickformatstops[]  Type: boolean Default: true Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.    name  Parent: layout.polar.radialaxis.tickformatstops[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: layout.polar.radialaxis.tickformatstops[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: layout.polar.radialaxis.tickformatstops[]  Type: string Default: "" string - dtickformat for described zoom level, the same as "tickformat"      ticklabelstep  Parent: layout.polar.radialaxis  Type: integer greater than or equal to 1 Default: 1 Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` "log" or "multicategory", or when `tickmode` is "array".    ticklen  Parent: layout.polar.radialaxis  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickmode  Parent: layout.polar.radialaxis  Type: enumerated , one of ( "auto" | "linear" | "array" ) Sets the tick mode for this axis. If "auto", the number of ticks is set via `nticks`. If "linear", the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` ("linear" is the default value if `tick0` and `dtick` are provided). If "array", the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. ("array" is the default value if `tickvals` is provided).    tickprefix  Parent: layout.polar.radialaxis  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: layout.polar.radialaxis  Type: enumerated , one of ( "outside" | "inside" | "" ) Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: layout.polar.radialaxis  Type: string Default: "" Sets a tick label suffix.    ticktext  Parent: layout.polar.radialaxis  Type: data array Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to "array". Used with `tickvals`.    tickvals  Parent: layout.polar.radialaxis  Type: data array Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to "array". Used with `ticktext`.    tickwidth  Parent: layout.polar.radialaxis  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    title  Parent: layout.polar.radialaxis Type: object containing one or more of the keys listed below.    font  Parent: layout.polar.radialaxis.title Type: object containing one or more of the keys listed below. Sets this axis' title font.    color  Parent: layout.polar.radialaxis.title.font  Type: color    family  Parent: layout.polar.radialaxis.title.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.polar.radialaxis.title.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.polar.radialaxis.title.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.polar.radialaxis.title.font  Type: number greater than or equal to 1    style  Parent: layout.polar.radialaxis.title.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.polar.radialaxis.title.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.polar.radialaxis.title.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.polar.radialaxis.title.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: layout.polar.radialaxis.title  Type: string Default: "" Sets the title of this axis.      type  Parent: layout.polar.radialaxis  Type: enumerated , one of ( "-" | "linear" | "log" | "date" | "category" ) Default: "-" Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.    uirevision  Parent: layout.polar.radialaxis  Type: number or categorical coordinate string Controls persistence of user-driven changes in axis `range`, `autorange`, `angle`, and `title` if in `editable: true` configuration. Defaults to `polar<N>.uirevision`.    visible  Parent: layout.polar.radialaxis  Type: boolean Default: true A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false      sector  Parent: layout.polar  Type: array Default: [0, 360] Sets angular span of this polar subplot with two angles (in degrees). Sector are assumed to be spanned in the counterclockwise direction with "0" corresponding to rightmost limit of the polar subplot.    uirevision  Parent: layout.polar  Type: number or categorical coordinate string Controls persistence of user-driven changes in axis attributes, if not overridden in the individual axes. Defaults to `layout.uirevision`.      smith  Parent: layout Type: object containing one or more of the keys listed below.    bgcolor  Parent: layout.smith  Type: color Default: "#fff" Set the background color of the subplot    domain  Parent: layout.smith Type: object containing one or more of the keys listed below.    column  Parent: layout.smith.domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this column in the grid for this smith subplot .    row  Parent: layout.smith.domain  Type: integer greater than or equal to 0 Default: 0 If there is a layout grid, use the domain for this row in the grid for this smith subplot .    x  Parent: layout.smith.domain  Type: array Default: [0, 1] Sets the horizontal domain of this smith subplot (in plot fraction).    y  Parent: layout.smith.domain  Type: array Default: [0, 1] Sets the vertical domain of this smith subplot (in plot fraction).      imaginaryaxis  Parent: layout.smith Type: object containing one or more of the keys listed below.    color  Parent: layout.smith.imaginaryaxis  Type: color Default: "#444" Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.    gridcolor  Parent: layout.smith.imaginaryaxis  Type: color Default: "#eee" Sets the color of the grid lines.    griddash  Parent: layout.smith.imaginaryaxis  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    gridwidth  Parent: layout.smith.imaginaryaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the grid lines.    hoverformat  Parent: layout.smith.imaginaryaxis  Type: string Default: "" Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    labelalias  Parent: layout.smith.imaginaryaxis  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    layer  Parent: layout.smith.imaginaryaxis  Type: enumerated , one of ( "above traces" | "below traces" ) Default: "above traces" Sets the layer on which this axis is displayed. If "above traces", this axis is displayed above all the subplot's traces If "below traces", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to "false" to show markers and/or text nodes above this axis.    linecolor  Parent: layout.smith.imaginaryaxis  Type: color Default: "#444" Sets the axis line color.    linewidth  Parent: layout.smith.imaginaryaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    showgrid  Parent: layout.smith.imaginaryaxis  Type: boolean Default: true Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.    showline  Parent: layout.smith.imaginaryaxis  Type: boolean Default: true Determines whether or not a line bounding this axis is drawn.    showticklabels  Parent: layout.smith.imaginaryaxis  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: layout.smith.imaginaryaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: layout.smith.imaginaryaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    tickcolor  Parent: layout.smith.imaginaryaxis  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: layout.smith.imaginaryaxis Type: object containing one or more of the keys listed below. Sets the tick font.    color  Parent: layout.smith.imaginaryaxis.tickfont  Type: color    family  Parent: layout.smith.imaginaryaxis.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.smith.imaginaryaxis.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.smith.imaginaryaxis.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.smith.imaginaryaxis.tickfont  Type: number greater than or equal to 1    style  Parent: layout.smith.imaginaryaxis.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.smith.imaginaryaxis.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.smith.imaginaryaxis.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.smith.imaginaryaxis.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: layout.smith.imaginaryaxis  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    ticklen  Parent: layout.smith.imaginaryaxis  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickprefix  Parent: layout.smith.imaginaryaxis  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: layout.smith.imaginaryaxis  Type: enumerated , one of ( "outside" | "inside" | "" ) Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "outside" ("inside"), this axis' are drawn outside (inside) the axis lines.    ticksuffix  Parent: layout.smith.imaginaryaxis  Type: string Default: "" Sets a tick label suffix.    tickvals  Parent: layout.smith.imaginaryaxis  Type: data array Sets the values at which ticks on this axis appear. Defaults to `realaxis.tickvals` plus the same as negatives and zero.    tickwidth  Parent: layout.smith.imaginaryaxis  Type: number greater than or equal to 0 Default: 2 Sets the tick width (in px).    visible  Parent: layout.smith.imaginaryaxis  Type: boolean Default: true A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false      realaxis  Parent: layout.smith Type: object containing one or more of the keys listed below.    color  Parent: layout.smith.realaxis  Type: color Default: "#444" Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.    gridcolor  Parent: layout.smith.realaxis  Type: color Default: "#eee" Sets the color of the grid lines.    griddash  Parent: layout.smith.realaxis  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    gridwidth  Parent: layout.smith.realaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the grid lines.    hoverformat  Parent: layout.smith.realaxis  Type: string Default: "" Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    labelalias  Parent: layout.smith.realaxis  Type: number or categorical coordinate string Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.    layer  Parent: layout.smith.realaxis  Type: enumerated , one of ( "above traces" | "below traces" ) Default: "above traces" Sets the layer on which this axis is displayed. If "above traces", this axis is displayed above all the subplot's traces If "below traces", this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to "false" to show markers and/or text nodes above this axis.    linecolor  Parent: layout.smith.realaxis  Type: color Default: "#444" Sets the axis line color.    linewidth  Parent: layout.smith.realaxis  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the axis line.    showgrid  Parent: layout.smith.realaxis  Type: boolean Default: true Determines whether or not grid lines are drawn. If "true", the grid lines are drawn at every tick mark.    showline  Parent: layout.smith.realaxis  Type: boolean Default: true Determines whether or not a line bounding this axis is drawn.    showticklabels  Parent: layout.smith.realaxis  Type: boolean Default: true Determines whether or not the tick labels are drawn.    showtickprefix  Parent: layout.smith.realaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" If "all", all tick labels are displayed with a prefix. If "first", only the first tick is displayed with a prefix. If "last", only the last tick is displayed with a suffix. If "none", tick prefixes are hidden.    showticksuffix  Parent: layout.smith.realaxis  Type: enumerated , one of ( "all" | "first" | "last" | "none" ) Default: "all" Same as `showtickprefix` but for tick suffixes.    side  Parent: layout.smith.realaxis  Type: enumerated , one of ( "top" | "bottom" ) Default: "top" Determines on which side of real axis line the tick and tick labels appear.    tickangle  Parent: layout.smith.realaxis  Type: angle Default: 90 Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.    tickcolor  Parent: layout.smith.realaxis  Type: color Default: "#444" Sets the tick color.    tickfont  Parent: layout.smith.realaxis Type: object containing one or more of the keys listed below. Sets the tick font.    color  Parent: layout.smith.realaxis.tickfont  Type: color    family  Parent: layout.smith.realaxis.tickfont  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.smith.realaxis.tickfont  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.smith.realaxis.tickfont  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.smith.realaxis.tickfont  Type: number greater than or equal to 1    style  Parent: layout.smith.realaxis.tickfont  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.smith.realaxis.tickfont  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.smith.realaxis.tickfont  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.smith.realaxis.tickfont  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      tickformat  Parent: layout.smith.realaxis  Type: string Default: "" Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: "%h" for half of the year as a decimal number as well as "%{n}f" for fractional seconds with n digits. For example, "2016-10-13 09:15:23.456" with tickformat "%H~%M~%S.%2f" would display "09~15~23.46"    ticklen  Parent: layout.smith.realaxis  Type: number greater than or equal to 0 Default: 5 Sets the tick length (in px).    tickprefix  Parent: layout.smith.realaxis  Type: string Default: "" Sets a tick label prefix.    ticks  Parent: layout.smith.realaxis  Type: enumerated , one of ( "top" | "bottom" | "" ) Determines whether ticks are drawn or not. If "", this axis' ticks are not drawn. If "top" ("bottom"), this axis' are drawn above (below) the axis line.    ticksuffix  Parent: layout.smith.realaxis  Type: string Default: "" Sets a tick label suffix.    tickvals  Parent: layout.smith.realaxis  Type: data array Default: 0.20.5125 Sets the values at which ticks on this axis appear.    tickwidth  Parent: layout.smith.realaxis  Type: number greater than or equal to 0 Default: 2 Sets the tick width (in px).    visible  Parent: layout.smith.realaxis  Type: boolean Default: true A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false        annotations  Parent: layout Type: array of object where each object has one or more of the keys listed below. An annotation is a text element that can be placed anywhere in the plot. It can be positioned with respect to relative coordinates in the plot or with respect to the actual data coordinates of the graph. Annotations can be shown with or without an arrow.     align  Parent: layout.annotations[]  Type: enumerated , one of ( "left" | "center" | "right" ) Default: "center" Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.    arrowcolor  Parent: layout.annotations[]  Type: color Sets the color of the annotation arrow.    arrowhead  Parent: layout.annotations[]  Type: integer between or equal to 0 and 8 Default: 1 Sets the end annotation arrow head style.    arrowside  Parent: layout.annotations[]  Type: flaglist string. Any combination of "end", "start" joined with a "+" OR "none". Examples: "end", "start", "end+start", "none" Default: "end" Sets the annotation arrow head position.    arrowsize  Parent: layout.annotations[]  Type: number greater than or equal to 0.3 Default: 1 Sets the size of the end annotation arrow head, relative to `arrowwidth`. A value of 1 (default) gives a head about 3x as wide as the line.    arrowwidth  Parent: layout.annotations[]  Type: number greater than or equal to 0.1 Sets the width (in px) of annotation arrow line.    ax  Parent: layout.annotations[]  Type: number or categorical coordinate string Sets the x component of the arrow tail about the arrow head. If `axref` is `pixel`, a positive (negative) component corresponds to an arrow pointing from right to left (left to right). If `axref` is not `pixel` and is exactly the same as `xref`, this is an absolute value on that axis, like `x`, specified in the same coordinates as `xref`.    axref  Parent: layout.annotations[]  Type: enumerated , one of ( "pixel" | "/^x([2-9]|[1-9][0-9]+)?( domain)?$/" ) Default: "pixel" Indicates in what coordinates the tail of the annotation (ax,ay) is specified. If set to a x axis id (e.g. "x" or "x2"), the `x` position refers to a x coordinate. If set to "paper", the `x` position refers to the distance from the left of the plotting area in normalized coordinates where "0" ("1") corresponds to the left (right). If set to a x axis ID followed by "domain" (separated by a space), the position behaves like for "paper", but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., "x2 domain" refers to the domain of the second x axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis. In order for absolute positioning of the arrow to work, "axref" must be exactly the same as "xref", otherwise "axref" will revert to "pixel" (explained next). For relative positioning, "axref" can be set to "pixel", in which case the "ax" value is specified in pixels relative to "x". Absolute positioning is useful for trendline annotations which should continue to indicate the correct trend when zoomed. Relative positioning is useful for specifying the text offset for an annotated point.    ay  Parent: layout.annotations[]  Type: number or categorical coordinate string Sets the y component of the arrow tail about the arrow head. If `ayref` is `pixel`, a positive (negative) component corresponds to an arrow pointing from bottom to top (top to bottom). If `ayref` is not `pixel` and is exactly the same as `yref`, this is an absolute value on that axis, like `y`, specified in the same coordinates as `yref`.    ayref  Parent: layout.annotations[]  Type: enumerated , one of ( "pixel" | "/^y([2-9]|[1-9][0-9]+)?( domain)?$/" ) Default: "pixel" Indicates in what coordinates the tail of the annotation (ax,ay) is specified. If set to a y axis id (e.g. "y" or "y2"), the `y` position refers to a y coordinate. If set to "paper", the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where "0" ("1") corresponds to the bottom (top). If set to a y axis ID followed by "domain" (separated by a space), the position behaves like for "paper", but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., "y2 domain" refers to the domain of the second y axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis. In order for absolute positioning of the arrow to work, "ayref" must be exactly the same as "yref", otherwise "ayref" will revert to "pixel" (explained next). For relative positioning, "ayref" can be set to "pixel", in which case the "ay" value is specified in pixels relative to "y". Absolute positioning is useful for trendline annotations which should continue to indicate the correct trend when zoomed. Relative positioning is useful for specifying the text offset for an annotated point.    bgcolor  Parent: layout.annotations[]  Type: color Default: "rgba(0,0,0,0)" Sets the background color of the annotation.    bordercolor  Parent: layout.annotations[]  Type: color Default: "rgba(0,0,0,0)" Sets the color of the border enclosing the annotation `text`.    borderpad  Parent: layout.annotations[]  Type: number greater than or equal to 0 Default: 1 Sets the padding (in px) between the `text` and the enclosing border.    borderwidth  Parent: layout.annotations[]  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the border enclosing the annotation `text`.    captureevents  Parent: layout.annotations[]  Type: boolean Determines whether the annotation text box captures mouse move and click events, or allows those events to pass through to data points in the plot that may be behind the annotation. By default `captureevents` is "false" unless `hovertext` is provided. If you use the event `plotly_clickannotation` without `hovertext` you must explicitly enable `captureevents`.    clicktoshow  Parent: layout.annotations[]  Type: enumerated , one of ( false | "onoff" | "onout" ) Makes this annotation respond to clicks on the plot. If you click a data point that exactly matches the `x` and `y` values of this annotation, and it is hidden (visible: false), it will appear. In "onoff" mode, you must click the same point again to make it disappear, so if you click multiple points, you can show multiple annotations. In "onout" mode, a click anywhere else in the plot (on another data point or not) will hide this annotation. If you need to show/hide this annotation in response to different `x` or `y` values, you can set `xclick` and/or `yclick`. This is useful for example to label the side of a bar. To label markers though, `standoff` is preferred over `xclick` and `yclick`.    font  Parent: layout.annotations[] Type: object containing one or more of the keys listed below. Sets the annotation text font.    color  Parent: layout.annotations[].font  Type: color    family  Parent: layout.annotations[].font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.annotations[].font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.annotations[].font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.annotations[].font  Type: number greater than or equal to 1    style  Parent: layout.annotations[].font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.annotations[].font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.annotations[].font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.annotations[].font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      height  Parent: layout.annotations[]  Type: number greater than or equal to 1 Sets an explicit height for the text box. null (default) lets the text set the box height. Taller text will be clipped.    hoverlabel  Parent: layout.annotations[] Type: object containing one or more of the keys listed below.    bgcolor  Parent: layout.annotations[].hoverlabel  Type: color Sets the background color of the hover label. By default uses the annotation's `bgcolor` made opaque, or white if it was transparent.    bordercolor  Parent: layout.annotations[].hoverlabel  Type: color Sets the border color of the hover label. By default uses either dark grey or white, for maximum contrast with `hoverlabel.bgcolor`.    font  Parent: layout.annotations[].hoverlabel Type: object containing one or more of the keys listed below. Sets the hover label text font. By default uses the global hover font and size, with color from `hoverlabel.bordercolor`.    color  Parent: layout.annotations[].hoverlabel.font  Type: color    family  Parent: layout.annotations[].hoverlabel.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.annotations[].hoverlabel.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.annotations[].hoverlabel.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.annotations[].hoverlabel.font  Type: number greater than or equal to 1    style  Parent: layout.annotations[].hoverlabel.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.annotations[].hoverlabel.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.annotations[].hoverlabel.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.annotations[].hoverlabel.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.        hovertext  Parent: layout.annotations[]  Type: string Sets text to appear when hovering over this annotation. If omitted or blank, no hover label will appear.    name  Parent: layout.annotations[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    opacity  Parent: layout.annotations[]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the annotation (text + arrow).    showarrow  Parent: layout.annotations[]  Type: boolean Default: true Determines whether or not the annotation is drawn with an arrow. If "true", `text` is placed near the arrow's tail. If "false", `text` lines up with the `x` and `y` provided.    standoff  Parent: layout.annotations[]  Type: number greater than or equal to 0 Default: 0 Sets a distance, in pixels, to move the end arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the `ax` / `ay` vector, in contrast to `xshift` / `yshift` which moves everything by this amount.    startarrowhead  Parent: layout.annotations[]  Type: integer between or equal to 0 and 8 Default: 1 Sets the start annotation arrow head style.    startarrowsize  Parent: layout.annotations[]  Type: number greater than or equal to 0.3 Default: 1 Sets the size of the start annotation arrow head, relative to `arrowwidth`. A value of 1 (default) gives a head about 3x as wide as the line.    startstandoff  Parent: layout.annotations[]  Type: number greater than or equal to 0 Default: 0 Sets a distance, in pixels, to move the start arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the `ax` / `ay` vector, in contrast to `xshift` / `yshift` which moves everything by this amount.    templateitemname  Parent: layout.annotations[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    text  Parent: layout.annotations[]  Type: string Sets the text associated with this annotation. Plotly uses a subset of HTML tags to do things like newline (<br>), bold (<b></b>), italics (<i></i>), hyperlinks (<a href='...'></a>). Tags <em>, <sup>, <sub>, <s>, <u> <span> are also supported.    textangle  Parent: layout.annotations[]  Type: angle Default: 0 Sets the angle at which the `text` is drawn with respect to the horizontal.    valign  Parent: layout.annotations[]  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Default: "middle" Sets the vertical alignment of the `text` within the box. Has an effect only if an explicit height is set to override the text height.    visible  Parent: layout.annotations[]  Type: boolean Default: true Determines whether or not this annotation is visible.    width  Parent: layout.annotations[]  Type: number greater than or equal to 1 Sets an explicit width for the text box. null (default) lets the text set the box width. Wider text will be clipped. There is no automatic wrapping; use <br> to start a new line.    x  Parent: layout.annotations[]  Type: number or categorical coordinate string Sets the annotation's x position. If the axis `type` is "log", then you must take the log of your desired range. If the axis `type` is "date", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is "category", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.    xanchor  Parent: layout.annotations[]  Type: enumerated , one of ( "auto" | "left" | "center" | "right" ) Default: "auto" Sets the text box's horizontal position anchor This anchor binds the `x` position to the "left", "center" or "right" of the annotation. For example, if `x` is set to 1, `xref` to "paper" and `xanchor` to "right" then the right-most portion of the annotation lines up with the right-most edge of the plotting area. If "auto", the anchor is equivalent to "center" for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.    xclick  Parent: layout.annotations[]  Type: number or categorical coordinate string Toggle this annotation when clicking a data point whose `x` value is `xclick` rather than the annotation's `x` value.    xref  Parent: layout.annotations[]  Type: enumerated , one of ( "paper" | "/^x([2-9]|[1-9][0-9]+)?( domain)?$/" ) Sets the annotation's x coordinate axis. If set to a x axis id (e.g. "x" or "x2"), the `x` position refers to a x coordinate. If set to "paper", the `x` position refers to the distance from the left of the plotting area in normalized coordinates where "0" ("1") corresponds to the left (right). If set to a x axis ID followed by "domain" (separated by a space), the position behaves like for "paper", but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., "x2 domain" refers to the domain of the second x axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis.    xshift  Parent: layout.annotations[]  Type: number Default: 0 Shifts the position of the whole annotation and arrow to the right (positive) or left (negative) by this many pixels.    y  Parent: layout.annotations[]  Type: number or categorical coordinate string Sets the annotation's y position. If the axis `type` is "log", then you must take the log of your desired range. If the axis `type` is "date", it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is "category", it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.    yanchor  Parent: layout.annotations[]  Type: enumerated , one of ( "auto" | "top" | "middle" | "bottom" ) Default: "auto" Sets the text box's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the annotation. For example, if `y` is set to 1, `yref` to "paper" and `yanchor` to "top" then the top-most portion of the annotation lines up with the top-most edge of the plotting area. If "auto", the anchor is equivalent to "middle" for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.    yclick  Parent: layout.annotations[]  Type: number or categorical coordinate string Toggle this annotation when clicking a data point whose `y` value is `yclick` rather than the annotation's `y` value.    yref  Parent: layout.annotations[]  Type: enumerated , one of ( "paper" | "/^y([2-9]|[1-9][0-9]+)?( domain)?$/" ) Sets the annotation's y coordinate axis. If set to a y axis id (e.g. "y" or "y2"), the `y` position refers to a y coordinate. If set to "paper", the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where "0" ("1") corresponds to the bottom (top). If set to a y axis ID followed by "domain" (separated by a space), the position behaves like for "paper", but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., "y2 domain" refers to the domain of the second y axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis.    yshift  Parent: layout.annotations[]  Type: number Default: 0 Shifts the position of the whole annotation and arrow up (positive) or down (negative) by this many pixels.      shapes  Parent: layout Type: array of object where each object has one or more of the keys listed below.     editable  Parent: layout.shapes[]  Type: boolean Determines whether the shape could be activated for edit or not. Has no effect when the older editable shapes mode is enabled via `config.editable` or `config.edits.shapePosition`.    fillcolor  Parent: layout.shapes[]  Type: color Default: "rgba(0,0,0,0)" Sets the color filling the shape's interior. Only applies to closed shapes.    fillrule  Parent: layout.shapes[]  Type: enumerated , one of ( "evenodd" | "nonzero" ) Default: "evenodd" Determines which regions of complex paths constitute the interior. For more info please visit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule    label  Parent: layout.shapes[] Type: object containing one or more of the keys listed below.    font  Parent: layout.shapes[].label Type: object containing one or more of the keys listed below. Sets the shape label text font.    color  Parent: layout.shapes[].label.font  Type: color    family  Parent: layout.shapes[].label.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.shapes[].label.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.shapes[].label.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.shapes[].label.font  Type: number greater than or equal to 1    style  Parent: layout.shapes[].label.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.shapes[].label.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.shapes[].label.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.shapes[].label.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      padding  Parent: layout.shapes[].label  Type: number greater than or equal to 0 Default: 3 Sets padding (in px) between edge of label and edge of shape.    text  Parent: layout.shapes[].label  Type: string Default: "" Sets the text to display with shape. It is also used for legend item if `name` is not provided.    textangle  Parent: layout.shapes[].label  Type: angle Default: "auto" Sets the angle at which the label text is drawn with respect to the horizontal. For lines, angle "auto" is the same angle as the line. For all other shapes, angle "auto" is horizontal.    textposition  Parent: layout.shapes[].label  Type: enumerated , one of ( "top left" | "top center" | "top right" | "middle left" | "middle center" | "middle right" | "bottom left" | "bottom center" | "bottom right" | "start" | "middle" | "end" ) Sets the position of the label text relative to the shape. Supported values for rectangles, circles and paths are "top left", "top center", "top right", "middle left", "middle center", "middle right", "bottom left", "bottom center", and "bottom right". Supported values for lines are "start", "middle", and "end". Default: "middle center" for rectangles, circles, and paths; "middle" for lines.    texttemplate  Parent: layout.shapes[].label  Type: string Default: "" Template string used for rendering the shape's label. Note that this will override `text`. Variables are inserted using %{variable}, for example "x0: %{x0}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{x0:$.2f}". See https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{x0|%m %b %Y}". See https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. A single multiplication or division operation may be applied to numeric variables, and combined with d3 number formatting, for example "Length in cm: %{x0"2.54}", "%{slope"60:.1f} meters per second." For log axes, variable values are given in log units. For date axes, x/y coordinate variables and center variables use datetimes, while all other variable values use values in ms. Finally, the template string has access to variables `x0`, `x1`, `y0`, `y1`, `slope`, `dx`, `dy`, `width`, `height`, `length`, `xcenter` and `ycenter`.    xanchor  Parent: layout.shapes[].label  Type: enumerated , one of ( "auto" | "left" | "center" | "right" ) Default: "auto" Sets the label's horizontal position anchor This anchor binds the specified `textposition` to the "left", "center" or "right" of the label text. For example, if `textposition` is set to "top right" and `xanchor` to "right" then the right-most portion of the label text lines up with the right-most edge of the shape.    yanchor  Parent: layout.shapes[].label  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets the label's vertical position anchor This anchor binds the specified `textposition` to the "top", "middle" or "bottom" of the label text. For example, if `textposition` is set to "top right" and `yanchor` to "top" then the top-most portion of the label text lines up with the top-most edge of the shape.      layer  Parent: layout.shapes[]  Type: enumerated , one of ( "below" | "above" | "between" ) Default: "above" Specifies whether shapes are drawn below gridlines ("below"), between gridlines and traces ("between") or above traces ("above").    legend  Parent: layout.shapes[]  Type: subplotid Default: legend Sets the reference to a legend to show this shape in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendgroup  Parent: layout.shapes[]  Type: string Default: "" Sets the legend group for this shape. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: layout.shapes[] Type: object containing one or more of the keys listed below.    font  Parent: layout.shapes[].legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: layout.shapes[].legendgrouptitle.font  Type: color    family  Parent: layout.shapes[].legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.shapes[].legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.shapes[].legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.shapes[].legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: layout.shapes[].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.shapes[].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.shapes[].legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.shapes[].legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: layout.shapes[].legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendrank  Parent: layout.shapes[]  Type: number Default: 1000 Sets the legend rank for this shape. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.    legendwidth  Parent: layout.shapes[]  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for this shape.    line  Parent: layout.shapes[] Type: object containing one or more of the keys listed below.    color  Parent: layout.shapes[].line  Type: color Sets the line color.    dash  Parent: layout.shapes[].line  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    width  Parent: layout.shapes[].line  Type: number greater than or equal to 0 Default: 2 Sets the line width (in px).      name  Parent: layout.shapes[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    opacity  Parent: layout.shapes[]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the shape.    path  Parent: layout.shapes[]  Type: string For `type` "path" - a valid SVG path with the pixel values replaced by data values in `xsizemode`/`ysizemode` being "scaled" and taken unmodified as pixels relative to `xanchor` and `yanchor` in case of "pixel" size mode. There are a few restrictions / quirks only absolute instructions, not relative. So the allowed segments are: M, L, H, V, Q, C, T, S, and Z arcs (A) are not allowed because radius rx and ry are relative. In the future we could consider supporting relative commands, but we would have to decide on how to handle date and log axes. Note that even as is, Q and C Bezier paths that are smooth on linear axes may not be smooth on log, and vice versa. no chained "polybezier" commands - specify the segment type for each one. On category axes, values are numbers scaled to the serial numbers of categories because using the categories themselves there would be no way to describe fractional positions On data axes: because space and T are both normal components of path strings, we can't use either to separate date from time parts. Therefore we'll use underscore for this purpose: 2015-02-21_13:45:56.789    showlegend  Parent: layout.shapes[]  Type: boolean Determines whether or not this shape is shown in the legend.    templateitemname  Parent: layout.shapes[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    type  Parent: layout.shapes[]  Type: enumerated , one of ( "circle" | "rect" | "path" | "line" ) Specifies the shape type to be drawn. If "line", a line is drawn from (`x0`,`y0`) to (`x1`,`y1`) with respect to the axes' sizing mode. If "circle", a circle is drawn from ((`x0`+`x1`)/2, (`y0`+`y1`)/2)) with radius (|(`x0`+`x1`)/2 - `x0`|, |(`y0`+`y1`)/2 -`y0`)|) with respect to the axes' sizing mode. If "rect", a rectangle is drawn linking (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`), (`x0`,`y1`), (`x0`,`y0`) with respect to the axes' sizing mode. If "path", draw a custom SVG path using `path`. with respect to the axes' sizing mode.    visible  Parent: layout.shapes[]  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not this shape is visible. If "legendonly", the shape is not drawn, but can appear as a legend item (provided that the legend itself is visible).    x0  Parent: layout.shapes[]  Type: number or categorical coordinate string Sets the shape's starting x position. See `type` and `xsizemode` for more info.    x0shift  Parent: layout.shapes[]  Type: number between or equal to -1 and 1 Default: 0 Shifts `x0` away from the center of the category when `xref` is a "category" or "multicategory" axis. -0.5 corresponds to the start of the category and 0.5 corresponds to the end of the category.    x1  Parent: layout.shapes[]  Type: number or categorical coordinate string Sets the shape's end x position. See `type` and `xsizemode` for more info.    x1shift  Parent: layout.shapes[]  Type: number between or equal to -1 and 1 Default: 0 Shifts `x1` away from the center of the category when `xref` is a "category" or "multicategory" axis. -0.5 corresponds to the start of the category and 0.5 corresponds to the end of the category.    xanchor  Parent: layout.shapes[]  Type: number or categorical coordinate string Only relevant in conjunction with `xsizemode` set to "pixel". Specifies the anchor point on the x axis to which `x0`, `x1` and x coordinates within `path` are relative to. E.g. useful to attach a pixel sized shape to a certain data value. No effect when `xsizemode` not set to "pixel".    xref  Parent: layout.shapes[]  Type: enumerated , one of ( "paper" | "/^x([2-9]|[1-9][0-9]+)?( domain)?$/" ) Sets the shape's x coordinate axis. If set to a x axis id (e.g. "x" or "x2"), the `x` position refers to a x coordinate. If set to "paper", the `x` position refers to the distance from the left of the plotting area in normalized coordinates where "0" ("1") corresponds to the left (right). If set to a x axis ID followed by "domain" (separated by a space), the position behaves like for "paper", but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., "x2 domain" refers to the domain of the second x axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis.    xsizemode  Parent: layout.shapes[]  Type: enumerated , one of ( "scaled" | "pixel" ) Default: "scaled" Sets the shapes's sizing mode along the x axis. If set to "scaled", `x0`, `x1` and x coordinates within `path` refer to data values on the x axis or a fraction of the plot area's width (`xref` set to "paper"). If set to "pixel", `xanchor` specifies the x position in terms of data or plot fraction but `x0`, `x1` and x coordinates within `path` are pixels relative to `xanchor`. This way, the shape can have a fixed width while maintaining a position relative to data or plot fraction.    y0  Parent: layout.shapes[]  Type: number or categorical coordinate string Sets the shape's starting y position. See `type` and `ysizemode` for more info.    y0shift  Parent: layout.shapes[]  Type: number between or equal to -1 and 1 Default: 0 Shifts `y0` away from the center of the category when `yref` is a "category" or "multicategory" axis. -0.5 corresponds to the start of the category and 0.5 corresponds to the end of the category.    y1  Parent: layout.shapes[]  Type: number or categorical coordinate string Sets the shape's end y position. See `type` and `ysizemode` for more info.    y1shift  Parent: layout.shapes[]  Type: number between or equal to -1 and 1 Default: 0 Shifts `y1` away from the center of the category when `yref` is a "category" or "multicategory" axis. -0.5 corresponds to the start of the category and 0.5 corresponds to the end of the category.    yanchor  Parent: layout.shapes[]  Type: number or categorical coordinate string Only relevant in conjunction with `ysizemode` set to "pixel". Specifies the anchor point on the y axis to which `y0`, `y1` and y coordinates within `path` are relative to. E.g. useful to attach a pixel sized shape to a certain data value. No effect when `ysizemode` not set to "pixel".    yref  Parent: layout.shapes[]  Type: enumerated , one of ( "paper" | "/^y([2-9]|[1-9][0-9]+)?( domain)?$/" ) Sets the shape's y coordinate axis. If set to a y axis id (e.g. "y" or "y2"), the `y` position refers to a y coordinate. If set to "paper", the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where "0" ("1") corresponds to the bottom (top). If set to a y axis ID followed by "domain" (separated by a space), the position behaves like for "paper", but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., "y2 domain" refers to the domain of the second y axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis.    ysizemode  Parent: layout.shapes[]  Type: enumerated , one of ( "scaled" | "pixel" ) Default: "scaled" Sets the shapes's sizing mode along the y axis. If set to "scaled", `y0`, `y1` and y coordinates within `path` refer to data values on the y axis or a fraction of the plot area's height (`yref` set to "paper"). If set to "pixel", `yanchor` specifies the y position in terms of data or plot fraction but `y0`, `y1` and y coordinates within `path` are pixels relative to `yanchor`. This way, the shape can have a fixed height while maintaining a position relative to data or plot fraction.      newshape  Parent: layout Type: object containing one or more of the keys listed below.    drawdirection  Parent: layout.newshape  Type: enumerated , one of ( "ortho" | "horizontal" | "vertical" | "diagonal" ) Default: "diagonal" When `dragmode` is set to "drawrect", "drawline" or "drawcircle" this limits the drag to be horizontal, vertical or diagonal. Using "diagonal" there is no limit e.g. in drawing lines in any direction. "ortho" limits the draw to be either horizontal or vertical. "horizontal" allows horizontal extend. "vertical" allows vertical extend.    fillcolor  Parent: layout.newshape  Type: color Default: "rgba(0,0,0,0)" Sets the color filling new shapes' interior. Please note that if using a fillcolor with alpha greater than half, drag inside the active shape starts moving the shape underneath, otherwise a new shape could be started over.    fillrule  Parent: layout.newshape  Type: enumerated , one of ( "evenodd" | "nonzero" ) Default: "evenodd" Determines the path's interior. For more info please visit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule    label  Parent: layout.newshape Type: object containing one or more of the keys listed below.    font  Parent: layout.newshape.label Type: object containing one or more of the keys listed below. Sets the new shape label text font.    color  Parent: layout.newshape.label.font  Type: color    family  Parent: layout.newshape.label.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.newshape.label.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.newshape.label.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.newshape.label.font  Type: number greater than or equal to 1    style  Parent: layout.newshape.label.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.newshape.label.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.newshape.label.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.newshape.label.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      padding  Parent: layout.newshape.label  Type: number greater than or equal to 0 Default: 3 Sets padding (in px) between edge of label and edge of new shape.    text  Parent: layout.newshape.label  Type: string Default: "" Sets the text to display with the new shape. It is also used for legend item if `name` is not provided.    textangle  Parent: layout.newshape.label  Type: angle Default: "auto" Sets the angle at which the label text is drawn with respect to the horizontal. For lines, angle "auto" is the same angle as the line. For all other shapes, angle "auto" is horizontal.    textposition  Parent: layout.newshape.label  Type: enumerated , one of ( "top left" | "top center" | "top right" | "middle left" | "middle center" | "middle right" | "bottom left" | "bottom center" | "bottom right" | "start" | "middle" | "end" ) Sets the position of the label text relative to the new shape. Supported values for rectangles, circles and paths are "top left", "top center", "top right", "middle left", "middle center", "middle right", "bottom left", "bottom center", and "bottom right". Supported values for lines are "start", "middle", and "end". Default: "middle center" for rectangles, circles, and paths; "middle" for lines.    texttemplate  Parent: layout.newshape.label  Type: string Default: "" Template string used for rendering the new shape's label. Note that this will override `text`. Variables are inserted using %{variable}, for example "x0: %{x0}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{x0:$.2f}". See https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{x0|%m %b %Y}". See https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. A single multiplication or division operation may be applied to numeric variables, and combined with d3 number formatting, for example "Length in cm: %{x0"2.54}", "%{slope"60:.1f} meters per second." For log axes, variable values are given in log units. For date axes, x/y coordinate variables and center variables use datetimes, while all other variable values use values in ms. Finally, the template string has access to variables `x0`, `x1`, `y0`, `y1`, `slope`, `dx`, `dy`, `width`, `height`, `length`, `xcenter` and `ycenter`.    xanchor  Parent: layout.newshape.label  Type: enumerated , one of ( "auto" | "left" | "center" | "right" ) Default: "auto" Sets the label's horizontal position anchor This anchor binds the specified `textposition` to the "left", "center" or "right" of the label text. For example, if `textposition` is set to "top right" and `xanchor` to "right" then the right-most portion of the label text lines up with the right-most edge of the new shape.    yanchor  Parent: layout.newshape.label  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Sets the label's vertical position anchor This anchor binds the specified `textposition` to the "top", "middle" or "bottom" of the label text. For example, if `textposition` is set to "top right" and `yanchor` to "top" then the top-most portion of the label text lines up with the top-most edge of the new shape.      layer  Parent: layout.newshape  Type: enumerated , one of ( "below" | "above" | "between" ) Default: "above" Specifies whether new shapes are drawn below gridlines ("below"), between gridlines and traces ("between") or above traces ("above").    legend  Parent: layout.newshape  Type: subplotid Default: legend Sets the reference to a legend to show new shape in. References to these legends are "legend", "legend2", "legend3", etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.    legendgroup  Parent: layout.newshape  Type: string Default: "" Sets the legend group for new shape. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.    legendgrouptitle  Parent: layout.newshape Type: object containing one or more of the keys listed below.    font  Parent: layout.newshape.legendgrouptitle Type: object containing one or more of the keys listed below. Sets this legend group's title font.    color  Parent: layout.newshape.legendgrouptitle.font  Type: color    family  Parent: layout.newshape.legendgrouptitle.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.newshape.legendgrouptitle.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.newshape.legendgrouptitle.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.newshape.legendgrouptitle.font  Type: number greater than or equal to 1    style  Parent: layout.newshape.legendgrouptitle.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.newshape.legendgrouptitle.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.newshape.legendgrouptitle.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.newshape.legendgrouptitle.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      text  Parent: layout.newshape.legendgrouptitle  Type: string Default: "" Sets the title of the legend group.      legendrank  Parent: layout.newshape  Type: number Default: 1000 Sets the legend rank for new shape. Items and groups with smaller ranks are presented on top/left side while with "reversed" `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.    legendwidth  Parent: layout.newshape  Type: number greater than or equal to 0 Sets the width (in px or fraction) of the legend for new shape.    line  Parent: layout.newshape Type: object containing one or more of the keys listed below.    color  Parent: layout.newshape.line  Type: color Sets the line color. By default uses either dark grey or white to increase contrast with background color.    dash  Parent: layout.newshape.line  Type: string Default: "solid" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    width  Parent: layout.newshape.line  Type: number greater than or equal to 0 Default: 4 Sets the line width (in px).      name  Parent: layout.newshape  Type: string Sets new shape name. The name appears as the legend item.    opacity  Parent: layout.newshape  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of new shapes.    showlegend  Parent: layout.newshape  Type: boolean Determines whether or not new shape is shown in the legend.    visible  Parent: layout.newshape  Type: enumerated , one of ( true | false | "legendonly" ) Default: true Determines whether or not new shape is visible. If "legendonly", the shape is not drawn, but can appear as a legend item (provided that the legend itself is visible).      activeshape  Parent: layout Type: object containing one or more of the keys listed below.    fillcolor  Parent: layout.activeshape  Type: color Default: "rgb(255,0,255)" Sets the color filling the active shape' interior.    opacity  Parent: layout.activeshape  Type: number between or equal to 0 and 1 Default: 0.5 Sets the opacity of the active shape.      images  Parent: layout Type: array of object where each object has one or more of the keys listed below.     layer  Parent: layout.images[]  Type: enumerated , one of ( "below" | "above" ) Default: "above" Specifies whether images are drawn below or above traces. When `xref` and `yref` are both set to `paper`, image is drawn below the entire plot area.    name  Parent: layout.images[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    opacity  Parent: layout.images[]  Type: number between or equal to 0 and 1 Default: 1 Sets the opacity of the image.    sizex  Parent: layout.images[]  Type: number Default: 0 Sets the image container size horizontally. The image will be sized based on the `position` value. When `xref` is set to `paper`, units are sized relative to the plot width. When `xref` ends with ` domain`, units are sized relative to the axis width.    sizey  Parent: layout.images[]  Type: number Default: 0 Sets the image container size vertically. The image will be sized based on the `position` value. When `yref` is set to `paper`, units are sized relative to the plot height. When `yref` ends with ` domain`, units are sized relative to the axis height.    sizing  Parent: layout.images[]  Type: enumerated , one of ( "fill" | "contain" | "stretch" ) Default: "contain" Specifies which dimension of the image to constrain.    source  Parent: layout.images[]  Type: string Specifies the URL of the image to be used. The URL must be accessible from the domain where the plot code is run, and can be either relative or absolute.    templateitemname  Parent: layout.images[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    visible  Parent: layout.images[]  Type: boolean Default: true Determines whether or not this image is visible.    x  Parent: layout.images[]  Type: number or categorical coordinate string Default: 0 Sets the image's x position. When `xref` is set to `paper`, units are sized relative to the plot height. See `xref` for more info    xanchor  Parent: layout.images[]  Type: enumerated , one of ( "left" | "center" | "right" ) Default: "left" Sets the anchor for the x position    xref  Parent: layout.images[]  Type: enumerated , one of ( "paper" | "/^x([2-9]|[1-9][0-9]+)?( domain)?$/" ) Default: "paper" Sets the images's x coordinate axis. If set to a x axis id (e.g. "x" or "x2"), the `x` position refers to a x coordinate. If set to "paper", the `x` position refers to the distance from the left of the plotting area in normalized coordinates where "0" ("1") corresponds to the left (right). If set to a x axis ID followed by "domain" (separated by a space), the position behaves like for "paper", but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., "x2 domain" refers to the domain of the second x axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis.    y  Parent: layout.images[]  Type: number or categorical coordinate string Default: 0 Sets the image's y position. When `yref` is set to `paper`, units are sized relative to the plot height. See `yref` for more info    yanchor  Parent: layout.images[]  Type: enumerated , one of ( "top" | "middle" | "bottom" ) Default: "top" Sets the anchor for the y position.    yref  Parent: layout.images[]  Type: enumerated , one of ( "paper" | "/^y([2-9]|[1-9][0-9]+)?( domain)?$/" ) Default: "paper" Sets the images's y coordinate axis. If set to a y axis id (e.g. "y" or "y2"), the `y` position refers to a y coordinate. If set to "paper", the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where "0" ("1") corresponds to the bottom (top). If set to a y axis ID followed by "domain" (separated by a space), the position behaves like for "paper", but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., "y2 domain" refers to the domain of the second y axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis.      updatemenus  Parent: layout Type: array of object where each object has one or more of the keys listed below.     active  Parent: layout.updatemenus[]  Type: integer greater than or equal to -1 Default: 0 Determines which button (by index starting from 0) is considered active.    bgcolor  Parent: layout.updatemenus[]  Type: color Sets the background color of the update menu buttons.    bordercolor  Parent: layout.updatemenus[]  Type: color Default: "#BEC8D9" Sets the color of the border enclosing the update menu.    borderwidth  Parent: layout.updatemenus[]  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the border enclosing the update menu.    buttons  Parent: layout.updatemenus[] Type: array of object where each object has one or more of the keys listed below.     args  Parent: layout.updatemenus[].buttons[]  Type: array Sets the arguments values to be passed to the Plotly method set in `method` on click.    args2  Parent: layout.updatemenus[].buttons[]  Type: array Sets a 2nd set of `args`, these arguments values are passed to the Plotly method set in `method` when clicking this button while in the active state. Use this to create toggle buttons.    execute  Parent: layout.updatemenus[].buttons[]  Type: boolean Default: true When true, the API method is executed. When false, all other behaviors are the same and command execution is skipped. This may be useful when hooking into, for example, the `plotly_buttonclicked` method and executing the API command manually without losing the benefit of the updatemenu automatically binding to the state of the plot through the specification of `method` and `args`.    label  Parent: layout.updatemenus[].buttons[]  Type: string Default: "" Sets the text label to appear on the button.    method  Parent: layout.updatemenus[].buttons[]  Type: enumerated , one of ( "restyle" | "relayout" | "animate" | "update" | "skip" ) Default: "restyle" Sets the Plotly method to be called on click. If the `skip` method is used, the API updatemenu will function as normal but will perform no API calls and will not bind automatically to state updates. This may be used to create a component interface and attach to updatemenu events manually via JavaScript.    name  Parent: layout.updatemenus[].buttons[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: layout.updatemenus[].buttons[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    visible  Parent: layout.updatemenus[].buttons[]  Type: boolean Determines whether or not this button is visible.      direction  Parent: layout.updatemenus[]  Type: enumerated , one of ( "left" | "right" | "up" | "down" ) Default: "down" Determines the direction in which the buttons are laid out, whether in a dropdown menu or a row/column of buttons. For `left` and `up`, the buttons will still appear in left-to-right or top-to-bottom order respectively.    font  Parent: layout.updatemenus[] Type: object containing one or more of the keys listed below. Sets the font of the update menu button text.    color  Parent: layout.updatemenus[].font  Type: color    family  Parent: layout.updatemenus[].font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.updatemenus[].font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.updatemenus[].font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.updatemenus[].font  Type: number greater than or equal to 1    style  Parent: layout.updatemenus[].font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.updatemenus[].font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.updatemenus[].font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.updatemenus[].font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      name  Parent: layout.updatemenus[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    pad  Parent: layout.updatemenus[] Type: object containing one or more of the keys listed below. Sets the padding around the buttons or dropdown menu.    b  Parent: layout.updatemenus[].pad  Type: number Default: 0 The amount of padding (in px) along the bottom of the component.    l  Parent: layout.updatemenus[].pad  Type: number Default: 0 The amount of padding (in px) on the left side of the component.    r  Parent: layout.updatemenus[].pad  Type: number Default: 0 The amount of padding (in px) on the right side of the component.    t  Parent: layout.updatemenus[].pad  Type: number Default: 0 The amount of padding (in px) along the top of the component.      showactive  Parent: layout.updatemenus[]  Type: boolean Default: true Highlights active dropdown item or active button if true.    templateitemname  Parent: layout.updatemenus[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    type  Parent: layout.updatemenus[]  Type: enumerated , one of ( "dropdown" | "buttons" ) Default: "dropdown" Determines whether the buttons are accessible via a dropdown menu or whether the buttons are stacked horizontally or vertically    visible  Parent: layout.updatemenus[]  Type: boolean Determines whether or not the update menu is visible.    x  Parent: layout.updatemenus[]  Type: number between or equal to -2 and 3 Default: -0.05 Sets the x position (in normalized coordinates) of the update menu.    xanchor  Parent: layout.updatemenus[]  Type: enumerated , one of ( "auto" | "left" | "center" | "right" ) Default: "right" Sets the update menu's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the range selector.    y  Parent: layout.updatemenus[]  Type: number between or equal to -2 and 3 Default: 1 Sets the y position (in normalized coordinates) of the update menu.    yanchor  Parent: layout.updatemenus[]  Type: enumerated , one of ( "auto" | "top" | "middle" | "bottom" ) Default: "top" Sets the update menu's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the range selector.      sliders  Parent: layout Type: array of object where each object has one or more of the keys listed below.     active  Parent: layout.sliders[]  Type: number greater than or equal to 0 Default: 0 Determines which button (by index starting from 0) is considered active.    activebgcolor  Parent: layout.sliders[]  Type: color Default: "#dbdde0" Sets the background color of the slider grip while dragging.    bgcolor  Parent: layout.sliders[]  Type: color Default: "#f8fafc" Sets the background color of the slider.    bordercolor  Parent: layout.sliders[]  Type: color Default: "#bec8d9" Sets the color of the border enclosing the slider.    borderwidth  Parent: layout.sliders[]  Type: number greater than or equal to 0 Default: 1 Sets the width (in px) of the border enclosing the slider.    currentvalue  Parent: layout.sliders[] Type: object containing one or more of the keys listed below.    font  Parent: layout.sliders[].currentvalue Type: object containing one or more of the keys listed below. Sets the font of the current value label text.    color  Parent: layout.sliders[].currentvalue.font  Type: color    family  Parent: layout.sliders[].currentvalue.font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.sliders[].currentvalue.font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.sliders[].currentvalue.font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.sliders[].currentvalue.font  Type: number greater than or equal to 1    style  Parent: layout.sliders[].currentvalue.font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.sliders[].currentvalue.font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.sliders[].currentvalue.font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.sliders[].currentvalue.font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      offset  Parent: layout.sliders[].currentvalue  Type: number Default: 10 The amount of space, in pixels, between the current value label and the slider.    prefix  Parent: layout.sliders[].currentvalue  Type: string When currentvalue.visible is true, this sets the prefix of the label.    suffix  Parent: layout.sliders[].currentvalue  Type: string When currentvalue.visible is true, this sets the suffix of the label.    visible  Parent: layout.sliders[].currentvalue  Type: boolean Default: true Shows the currently-selected value above the slider.    xanchor  Parent: layout.sliders[].currentvalue  Type: enumerated , one of ( "left" | "center" | "right" ) Default: "left" The alignment of the value readout relative to the length of the slider.      font  Parent: layout.sliders[] Type: object containing one or more of the keys listed below. Sets the font of the slider step labels.    color  Parent: layout.sliders[].font  Type: color    family  Parent: layout.sliders[].font  Type: string HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include "Arial", "Balto", "Courier New", "Droid Sans", "Droid Serif", "Droid Sans Mono", "Gravitas One", "Old Standard TT", "Open Sans", "Overpass", "PT Sans Narrow", "Raleway", "Times New Roman".    lineposition  Parent: layout.sliders[].font  Type: flaglist string. Any combination of "under", "over", "through" joined with a "+" OR "none". Examples: "under", "over", "under+over", "under+over+through", "none" Default: "none" Sets the kind of decoration line(s) with text, such as an "under", "over" or "through" as well as combinations e.g. "under+over", etc.    shadow  Parent: layout.sliders[].font  Type: string Default: "none" Sets the shape and color of the shadow behind text. "auto" places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.    size  Parent: layout.sliders[].font  Type: number greater than or equal to 1    style  Parent: layout.sliders[].font  Type: enumerated , one of ( "normal" | "italic" ) Default: "normal" Sets whether a font should be styled with a normal or italic face from its family.    textcase  Parent: layout.sliders[].font  Type: enumerated , one of ( "normal" | "word caps" | "upper" | "lower" ) Default: "normal" Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.    variant  Parent: layout.sliders[].font  Type: enumerated , one of ( "normal" | "small-caps" | "all-small-caps" | "all-petite-caps" | "petite-caps" | "unicase" ) Default: "normal" Sets the variant of the font.    weight  Parent: layout.sliders[].font  Type: integer between or equal to 1 and 1000 Default: normal Sets the weight (or boldness) of the font.      len  Parent: layout.sliders[]  Type: number greater than or equal to 0 Default: 1 Sets the length of the slider This measure excludes the padding of both ends. That is, the slider's length is this length minus the padding on both ends.    lenmode  Parent: layout.sliders[]  Type: enumerated , one of ( "fraction" | "pixels" ) Default: "fraction" Determines whether this slider length is set in units of plot "fraction" or in "pixels. Use `len` to set the value.    minorticklen  Parent: layout.sliders[]  Type: number greater than or equal to 0 Default: 4 Sets the length in pixels of minor step tick marks    name  Parent: layout.sliders[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    pad  Parent: layout.sliders[] Type: object containing one or more of the keys listed below. Set the padding of the slider component along each side.    b  Parent: layout.sliders[].pad  Type: number Default: 0 The amount of padding (in px) along the bottom of the component.    l  Parent: layout.sliders[].pad  Type: number Default: 0 The amount of padding (in px) on the left side of the component.    r  Parent: layout.sliders[].pad  Type: number Default: 0 The amount of padding (in px) on the right side of the component.    t  Parent: layout.sliders[].pad  Type: number Default: 20 The amount of padding (in px) along the top of the component.      steps  Parent: layout.sliders[] Type: array of object where each object has one or more of the keys listed below.     args  Parent: layout.sliders[].steps[]  Type: array Sets the arguments values to be passed to the Plotly method set in `method` on slide.    execute  Parent: layout.sliders[].steps[]  Type: boolean Default: true When true, the API method is executed. When false, all other behaviors are the same and command execution is skipped. This may be useful when hooking into, for example, the `plotly_sliderchange` method and executing the API command manually without losing the benefit of the slider automatically binding to the state of the plot through the specification of `method` and `args`.    label  Parent: layout.sliders[].steps[]  Type: string Sets the text label to appear on the slider    method  Parent: layout.sliders[].steps[]  Type: enumerated , one of ( "restyle" | "relayout" | "animate" | "update" | "skip" ) Default: "restyle" Sets the Plotly method to be called when the slider value is changed. If the `skip` method is used, the API slider will function as normal but will perform no API calls and will not bind automatically to state updates. This may be used to create a component interface and attach to slider events manually via JavaScript.    name  Parent: layout.sliders[].steps[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    templateitemname  Parent: layout.sliders[].steps[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    value  Parent: layout.sliders[].steps[]  Type: string Sets the value of the slider step, used to refer to the step programatically. Defaults to the slider label if not provided.    visible  Parent: layout.sliders[].steps[]  Type: boolean Default: true Determines whether or not this step is included in the slider.      templateitemname  Parent: layout.sliders[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    tickcolor  Parent: layout.sliders[]  Type: color Default: "#333" Sets the color of the border enclosing the slider.    ticklen  Parent: layout.sliders[]  Type: number greater than or equal to 0 Default: 7 Sets the length in pixels of step tick marks    tickwidth  Parent: layout.sliders[]  Type: number greater than or equal to 0 Default: 1 Sets the tick width (in px).    transition  Parent: layout.sliders[] Type: object containing one or more of the keys listed below.    duration  Parent: layout.sliders[].transition  Type: number greater than or equal to 0 Default: 150 Sets the duration of the slider transition    easing  Parent: layout.sliders[].transition  Type: enumerated , one of ( "linear" | "quad" | "cubic" | "sin" | "exp" | "circle" | "elastic" | "back" | "bounce" | "linear-in" | "quad-in" | "cubic-in" | "sin-in" | "exp-in" | "circle-in" | "elastic-in" | "back-in" | "bounce-in" | "linear-out" | "quad-out" | "cubic-out" | "sin-out" | "exp-out" | "circle-out" | "elastic-out" | "back-out" | "bounce-out" | "linear-in-out" | "quad-in-out" | "cubic-in-out" | "sin-in-out" | "exp-in-out" | "circle-in-out" | "elastic-in-out" | "back-in-out" | "bounce-in-out" ) Default: "cubic-in-out" Sets the easing function of the slider transition      visible  Parent: layout.sliders[]  Type: boolean Default: true Determines whether or not the slider is visible.    x  Parent: layout.sliders[]  Type: number between or equal to -2 and 3 Default: 0 Sets the x position (in normalized coordinates) of the slider.    xanchor  Parent: layout.sliders[]  Type: enumerated , one of ( "auto" | "left" | "center" | "right" ) Default: "left" Sets the slider's horizontal position anchor. This anchor binds the `x` position to the "left", "center" or "right" of the range selector.    y  Parent: layout.sliders[]  Type: number between or equal to -2 and 3 Default: 0 Sets the y position (in normalized coordinates) of the slider.    yanchor  Parent: layout.sliders[]  Type: enumerated , one of ( "auto" | "top" | "middle" | "bottom" ) Default: "top" Sets the slider's vertical position anchor This anchor binds the `y` position to the "top", "middle" or "bottom" of the range selector.      selections  Parent: layout Type: array of object where each object has one or more of the keys listed below.     line  Parent: layout.selections[] Type: object containing one or more of the keys listed below.    color  Parent: layout.selections[].line  Type: color Sets the line color.    dash  Parent: layout.selections[].line  Type: string Default: "dot" Sets the dash style of lines. Set to a dash type string ("solid", "dot", "dash", "longdash", "dashdot", or "longdashdot") or a dash length list in px (eg "5px,10px,2px,2px").    width  Parent: layout.selections[].line  Type: number greater than or equal to 1 Default: 1 Sets the line width (in px).      name  Parent: layout.selections[]  Type: string When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.    opacity  Parent: layout.selections[]  Type: number between or equal to 0 and 1 Default: 0.7 Sets the opacity of the selection.    path  Parent: layout.selections[]  Type: string For `type` "path" - a valid SVG path similar to `shapes.path` in data coordinates. Allowed segments are: M, L and Z.    templateitemname  Parent: layout.selections[]  Type: string Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.    type  Parent: layout.selections[]  Type: enumerated , one of ( "rect" | "path" ) Specifies the selection type to be drawn. If "rect", a rectangle is drawn linking (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`) and (`x0`,`y1`). If "path", draw a custom SVG path using `path`.    x0  Parent: layout.selections[]  Type: number or categorical coordinate string Sets the selection's starting x position.    x1  Parent: layout.selections[]  Type: number or categorical coordinate string Sets the selection's end x position.    xref  Parent: layout.selections[]  Type: enumerated , one of ( "paper" | "/^x([2-9]|[1-9][0-9]+)?( domain)?$/" ) Sets the selection's x coordinate axis. If set to a x axis id (e.g. "x" or "x2"), the `x` position refers to a x coordinate. If set to "paper", the `x` position refers to the distance from the left of the plotting area in normalized coordinates where "0" ("1") corresponds to the left (right). If set to a x axis ID followed by "domain" (separated by a space), the position behaves like for "paper", but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., "x2 domain" refers to the domain of the second x axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis.    y0  Parent: layout.selections[]  Type: number or categorical coordinate string Sets the selection's starting y position.    y1  Parent: layout.selections[]  Type: number or categorical coordinate string Sets the selection's end y position.    yref  Parent: layout.selections[]  Type: enumerated , one of ( "paper" | "/^y([2-9]|[1-9][0-9]+)?( domain)?$/" ) Sets the selection's x coordinate axis. If set to a y axis id (e.g. "y" or "y2"), the `y` position refers to a y coordinate. If set to "paper", the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where "0" ("1") corresponds to the bottom (top). If set to a y axis ID followed by "domain" (separated by a space), the position behaves like for "paper", but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., "y2 domain" refers to the domain of the second y axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis.      hidesources  Parent: layout  Type: boolean Determines whether or not a text link citing the data source is placed at the bottom-right cored of the figure. Has only an effect only on graphs that have been generated via forked graphs from the Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise).  

    
    








   scattergap  Parent: layout  Type: number between or equal to 0 and 1 Sets the gap (in plot fraction) between scatter points of adjacent location coordinates. Defaults to `bargap`.    scattermode  Parent: layout  Type: enumerated , one of ( "group" | "overlay" ) Default: "overlay" Determines how scatter points at the same location coordinate are displayed on the graph. With "group", the scatter points are plotted next to one another centered around the shared location. With "overlay", the scatter points are plotted over one another, you might need to reduce "opacity" to see multiple scatter points.  

    
    
    








   barcornerradius  Parent: layout  Type: number or categorical coordinate string Sets the rounding of bar corners. May be an integer number of pixels, or a percentage of bar width (as a string ending in %).    bargap  Parent: layout  Type: number between or equal to 0 and 1 Sets the gap (in plot fraction) between bars of adjacent location coordinates.    bargroupgap  Parent: layout  Type: number between or equal to 0 and 1 Default: 0 Sets the gap (in plot fraction) between bars of the same location coordinate.    barmode  Parent: layout  Type: enumerated , one of ( "stack" | "group" | "overlay" | "relative" ) Default: "group" Determines how bars at the same location coordinate are displayed on the graph. With "stack", the bars are stacked on top of one another With "relative", the bars are stacked on top of one another, with negative values below the axis, positive values above With "group", the bars are plotted next to one another centered around the shared location. With "overlay", the bars are plotted over one another, you might need to reduce "opacity" to see multiple bars.    barnorm  Parent: layout  Type: enumerated , one of ( "" | "fraction" | "percent" ) Default: "" Sets the normalization for bar traces on the graph. With "fraction", the value of each bar is divided by the sum of all values at that location coordinate. "percent" is the same but multiplied by 100 to show percentages.  

    
    
    








   extendpiecolors  Parent: layout  Type: boolean Default: true If `true`, the pie slice colors (whether given by `piecolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.    hiddenlabels  Parent: layout  Type: data array hiddenlabels is the funnelarea & pie chart analog of visible:'legendonly' but it can contain many labels, and can simultaneously hide slices from several pies/funnelarea charts    piecolorway  Parent: layout  Type: colorlist Sets the default pie slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendpiecolors`.  

    
    
    








   boxgap  Parent: layout  Type: number between or equal to 0 and 1 Default: 0.3 Sets the gap (in plot fraction) between boxes of adjacent location coordinates. Has no effect on traces that have "width" set.    boxgroupgap  Parent: layout  Type: number between or equal to 0 and 1 Default: 0.3 Sets the gap (in plot fraction) between boxes of the same location coordinate. Has no effect on traces that have "width" set.    boxmode  Parent: layout  Type: enumerated , one of ( "group" | "overlay" ) Default: "overlay" Determines how boxes at the same location coordinate are displayed on the graph. If "group", the boxes are plotted next to one another centered around the shared location. If "overlay", the boxes are plotted over one another, you might need to set "opacity" to see them multiple boxes. Has no effect on traces that have "width" set.  

    
    
    








   violingap  Parent: layout  Type: number between or equal to 0 and 1 Default: 0.3 Sets the gap (in plot fraction) between violins of adjacent location coordinates. Has no effect on traces that have "width" set.    violingroupgap  Parent: layout  Type: number between or equal to 0 and 1 Default: 0.3 Sets the gap (in plot fraction) between violins of the same location coordinate. Has no effect on traces that have "width" set.    violinmode  Parent: layout  Type: enumerated , one of ( "group" | "overlay" ) Default: "overlay" Determines how violins at the same location coordinate are displayed on the graph. If "group", the violins are plotted next to one another centered around the shared location. If "overlay", the violins are plotted over one another, you might need to set "opacity" to see them multiple violins. Has no effect on traces that have "width" set.  

    
    
    








   barcornerradius  Parent: layout  Type: number or categorical coordinate string Sets the rounding of bar corners. May be an integer number of pixels, or a percentage of bar width (as a string ending in %).    bargap  Parent: layout  Type: number between or equal to 0 and 1 Sets the gap (in plot fraction) between bars of adjacent location coordinates.    bargroupgap  Parent: layout  Type: number between or equal to 0 and 1 Default: 0 Sets the gap (in plot fraction) between bars of the same location coordinate.    barmode  Parent: layout  Type: enumerated , one of ( "stack" | "group" | "overlay" | "relative" ) Default: "group" Determines how bars at the same location coordinate are displayed on the graph. With "stack", the bars are stacked on top of one another With "relative", the bars are stacked on top of one another, with negative values below the axis, positive values above With "group", the bars are plotted next to one another centered around the shared location. With "overlay", the bars are plotted over one another, you might need to reduce "opacity" to see multiple bars.    barnorm  Parent: layout  Type: enumerated , one of ( "" | "fraction" | "percent" ) Default: "" Sets the normalization for bar traces on the graph. With "fraction", the value of each bar is divided by the sum of all values at that location coordinate. "percent" is the same but multiplied by 100 to show percentages.  

    
    
    








   boxgap  Parent: layout  Type: number between or equal to 0 and 1 Default: 0.3 Sets the gap (in plot fraction) between boxes of adjacent location coordinates. Has no effect on traces that have "width" set.    boxgroupgap  Parent: layout  Type: number between or equal to 0 and 1 Default: 0.3 Sets the gap (in plot fraction) between boxes of the same location coordinate. Has no effect on traces that have "width" set.    boxmode  Parent: layout  Type: enumerated , one of ( "group" | "overlay" ) Default: "overlay" Determines how boxes at the same location coordinate are displayed on the graph. If "group", the boxes are plotted next to one another centered around the shared location. If "overlay", the boxes are plotted over one another, you might need to set "opacity" to see them multiple boxes. Has no effect on traces that have "width" set.  

    
    
    








   waterfallgap  Parent: layout  Type: number between or equal to 0 and 1 Sets the gap (in plot fraction) between bars of adjacent location coordinates.    waterfallgroupgap  Parent: layout  Type: number between or equal to 0 and 1 Default: 0 Sets the gap (in plot fraction) between bars of the same location coordinate.    waterfallmode  Parent: layout  Type: enumerated , one of ( "group" | "overlay" ) Default: "group" Determines how bars at the same location coordinate are displayed on the graph. With "group", the bars are plotted next to one another centered around the shared location. With "overlay", the bars are plotted over one another, you might need to reduce "opacity" to see multiple bars.  

    
    
    








   funnelgap  Parent: layout  Type: number between or equal to 0 and 1 Sets the gap (in plot fraction) between bars of adjacent location coordinates.    funnelgroupgap  Parent: layout  Type: number between or equal to 0 and 1 Default: 0 Sets the gap (in plot fraction) between bars of the same location coordinate.    funnelmode  Parent: layout  Type: enumerated , one of ( "stack" | "group" | "overlay" ) Default: "stack" Determines how bars at the same location coordinate are displayed on the graph. With "stack", the bars are stacked on top of one another With "group", the bars are plotted next to one another centered around the shared location. With "overlay", the bars are plotted over one another, you might need to reduce "opacity" to see multiple bars.  

    
    
    








   extendfunnelareacolors  Parent: layout  Type: boolean Default: true If `true`, the funnelarea slice colors (whether given by `funnelareacolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.    funnelareacolorway  Parent: layout  Type: colorlist Sets the default funnelarea slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendfunnelareacolors`.    hiddenlabels  Parent: layout  Type: data array hiddenlabels is the funnelarea & pie chart analog of visible:'legendonly' but it can contain many labels, and can simultaneously hide slices from several pies/funnelarea charts  

    
    
    








   bargap  Parent: layout  Type: number between or equal to 0 and 1 Default: 0.1 Sets the gap between bars of adjacent location coordinates. Values are unitless, they represent fractions of the minimum difference in bar positions in the data.    barmode  Parent: layout  Type: enumerated , one of ( "stack" | "overlay" ) Default: "stack" Determines how bars at the same location coordinate are displayed on the graph. With "stack", the bars are stacked on top of one another With "overlay", the bars are plotted over one another, you might need to reduce "opacity" to see multiple bars.  

    
    
    








   extendsunburstcolors  Parent: layout  Type: boolean Default: true If `true`, the sunburst slice colors (whether given by `sunburstcolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.    sunburstcolorway  Parent: layout  Type: colorlist Sets the default sunburst slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendsunburstcolors`.  

    
    
    








   extendtreemapcolors  Parent: layout  Type: boolean Default: true If `true`, the treemap slice colors (whether given by `treemapcolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.    treemapcolorway  Parent: layout  Type: colorlist Sets the default treemap slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendtreemapcolors`.  

    
    
    








   extendiciclecolors  Parent: layout  Type: boolean Default: true If `true`, the icicle slice colors (whether given by `iciclecolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.    iciclecolorway  Parent: layout  Type: colorlist Sets the default icicle slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendiciclecolors`.\n\n\n\nEdit chart
        
    

    
        
            
                
            
                
            
                
            
                
            
                
            
                
            
                
            
        
        Loading graph\n\nEdit chart
        
    

    
        
            
                
            
                
            
                
            
                
            
                
            
                
            
                
            
        
        Loading graph\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            

            

            

            
            
            
        
    
    


                
                


    
        
        

            
                Plotly JavaScript Open Source Graphing Library
                
                    Built on top of d3.js and stack.gl, Plotly.js is a high-level, declarative charting library. plotly.js ships with over 40 chart types, including 3D charts, statistical graphs, and SVG maps.
                    plotly.js is free and open source and you can view the source, report issues or contribute on GitHub.
                
            
        
        
          
            

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




            
            
                Read more about plotly.js features
                

                

                    
                        Sophisticated chart types
                    
                    
                        plotly.js abstracts the types of statistical and scientific charts that you would find in packages like matplotlib, ggplot2, or MATLAB.
                    

                    
                    
                        
                    
                    d3.json('https://plotly.com/~DanielCarrera/13.json', function(figure){
                  var trace = {
                    x: figure.data[0].x, y: figure.data[0].y, z: figure.data[0].z,
                    type: 'contour', autocolorscale: false,
                    colorscale: [[0,"rgb(  0,  0,  0)"],[0.3,"rgb(230,  0,  0)"],[0.6,"rgb(255,210,  0)"],[1,"rgb(255,255,255)"]],
                    reversescale: true, zmax: 2.5, zmin: -2.5
                  };
                  var layout = {
                    title: {
                      text: 'turbulence simulation'
                  },
                    xaxis: {
                      title: {
                          text: 'radial direction'
                      },
                      showline: true,
                      mirror: 'allticks',
                      ticks: 'inside'
                    },
                    yaxis: {
                        title: {
                            text: 'vertical direction'
                        },
                        showline: true,
                        mirror: 'allticks',
                        ticks: 'inside'
                    },
                    margin: {l: 40, b: 40, t: 60},
                    annotations: [{
                      showarrow: false,
                      text: 'Credit: Daniel Carrera',
                      x: 0, y: 0, xref: 'paper', yref: 'paper'
                    }]
                  }
                  Plotly.newPlot(document.getElementById('contour-plot'), [trace], layout, {showLink: false});
                });



                    Fully customizable
                    
                        plotly.js charts are described declaratively as JSON objects. Every aspect of the charts, such as colors, grid lines, and the legend, has a corresponding set of JSON attributes.
                        
                            view all of the available attributes
                        
                    

                    d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv', function(rows){
                    var trace = {
                      type: 'scatter',                    // set the chart type
                      mode: 'lines',                      // connect points with lines
                      x: rows.map(function(row){          // set the x-data
                        return row['Time'];
                      }),
                      y: rows.map(function(row){          // set the x-data
                        return row['10 Min Sampled Avg'];
                      }),
                      line: {                             // set the width of the line.
                        width: 1
                      },
                      error_y: {
                        array: rows.map(function(row){    // set the height of the error bars
                          return row['10 Min Std Dev'];
                        }),
                        thickness: 0.5,                   // set the thickness of the error bars
                        width: 0
                      }
                    };

                    var layout = {
                      yaxis: {
                        title: {
                          text: "Wind Speed"
                        }
                      },       // set the y axis title
                      xaxis: {
                        showgrid: false,                  // remove the x-axis grid lines
                        tickformat: "%B, %Y"              // customize the date format to "month, day"
                      },
                      margin: {                           // update the left, bottom, right, top margin
                        l: 40, b: 10, r: 10, t: 20
                      }
                    };

                    Plotly.newPlot(document.getElementById('wind-speed'), [trace], layout, {showLink: false});
                });



                    High performance
                    
                        
                            Most plotly graphs are drawn with SVG. This offers great compatibility across browsers and publication-quality vector image export. Unfortunately, there are inherent performance limitations with the number of SVG elements that you can draw in the DOM.
                            plotly.js uses stack.gl for high performance 2D and 3D charting.
                        
                        
                            
                                
                            
                            
                                This chart was drawn with the plotly.js chart type scattergl. scattergl charts render an order of magnitude faster than their SVG counterparts.
                            
                        
                        
                            
                                
                                
                                
                            
                            
                                All 3D charts in plotly.js are rendered with WebGL, leveraging the power of the GPU for fast interactivity.
                                view the interactive version
                            
                        
                    
                    Universal
                    
                        By abstracting charts to a declarative JSON structure, plotly.js is used as a browser-based charting library for Python, R, MATLAB.
                    

                
                
            
          


        
    


















    
        Fundamentals

        
        More Fundamentals »
        
    
    
        

            
                    
                    

    
        Configuration Options
        
            View Tutorial
            
        
    


                
                    
                    

    
        Responsive / Fluid Layouts
        
            View Tutorial
            
        
    


                
                    
                    

    
        uirevision in Plotly.react
        
            View Tutorial
            
        
    


                
                    
                    

    
        React Plotly.js
        
            View Tutorial
            
        
    


                
                    
                    

    
        Analytical Apps with Dash
        
            View Tutorial
            
        
    


                
    










    
        Basic Charts

        
        More Basic Charts »
        
    
    
        

            

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Scatter Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Line Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bar Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Pie Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bubble Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
    





    
        Statistical Charts

        
        More Statistical Charts »
        
    
    
        

            
                    
                    

    
        Error Bars
        
            View Tutorial
            
        
    


                
                    
                    

    
        Box Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        2d Density Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Continuous Error Bars
        
            View Tutorial
            
        
    


                
    





    
        Scientific Charts

        
        More Scientific Charts »
        
    
    
        

            
                    
                    

    
        Contour Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Heatmaps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ternary Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Parallel Coordinates Plot
        
            View Tutorial
            
        
    


                
                    
                    

    
        Log Plots
        
            View Tutorial
            
        
    


                
    





    
        Financial Charts

        
        More Financial Charts »
        
    
    
        

            
                    
                    

    
        Waterfall Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Indicators
        
            View Tutorial
            
        
    


                
                    
                    

    
        Candlestick Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Funnel and Funnelarea Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Time Series
        
            View Tutorial
            
        
    


                
    





    
        Maps

        
        More Maps »
        
    
    
        

            
                    
                    

    
        Migrate to Maplibre
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Map Layers
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Density Heatmap
        
            View Tutorial
            
        
    


                
                    
                    

    
        Choropleth Tile Map
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lines on Maps
        
            View Tutorial
            
        
    


                
    










    
        3D Charts

        
        More 3D Charts »
        
    
    
        

            
                    
                    

    
        3D Scatter Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ribbon Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Surface Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Mesh Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Line Plots
        
            View Tutorial
            
        
    


                
    





    
        Subplots

        
        More Subplots »
        
    
    
        

            
                    
                    

    
        Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Inset Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Mixed Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Table Subplots
        
            View Tutorial
            
        
    


                
    









    
        Custom Chart Events

        
    
    
        

            
                    
                    

    
        Click Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Hover Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Zoom Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Disable Zoom Events
        
            View Tutorial
            
        
    


                
    





    
        Add Custom Controls

        
        More Controls »
        
    
    
        

            
                    
                    

    
        Dropdown Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Button Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Slider Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lasso Selection
        
            View Tutorial
            
        
    


                
                    
                    

    
        Range Slider and Selector
        
            View Tutorial
            
        
    


                
    





    
        Animations

        
    
    
        

            
                    
                    

    
        Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Adding Sliders to Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Filled-Area Animation
        
            View Tutorial
            
        
    


                
                    
                    

    
        Map Animation
        
            View Tutorial\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Fundamentals
            
            
            
        
    
    


                
                
	
		
		

			
				Plotly.js Fundamentals
				Plotly.js makes interactive, publication-quality graphs online. Tutorials and tips about fundamental features of Plotly JS
				

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




			
		
	


		
        



































































    

        

    
    
        

            

    
        Configuration Options
        
            View Tutorial
            
        
    




            

            

    
        Responsive / Fluid Layouts
        
            View Tutorial
            
        
    




            

            

    
        uirevision in Plotly.react
        
            View Tutorial
            
        
    




            

            

    
        React Plotly.js
        
            View Tutorial
            
        
    




            

            

    
        Analytical Apps with Dash
        
            View Tutorial
            
        
    




            

            

    
        Colorscales
        
            View Tutorial
            
        
    




            

            

    
        Colorway
        
            View Tutorial
            
        
    




            

            

    
        Images
        
            View Tutorial
            
        
    




            

            

    
        LaTeX
        
            View Tutorial
            
        
    




            

            

    
        Styling Markers
        
            View Tutorial
            
        
    




            

            

    
        3D Axes
        
            View Tutorial
            
        
    




            

            

    
        3D Hover Options
        
            View Tutorial
            
        
    




            

            

    
        3D Surface Lighting
        
            View Tutorial
            
        
    




            

            

    
        Axes
        
            View Tutorial
            
        
    




            

            

    
        Horizontal Legends
        
            View Tutorial
            
        
    




            

            

    
        Hover Text and Formatting
        
            View Tutorial
            
        
    




            

            

    
        Setting the Title, Legend Entries, and Axis Titles
        
            View Tutorial
            
        
    




            

            

    
        Layout Template Examples
        
            View Tutorial
            
        
    




            

            

    
        Legends
        
            View Tutorial
            
        
    




            

            

    
        Setting Graph Size
        
            View Tutorial
            
        
    




            

            

    
        Formatting Ticks
        
            View Tutorial
            
        
    




            

            

    
        Shapes
        
            View Tutorial
            
        
    




            

            

    
        Text Template
        
            View Tutorial
            
        
    




            

            

    
        Static Image Export
        
            View Tutorial
            
        
    




            

            

    
        Text and Annotations
        
            View Tutorial
            
        
    




            

            

    
        Version 3 Changes
        
            View Tutorial\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Fundamentals
            
            
                > Responsive / Fluid Layouts
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Responsive / Fluid Layouts
                  
                  in 
                  JavaScript
                  
                  
                
                How to create figures with responsive/fluid layouts in JavaScript. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Responsive Plots
          
        

        
          
            
              If you set the responsive attribute equal to true (using the config object), then your figures will be automatically resized when the browser window size changes. This is an especially useful feature for charts which are going to viewed on mobile devices!

            
            
              
                var trace1 = {
  type: 'bar',
  x: [1, 2, 3, 4],
  y: [5, 10, 2, 8],
  marker: {
      color: '#C8A2C8',
      line: {
          width: 2.5
      }
  }
};

var data = [ trace1 ];

var layout = {
  title: {
    text: 'Responsive to window\'s size!'
  },
  font: {size: 18}
};

var config = {responsive: true}

Plotly.newPlot('myDiv', data, layout, config );\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Fundamentals
            
            
                > uirevision in Plotly.react
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  uirevision in Plotly.react
                  
                  in 
                  JavaScript
                  
                  
                
                Persist user interactions using uirevision with Plotly.react or Dash. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Persist User Changes
          
        

        
          
            
              Adding a uirevision attribute and then keeping it the same during the next call to Plotly.react ensures that user
interactions persist.

            
            
              
                const rand = () => Math.random();
var x = [1, 2, 3, 4, 5];
const new_data = (trace) => Object.assign(trace, {y: x.map(rand)});

// add random data to three line traces
var data = [
	{mode:'lines', line: {color: "#b55400"}},
	{mode: 'lines', line: {color: "#393e46"}},
	{mode: 'lines', line: {color: "#222831"}}
].map(new_data);

var layout = {
	title: {text: 'User Zoom Persists<br>When uirevision Unchanged'},
	uirevision:'true',
	xaxis: {autorange: true},
	yaxis: {autorange: true}
};

Plotly.react('myDiv', data, layout);

var myPlot = document.getElementById('myDiv');

var cnt = 0;
var interval = setInterval(function() {
	data = data.map(new_data);

	// user interaction will mutate layout and set autorange to false
	// so we need to reset it to true
	layout.xaxis.autorange = true;
	layout.yaxis.autorange = true;

	// not changing uirevision will ensure that user interactions are unchanged
	// layout.uirevision = rand();

	Plotly.react('myDiv', data, layout);
	if(cnt === 100) clearInterval(interval);
}, 2500);

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Reset User Changes
          
        

        
          
            
              Changing the uirevision attribute during a Plotly.react call will reset previous user interactions in the updated plot.

            
            
              
                const rand = () => Math.random();
var x = [1, 2, 3, 4, 5];
const new_data = (trace) => Object.assign(trace, {y: x.map(rand)});

// add random data to three line traces
var data = [
	{mode:'lines', line: {color: "#b55400"}},
	{mode: 'lines', line: {color: "#393e46"}},
	{mode: 'lines', line: {color: "#222831"}}
].map(new_data);

var layout = {
	title: {text: 'User Zoom Resets<br>When uirevision Changes'},
	uirevision:'true',
	xaxis: {autorange: true},
	yaxis: {autorange: true}
};

Plotly.react('myDiv', data, layout);

var myPlot = document.getElementById('myDiv');

var cnt = 0;
var interval = setInterval(function() {
	data = data.map(new_data);

	// user interaction will mutate layout and set autorange to false
	// so we need to reset it to true
	layout.xaxis.autorange = true;
	layout.yaxis.autorange = true;

	// a new random number should ensure that uirevision will be different
	// and so the graph will autorange after the Plotly.react
	layout.uirevision = rand();

	Plotly.react('myDiv', data, layout);
  if(cnt === 100) clearInterval(interval);
}, 2500);\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Fundamentals
            
            
                > React Plotly.js
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  React Plotly.js
                  
                  in 
                  JavaScript
                  
                  
                
                How to use the Plotly.js React component. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Introduction
          
        

        
          
            
              Use react-plotly.js to embed D3 charts in your React-powered web application. This React component takes the chart type, data, and styling as Plotly JSON in its data and layout props, then draws the chart using Plotly.js. See below about how to get started with react-plotly.js.

            
            
            
          
          
        
    
    
      
        
          
            Installation
          
        

        
          
            
            
              
                $ npm install react-plotly.js plotly.js

              
            
            
          
          
        
    
    
      
        
          
            Quick Start
          
        

        
          
            
              The easiest way to use this component is to import and pass data to a plot component:

            
            
              
                import React from 'react';
import Plot from 'react-plotly.js';

class App extends React.Component {
  render() {
    return (
      <Plot
        data={[
          {
            x: [1, 2, 3],
            y: [2, 6, 3],
            type: 'scatter',
            mode: 'lines+markers',
            marker: {color: 'red'},
          },
          {type: 'bar', x: [1, 2, 3], y: [2, 5, 3]},
        ]}
        layout={ {width: 320, height: 240, title: {text: 'A Fancy Plot'}} }
      />
    );
  }
}

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Advanced Usage
          
        

        
          
            
              For information on more advanced usage patterns such as State Management or Customizing the plotly.js bundle please see the ReadMe for react-plotly.js.

            
            
            
          
          
        
    
    
      
        
          
            Props and Events
          
        

        
          
            
              More information about Props and Event Handlers can be found in the ReadMe for react-plotly.js.

            
            
            
          
          
        
    
    
      
        
          
            Plotly.js Chart Types and Attributes
          
        

        
          
            
              Click here for more information about Plotly Chart Types and Attributes.\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            

            

            

            
            
            
        
    
    


                
                


    
        
        

            
                Plotly JavaScript Open Source Graphing Library
                
                    Built on top of d3.js and stack.gl, Plotly.js is a high-level, declarative charting library. plotly.js ships with over 40 chart types, including 3D charts, statistical graphs, and SVG maps.
                    plotly.js is free and open source and you can view the source, report issues or contribute on GitHub.
                
            
        
        
          
            

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




            
            
                Read more about plotly.js features
                

                

                    
                        Sophisticated chart types
                    
                    
                        plotly.js abstracts the types of statistical and scientific charts that you would find in packages like matplotlib, ggplot2, or MATLAB.
                    

                    
                    
                        
                    
                    d3.json('https://plotly.com/~DanielCarrera/13.json', function(figure){
                  var trace = {
                    x: figure.data[0].x, y: figure.data[0].y, z: figure.data[0].z,
                    type: 'contour', autocolorscale: false,
                    colorscale: [[0,"rgb(  0,  0,  0)"],[0.3,"rgb(230,  0,  0)"],[0.6,"rgb(255,210,  0)"],[1,"rgb(255,255,255)"]],
                    reversescale: true, zmax: 2.5, zmin: -2.5
                  };
                  var layout = {
                    title: {
                      text: 'turbulence simulation'
                  },
                    xaxis: {
                      title: {
                          text: 'radial direction'
                      },
                      showline: true,
                      mirror: 'allticks',
                      ticks: 'inside'
                    },
                    yaxis: {
                        title: {
                            text: 'vertical direction'
                        },
                        showline: true,
                        mirror: 'allticks',
                        ticks: 'inside'
                    },
                    margin: {l: 40, b: 40, t: 60},
                    annotations: [{
                      showarrow: false,
                      text: 'Credit: Daniel Carrera',
                      x: 0, y: 0, xref: 'paper', yref: 'paper'
                    }]
                  }
                  Plotly.newPlot(document.getElementById('contour-plot'), [trace], layout, {showLink: false});
                });



                    Fully customizable
                    
                        plotly.js charts are described declaratively as JSON objects. Every aspect of the charts, such as colors, grid lines, and the legend, has a corresponding set of JSON attributes.
                        
                            view all of the available attributes
                        
                    

                    d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv', function(rows){
                    var trace = {
                      type: 'scatter',                    // set the chart type
                      mode: 'lines',                      // connect points with lines
                      x: rows.map(function(row){          // set the x-data
                        return row['Time'];
                      }),
                      y: rows.map(function(row){          // set the x-data
                        return row['10 Min Sampled Avg'];
                      }),
                      line: {                             // set the width of the line.
                        width: 1
                      },
                      error_y: {
                        array: rows.map(function(row){    // set the height of the error bars
                          return row['10 Min Std Dev'];
                        }),
                        thickness: 0.5,                   // set the thickness of the error bars
                        width: 0
                      }
                    };

                    var layout = {
                      yaxis: {
                        title: {
                          text: "Wind Speed"
                        }
                      },       // set the y axis title
                      xaxis: {
                        showgrid: false,                  // remove the x-axis grid lines
                        tickformat: "%B, %Y"              // customize the date format to "month, day"
                      },
                      margin: {                           // update the left, bottom, right, top margin
                        l: 40, b: 10, r: 10, t: 20
                      }
                    };

                    Plotly.newPlot(document.getElementById('wind-speed'), [trace], layout, {showLink: false});
                });



                    High performance
                    
                        
                            Most plotly graphs are drawn with SVG. This offers great compatibility across browsers and publication-quality vector image export. Unfortunately, there are inherent performance limitations with the number of SVG elements that you can draw in the DOM.
                            plotly.js uses stack.gl for high performance 2D and 3D charting.
                        
                        
                            
                                
                            
                            
                                This chart was drawn with the plotly.js chart type scattergl. scattergl charts render an order of magnitude faster than their SVG counterparts.
                            
                        
                        
                            
                                
                                
                                
                            
                            
                                All 3D charts in plotly.js are rendered with WebGL, leveraging the power of the GPU for fast interactivity.
                                view the interactive version
                            
                        
                    
                    Universal
                    
                        By abstracting charts to a declarative JSON structure, plotly.js is used as a browser-based charting library for Python, R, MATLAB.
                    

                
                
            
          


        
    


















    
        Fundamentals

        
        More Fundamentals »
        
    
    
        

            
                    
                    

    
        Configuration Options
        
            View Tutorial
            
        
    


                
                    
                    

    
        Responsive / Fluid Layouts
        
            View Tutorial
            
        
    


                
                    
                    

    
        uirevision in Plotly.react
        
            View Tutorial
            
        
    


                
                    
                    

    
        React Plotly.js
        
            View Tutorial
            
        
    


                
                    
                    

    
        Analytical Apps with Dash
        
            View Tutorial
            
        
    


                
    










    
        Basic Charts

        
        More Basic Charts »
        
    
    
        

            

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Scatter Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Line Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bar Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Pie Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bubble Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
    





    
        Statistical Charts

        
        More Statistical Charts »
        
    
    
        

            
                    
                    

    
        Error Bars
        
            View Tutorial
            
        
    


                
                    
                    

    
        Box Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        2d Density Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Continuous Error Bars
        
            View Tutorial
            
        
    


                
    





    
        Scientific Charts

        
        More Scientific Charts »
        
    
    
        

            
                    
                    

    
        Contour Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Heatmaps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ternary Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Parallel Coordinates Plot
        
            View Tutorial
            
        
    


                
                    
                    

    
        Log Plots
        
            View Tutorial
            
        
    


                
    





    
        Financial Charts

        
        More Financial Charts »
        
    
    
        

            
                    
                    

    
        Waterfall Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Indicators
        
            View Tutorial
            
        
    


                
                    
                    

    
        Candlestick Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Funnel and Funnelarea Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Time Series
        
            View Tutorial
            
        
    


                
    





    
        Maps

        
        More Maps »
        
    
    
        

            
                    
                    

    
        Migrate to Maplibre
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Map Layers
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Density Heatmap
        
            View Tutorial
            
        
    


                
                    
                    

    
        Choropleth Tile Map
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lines on Maps
        
            View Tutorial
            
        
    


                
    










    
        3D Charts

        
        More 3D Charts »
        
    
    
        

            
                    
                    

    
        3D Scatter Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ribbon Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Surface Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Mesh Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Line Plots
        
            View Tutorial
            
        
    


                
    





    
        Subplots

        
        More Subplots »
        
    
    
        

            
                    
                    

    
        Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Inset Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Mixed Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Table Subplots
        
            View Tutorial
            
        
    


                
    









    
        Custom Chart Events

        
    
    
        

            
                    
                    

    
        Click Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Hover Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Zoom Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Disable Zoom Events
        
            View Tutorial
            
        
    


                
    





    
        Add Custom Controls

        
        More Controls »
        
    
    
        

            
                    
                    

    
        Dropdown Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Button Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Slider Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lasso Selection
        
            View Tutorial
            
        
    


                
                    
                    

    
        Range Slider and Selector
        
            View Tutorial
            
        
    


                
    





    
        Animations

        
    
    
        

            
                    
                    

    
        Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Adding Sliders to Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Filled-Area Animation
        
            View Tutorial
            
        
    


                
                    
                    

    
        Map Animation
        
            View Tutorial\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Basic Charts
            
            
                > Scatter Plots
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Scatter Plots
                  
                  in 
                  JavaScript
                  
                  
                
                How to make D3.js-based line and scatter plots in JavaScript. Examples of basic and colored line and scatter plots. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Line and Scatter Plot
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3, 4],
  y: [10, 15, 13, 17],
  mode: 'markers',
  type: 'scatter'
};

var trace2 = {
  x: [2, 3, 4, 5],
  y: [16, 5, 11, 9],
  mode: 'lines',
  type: 'scatter'
};

var trace3 = {
  x: [1, 2, 3, 4],
  y: [12, 9, 15, 12],
  mode: 'lines+markers',
  type: 'scatter'
};

var data = [trace1, trace2, trace3];

Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Data Labels Hover
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3, 4, 5],
  y: [1, 6, 3, 6, 1],
  mode: 'markers',
  type: 'scatter',
  name: 'Team A',
  text: ['A-1', 'A-2', 'A-3', 'A-4', 'A-5'],
  marker: { size: 12 }
};

var trace2 = {
  x: [1.5, 2.5, 3.5, 4.5, 5.5],
  y: [4, 1, 7, 1, 4],
  mode: 'markers',
  type: 'scatter',
  name: 'Team B',
  text: ['B-a', 'B-b', 'B-c', 'B-d', 'B-e'],
  marker: { size: 12 }
};

var data = [ trace1, trace2 ];

var layout = {
  xaxis: {
    range: [ 0.75, 5.25 ]
  },
  yaxis: {
    range: [0, 8]
  },
  title: {text: 'Data Labels Hover'}
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Data Labels on The Plot
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3, 4, 5],
  y: [1, 6, 3, 6, 1],
  mode: 'markers+text',
  type: 'scatter',
  name: 'Team A',
  text: ['A-1', 'A-2', 'A-3', 'A-4', 'A-5'],
  textposition: 'top center',
  textfont: {
    family:  'Raleway, sans-serif'
  },
  marker: { size: 12 }
};

var trace2 = {
  x: [1.5, 2.5, 3.5, 4.5, 5.5],
  y: [4, 1, 7, 1, 4],
  mode: 'markers+text',
  type: 'scatter',
  name: 'Team B',
  text: ['B-a', 'B-b', 'B-c', 'B-d', 'B-e'],
  textfont : {
    family:'Times New Roman'
  },
  textposition: 'bottom center',
  marker: { size: 12 }
};

var data = [ trace1, trace2 ];

var layout = {
  xaxis: {
    range: [ 0.75, 5.25 ]
  },
  yaxis: {
    range: [0, 8]
  },
  legend: {
    y: 0.5,
    yref: 'paper',
    font: {
      family: 'Arial, sans-serif',
      size: 20,
      color: 'grey',
    }
  },
  title: {text: 'Data Labels on the Plot'}
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Scatter Plot with a Color Dimension
          
        

        
          
            
            
              
                var trace1 = {
  y: [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
  mode: 'markers',
  marker: {
    size: 40,
    color: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]
  }
};

var data = [trace1];

var layout = {
  title: {
    text: 'Scatter Plot with a Color Dimension'
  }
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Grouped Scatter Plot
          
        

        
          
            
            
              
                var trace1 = {
  x: ['South Korea', 'China', 'Canada'],
  y: [24, 10, 9],
  name: 'Gold',
  type: 'scatter',
  mode: 'markers'
};

var trace2 = {
  x: ['South Korea', 'China', 'Canada'],
  y: [13, 15, 12],
  name: 'Silver',
  type: 'scatter',
  mode: 'markers'
};

var trace3 = {
  x: ['South Korea', 'China', 'Canada'],
  y: [11, 8, 12],
  name: 'Bronze',
  type: 'scatter',
  mode: 'markers'
};

var data = [trace1, trace2, trace3];

var layout = {
  scattermode: 'group',
  title: {
    text: 'Grouped by Country'
  },
  xaxis: {
    title: {
      text: 'Country'
    }
  },
  yaxis: {
    title: {
      text: 'Medals'
    }
  }
};

Plotly.newPlot('myDiv', data, layout);



              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Grouped Scatter Plot with Custom Scatter Gap
          
        

        
          
            
            
              
                var trace1 = {
  x: ['South Korea', 'China', 'Canada'],
  y: [24, 10, 9],
  name: 'Gold',
  type: 'scatter',
  mode: 'markers'
};

var trace2 = {
  x: ['South Korea', 'China', 'Canada'],
  y: [13, 15, 12],
  name: 'Silver',
  type: 'scatter',
  mode: 'markers'
};

var trace3 = {
  x: ['South Korea', 'China', 'Canada'],
  y: [11, 8, 12],
  name: 'Bronze',
  type: 'scatter',
  mode: 'markers'
};

var data = [trace1, trace2, trace3];

var layout = {
  scattermode: 'group',
  title: {
    text: 'Grouped by Country'
  },
  xaxis: {
    title: {
      text: 'Country'
    }
  },
  yaxis: {
    title: {
      text: 'Medals'
    }
  },
  scattergap: 0.7
};

Plotly.newPlot('myDiv', data, layout);\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Basic Charts
            
            
                > Line Charts
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Line Charts
                  
                  in 
                  JavaScript
                  
                  
                
                How to make D3.js-based line charts in JavaScript. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Basic Line Plot
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3, 4],
  y: [10, 15, 13, 17],
  type: 'scatter'
};

var trace2 = {
  x: [1, 2, 3, 4],
  y: [16, 5, 11, 9],
  type: 'scatter'
};

var data = [trace1, trace2];

Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Line and Scatter Plot
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3, 4],
  y: [10, 15, 13, 17],
  mode: 'markers'
};

var trace2 = {
  x: [2, 3, 4, 5],
  y: [16, 5, 11, 9],
  mode: 'lines'
};

var trace3 = {
  x: [1, 2, 3, 4],
  y: [12, 9, 15, 12],
  mode: 'lines+markers'
};

var data = [ trace1, trace2, trace3 ];

var layout = {
  title: {text: 'Line and Scatter Plot'}
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Adding Names to Line and Scatter Plot
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3, 4],
  y: [10, 15, 13, 17],
  mode: 'markers',
  name: 'Scatter'
};

var trace2 = {
  x: [2, 3, 4, 5],
  y: [16, 5, 11, 9],
  mode: 'lines',
  name: 'Lines'
};

var trace3 = {
  x: [1, 2, 3, 4],
  y: [12, 9, 15, 12],
  mode: 'lines+markers',
  name: 'Scatter + Lines'
};

var data = [ trace1, trace2, trace3 ];

var layout = {
  title: {text: 'Adding Names to Line and Scatter Plot'}
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Line and Scatter Styling
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3, 4],
  y: [10, 15, 13, 17],
  mode: 'markers',
  marker: {
    color: 'rgb(219, 64, 82)',
    size: 12
  }
};

var trace2 = {
  x: [2, 3, 4, 5],
  y: [16, 5, 11, 9],
  mode: 'lines',
  line: {
    color: 'rgb(55, 128, 191)',
    width: 3
  }
};

var trace3 = {
  x: [1, 2, 3, 4],
  y: [12, 9, 15, 12],
  mode: 'lines+markers',
  marker: {
    color: 'rgb(128, 0, 128)',
    size: 8
  },
  line: {
    color: 'rgb(128, 0, 128)',
    width: 1
  }
};

var data = [trace1, trace2, trace3];

var layout = {
  title: {
    text: 'Line and Scatter Styling'
  }
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Styling Line Plot
          
        

        
          
            
            
              
                trace1 = {
  type: 'scatter',
  x: [1, 2, 3, 4],
  y: [10, 15, 13, 17],
  mode: 'lines',
  name: 'Red',
  line: {
    color: 'rgb(219, 64, 82)',
    width: 3
  }
};

trace2 = {
  type: 'scatter',
  x: [1, 2, 3, 4],
  y: [12, 9, 15, 12],
  mode: 'lines',
  name: 'Blue',
  line: {
    color: 'rgb(55, 128, 191)',
    width: 1
  }
};

var layout = {
  width: 500,
  height: 500
};

var data = [trace1, trace2];

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Colored and Styled Scatter Plot
          
        

        
          
            
            
              
                var trace1 = {
  x: [52698, 43117],
  y: [53, 31],
  mode: 'markers',
  name: 'North America',
  text: ['United States', 'Canada'],
  marker: {
    color: 'rgb(164, 194, 244)',
    size: 12,
    line: {
      color: 'white',
      width: 0.5
    }
  },
  type: 'scatter'
};

var trace2 = {
  x: [39317, 37236, 35650, 30066, 29570, 27159, 23557, 21046, 18007],
  y: [33, 20, 13, 19, 27, 19, 49, 44, 38],
  mode: 'markers',
  name: 'Europe',
  text: ['Germany', 'Britain', 'France', 'Spain', 'Italy', 'Czech Rep.', 'Greece', 'Poland'],
  marker: {
    color: 'rgb(255, 217, 102)',
    size: 12
  },
  type: 'scatter'
};

var trace3 = {
  x: [42952, 37037, 33106, 17478, 9813, 5253, 4692, 3899],
  y: [23, 42, 54, 89, 14, 99, 93, 70],
  mode: 'markers',
  name: 'Asia/Pacific',
  text: ['Australia', 'Japan', 'South Korea', 'Malaysia', 'China', 'Indonesia', 'Philippines', 'India'],
  marker: {
    color: 'rgb(234, 153, 153)',
    size: 12
  },
  type: 'scatter'
};

var trace4 = {
  x: [19097, 18601, 15595, 13546, 12026, 7434, 5419],
  y: [43, 47, 56, 80, 86, 93, 80],
  mode: 'markers',
  name: 'Latin America',
  text: ['Chile', 'Argentina', 'Mexico', 'Venezuela', 'Venezuela', 'El Salvador', 'Bolivia'],
  marker: {
    color: 'rgb(142, 124, 195)',
    size: 12
  },
  type: 'scatter'
};

var data = [trace1, trace2, trace3, trace4];

var layout = {
  title: {
    text: 'Quarter 1 Growth'
  },
  xaxis: {
    title: {
      text: 'GDP per Capita'
    },
    showgrid: false,
    zeroline: false
  },
  yaxis: {
    title: {
      text: 'Percent'
    },
    showline: false
  }
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Line Shape Options for Interpolation
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3, 4, 5],
  y: [1, 3, 2, 3, 1],
  mode: 'lines+markers',
  name: 'linear',
  line: {shape: 'linear'},
  type: 'scatter'
};

var trace2 = {
  x: [1, 2, 3, 4, 5],
  y: [6, 8, 7, 8, 6],
  mode: 'lines+markers',
  name: 'spline',
  text: ['tweak line smoothness<br>with "smoothing" in line object', 'tweak line smoothness<br>with "smoothing" in line object', 'tweak line smoothness<br>with "smoothing" in line object', 'tweak line smoothness<br>with "smoothing" in line object', 'tweak line smoothness<br>with "smoothing" in line object', 'tweak line smoothness<br>with "smoothing" in line object'],
  line: {shape: 'spline'},
  type: 'scatter'
};

var trace3 = {
  x: [1, 2, 3, 4, 5],
  y: [11, 13, 12, 13, 11],
  mode: 'lines+markers',
  name: 'vhv',
  line: {shape: 'vhv'},
  type: 'scatter'
};

var trace4 = {
  x: [1, 2, 3, 4, 5],
  y: [16, 18, 17, 18, 16],
  mode: 'lines+markers',
  name: 'hvh',
  line: {shape: 'hvh'},
  type: 'scatter'
};

var trace5 = {
  x: [1, 2, 3, 4, 5],
  y: [21, 23, 22, 23, 21],
  mode: 'lines+markers',
  name: 'vh',
  line: {shape: 'vh'},
  type: 'scatter'
};

var trace6 = {
  x: [1, 2, 3, 4, 5],
  y: [26, 28, 27, 28, 26],
  mode: 'lines+markers',
  name: 'hv',
  line: {shape: 'hv'},
  type: 'scatter'
};

var data = [trace1, trace2, trace3, trace4, trace5, trace6];

var layout = {
  legend: {
    y: 0.5,
    traceorder: 'reversed',
    font: {size: 16},
    yref: 'paper'
  }};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Graph and Axes Titles
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3, 4],
  y: [10, 15, 13, 17],
  mode: 'markers',
  name: 'Scatter'
};

var trace2 = {
  x: [2, 3, 4, 5],
  y: [16, 5, 11, 9],
  mode: 'lines',
  name: 'Lines'
};

var trace3 = {
  x: [1, 2, 3, 4],
  y: [12, 9, 15, 12],
  mode: 'lines+markers',
  name: 'Scatter and Lines'
};

var data = [trace1, trace2, trace3];

var layout = {
  title: {
    text: 'Title of the Graph'
  },
  xaxis: {
    title: {
      text: 'x-axis title'
    }
  },
  yaxis: {
    title: {
      text: 'y-axis title'
    }
  }
};

Plotly.newPlot('myDiv', data, layout);
              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Line Dash
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3, 4, 5],
  y: [1, 3, 2, 3, 1],
  mode: 'lines',
  name: 'Solid',
  line: {
    dash: 'solid',
    width: 4
  }
};

var trace2 = {
  x: [1, 2, 3, 4, 5],
  y: [6, 8, 7, 8, 6],
  mode: 'lines',
  name: 'dashdot',
  line: {
    dash: 'dashdot',
    width: 4
  }
};

var trace3 = {
  x: [1, 2, 3, 4, 5],
  y: [11, 13, 12, 13, 11],
  mode: 'lines',
  name: 'Solid',
  line: {
    dash: 'solid',
    width: 4
  }
};

var trace4 = {
  x: [1, 2, 3, 4, 5],
  y: [16, 18, 17, 18, 16],
  mode: 'lines',
  name: 'dot',
  line: {
    dash: 'dot',
    width: 4
  }
};

var data = [trace1, trace2, trace3, trace4];

var layout = {
  title: {
    text: 'Line Dash'
  },
  xaxis: {
    range: [0.75, 5.25],
    autorange: false
  },
  yaxis: {
    range: [0, 18.5],
    autorange: false
  },
  legend: {
    y: 0.5,
    traceorder: 'reversed',
    font: {
      size: 16
    }
  }
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Connect Gaps Between Data
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3, 4, 5, 6, 7, 8],
  y: [10, 15, null, 17, 14, 12, 10, null, 15],
  mode: 'lines+markers',
  connectgaps: true
};

var trace2 = {
  x: [1, 2, 3, 4, 5, 6, 7, 8],
  y: [16, null, 13, 10, 8, null, 11, 12],
  mode: 'lines',
  connectgaps: true
};

var data = [trace1, trace2];

var layout = {
  title: {
    text: 'Connect the Gaps Between Data'
  },
  showlegend: false
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Labelling Lines with Annotations
          
        

        
          
            
            
              
                var xData = [
  [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2013],
  [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2013],
  [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2013],
  [2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2013]
];

var yData = [
  [74, 82, 80, 74, 73, 72, 74, 70, 70, 66, 66, 69],
  [45, 42, 50, 46, 36, 36, 34, 35, 32, 31, 31, 28],
  [13, 14, 20, 24, 20, 24, 24, 40, 35, 41, 43, 50],
  [18, 21, 18, 21, 16, 14, 13, 18, 17, 16, 19, 23]
];

var colors = ['rgba(67,67,67,1)', 'rgba(115,115,115,1)', 'rgba(49,130,189, 1)',
  'rgba(189,189,189,1)'
];

var lineSize = [2, 2, 4, 2];

var labels = ['Television', 'Newspaper', 'Internet', 'Radio'];

var data = [];

for ( var i = 0 ; i < xData.length ; i++ ) {
  var result = {
    x: xData[i],
    y: yData[i],
    type: 'scatter',
    mode: 'lines',
    line: {
      color: colors[i],
      width: lineSize[i]
    }
  };
  var result2 = {
    x: [xData[i][0], xData[i][11]],
    y: [yData[i][0], yData[i][11]],
    type: 'scatter',
    mode: 'markers',
    marker: {
      color: colors[i],
      size: 12
    }
  };
  data.push(result, result2);
}

var layout = {
  showlegend: false,
  height: 600,
  width: 600,
  xaxis: {
    showline: true,
    showgrid: false,
    showticklabels: true,
    linecolor: 'rgb(204,204,204)',
    linewidth: 2,
    tickmode: 'linear',
    ticks: 'outside',
    tickcolor: 'rgb(204,204,204)',
    tickwidth: 2,
    ticklen: 5,
    tickfont: {
      family: 'Arial',
      size: 12,
      color: 'rgb(82, 82, 82)'
    }
  },
  yaxis: {
    showgrid: false,
    zeroline: false,
    showline: false,
    showticklabels: false
  },
  autosize: false,
  margin: {
    autoexpand: false,
    l: 100,
    r: 20,
    t: 100
  },
  annotations: [
    {
      xref: 'paper',
      yref: 'paper',
      x: 0.0,
      y: 1.05,
      xanchor: 'left',
      yanchor: 'bottom',
      text: 'Main Source for News',
      font:{
        family: 'Arial',
        size: 30,
        color: 'rgb(37,37,37)'
      },
      showarrow: false
    },
    {
      xref: 'paper',
      yref: 'paper',
      x: 0.5,
      y: -0.1,
      xanchor: 'center',
      yanchor: 'top',
      text: 'Source: Pew Research Center & Storytelling with data',
      showarrow: false,
      font: {
        family: 'Arial',
        size: 12,
        color: 'rgb(150,150,150)'
      }
    }
  ]
};

for( var i = 0 ; i < xData.length ; i++ ) {
  var result = {
    xref: 'paper',
    x: 0.05,
    y: yData[i][0],
    xanchor: 'right',
    yanchor: 'middle',
    text: labels[i] + ' ' + yData[i][0] +'%',
    showarrow: false,
    font: {
      family: 'Arial',
      size: 16,
      color: 'black'
    }
  };
  var result2 = {
    xref: 'paper',
    x: 0.95,
    y: yData[i][11],
    xanchor: 'left',
    yanchor: 'middle',
    text: yData[i][11] +'%',
    font: {
      family: 'Arial',
      size: 16,
      color: 'black'
    },
    showarrow: false
  };

  layout.annotations.push(result, result2);
}

Plotly.newPlot('myDiv', data, layout);\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Basic Charts
            
            
                > Bar Charts
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Bar Charts
                  
                  in 
                  JavaScript
                  
                  
                
                How to make a D3.js-based bar chart in javascript. Seven examples of grouped, stacked, overlaid, and colored bar charts. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Basic Bar Chart
          
        

        
          
            
            
              
                var data = [
  {
    x: ['giraffes', 'orangutans', 'monkeys'],
    y: [20, 14, 23],
    type: 'bar'
  }
];

Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Grouped Bar Chart
          
        

        
          
            
            
              
                var trace1 = {
  x: ['giraffes', 'orangutans', 'monkeys'],
  y: [20, 14, 23],
  name: 'SF Zoo',
  type: 'bar'
};

var trace2 = {
  x: ['giraffes', 'orangutans', 'monkeys'],
  y: [12, 18, 29],
  name: 'LA Zoo',
  type: 'bar'
};

var data = [trace1, trace2];

var layout = {barmode: 'group'};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Stacked Bar Chart
          
        

        
          
            
            
              
                var trace1 = {
  x: ['giraffes', 'orangutans', 'monkeys'],
  y: [20, 14, 23],
  name: 'SF Zoo',
  type: 'bar'
};

var trace2 = {
  x: ['giraffes', 'orangutans', 'monkeys'],
  y: [12, 18, 29],
  name: 'LA Zoo',
  type: 'bar'
};

var data = [trace1, trace2];

var layout = {barmode: 'stack'};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Bar Chart with Hover Text
          
        

        
          
            
            
              
                var trace1 = {
  x: ['Liam', 'Sophie', 'Jacob', 'Mia', 'William', 'Olivia'],
  y: [8.0, 8.0, 12.0, 12.0, 13.0, 20.0],
  type: 'bar',
  text: ['4.17 below the mean', '4.17 below the mean', '0.17 below the mean', '0.17 below the mean', '0.83 above the mean', '7.83 above the mean'],
  marker: {
    color: 'rgb(142,124,195)'
  }
};

var data = [trace1];

var layout = {
  title: {
    text: 'Number of Graphs Made this Week'
  },
  font:{
    family: 'Raleway, sans-serif'
  },
  showlegend: false,
  xaxis: {
    tickangle: -45
  },
  yaxis: {
    zeroline: false,
    gridwidth: 2
  },
  bargap :0.05
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Bar Chart with Direct Labels
          
        

        
          
            
            
              
                var xValue = ['Product A', 'Product B', 'Product C'];

var yValue = [20, 14, 23];

var trace1 = {
  x: xValue,
  y: yValue,
  type: 'bar',
  text: yValue.map(String),
  textposition: 'auto',
  hoverinfo: 'none',
  marker: {
    color: 'rgb(158,202,225)',
    opacity: 0.6,
    line: {
      color: 'rgb(8,48,107)',
      width: 1.5
    }
  }
};

var data = [trace1];

var layout = {
  title: {
    text: 'January 2013 Sales Report'
  },
  barmode: 'stack'
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Grouped Bar Chart with Direct Labels
          
        

        
          
            
            
              
                var xValue = ['Product A', 'Product B', 'Product C'];

var yValue = [20, 14, 23];
var yValue2 = [24, 16, 20];

var trace1 = {
  x: xValue,
  y: yValue,
  type: 'bar',
  text: yValue.map(String),
  textposition: 'auto',
  hoverinfo: 'none',
  opacity: 0.5,
  marker: {
    color: 'rgb(158,202,225)',
    line: {
      color: 'rgb(8,48,107)',
      width: 1.5
    }
  }
};

var trace2 = {
  x: xValue,
  y: yValue2,
  type: 'bar',
  text: yValue2.map(String),
  textposition: 'auto',
  hoverinfo: 'none',
  marker: {
    color: 'rgba(58,200,225,.5)',
    line: {
      color: 'rgb(8,48,107)',
      width: 1.5
    }
  }
};

var data = [trace1,trace2];

var layout = {
  title: {
    text: 'January 2013 Sales Report'
  }
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Bar Chart with Rotated Labels
          
        

        
          
            
            
              
                var trace1 = {
  x: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  y: [20, 14, 25, 16, 18, 22, 19, 15, 12, 16, 14, 17],
  type: 'bar',
  name: 'Primary Product',
  marker: {
    color: 'rgb(49,130,189)',
    opacity: 0.7,
  }
};

var trace2 = {
  x: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  y: [19, 14, 22, 14, 16, 19, 15, 14, 10, 12, 12, 16],
  type: 'bar',
  name: 'Secondary Product',
  marker: {
    color: 'rgb(204,204,204)',
    opacity: 0.5
  }
};

var data = [trace1, trace2];

var layout = {
  title: {
    text: '2013 Sales Report'
  },
  xaxis: {
    tickangle: -45
  },
  barmode: 'group'
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Customizing Individual Bar Colors
          
        

        
          
            
            
              
                var trace1 = {
  x: ['Feature A', 'Feature B', 'Feature C', 'Feature D', 'Feature E'],
  y: [20, 14, 23, 25, 22],
  marker:{
    color: ['rgba(204,204,204,1)', 'rgba(222,45,38,0.8)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)']
  },
  type: 'bar'
};

var data = [trace1];

var layout = {
  title: {
    text: 'Least Used Feature'
  }
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Customizing Individual Bar Widths
          
        

        
          
            
            
              
                var trace0 = {
  type: 'bar',
  x: [1, 2, 3, 5.5, 10],
  y: [10, 8, 6, 4, 2],
  width: [0.8, 0.8, 0.8, 3.5, 4]
}

var data = [trace0]

Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Customizing Individual Bar Base
          
        

        
          
            
            
              
                var data = [
  {
    type: 'bar',
    x: ['2016','2017','2018'],
    y: [500,600,700],
    base: [-500,-600,-700],
    hovertemplate: '%{base}',
    marker: {
      color: 'red'
    },
    name: 'expenses'
  },
  {
    type: 'bar',
    x: ['2016','2017','2018'],
    y: [300,400,700],
    base: 0,
    marker: {
      color: 'blue'
    },
    name: 'revenue'
  }]

Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Rounded Corners on Bars
          
        

        
          
            
              To create rounded corners on bars, set barcornerradius on the layout to a number of pixels, or a string with a percentage of the bar width, for example, 25%.
You can also configure traces individually with marker.cornerradius on the trace.

            
            
              
                var trace1 = {
  x: ['South Korea', 'China', 'Canada'],
  y: [24, 10, 9],
  name: 'Gold',
  type: 'bar',
};

var trace2 = {
  x: ['South Korea', 'China', 'Canada'],
  y: [13, 15, 12],
  name: 'Silver',
  type: 'bar',
};

var trace3 = {
  x: ['South Korea', 'China', 'Canada'],
  y: [11, 8, 12],
  name: 'Bronze',
  type: 'bar',
};

var data = [trace1, trace2, trace3];

var layout = {
  scattermode: 'group',
  title: {
    text: 'Grouped by Country'
  },
  xaxis: {
    title: {
      text: 'Country'
    }
  },
  yaxis: {
    title: {
      text: 'Medals'
    }
  },
  barcornerradius: 15,
};

Plotly.newPlot('myDiv', data, layout);



              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Colored and Styled Bar Chart
          
        

        
          
            
            
              
                var trace1 = {
  x: [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012],
  y: [219, 146, 112, 127, 124, 180, 236, 207, 236, 263, 350, 430, 474, 526, 488, 537, 500, 439],
  name: 'Rest of world',
  marker: {color: 'rgb(55, 83, 109)'},
  type: 'bar'
};

var trace2 = {
  x: [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012],
  y: [16, 13, 10, 11, 28, 37, 43, 55, 56, 88, 105, 156, 270, 299, 340, 403, 549, 499],
  name: 'China',
  marker: {color: 'rgb(26, 118, 255)'},
  type: 'bar'
};

var data = [trace1, trace2];

var layout = {
  title: {
    text: 'US Export of Plastic Scrap'
  },
  xaxis: {tickfont: {
      size: 14,
      color: 'rgb(107, 107, 107)'
    }},
  yaxis: {
    title: {
        text: 'USD (millions)',
        font: {
            size: 16,
            color: 'rgb(107, 107, 107)'
        }
    },
    tickfont: {
      size: 14,
      color: 'rgb(107, 107, 107)'
    }
  },
  legend: {
    x: 0,
    y: 1.0,
    bgcolor: 'rgba(255, 255, 255, 0)',
    bordercolor: 'rgba(255, 255, 255, 0)'
  },
  barmode: 'group',
  bargap: 0.15,
  bargroupgap: 0.1
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Waterfall Bar Chart
          
        

        
          
            
            
              
                // Base

var xData = ['Product<br>Revenue', 'Services<br>Revenue',
  'Total<br>Revenue', 'Fixed<br>Costs',
  'Variable<br>Costs', 'Total<br>Costs', 'Total'
];

var yData = [400, 660, 660, 590, 400, 400, 340];

var textList = ['$430K', '$260K', '$690K', '$-120K', '$-200K', '$-320K', '$370K'];

//Base

var trace1 = {
  x: xData,
  y: [0, 430, 0, 570, 370, 370, 0],
  marker: {
    color: 'rgba(1,1,1,0.0)'
  },
  type: 'bar'
};

//Revenue

var trace2 = {
  x: xData,
  y: [430, 260, 690, 0, 0, 0, 0],
  type: 'bar',
  marker: {
    color: 'rgba(55,128,191,0.7)',
    line: {
      color: 'rgba(55,128,191,1.0)',
      width: 2
    }
  }
};

//Cost

var trace3 = {
  x: xData,
  y: [0, 0, 0, 120, 200, 320, 0],
  type: 'bar',
  marker: {
    color: 'rgba(219, 64, 82, 0.7)',
    line: {
      color: 'rgba(219, 64, 82, 1.0)',
      width: 2
    }
  }
};

//Profit

var trace4 = {
  x: xData,
  y: [0, 0, 0, 0, 0, 0, 370],
  type: 'bar',
  marker: {
    color: 'rgba(50,171, 96, 0.7)',
    line: {
      color: 'rgba(50,171,96,1.0)',
      width: 2
    }
  }
};

var data = [trace1, trace2, trace3, trace4];

var layout = {
  title: {
    text: 'Annual Profit 2015'
  },
  barmode: 'stack',
  paper_bgcolor: 'rgba(245,246,249,1)',
  plot_bgcolor: 'rgba(245,246,249,1)',
  width: 600,
  height: 600,
  showlegend: false,
  annotations: []
};

for ( var i = 0 ; i < 7 ; i++ ) {
  var result = {
    x: xData[i],
    y: yData[i],
    text: textList[i],
    font: {
      family: 'Arial',
      size: 14,
      color: 'rgba(245,246,249,1)'
    },
    showarrow: false
  };
  layout.annotations.push(result);
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Bar Chart with Relative Barmode
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3, 4],
  y: [1, 4, 9, 16],
  name: 'Trace1',
  type: 'bar'
};
var trace2 = {
  x: [1, 2, 3, 4],
  y: [6, -8, -4.5, 8],
  name: 'Trace2',
  type: 'bar'
};
var trace3 = {
  x: [1, 2, 3, 4],
  y: [-15, -3, 4.5, -8],
  name: 'Trace3',
  type: 'bar'
 }

 var trace4 = {
  x: [1, 2, 3, 4],
  y: [-1, 3, -3, -4],
  name: 'Trace4',
  type: 'bar'
 }

var data = [trace1, trace2, trace3, trace4];
var layout = {
  xaxis: {
    title: {
      text: 'X axis'
    }
  },
  yaxis: {
    title: {
      text: 'Y axis'
    }
  },
  barmode: 'relative',
  title: {
    text: 'Relative Barmode'
  }
};

Plotly.newPlot('myDiv', data, layout);\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Basic Charts
            
            
                > Pie Charts
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Pie Charts
                  
                  in 
                  JavaScript
                  
                  
                
                How to graph D3.js-based pie charts in javascript with D3.js. Examples of pie charts, donut charts and pie chart subplots. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Basic Pie Chart
          
        

        
          
            
            
              
                var data = [{
  values: [19, 26, 55],
  labels: ['Residential', 'Non-Residential', 'Utility'],
  type: 'pie'
}];

var layout = {
  height: 400,
  width: 500
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Pie Chart Subplots
          
        

        
          
            
              In order to create pie chart subplots, you need to use the domain attribute. domain allows you to place each trace on a grid of rows and columns defined in the layout or within a rectangle defined by X and Y arrays. The example below uses the grid method (with a 2 x 2 grid defined in the layout) for the first three traces and the X and Y method for the fourth trace.

            
            
              
                var allLabels = ['1st', '2nd', '3rd', '4th', '5th'];

var allValues = [
  [38, 27, 18, 10, 7],
  [28, 26, 21, 15, 10],
  [38, 19, 16, 14, 13],
  [31, 24, 19, 18, 8]
];

var ultimateColors = [
  ['rgb(56, 75, 126)', 'rgb(18, 36, 37)', 'rgb(34, 53, 101)', 'rgb(36, 55, 57)', 'rgb(6, 4, 4)'],
  ['rgb(177, 127, 38)', 'rgb(205, 152, 36)', 'rgb(99, 79, 37)', 'rgb(129, 180, 179)', 'rgb(124, 103, 37)'],
  ['rgb(33, 75, 99)', 'rgb(79, 129, 102)', 'rgb(151, 179, 100)', 'rgb(175, 49, 35)', 'rgb(36, 73, 147)'],
  ['rgb(146, 123, 21)', 'rgb(177, 180, 34)', 'rgb(206, 206, 40)', 'rgb(175, 51, 21)', 'rgb(35, 36, 21)']
];

var data = [{
  values: allValues[0],
  labels: allLabels,
  type: 'pie',
  name: 'Starry Night',
  marker: {
    colors: ultimateColors[0]
  },
  domain: {
    row: 0,
    column: 0
  },
  hoverinfo: 'label+percent+name',
  textinfo: 'none'
},{
  values: allValues[1],
  labels: allLabels,
  type: 'pie',
  name: 'Sunflowers',
  marker: {
    colors: ultimateColors[1]
  },
  domain: {
    row: 1,
    column: 0
  },
  hoverinfo: 'label+percent+name',
  textinfo: 'none'
},{
  values: allValues[2],
  labels: allLabels,
  type: 'pie',
  name: 'Irises',
  marker: {
    colors: ultimateColors[2]
  },
  domain: {
    row: 0,
    column: 1
  },
  hoverinfo: 'label+percent+name',
  textinfo: 'none'
},{
  values: allValues[3],
  labels: allLabels,
  type: 'pie',
  name: 'The Night Cafe',
  marker: {
    colors: ultimateColors[3]
  },
  domain: {
    x: [0.52,1],
    y: [0, 0.48]
  },
  hoverinfo: 'label+percent+name',
  textinfo: 'none'
}];

var layout = {
  height: 400,
  width: 500,
  grid: {rows: 2, columns: 2}
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Donut Chart
          
        

        
          
            
            
              
                var data = [{
  values: [16, 15, 12, 6, 5, 4, 42],
  labels: ['US', 'China', 'European Union', 'Russian Federation', 'Brazil', 'India', 'Rest of World' ],
  domain: {column: 0},
  name: 'GHG Emissions',
  hoverinfo: 'label+percent+name',
  hole: .4,
  type: 'pie'
},{
  values: [27, 11, 25, 8, 1, 3, 25],
  labels: ['US', 'China', 'European Union', 'Russian Federation', 'Brazil', 'India', 'Rest of World' ],
  text: 'CO2',
  textposition: 'inside',
  domain: {column: 1},
  name: 'CO2 Emissions',
  hoverinfo: 'label+percent+name',
  hole: .4,
  type: 'pie'
}];

var layout = {
  title: {
    text: 'Global Emissions 1990-2011'
  },
  annotations: [
    {
      font: {
        size: 20
      },
      showarrow: false,
      text: 'GHG',
      x: 0.17,
      y: 0.5
    },
    {
      font: {
        size: 20
      },
      showarrow: false,
      text: 'CO2',
      x: 0.82,
      y: 0.5
    }
  ],
  height: 400,
  width: 600,
  showlegend: false,
  grid: {rows: 1, columns: 2}
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Automatically Adjust Margins
          
        

        
          
            
              The following example sets automargin attribute to true, which automatically increases the margin size.

            
            
              
                var data = [{
  type: "pie",
  values: [2, 3, 4, 4],
  labels: ["Wages", "Operating expenses", "Cost of sales", "Insurance"],
  textinfo: "label+percent",
  textposition: "outside",
  automargin: true
}]

var layout = {
  height: 400,
  width: 400,
  margin: {"t": 0, "b": 0, "l": 0, "r": 0},
  showlegend: false
  }

Plotly.newPlot('myDiv', data, layout)
              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Control Text Orientation Inside Pie Chart Sectors
          
        

        
          
            
              The insidetextorientation attribute controls the orientation of the text inside chart sectors. When set to auto, text may be oriented in any direction in order to be as big as possible in the middle of a sector. The horizontal option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The radial option orients text along the radius of the sector. The tangential option orients text perpendicular to the radius of the sector.

            
            
              
                var data = [{
  type: "pie",
  values: [2, 3, 4, 4],
  labels: ["Wages", "Operating expenses", "Cost of sales", "Insurance"],
  textinfo: "label+percent",
  insidetextorientation: "radial"
}]

var layout = [{
  height: 700,
  width: 700
}]

Plotly.newPlot('myDiv', data, layout)\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Basic Charts
            
            
                > Bubble Charts
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Bubble Charts
                  
                  in 
                  JavaScript
                  
                  
                
                How to make a D3.js-based bubble chart in javascript. Examples of scatter charts whose markers have variable color, size, and symbols. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Marker Size on Bubble Charts
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3, 4],
  y: [10, 11, 12, 13],
  mode: 'markers',
  marker: {
    size: [40, 60, 80, 100]
  }
};

var data = [trace1];

var layout = {
  title: {
    text: 'Marker Size'
  },
  showlegend: false,
  height: 600,
  width: 600
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Marker Size and Color on Bubble Charts
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3, 4],
  y: [10, 11, 12, 13],
  mode: 'markers',
  marker: {
    color: ['rgb(93, 164, 214)', 'rgb(255, 144, 14)',  'rgb(44, 160, 101)', 'rgb(255, 65, 54)'],
    opacity: [1, 0.8, 0.6, 0.4],
    size: [40, 60, 80, 100]
  }
};

var data = [trace1];

var layout = {
  title: {
    text: 'Marker Size and Color'
  },
  showlegend: false,
  height: 600,
  width: 600
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Hover Text on Bubble Charts
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3, 4],
  y: [10, 11, 12, 13],
  text: ['A<br>size: 40', 'B<br>size: 60', 'C<br>size: 80', 'D<br>size: 100'],
  mode: 'markers',
  marker: {
    color: ['rgb(93, 164, 214)', 'rgb(255, 144, 14)',  'rgb(44, 160, 101)', 'rgb(255, 65, 54)'],
    size: [40, 60, 80, 100]
  }
};

var data = [trace1];

var layout = {
  title: {
    text: 'Bubble Chart Hover Text'
  },
  showlegend: false,
  height: 600,
  width: 600
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Bubble Size Scaling on Charts
          
        

        
          
            
            
              
                // To scale the bubble size, use the attribute sizeref. We recommend using the following formula to calculate a sizeref value:
// sizeref = 2.0 * Math.max(...size) / (desired_maximum_marker_size**2)
// Note that setting 'sizeref' to a value greater than 1, decreases the rendered marker sizes, while setting 'sizeref' to less than 1, increases the rendered marker sizes. See https://plotly.com/python/reference/scatter/#scatter-marker-sizeref for more information. Additionally, we recommend setting the sizemode attribute: https://plotly.com/python/reference/scatter/#scatter-marker-sizemode to area.

var trace1 = {
  x: [1, 2, 3, 4],
  y: [10, 11, 12, 13],
  text: ['A<br>size: 40', 'B<br>size: 60', 'C<br>size: 80', 'D<br>size: 100'],
  mode: 'markers',
  marker: {
    size: [400, 600, 800, 1000],
    sizemode: 'area'
  }
};

var trace2 = {
  x: [1, 2, 3, 4],
  y: [14, 15, 16, 17],
  text: ['A</br>size: 40</br>sixeref: 0.2', 'B</br>size: 60</br>sixeref: 0.2', 'C</br>size: 80</br>sixeref: 0.2', 'D</br>size: 100</br>sixeref: 0.2'],
  mode: 'markers',
  marker: {
    size: [400, 600, 800, 1000],
    //setting 'sizeref' to lower than 1 decreases the rendered size
    sizeref: 2,
    sizemode: 'area'
  }
};

var trace3 = {
  x: [1, 2, 3, 4],
  y: [20, 21, 22, 23],
  text: ['A</br>size: 40</br>sixeref: 2', 'B</br>size: 60</br>sixeref: 2', 'C</br>size: 80</br>sixeref: 2', 'D</br>size: 100</br>sixeref: 2'],
  mode: 'markers',
  marker: {
    size: [400, 600, 800, 1000],
    //setting 'sizeref' to less than 1, increases the rendered marker sizes
    sizeref: 0.2,
    sizemode: 'area'
  }
};

// sizeref using above formula
var desired_maximum_marker_size = 40;
var size = [400, 600, 800, 1000];
var trace4 = {
  x: [1, 2, 3, 4],
  y: [26, 27, 28, 29],
  text: ['A</br>size: 40</br>sixeref: 1.25', 'B</br>size: 60</br>sixeref: 1.25', 'C</br>size: 80</br>sixeref: 1.25', 'D</br>size: 100</br>sixeref: 1.25'],
  mode: 'markers',
  marker: {
    size: size,
    //set 'sizeref' to an 'ideal' size given by the formula sizeref = 2. * max(array_of_size_values) / (desired_maximum_marker_size ** 2)
    sizeref: 2.0 * Math.max(...size) / (desired_maximum_marker_size**2),
    sizemode: 'area'
  }
};

var data = [trace1, trace2, trace3, trace4];

var layout = {
  title: {
    text: 'Size Scaling in Bubble Charts'
  },
  showlegend: false,
  height: 600,
  width: 600
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Marker Size, Color, and Symbol as an Array
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3, 4],
  y: [10, 11, 12, 13],
  mode: 'markers',
  marker: {
    color: ['hsl(0,100,40)', 'hsl(33,100,40)', 'hsl(66,100,40)', 'hsl(99,100,40)'],
    size: [12, 22, 32, 42],
    opacity: [0.6, 0.7, 0.8, 0.9]
  },
  type: 'scatter'
};

var trace2 = {
  x: [1, 2, 3, 4],
  y: [11, 12, 13, 14],
  mode: 'markers',
  marker: {
    color: 'rgb(31, 119, 180)',
    size: 18,
    symbol: ['circle', 'square', 'diamond', 'cross']
  },
  type: 'scatter'
};

var trace3 = {
  x: [1, 2, 3, 4],
  y: [12, 13, 14, 15],
  mode: 'markers',
  marker: {
    size: 18,
    line: {
      color: ['rgb(120,120,120)', 'rgb(120,120,120)', 'red', 'rgb(120,120,120)'],
      width: [2, 2, 6, 2]
    }
  },
  type: 'scatter'
};

var data = [trace1, trace2, trace3];

var layout = {showlegend: false};

Plotly.newPlot('myDiv', data, layout);\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            

            

            

            
            
            
        
    
    


                
                


    
        
        

            
                Plotly JavaScript Open Source Graphing Library
                
                    Built on top of d3.js and stack.gl, Plotly.js is a high-level, declarative charting library. plotly.js ships with over 40 chart types, including 3D charts, statistical graphs, and SVG maps.
                    plotly.js is free and open source and you can view the source, report issues or contribute on GitHub.
                
            
        
        
          
            

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




            
            
                Read more about plotly.js features
                

                

                    
                        Sophisticated chart types
                    
                    
                        plotly.js abstracts the types of statistical and scientific charts that you would find in packages like matplotlib, ggplot2, or MATLAB.
                    

                    
                    
                        
                    
                    d3.json('https://plotly.com/~DanielCarrera/13.json', function(figure){
                  var trace = {
                    x: figure.data[0].x, y: figure.data[0].y, z: figure.data[0].z,
                    type: 'contour', autocolorscale: false,
                    colorscale: [[0,"rgb(  0,  0,  0)"],[0.3,"rgb(230,  0,  0)"],[0.6,"rgb(255,210,  0)"],[1,"rgb(255,255,255)"]],
                    reversescale: true, zmax: 2.5, zmin: -2.5
                  };
                  var layout = {
                    title: {
                      text: 'turbulence simulation'
                  },
                    xaxis: {
                      title: {
                          text: 'radial direction'
                      },
                      showline: true,
                      mirror: 'allticks',
                      ticks: 'inside'
                    },
                    yaxis: {
                        title: {
                            text: 'vertical direction'
                        },
                        showline: true,
                        mirror: 'allticks',
                        ticks: 'inside'
                    },
                    margin: {l: 40, b: 40, t: 60},
                    annotations: [{
                      showarrow: false,
                      text: 'Credit: Daniel Carrera',
                      x: 0, y: 0, xref: 'paper', yref: 'paper'
                    }]
                  }
                  Plotly.newPlot(document.getElementById('contour-plot'), [trace], layout, {showLink: false});
                });



                    Fully customizable
                    
                        plotly.js charts are described declaratively as JSON objects. Every aspect of the charts, such as colors, grid lines, and the legend, has a corresponding set of JSON attributes.
                        
                            view all of the available attributes
                        
                    

                    d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv', function(rows){
                    var trace = {
                      type: 'scatter',                    // set the chart type
                      mode: 'lines',                      // connect points with lines
                      x: rows.map(function(row){          // set the x-data
                        return row['Time'];
                      }),
                      y: rows.map(function(row){          // set the x-data
                        return row['10 Min Sampled Avg'];
                      }),
                      line: {                             // set the width of the line.
                        width: 1
                      },
                      error_y: {
                        array: rows.map(function(row){    // set the height of the error bars
                          return row['10 Min Std Dev'];
                        }),
                        thickness: 0.5,                   // set the thickness of the error bars
                        width: 0
                      }
                    };

                    var layout = {
                      yaxis: {
                        title: {
                          text: "Wind Speed"
                        }
                      },       // set the y axis title
                      xaxis: {
                        showgrid: false,                  // remove the x-axis grid lines
                        tickformat: "%B, %Y"              // customize the date format to "month, day"
                      },
                      margin: {                           // update the left, bottom, right, top margin
                        l: 40, b: 10, r: 10, t: 20
                      }
                    };

                    Plotly.newPlot(document.getElementById('wind-speed'), [trace], layout, {showLink: false});
                });



                    High performance
                    
                        
                            Most plotly graphs are drawn with SVG. This offers great compatibility across browsers and publication-quality vector image export. Unfortunately, there are inherent performance limitations with the number of SVG elements that you can draw in the DOM.
                            plotly.js uses stack.gl for high performance 2D and 3D charting.
                        
                        
                            
                                
                            
                            
                                This chart was drawn with the plotly.js chart type scattergl. scattergl charts render an order of magnitude faster than their SVG counterparts.
                            
                        
                        
                            
                                
                                
                                
                            
                            
                                All 3D charts in plotly.js are rendered with WebGL, leveraging the power of the GPU for fast interactivity.
                                view the interactive version
                            
                        
                    
                    Universal
                    
                        By abstracting charts to a declarative JSON structure, plotly.js is used as a browser-based charting library for Python, R, MATLAB.
                    

                
                
            
          


        
    


















    
        Fundamentals

        
        More Fundamentals »
        
    
    
        

            
                    
                    

    
        Configuration Options
        
            View Tutorial
            
        
    


                
                    
                    

    
        Responsive / Fluid Layouts
        
            View Tutorial
            
        
    


                
                    
                    

    
        uirevision in Plotly.react
        
            View Tutorial
            
        
    


                
                    
                    

    
        React Plotly.js
        
            View Tutorial
            
        
    


                
                    
                    

    
        Analytical Apps with Dash
        
            View Tutorial
            
        
    


                
    










    
        Basic Charts

        
        More Basic Charts »
        
    
    
        

            

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Scatter Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Line Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bar Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Pie Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bubble Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
    





    
        Statistical Charts

        
        More Statistical Charts »
        
    
    
        

            
                    
                    

    
        Error Bars
        
            View Tutorial
            
        
    


                
                    
                    

    
        Box Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        2d Density Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Continuous Error Bars
        
            View Tutorial
            
        
    


                
    





    
        Scientific Charts

        
        More Scientific Charts »
        
    
    
        

            
                    
                    

    
        Contour Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Heatmaps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ternary Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Parallel Coordinates Plot
        
            View Tutorial
            
        
    


                
                    
                    

    
        Log Plots
        
            View Tutorial
            
        
    


                
    





    
        Financial Charts

        
        More Financial Charts »
        
    
    
        

            
                    
                    

    
        Waterfall Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Indicators
        
            View Tutorial
            
        
    


                
                    
                    

    
        Candlestick Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Funnel and Funnelarea Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Time Series
        
            View Tutorial
            
        
    


                
    





    
        Maps

        
        More Maps »
        
    
    
        

            
                    
                    

    
        Migrate to Maplibre
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Map Layers
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Density Heatmap
        
            View Tutorial
            
        
    


                
                    
                    

    
        Choropleth Tile Map
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lines on Maps
        
            View Tutorial
            
        
    


                
    










    
        3D Charts

        
        More 3D Charts »
        
    
    
        

            
                    
                    

    
        3D Scatter Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ribbon Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Surface Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Mesh Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Line Plots
        
            View Tutorial
            
        
    


                
    





    
        Subplots

        
        More Subplots »
        
    
    
        

            
                    
                    

    
        Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Inset Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Mixed Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Table Subplots
        
            View Tutorial
            
        
    


                
    









    
        Custom Chart Events

        
    
    
        

            
                    
                    

    
        Click Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Hover Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Zoom Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Disable Zoom Events
        
            View Tutorial
            
        
    


                
    





    
        Add Custom Controls

        
        More Controls »
        
    
    
        

            
                    
                    

    
        Dropdown Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Button Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Slider Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lasso Selection
        
            View Tutorial
            
        
    


                
                    
                    

    
        Range Slider and Selector
        
            View Tutorial
            
        
    


                
    





    
        Animations

        
    
    
        

            
                    
                    

    
        Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Adding Sliders to Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Filled-Area Animation
        
            View Tutorial
            
        
    


                
                    
                    

    
        Map Animation
        
            View Tutorial\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Statistical Charts
            
            
                > Error Bars
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Error Bars
                  
                  in 
                  JavaScript
                  
                  
                
                How to add error bars to a D3.js-based line, scatter, or bar chart. Seven examples of symmetric, asymmetric, horizontal, and colored error bars. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Basic Symmetric Error Bars
          
        

        
          
            
            
              
                var data = [
  {
    x: [0, 1, 2],
    y: [6, 10, 2],
    error_y: {
      type: 'data',
      array: [1, 2, 3],
      visible: true
    },
    type: 'scatter'
  }
];
Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Bar Chart with Error Bars
          
        

        
          
            
            
              
                var trace1 = {
  x: ['Trial 1', 'Trial 2', 'Trial 3'],
  y: [3, 6, 4],
  name: 'Control',
  error_y: {
    type: 'data',
    array: [1, 0.5, 1.5],
    visible: true
  },
  type: 'bar'
};
var trace2 = {
  x: ['Trial 1', 'Trial 2', 'Trial 3'],
  y: [4, 7, 3],
  name: 'Experimental',
  error_y: {
    type: 'data',
    array: [0.5, 1, 2],
    visible: true
  },
  type: 'bar'
};
var data = [trace1, trace2];
var layout = {barmode: 'group'};
Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Horizontal Error Bars
          
        

        
          
            
            
              
                var data = [
  {
    x: [1, 2, 3, 4],
    y: [2, 1, 3, 4],
    error_x: {
      type: 'percent',
      value: 10
    },
    type: 'scatter'
  }
];
Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Asymmetric Error Bars
          
        

        
          
            
            
              
                var data = [
  {
    x: [1, 2, 3, 4],
    y: [2, 1, 3, 4],
    error_y: {
      type: 'data',
      symmetric: false,
      array: [0.1, 0.2, 0.1, 0.1],
      arrayminus: [0.2, 0.4, 1, 0.2]
    },
    type: 'scatter'
  }
];
Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Colored and Styled Error Bars
          
        

        
          
            
            
              
                function linspace(a,b,n) {
  return d3.range(n).map(function(i){return a+i*(b-a)/(n-1);});
}
x_theo = linspace(-4, 4, 100)
sincx = Math.sin(x_theo) / x_theo
var x = [-3.8, -3.03, -1.91, -1.46, -0.89, -0.24, -0.0, 0.41, 0.89, 1.01, 1.91, 2.28, 2.79, 3.56]
var y = [-0.02, 0.04, -0.01, -0.27, 0.36, 0.75, 1.03, 0.65, 0.28, 0.02, -0.11, 0.16, 0.04, -0.15]

var trace1 = {
  x: x_theo,
  y: sincx,
  name: 'sinc(x)',
  type: 'scatter'
};
var trace2 = {
  x: x,
  y: y,
  mode: 'markers',
  name: 'measured',
  error_y: {
    type: 'constant',
    value: 0.1,
    color: '#85144B',
    thickness: 1.5,
    width: 3,
  },
  error_x: {
    type: 'constant',
    value: 0.2,
    color: '#85144B',
    thickness: 1.5,
    width: 3,
  },
  marker: {
    color: '#85144B',
    size: 8
  },
  type: 'scatter'
};
var data = [trace1, trace2];
Plotly.newPlot('myDiv', data, {}, {showSendToCloud: true});

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Error Bars as a Percentage of the y-Value
          
        

        
          
            
            
              
                var data = [
  {
    x: [0, 1, 2],
    y: [6, 10, 2],
    error_y: {
      type: 'percent',
      value: 50,
      visible: true
    },
    type: 'scatter'
  }
];
Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Asymmetric Error Bars with a Constant Offset
          
        

        
          
            
            
              
                var data = [
  {
    x: [1, 2, 3, 4],
    y: [2, 1, 3, 4],
    error_y: {
      type: 'percent',
      symmetric: false,
      value: 15,
      valueminus: 25
    },
    type: 'scatter'
  }
];
Plotly.newPlot('myDiv', data);\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Statistical Charts
            
            
                > Box Plots
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Box Plots
                  
                  in 
                  JavaScript
                  
                  
                
                How to make a D3.js-based box plot in javascript. Seven examples of box plots in javascript that are grouped, colored, and display the underlying data distribution. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Basic Box Plot
          
        

        
          
            
            
              
                var y0 = [];
var y1 = [];
for (var i = 0; i < 50; i ++) {
	y0[i] = Math.random();
	y1[i] = Math.random() + 1;
}

var trace1 = {
  y: y0,
  type: 'box'
};

var trace2 = {
  y: y1,
  type: 'box'
};

var data = [trace1, trace2];

Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Box Plot That Displays the Underlying Data
          
        

        
          
            
            
              
                var data = [
  {
    y: [0, 1, 1, 2, 3, 5, 8, 13, 21],
    boxpoints: 'all',
    jitter: 0.3,
    pointpos: -1.8,
    type: 'box'
  }
];

Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Horizontal Box Plot
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3, 4, 4, 4, 8, 9, 10],
  type: 'box',
  name: 'Set 1'
};

var trace2 = {
  x: [2, 3, 3, 3, 3, 5, 6, 6, 7],
  type: 'box',
  name: 'Set 2'
};

var data = [trace1, trace2];

var layout = {
  title: {
    text: 'Horizontal Box Plot'
  },
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Grouped Box Plot
          
        

        
          
            
            
              
                var x = ['day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1',
         'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2']

var trace1 = {
  y: [0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3],
  x: x,
  name: 'kale',
  marker: {color: '#3D9970'},
  type: 'box'
};

var trace2 = {
  y: [0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2],
  x: x,
  name: 'radishes',
  marker: {color: '#FF4136'},
  type: 'box'
};

var trace3 = {
  y: [0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5],
  x: x,
  name: 'carrots',
  marker: {color: '#FF851B'},
  type: 'box'
};

var data = [trace1, trace2, trace3];

var layout = {
  yaxis: {
    title: {
      text: 'normalized moisture'
    },
    zeroline: false
  },
  boxmode: 'group'
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Box Plot Styling Outliers
          
        

        
          
            
            
              
                var trace1 = {
  y: [0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5, 7.75, 8.15, 8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5, 12, 16, 20.90, 22.3, 23.25],
  type: 'box',
  name: 'All Points',
  jitter: 0.3,
  pointpos: -1.8,
  marker: {
    color: 'rgb(7,40,89)'
  },
  boxpoints: 'all'
};

var trace2 = {
  y: [0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5, 7.75, 8.15, 8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5, 12, 16, 20.90, 22.3, 23.25],
  type: 'box',
  name: 'Only Wiskers',
  marker: {
    color: 'rgb(9,56,125)'
  },
  boxpoints: false
};

var trace3 = {
  y: [0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5, 7.75, 8.15, 8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5, 12, 16, 20.90, 22.3, 23.25],
  type: 'box',
  name: 'Suspected Outlier',
  marker: {
    color: 'rgb(8,81,156)',
    outliercolor: 'rgba(219, 64, 82, 0.6)',
    line: {
      outliercolor: 'rgba(219, 64, 82, 1.0)',
      outlierwidth: 2
    }
  },
  boxpoints: 'suspectedoutliers'
};

var trace4 = {
  y: [0.75, 5.25, 5.5, 6, 6.2, 6.6, 6.80, 7.0, 7.2, 7.5, 7.5, 7.75, 8.15, 8.15, 8.65, 8.93, 9.2, 9.5, 10, 10.25, 11.5, 12, 16, 20.90, 22.3, 23.25],
  type: 'box',
  name: 'Wiskers and Outliers',
  marker: {
    color: 'rgb(107,174,214)'
  },
  boxpoints: 'Outliers'
};



var data = [trace1, trace2, trace3, trace4];

var layout = {
  title: {
    text: 'Box Plot Styling Outliers'
  }
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Box Plot Styling Mean and Standard Deviation
          
        

        
          
            
            
              
                var trace1 = {
  y: [2.37, 2.16, 4.82, 1.73, 1.04, 0.23, 1.32, 2.91, 0.11, 4.51, 0.51, 3.75, 1.35, 2.98, 4.50, 0.18, 4.66, 1.30, 2.06, 1.19],
  type: 'box',
  name: 'Only Mean',
  marker: {
    color: 'rgb(8,81,156)'
  },
  boxmean: true
};

var trace2 = {
  y: [2.37, 2.16, 4.82, 1.73, 1.04, 0.23, 1.32, 2.91, 0.11, 4.51, 0.51, 3.75, 1.35, 2.98, 4.50, 0.18, 4.66, 1.30, 2.06, 1.19],
  type: 'box',
  name: 'Mean and Standard Deviation',
  marker: {
    color: 'rgb(10,140,208)'
  },
  boxmean: 'sd'
};


var data = [trace1, trace2];

var layout = {
  title: {
    text: 'Box Plot Styling Mean and Standard Deviation'
  }
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Grouped Horizontal Box Plot
          
        

        
          
            
            
              
                var y = ['day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1',
         'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2']

var trace1 = {
  x: [0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3],
  y: y,
  name: 'kale',
  marker: {color: '#3D9970'},
  type: 'box',
  boxmean: false,
  orientation: 'h'
};

var trace2 = {
  x: [0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2],
  y: y,
  name: 'radishes',
  marker: {color: '#FF4136'},
  type: 'box',
  boxmean: false,
  orientation: 'h'
};

var trace3 = {
  x: [0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5],
  y: y,
  name: 'carrots',
  marker: {color: '#FF851B'},
  type: 'box',
  boxmean: false,
  orientation: 'h'
};

var data = [trace1, trace2, trace3];

var layout = {
  title: {
    text: 'Grouped Horizontal Box Plot'
  },
  xaxis: {
    title: {
      text: 'normalized moisture'
    },
    zeroline: false
  },
  boxmode: 'group'
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Colored Box Plot
          
        

        
          
            
            
              
                var trace1 = {
  y: [1, 2, 3, 4, 4, 4, 8, 9, 10],
  type: 'box',
  name: 'Sample A',
  marker:{
    color: 'rgb(214,12,140)'
  }
};

var trace2 = {
  y: [2, 3, 3, 3, 3, 5, 6, 6, 7],
  type: 'box',
  name: 'Sample B',
  marker:{
    color: 'rgb(0,128,128)'
  }
};

var data = [trace1, trace2];

var layout = {
  title: {
    text: 'Colored Box Plot'
  }
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Fully Styled Box Plot
          
        

        
          
            
            
              
                var xData = ['Carmelo<br>Anthony', 'Dwyane<br>Wade',
      'Deron<br>Williams', 'Brook<br>Lopez',
      'Damian<br>Lillard', 'David<br>West',
      'Blake<br>Griffin', 'David<br>Lee',
      'Demar<br>Derozan'];

function getrandom(num , mul) {
    var value = [ ];
    for ( i = 0; i <= num; i++ ) {
        var rand = Math.random() * mul;
        value.push(rand);
    }
    return value;
}

var yData = [
        getrandom(30 ,10),
        getrandom(30, 20),
        getrandom(30, 25),
        getrandom(30, 40),
        getrandom(30, 45),
        getrandom(30, 30),
        getrandom(30, 20),
        getrandom(30, 15),
        getrandom(30, 43),
    ];
var colors = ['rgba(93, 164, 214, 0.5)', 'rgba(255, 144, 14, 0.5)', 'rgba(44, 160, 101, 0.5)', 'rgba(255, 65, 54, 0.5)', 'rgba(207, 114, 255, 0.5)', 'rgba(127, 96, 0, 0.5)', 'rgba(255, 140, 184, 0.5)', 'rgba(79, 90, 117, 0.5)', 'rgba(222, 223, 0, 0.5)'];

var data = [];

for ( var i = 0; i < xData.length; i ++ ) {
    var result = {
        type: 'box',
        y: yData[i],
        name: xData[i],
        boxpoints: 'all',
        jitter: 0.5,
        whiskerwidth: 0.2,
        fillcolor: 'cls',
        marker: {
            size: 2
        },
        line: {
            width: 1
        }
    };
    data.push(result);
};

layout = {
    title: {
        text: 'Points Scored by the Top 9 Scoring NBA Players in 2012'
    },
    yaxis: {
        autorange: true,
        showgrid: true,
        zeroline: true,
        dtick: 5,
        gridcolor: 'rgb(255, 255, 255)',
        gridwidth: 1,
        zerolinecolor: 'rgb(255, 255, 255)',
        zerolinewidth: 2
    },
    margin: {
        l: 40,
        r: 30,
        b: 80,
        t: 100
    },
    paper_bgcolor: 'rgb(243, 243, 243)',
    plot_bgcolor: 'rgb(243, 243, 243)',
    showlegend: false
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Rainbow Box Plot
          
        

        
          
            
            
              
                function linspace(a,b,n) {
  return d3.range(n).map(function(i){return a+i*(b-a)/(n-1);});
}
var boxNumber = 30;
var boxColor = [];
var allColors = linspace(0, 360, boxNumber);
var data = [];
var yValues = [];

//Colors

for( var i = 0; i < boxNumber;  i++ ){
  var result = 'hsl('+ allColors[i] +',50%'+',50%)';
  boxColor.push(result);
}

function getRandomArbitrary(min, max) {
  return Math.random() * (max - min) + min;
};

//Create Y Values

for( var i = 0; i < boxNumber;  i++ ){
  var ySingleArray = [];
    for( var j = 0; j < 10;  j++ ){
      var randomNum = getRandomArbitrary(0, 1);
      var yIndValue = 3.5*Math.sin(Math.PI * i/boxNumber) + i/boxNumber+(1.5+0.5*Math.cos(Math.PI*i/boxNumber))*randomNum;
      ySingleArray.push(yIndValue);
    }
  yValues.push(ySingleArray);
}

//Create Traces

for( var i = 0; i < boxNumber;  i++ ){
  var result = {
    y: yValues[i],
    type:'box',
    marker:{
      color: boxColor[i]
    }
  };
  data.push(result);
};

//Format the layout

var layout = {
  xaxis: {
    showgrid: false,
    zeroline: false,
    tickangle: 60,
    showticklabels: false
  },
  yaxis: {
    zeroline: false,
    gridcolor: 'white'
  },
  paper_bgcolor: 'rgb(233,233,233)',
  plot_bgcolor: 'rgb(233,233,233)',
  showlegend:false
};


Plotly.newPlot('myDiv', data, layout);\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Statistical Charts
            
            
                > Histograms
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Histograms
                  
                  in 
                  JavaScript
                  
                  
                
                How to make a D3.js-based histogram in JavaScript. Seven examples of colored, horizontal, and normal histogram bar charts. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Basic Histogram
          
        

        
          
            
            
              
                var x = [];
for (var i = 0; i < 500; i ++) {
	x[i] = Math.random();
}

var trace = {
    x: x,
    type: 'histogram',
  };
var data = [trace];
Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Horizontal Histogram
          
        

        
          
            
            
              
                var y = [];
for (var i = 0; i < 500; i ++) {
	y[i] = Math.random();
}

var data = [
  {
    y: y,
    type: 'histogram',
	marker: {
    color: 'pink',
	},
  }
];
Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Overlaid Histogram
          
        

        
          
            
            
              
                var x1 = [];
var x2 = [];
for (var i = 1; i < 500; i++)
{
	k = Math.random();
	x1.push(Math.random() + 1);
	x2.push(Math.random() + 1.1);
}
var trace1 = {
  x: x1,
  type: "histogram",
  opacity: 0.5,
  marker: {
     color: 'green',
  },
};
var trace2 = {
  x: x2,
  type: "histogram",
  opacity: 0.6,
  marker: {
     color: 'red',
  },
};

var data = [trace1, trace2];
var layout = {barmode: "overlay"};
Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Stacked Histograms
          
        

        
          
            
            
              
                var x1 = [];
var x2 = [];
for (var i = 0; i < 500; i ++) {
	x1[i] = Math.random();
	x2[i] = Math.random();
}

var trace1 = {
  x: x1,
  type: "histogram",
};
var trace2 = {
  x: x2,
  type: "histogram",
};
var data = [trace1, trace2];
var layout = {barmode: "stack"};
Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Colored and Styled Histograms
          
        

        
          
            
            
              
                var x1 = [];
var x2 = [];
var y1 = [];
var y2 = [];
for (var i = 1; i < 500; i++)
{
  k = Math.random();
  x1.push(k*5);
  x2.push(k*10);
  y1.push(k);
  y2.push(k*2);
}
var trace1 = {
  x: x1,
  y: y1,
  name: 'control',
  autobinx: false,
  histnorm: "count",
  marker: {
    color: "rgba(255, 100, 102, 0.7)",
     line: {
      color:  "rgba(255, 100, 102, 1)",
      width: 1
    }
  },
  opacity: 0.5,
  type: "histogram",
  xbins: {
    end: 2.8,
    size: 0.06,
    start: .5
  }
};
var trace2 = {
  x: x2,
  y: y2,
  autobinx: false,
  marker: {
          color: "rgba(100, 200, 102, 0.7)",
           line: {
            color:  "rgba(100, 200, 102, 1)",
            width: 1
    }
       },
  name: "experimental",
  opacity: 0.75,
  type: "histogram",
  xbins: {
    end: 4,
    size: 0.06,
    start: -3.2

  }
};
var data = [trace1, trace2];
var layout = {
  bargap: 0.05,
  bargroupgap: 0.2,
  barmode: "overlay",
  title: {
    text: "Sampled Results"
  },
  xaxis: {
      title: {
          text: "Value"
      }
  },
  yaxis: {
      title: {
          text: "Count"
      }
  }
};
Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Cumulative Histogram
          
        

        
          
            
            
              
                var x = [];
for (var i = 0; i < 500; i ++) {
	x[i] = Math.random();
}

var trace = {
    x: x,
    type: 'histogram',
	cumulative: {enabled: true}
  };
var data = [trace];
Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Normalized Histogram
          
        

        
          
            
            
              
                var x = [];
for (var i = 0; i < 500; i ++) {
	x[i] = Math.random();
}

var data = [
  {
    x: x,
    type: 'histogram',
	histnorm: 'probability',
	marker: {
        color: 'rgb(255,255,100)',
     },
  }
];
Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Specify Binning Function
          
        

        
          
            
            
              
                var x = ["Apples","Apples","Apples","Oranges", "Bananas"]
var y = ["5","10","3","10","5"]

var data = [
  {
    histfunc: "count",
    y: y,
    x: x,
    type: "histogram",
    name: "count"
  },
  {
    histfunc: "sum",
    y: y,
    x: x,
    type: "histogram",
    name: "sum"
  }
]

Plotly.newPlot('myDiv', data)\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Statistical Charts
            
            
                > 2d Density Plots
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  2d Density Plots
                  
                  in 
                  JavaScript
                  
                  
                
                How to make a D3.js-based 2d density plot in JavaScript. Examples of density plots with kernel density estimations, custom color-scales, and smoothing. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            2D Histogram Contour Plot with Histogram Subplots
          
        

        
          
            
            
              
                // from http://bl.ocks.org/mbostock/4349187
// Sample from a normal distribution with mean 0, stddev 1.

function normal() {
    var x = 0,
        y = 0,
        rds, c;
    do {
        x = Math.random() * 2 - 1;
        y = Math.random() * 2 - 1;
        rds = x * x + y * y;
    } while (rds == 0 || rds > 1);
    c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform
    return x * c; // throw away extra sample y * c
}

var N = 2000,
  a = -1,
  b = 1.2;

var step = (b - a) / (N - 1);
var t = new Array(N), x = new Array(N), y = new Array(N);

for(var i = 0; i < N; i++){
  t[i] = a + step * i;
  x[i] = (Math.pow(t[i], 3)) + (0.3 * normal() );
  y[i] = (Math.pow(t[i], 6)) + (0.3 * normal() );
}

var trace1 = {
  x: x,
  y: y,
  mode: 'markers',
  name: 'points',
  marker: {
    color: 'rgb(102,0,0)',
    size: 2,
    opacity: 0.4
  },
  type: 'scatter'
};
var trace2 = {
  x: x,
  y: y,
  name: 'density',
  ncontours: 20,
  colorscale: 'Hot',
  reversescale: true,
  showscale: false,
  type: 'histogram2dcontour'
};
var trace3 = {
  x: x,
  name: 'x density',
  marker: {color: 'rgb(102,0,0)'},
  yaxis: 'y2',
  type: 'histogram'
};
var trace4 = {
  y: y,
  name: 'y density',
  marker: {color: 'rgb(102,0,0)'},
  xaxis: 'x2',
  type: 'histogram'
};
var data = [trace1, trace2, trace3, trace4];
var layout = {
  showlegend: false,
  autosize: false,
  width: 600,
  height: 550,
  margin: {t: 50},
  hovermode: 'closest',
  bargap: 0,
  xaxis: {
    domain: [0, 0.85],
    showgrid: false,
    zeroline: false
  },
  yaxis: {
    domain: [0, 0.85],
    showgrid: false,
    zeroline: false
  },
  xaxis2: {
    domain: [0.85, 1],
    showgrid: false,
    zeroline: false
  },
  yaxis2: {
    domain: [0.85, 1],
    showgrid: false,
    zeroline: false
  }
};
Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            2D Histogram Contour Plot with Slider Control
          
        

        
          
            
            
              
                Add slider controls to 2d-density-plot plots with the <a href="https://github.com/plotly/postMessage-API" target="_blank">postMessage API</a>.

See the <a href="https://jsfiddle.net/plotlygraphs/y9sdy76h/4/" target="_blank">code on JSFiddle</a>.

Watch <a href="https://raw.githubusercontent.com/plotly/documentation/gh-pages/all_static/images/flight_conflicts.gif" target="_blank">the 5 second video</a> of how it works.\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Statistical Charts
            
            
                > Continuous Error Bars
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Continuous Error Bars
                  
                  in 
                  JavaScript
                  
                  
                
                How to add D3.js-based continuous error bars to a line, scatter, or bar chart. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Filled Lines
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 
  y: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], 
  fill: "tozerox", 
  fillcolor: "rgba(0,100,80,0.2)", 
  line: {color: "transparent"}, 
  name: "Fair", 
  showlegend: false, 
  type: "scatter"
};
var trace2 = {
  x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 
  y: [5.5, 3, 5.5, 8, 6, 3, 8, 5, 6, 5.5, 4.75, 5, 4, 7, 2, 4, 7, 4.4, 2, 4.5], 
  fill: "tozerox", 
  fillcolor: "rgba(0,176,246,0.2)", 
  line: {color: "transparent"}, 
  name: "Premium", 
  showlegend: false, 
  type: "scatter"
};
var trace3 = {
  x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 
  y: [11, 9, 7, 5, 3, 1, 3, 5, 3, 1, -1, 1, 3, 1, -0.5, 1, 3, 5, 7, 9], 
  fill: "tozerox", 
  fillcolor: "rgba(231,107,243,0.2)", 
  line: {color: "transparent"}, 
  name: "Ideal", 
  showlegend: false, 
  type: "scatter"
};
var trace4 = {
  x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 
  y: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 
  line: {color: "rgb(0,100,80)"}, 
  mode: "lines", 
  name: "Fair", 
  type: "scatter"
};
var trace5 = {
  x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 
  y: [5, 2.5, 5, 7.5, 5, 2.5, 7.5, 4.5, 5.5, 5], 
  line: {color: "rgb(0,176,246)"}, 
  mode: "lines", 
  name: "Premium", 
  type: "scatter"
};
var trace6 = {
  x: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 
  y: [10, 8, 6, 4, 2, 0, 2, 4, 2, 0], 
  line: {color: "rgb(231,107,243)"}, 
  mode: "lines", 
  name: "Ideal", 
  type: "scatter"
};
var data = [trace1, trace2, trace3, trace4, trace5, trace6];
var layout = {
  paper_bgcolor: "rgb(255,255,255)", 
  plot_bgcolor: "rgb(229,229,229)", 
  xaxis: {
    gridcolor: "rgb(255,255,255)", 
    range: [1, 10], 
    showgrid: true, 
    showline: false, 
    showticklabels: true, 
    tickcolor: "rgb(127,127,127)", 
    ticks: "outside", 
    zeroline: false
  }, 
  yaxis: {
    gridcolor: "rgb(255,255,255)", 
    showgrid: true, 
    showline: false, 
    showticklabels: true, 
    tickcolor: "rgb(127,127,127)", 
    ticks: "outside", 
    zeroline: false
  }
};
Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Asymmetric Error Bars with a Constant Offset
          
        

        
          
            
            
              
                function random_date(start, end, mul)
  {
    return new Date(start.getTime() + mul * (end.getTime() - start.getTime()));
  }

function date_list(y1,m1,d1,y2,m2,d2,count)
  {
    var a =[];
    for(i=0;i<count;i++)
    {
      a.push(random_date(new Date(y1, m1, d1), new Date(y2,m2,d2),i));
    }
      return a;
  }

function random_number(num , mul)
  {
     var value = [ ];
     for(i=0;i<=num;i++)
      {
        var rand = Math.random() * mul;
        value.push(rand);
      }
     return value;
  }

var trace1 = {
  x: date_list(2001,01,01,2001,02,01,50),
  y: random_number(50,20),
  line: {width: 0},
  marker: {color: "444"},
  mode: "lines",
  name: "Lower Bound",
  type: "scatter"
};

var trace2 = {
  x: date_list(2001,01,01,2001,02,01,50),
  y: random_number(50,21),
  fill: "tonexty",
  fillcolor: "rgba(68, 68, 68, 0.3)",
  line: {color: "rgb(31, 119, 180)"},
  mode: "lines",
  name: "Measurement",
  type: "scatter"
};

var trace3 = {
  x: date_list(2001,01,01,2001,02,01,50),
  y: random_number(50,22),
  fill: "tonexty",
  fillcolor: "rgba(68, 68, 68, 0.3)",
  line: {width: 0},
  marker: {color: "444"},
  mode: "lines",
  name: "Upper Bound",
  type: "scatter"
}

var data = [trace1, trace2, trace3];
var layout = {
  showlegend: false,
  title: {
    text: "Continuous, variable value error bars<br>Notice the hover text!"
  },
  yaxis: {
    title: {
      text: "Wind speed (m/s)"
    }
  }
};
Plotly.newPlot('myDiv', data, layout);\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            

            

            

            
            
            
        
    
    


                
                


    
        
        

            
                Plotly JavaScript Open Source Graphing Library
                
                    Built on top of d3.js and stack.gl, Plotly.js is a high-level, declarative charting library. plotly.js ships with over 40 chart types, including 3D charts, statistical graphs, and SVG maps.
                    plotly.js is free and open source and you can view the source, report issues or contribute on GitHub.
                
            
        
        
          
            

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




            
            
                Read more about plotly.js features
                

                

                    
                        Sophisticated chart types
                    
                    
                        plotly.js abstracts the types of statistical and scientific charts that you would find in packages like matplotlib, ggplot2, or MATLAB.
                    

                    
                    
                        
                    
                    d3.json('https://plotly.com/~DanielCarrera/13.json', function(figure){
                  var trace = {
                    x: figure.data[0].x, y: figure.data[0].y, z: figure.data[0].z,
                    type: 'contour', autocolorscale: false,
                    colorscale: [[0,"rgb(  0,  0,  0)"],[0.3,"rgb(230,  0,  0)"],[0.6,"rgb(255,210,  0)"],[1,"rgb(255,255,255)"]],
                    reversescale: true, zmax: 2.5, zmin: -2.5
                  };
                  var layout = {
                    title: {
                      text: 'turbulence simulation'
                  },
                    xaxis: {
                      title: {
                          text: 'radial direction'
                      },
                      showline: true,
                      mirror: 'allticks',
                      ticks: 'inside'
                    },
                    yaxis: {
                        title: {
                            text: 'vertical direction'
                        },
                        showline: true,
                        mirror: 'allticks',
                        ticks: 'inside'
                    },
                    margin: {l: 40, b: 40, t: 60},
                    annotations: [{
                      showarrow: false,
                      text: 'Credit: Daniel Carrera',
                      x: 0, y: 0, xref: 'paper', yref: 'paper'
                    }]
                  }
                  Plotly.newPlot(document.getElementById('contour-plot'), [trace], layout, {showLink: false});
                });



                    Fully customizable
                    
                        plotly.js charts are described declaratively as JSON objects. Every aspect of the charts, such as colors, grid lines, and the legend, has a corresponding set of JSON attributes.
                        
                            view all of the available attributes
                        
                    

                    d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv', function(rows){
                    var trace = {
                      type: 'scatter',                    // set the chart type
                      mode: 'lines',                      // connect points with lines
                      x: rows.map(function(row){          // set the x-data
                        return row['Time'];
                      }),
                      y: rows.map(function(row){          // set the x-data
                        return row['10 Min Sampled Avg'];
                      }),
                      line: {                             // set the width of the line.
                        width: 1
                      },
                      error_y: {
                        array: rows.map(function(row){    // set the height of the error bars
                          return row['10 Min Std Dev'];
                        }),
                        thickness: 0.5,                   // set the thickness of the error bars
                        width: 0
                      }
                    };

                    var layout = {
                      yaxis: {
                        title: {
                          text: "Wind Speed"
                        }
                      },       // set the y axis title
                      xaxis: {
                        showgrid: false,                  // remove the x-axis grid lines
                        tickformat: "%B, %Y"              // customize the date format to "month, day"
                      },
                      margin: {                           // update the left, bottom, right, top margin
                        l: 40, b: 10, r: 10, t: 20
                      }
                    };

                    Plotly.newPlot(document.getElementById('wind-speed'), [trace], layout, {showLink: false});
                });



                    High performance
                    
                        
                            Most plotly graphs are drawn with SVG. This offers great compatibility across browsers and publication-quality vector image export. Unfortunately, there are inherent performance limitations with the number of SVG elements that you can draw in the DOM.
                            plotly.js uses stack.gl for high performance 2D and 3D charting.
                        
                        
                            
                                
                            
                            
                                This chart was drawn with the plotly.js chart type scattergl. scattergl charts render an order of magnitude faster than their SVG counterparts.
                            
                        
                        
                            
                                
                                
                                
                            
                            
                                All 3D charts in plotly.js are rendered with WebGL, leveraging the power of the GPU for fast interactivity.
                                view the interactive version
                            
                        
                    
                    Universal
                    
                        By abstracting charts to a declarative JSON structure, plotly.js is used as a browser-based charting library for Python, R, MATLAB.
                    

                
                
            
          


        
    


















    
        Fundamentals

        
        More Fundamentals »
        
    
    
        

            
                    
                    

    
        Configuration Options
        
            View Tutorial
            
        
    


                
                    
                    

    
        Responsive / Fluid Layouts
        
            View Tutorial
            
        
    


                
                    
                    

    
        uirevision in Plotly.react
        
            View Tutorial
            
        
    


                
                    
                    

    
        React Plotly.js
        
            View Tutorial
            
        
    


                
                    
                    

    
        Analytical Apps with Dash
        
            View Tutorial
            
        
    


                
    










    
        Basic Charts

        
        More Basic Charts »
        
    
    
        

            

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Scatter Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Line Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bar Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Pie Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bubble Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
    





    
        Statistical Charts

        
        More Statistical Charts »
        
    
    
        

            
                    
                    

    
        Error Bars
        
            View Tutorial
            
        
    


                
                    
                    

    
        Box Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        2d Density Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Continuous Error Bars
        
            View Tutorial
            
        
    


                
    





    
        Scientific Charts

        
        More Scientific Charts »
        
    
    
        

            
                    
                    

    
        Contour Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Heatmaps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ternary Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Parallel Coordinates Plot
        
            View Tutorial
            
        
    


                
                    
                    

    
        Log Plots
        
            View Tutorial
            
        
    


                
    





    
        Financial Charts

        
        More Financial Charts »
        
    
    
        

            
                    
                    

    
        Waterfall Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Indicators
        
            View Tutorial
            
        
    


                
                    
                    

    
        Candlestick Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Funnel and Funnelarea Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Time Series
        
            View Tutorial
            
        
    


                
    





    
        Maps

        
        More Maps »
        
    
    
        

            
                    
                    

    
        Migrate to Maplibre
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Map Layers
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Density Heatmap
        
            View Tutorial
            
        
    


                
                    
                    

    
        Choropleth Tile Map
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lines on Maps
        
            View Tutorial
            
        
    


                
    










    
        3D Charts

        
        More 3D Charts »
        
    
    
        

            
                    
                    

    
        3D Scatter Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ribbon Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Surface Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Mesh Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Line Plots
        
            View Tutorial
            
        
    


                
    





    
        Subplots

        
        More Subplots »
        
    
    
        

            
                    
                    

    
        Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Inset Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Mixed Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Table Subplots
        
            View Tutorial
            
        
    


                
    









    
        Custom Chart Events

        
    
    
        

            
                    
                    

    
        Click Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Hover Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Zoom Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Disable Zoom Events
        
            View Tutorial
            
        
    


                
    





    
        Add Custom Controls

        
        More Controls »
        
    
    
        

            
                    
                    

    
        Dropdown Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Button Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Slider Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lasso Selection
        
            View Tutorial
            
        
    


                
                    
                    

    
        Range Slider and Selector
        
            View Tutorial
            
        
    


                
    





    
        Animations

        
    
    
        

            
                    
                    

    
        Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Adding Sliders to Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Filled-Area Animation
        
            View Tutorial
            
        
    


                
                    
                    

    
        Map Animation
        
            View Tutorial\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Scientific Charts
            
            
                > Contour Plots
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Contour Plots
                  
                  in 
                  JavaScript
                  
                  
                
                How to make a D3.js-based contour plot in javascript. Examples of contour plots of matrices with subplots, custom color-scales, and smoothing. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Simple Contour Plot
          
        

        
          
            
            
              
                var size = 100, x = new Array(size), y = new Array(size), z = new Array(size), i, j;

for(var i = 0; i < size; i++) {
	x[i] = y[i] = -2 * Math.PI + 4 * Math.PI * i / size;
  	z[i] = new Array(size);
}

for(var i = 0; i < size; i++) {
  	for(j = 0; j < size; j++) {
    	var r2 = x[i]*x[i] + y[j]*y[j];
    	z[i][j] = Math.sin(x[i]) * Math.cos(y[j]) * Math.sin(r2) / Math.log(r2+1);
 	}
}

var data = [ {
		z: z,
		x: x,
		y: y,
		type: 'contour'
	}
];

Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Basic Contour Plot
          
        

        
          
            
            
              
                var data = [ {
		z: [[10, 10.625, 12.5, 15.625, 20],
    [5.625, 6.25, 8.125, 11.25, 15.625],
    [2.5, 3.125, 5.0, 8.125, 12.5],
    [0.625, 1.25, 3.125, 6.25, 10.625],
    [0, 0.625, 2.5, 5.625, 10]],
		type: 'contour'
	}
];

var layout = {
  title: {
    text: 'Basic Contour Plot'
  }
}

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Setting X and Y Coordinates in a Contour Plot
          
        

        
          
            
            
              
                var data = [{
  z: [[10, 10.625, 12.5, 15.625, 20],
       [5.625, 6.25, 8.125, 11.25, 15.625],
       [2.5, 3.125, 5., 8.125, 12.5],
       [0.625, 1.25, 3.125, 6.25, 10.625],
       [0, 0.625, 2.5, 5.625, 10]],
  x: [-9, -6, -5 , -3, -1],
  y: [0, 1, 4, 5, 7],
  type: 'contour'
}];

var layout = {
  title: {
    text: 'Setting the X and Y Coordinates in a Contour Plot'
  }
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Colorscale for Contour Plot
          
        

        
          
            
            
              
                var data = [{
  z: [[10, 10.625, 12.5, 15.625, 20],
     [5.625, 6.25, 8.125, 11.25, 15.625],
     [2.5, 3.125, 5., 8.125, 12.5],
     [0.625, 1.25, 3.125, 6.25, 10.625],
     [0, 0.625, 2.5, 5.625, 10]],
  type: 'contour',
  colorscale: 'Jet',
}];

var layout = {
  title: {
    text: 'Colorscale for Contour Plot'
  }
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Customizing Size and Range of a Contour Plot's Contours
          
        

        
          
            
            
              
                var data = [ {
  z: [[10, 10.625, 12.5, 15.625, 20],
       [5.625, 6.25, 8.125, 11.25, 15.625],
       [2.5, 3.125, 5., 8.125, 12.5],
       [0.625, 1.25, 3.125, 6.25, 10.625],
       [0, 0.625, 2.5, 5.625, 10]],
  type: 'contour',
  colorscale: 'Jet',
  autocontour: false,
  contours: {
    start: 0,
    end: 8,
    size: 2
  }
}];

var layout = {
  title: {
    text: 'Customizing Size and Range of Contours'
  }
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Customizing Spacing Between X and Y Ticks
          
        

        
          
            
            
              
                var data = [ {
  z: [[10, 10.625, 12.5, 15.625, 20],
       [5.625, 6.25, 8.125, 11.25, 15.625],
       [2.5, 3.125, 5., 8.125, 12.5],
       [0.625, 1.25, 3.125, 6.25, 10.625],
       [0, 0.625, 2.5, 5.625, 10]],
  type: 'contour',
  colorscale: 'Jet',
  dx: 10,
  x0: 5,
  dy: 10,
  y0: 10
}];

var layout = {
  title: {
    text: 'Customizing Spacing Between X and Y Axis Ticks'
  }
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Connect the Gaps between Null Values in the Z Matrix
          
        

        
          
            
            
              
                var trace1 = {
  z: [[null, null, null, 12, 13, 14, 15, 16],
      [null, 1, null, 11, null, null, null, 17],
      [null, 2, 6, 7, null, null, null, 18],
      [null, 3, null, 8, null, null, null, 19],
      [5, 4, 10, 9, null, null, null, 20],
      [null, null, null, 27, null, null, null, 21],
      [null, null, null, 26, 25, 24, 23, 22]],
  type: 'contour',
  showscale: false,
  xaxis: 'x1',
  yaxis: 'y1'
};

var trace2 = {
  z: [[null, null, null, 12, 13, 14, 15, 16],
      [null, 1, null, 11, null, null, null, 17],
      [null, 2, 6, 7, null, null, null, 18],
      [null, 3, null, 8, null, null, null, 19],
      [5, 4, 10, 9, null, null, null, 20],
      [null, null, null, 27, null, null, null, 21],
      [null, null, null, 26, 25, 24, 23, 22]],
  connectgaps: true,
  type: 'contour',
  showscale: false,
  xaxis: 'x2',
  yaxis: 'y2'
};

var trace3 = {
  z: [[null, null, null, 12, 13, 14, 15, 16],
      [null, 1, null, 11, null, null, null, 17],
      [null, 2, 6, 7, null, null, null, 18],
      [null, 3, null, 8, null, null, null, 19],
      [5, 4, 10, 9, null, null, null, 20],
      [null, null, null, 27, null, null, null, 21],
      [null, null, null, 26, 25, 24, 23, 22]],
  zsmooth: 'best',
  type: 'heatmap',
  showscale: false,
  xaxis: 'x3',
  yaxis: 'y3'
};

var trace4 = {
  z: [[null, null, null, 12, 13, 14, 15, 16],
      [null, 1, null, 11, null, null, null, 17],
      [null, 2, 6, 7, null, null, null, 18],
      [null, 3, null, 8, null, null, null, 19],
      [5, 4, 10, 9, null, null, null, 20],
      [null, null, null, 27, null, null, null, 21],
      [null, null, null, 26, 25, 24, 23, 22]],
  zsmooth: 'best',
  type: 'heatmap',
  showscale: false,
  connectgaps: true,
  xaxis: 'x4',
  yaxis: 'y4'
};

var data = [trace1, trace2, trace3, trace4];

var layout = {
  title: {
    text: 'Connect the Gaps Between Null Values in the Z Matrix'
  },
  xaxis: {domain: [0, 0.45],
    anchor: 'y1'},
  yaxis: {domain: [0.55, 1],
    anchor: 'x1'},
  xaxis2: {domain: [0.55, 1],
    anchor: 'y2'},
  yaxis2: {domain: [0.55, 1],
    anchor: 'x2'},
  xaxis3: {domain: [0, 0.45],
    anchor: 'y3'},
  yaxis3: {domain: [0, 0.45],
    anchor: 'x3'},
  xaxis4: {domain: [0.55, 1],
    anchor: 'y4'},
  yaxis4: {domain: [0, 0.45],
    anchor: 'x4'}
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Smoothing Contour Lines
          
        

        
          
            
            
              
                var data = [ {
  z: [[2, 4, 7, 12, 13, 14, 15, 16],
   [3, 1, 6, 11, 12, 13, 16, 17],
   [4, 2, 7, 7, 11, 14, 17, 18],
   [5, 3, 8, 8, 13, 15, 18, 19],
   [7, 4, 10, 9, 16, 18, 20, 19],
   [9, 10, 5, 27, 23, 21, 21, 21],
   [11, 14, 17, 26, 25, 24, 23, 22]],
  type: 'contour',
  line:{
    smoothing: 0
  },
  xaxis: 'x1',
  yaxis: 'y1'
},
{
  z: [[2, 4, 7, 12, 13, 14, 15, 16],
   [3, 1, 6, 11, 12, 13, 16, 17],
   [4, 2, 7, 7, 11, 14, 17, 18],
   [5, 3, 8, 8, 13, 15, 18, 19],
   [7, 4, 10, 9, 16, 18, 20, 19],
   [9, 10, 5, 27, 23, 21, 21, 21],
   [11, 14, 17, 26, 25, 24, 23, 22]],
  type: 'contour',
  line:{
    smoothing: 0.85
  },
  xaxis: 'x2',
  yaxis: 'y2'
}];

var layout = {
  title: {
    text: 'Smoothing Contour Lines'
  },
  xaxis: {domain: [0, 0.45],
     anchor: 'y1'},
  yaxis: {domain: [0, 1],
         anchor: 'x1'},
  xaxis2: {domain: [0.55, 1],
         anchor: 'y2'},
  yaxis2: {domain: [0, 1],
         anchor: 'x2'}
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Smooth Contour Coloring
          
        

        
          
            
            
              
                var data = [ {
  z: [[10, 10.625, 12.5, 15.625, 20],
       [5.625, 6.25, 8.125, 11.25, 15.625],
       [2.5, 3.125, 5., 8.125, 12.5],
       [0.625, 1.25, 3.125, 6.25, 10.625],
       [0, 0.625, 2.5, 5.625, 10]],
  type: 'contour',
  contours: {
    coloring: 'heatmap'
  }
}];

var layout = {
  title: {
    text: 'Smooth Contour Coloring'
  }
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Contour Lines
          
        

        
          
            
            
              
                var data = [ {
  z: [[10, 10.625, 12.5, 15.625, 20],
       [5.625, 6.25, 8.125, 11.25, 15.625],
       [2.5, 3.125, 5., 8.125, 12.5],
       [0.625, 1.25, 3.125, 6.25, 10.625],
       [0, 0.625, 2.5, 5.625, 10]],
  type: 'contour',
  colorscale: 'Jet',
  contours:{
    coloring: 'lines'
  }
}];

var layout = {
  title: {
    text: 'Contour Lines'
  }
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Contour Line Labels
          
        

        
          
            
            
              
                var data = [ {
  z: [[10, 10.625, 12.5, 15.625, 20],
      [5.625, 6.25, 8.125, 11.25, 15.625],
      [2.5, 3.125, 5.0, 8.125, 12.5],
      [0.625, 1.25, 3.125, 6.25, 10.625],
      [0, 0.625, 2.5, 5.625, 10]],
  type: 'contour',
  contours: {
    coloring: 'heatmap',
    showlabels: true,
    labelfont: {
      family: 'Raleway',
      size: 12,
      color: 'white',
    }
  }
}];

var layout = {
  title: {
    text: 'Contour with Labels'
  }
}

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Custom Colorscale for Contour Plot
          
        

        
          
            
            
              
                var data = [ {
  z: [[10, 10.625, 12.5, 15.625, 20],
       [5.625, 6.25, 8.125, 11.25, 15.625],
       [2.5, 3.125, 5., 8.125, 12.5],
       [0.625, 1.25, 3.125, 6.25, 10.625],
       [0, 0.625, 2.5, 5.625, 10]],
  type: 'contour',
  colorscale: [[0, 'rgb(166,206,227)'], [0.25, 'rgb(31,120,180)'], [0.45, 'rgb(178,223,138)'], [0.65, 'rgb(51,160,44)'], [0.85, 'rgb(251,154,153)'], [1, 'rgb(227,26,28)']]
}
];

var layout = {
  title: {
    text: 'Custom Contour Plot Colorscale'
  }
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Color Bar Title
          
        

        
          
            
            
              
                var data = [ {
  z: [[10, 10.625, 12.5, 15.625, 20],
       [5.625, 6.25, 8.125, 11.25, 15.625],
       [2.5, 3.125, 5., 8.125, 12.5],
       [0.625, 1.25, 3.125, 6.25, 10.625],
       [0, 0.625, 2.5, 5.625, 10]],
  type: 'contour',
  colorbar:{
    title: {
      text: 'Color Bar Title',
      side: 'right',
      font: {
        size: 14,
        family: 'Arial, sans-serif'
      }
    }
  }
}];

var layout = {
  title: {
    text: 'Colorbar with a Title'
  }
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Color Bar Size
          
        

        
          
            
            
              
                var data = [ {
  z: [[10, 10.625, 12.5, 15.625, 20],
       [5.625, 6.25, 8.125, 11.25, 15.625],
       [2.5, 3.125, 5., 8.125, 12.5],
       [0.625, 1.25, 3.125, 6.25, 10.625],
       [0, 0.625, 2.5, 5.625, 10]],
  type: 'contour',
  colorbar:{
    thickness: 75,
    thicknessmode: 'pixels',
    len: 0.9,
    lenmode: 'fraction',
    outlinewidth: 0
  }
}];

var layout = {
  title: {
    text: 'Colorbar Size for Contour Plots'
  }
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Styling Color Bar Ticks for Contour Plots
          
        

        
          
            
            
              
                var data = [ {
  z: [[10, 10.625, 12.5, 15.625, 20],
       [5.625, 6.25, 8.125, 11.25, 15.625],
       [2.5, 3.125, 5., 8.125, 12.5],
       [0.625, 1.25, 3.125, 6.25, 10.625],
       [0, 0.625, 2.5, 5.625, 10]],
  type: 'contour',
  colorbar:{
    ticks: 'outside',
    dtick: 1,
    tickwidth: 2,
    ticklen: 10,
    tickcolor: 'grey',
    showticklabels: true,
    tickfont: {
      size: 15
    },
    xpad: 50
  }
}];

var layout = {
  title: {
    text: 'Styling Color Bar Ticks for Contour Plots'
  }
};

Plotly.newPlot('myDiv', data, layout);\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Scientific Charts
            
            
                > Heatmaps
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Heatmaps
                  
                  in 
                  JavaScript
                  
                  
                
                How to make a D3.js-based heatmap in javascript with a matrix. Seven examples of colored and labeled heatmaps with custom colorscales. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Basic Heatmap
          
        

        
          
            
            
              
                var data = [
  {
    z: [[1, 20, 30], [20, 1, 60], [30, 60, 1]],
    type: 'heatmap'
  }
];

Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Heatmap with Categorical Axis Labels
          
        

        
          
            
              In this example we also show how to ignore hovertext when we have missing values in the data by setting the hoverongaps to False.

            
            
              
                var data = [
  {
    z: [[1, null, 30, 50, 1], [20, 1, 60, 80, 30], [30, 60, 1, -10, 20]],
    x: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],
    y: ['Morning', 'Afternoon', 'Evening'],
    type: 'heatmap',
    hoverongaps: false
  }
];

Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Annotated Heatmap
          
        

        
          
            
            
              
                var xValues = ['A', 'B', 'C', 'D', 'E'];

var yValues = ['W', 'X', 'Y', 'Z'];

var zValues = [
  [0.00, 0.00, 0.75, 0.75, 0.00],
  [0.00, 0.00, 0.75, 0.75, 0.00],
  [0.75, 0.75, 0.75, 0.75, 0.75],
  [0.00, 0.00, 0.00, 0.75, 0.00]
];

var colorscaleValue = [
  [0, '#3D9970'],
  [1, '#001f3f']
];

var data = [{
  x: xValues,
  y: yValues,
  z: zValues,
  type: 'heatmap',
  colorscale: colorscaleValue,
  showscale: false
}];

var layout = {
  title: {
    text: 'Annotated Heatmap'
  },
  annotations: [],
  xaxis: {
    ticks: '',
    side: 'top'
  },
  yaxis: {
    ticks: '',
    ticksuffix: ' ',
    width: 700,
    height: 700,
    autosize: false
  }
};

for ( var i = 0; i < yValues.length; i++ ) {
  for ( var j = 0; j < xValues.length; j++ ) {
    var currentValue = zValues[i][j];
    if (currentValue != 0.0) {
      var textColor = 'white';
    }else{
      var textColor = 'black';
    }
    var result = {
      xref: 'x1',
      yref: 'y1',
      x: xValues[j],
      y: yValues[i],
      text: zValues[i][j],
      font: {
        family: 'Arial',
        size: 12,
        color: 'rgb(50, 171, 96)'
      },
      showarrow: false,
      font: {
        color: textColor
      }
    };
    layout.annotations.push(result);
  }
}

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Heatmap with Unequal Block Sizes
          
        

        
          
            
            
              
                function linspace(a,b,n) {
  return d3.range(n).map(function(i){return a+i*(b-a)/(n-1);});
}
//number of spiral loops

var nspiral = 2;

// angle

var th = linspace(((-Math.PI) / 13), (2 * Math.PI * nspiral), 1000);

//Empty Value Containers

var xValues = [];
var yValues = [];
var yShift = [];
var finalX = [];
var finalY = [];

//spiral

for(var i = 0; i < th.length; i++){
  var a = 1.120529;
  var b = 0.306349;
  var r = a * Math.exp((-b) * th[i]);
  var xResult = (r * Math.cos(th[i]));
  var yResult = (r * Math.sin(th[i]));
  xValues.push(xResult);
  yValues.push(yResult);
}

function getMaxOfArray(numArray) {
  return Math.max.apply(null, numArray);
};

function getMinOfArray(numArray) {
  return Math.min.apply(null, numArray);
};

//Shift spiral north so that it is centered

var yShift = (1.6 - (getMaxOfArray(yValues) - getMinOfArray(yValues))) / 2;

var spiralTrace = {
  x: xValues.map(function(xi) { return -(xi) + xValues[0]; }),
  y: yValues.map(function(yi) { return yi - yValues[0] + yShift; }),
  type: 'scatter',
  line: {
    color: 'white',
    width: 3
  }
};

//Build the rectangles as a heatmap and specify the edges of the heatmap squares

var phi = (1 + Math.sqrt(5)) / 2;
var xe = [0, 1, (1 + (1 / Math.pow(phi,4))), 1 + (1 / Math.pow(phi,3)), phi];
var ye = [0, (1 / Math.pow(phi,3)), (1 / Math.pow(phi,3)) + (1 / Math.pow(phi,4)), (1 / Math.pow(phi,2)), 1];

var zValues = [
  [13, 3, 3, 5],
  [13, 2, 1, 5],
  [13, 10, 11, 12],
  [13, 8, 8, 8]
];

var hm = {
  x: xe,
  y: ye.map(function(yi) { return yi + yShift; }),
  z: zValues,
  type: 'heatmap',
  colorscale: 'Viridis'
};

var axisTemplate = {
  range: [0, 1.6],
  autorange: false,
  showgrid: false,
  zeroline: false,
  linecolor: 'black',
  showticklabels: false,
  ticks: ''
};

var data = [spiralTrace, hm];

var layout = {
  title: {
    text: 'Heatmap with Unequal Block Sizes'
  },
  margin: {
    t: 200,
    r: 200,
    b: 200,
    l: 200
  },
  xaxis: axisTemplate,
  yaxis: axisTemplate,
  showlegend: false,
  width: 700,
  height: 700,
  autosize: false
};

Plotly.newPlot('myDiv', data, layout);\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Scientific Charts
            
            
                > Ternary Plots
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Ternary Plots
                  
                  in 
                  JavaScript
                  
                  
                
                How to create D3.js-based ternary plots. Examples of Ternary Plots with plotly. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Basic Ternary Plot with Markers
          
        

        
          
            
            
              
                var rawData = [
    {journalist:75,developer:25,designer:0,label:'point 1'},
    {journalist:70,developer:10,designer:20,label:'point 2'},
    {journalist:75,developer:20,designer:5,label:'point 3'},
    {journalist:5,developer:60,designer:35,label:'point 4'},
    {journalist:10,developer:80,designer:10,label:'point 5'},
    {journalist:10,developer:90,designer:0,label:'point 6'},
    {journalist:20,developer:70,designer:10,label:'point 7'},
    {journalist:10,developer:20,designer:70,label:'point 8'},
    {journalist:15,developer:5,designer:80,label:'point 9'},
    {journalist:10,developer:10,designer:80,label:'point 10'},
    {journalist:20,developer:10,designer:70,label:'point 11'},
];

Plotly.newPlot('myDiv', [{
    type: 'scatterternary',
    mode: 'markers',
    a: rawData.map(function(d) { return d.journalist; }),
    b: rawData.map(function(d) { return d.developer; }),
    c: rawData.map(function(d) { return d.designer; }),
    text: rawData.map(function(d) { return d.label; }),
    marker: {
        symbol: 100,
        color: '#DB7365',
        size: 14,
        line: { width: 2 }
    },
}], {
    ternary: {
        sum: 100,
        aaxis: makeAxis('Journalist', 0),
        baxis: makeAxis('<br>Developer', 45),
        caxis: makeAxis('<br>Designer', -45),
        bgcolor: '#fff1e0'
    },
    annotations: [{
      showarrow: false,
      text: 'Replica of Tom Pearson\'s <a href="http://bl.ocks.org/tomgp/7674234">block</a>',
        x: 1.0,
        y: 1.3,
        font: { size: 15 }
    }],
    paper_bgcolor: '#fff1e0',
});

function makeAxis(title, tickangle) {
    return {
        title: {
            text: title,
            font: {
                size: 20
            }
        },
        tickangle: tickangle,
        tickfont: {
            size: 15
        },
        tickcolor: 'rgba(0,0,0,0)',
        ticklen: 5,
        showline: true,
        showgrid: true
    };
}

              
            
            
              
                Inspired from Tom Pearson's block
              
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Soil Types Ternary Plot
          
        

        
          
            
            
              
                var url = 'https://gist.githubusercontent.com/davenquinn/988167471993bc2ece29/raw/f38d9cb3dd86e315e237fde5d65e185c39c931c2/data.json';

d3.json(url, function(err, rawData) {
    if(err) throw err;

    plot(rawData);
});

function plot(rawData) {
    var data = Object.keys(rawData).map(function(k) {
        var pts = rawData[k];

        return {
            type: 'scatterternary',
            mode: 'lines',
            name: k,
            a: pts.map(function(d) { return d.clay }),
            b: pts.map(function(d) { return d.sand }),
            c: pts.map(function(d) { return d.silt }),
            line: { color: '#c00' }
        };
    });

    var layout = {
        ternary: {
            sum: 100,
            aaxis: makeAxis('Clay'),
            baxis: makeAxis('Sand'),
            caxis: makeAxis('Silt')
        },
        showlegend: false,
        width: 700,
        annotations: [{
            showarrow: false,
            text: 'Replica of Daven Quinn\'s <a href="http://bl.ocks.org/davenquinn/988167471993bc2ece29">block</a>',
            x: 0.15,
            y: 1.1
        }]
    };

    Plotly.newPlot('myDiv', data, layout);
}

function makeAxis(title) {
  return {
      title: {
         text: title
      },
      ticksuffix: '%',
      min: 0.01,
      linewidth: 2,
      ticks: 'outside',
      ticklen: 8,
      showgrid: true,
  };
}

              
            
            
              
                Inspired from Daven Quinn's block\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Scientific Charts
            
            
                > Parallel Coordinates Plot
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Parallel Coordinates Plot
                  
                  in 
                  JavaScript
                  
                  
                
                How to make D3.js-based parallel coordinates plots in Plotly.js. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Adding Dimensions
          
        

        
          
            
              Parallel coordinates are richly interactive by default. Drag the lines along the axes to filter regions and drag the axis names across the plot to rearrange variables: 

            
            
              
                var trace = {
  type: 'parcoords',
  line: {
    color: 'blue'
  },
  
  dimensions: [{
    range: [1, 5],
    constraintrange: [1, 2],
    label: 'A',
    values: [1,4]
  }, {    
    range: [1,5],
    label: 'B',
    values: [3,1.5],
    tickvals: [1.5,3,4.5]
  }, {
    range: [1, 5],
    label: 'C',
    values: [2,4],
    tickvals: [1,2,4,5],
    ticktext: ['text 1','text 2','text 4','text 5']
  }, {
    range: [1, 5],
    label: 'D',
    values: [4,2]
  }]
};

var data = [trace]

Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Basic Parallel Coordinates Plot
          
        

        
          
            
            
              
                d3.csv('https://raw.githubusercontent.com/bcdunbar/datasets/master/iris.csv', function(err, rows){

function unpack(rows, key) {
  return rows.map(function(row) {
    return row[key];
  });
}

var data = [{
  type: 'parcoords',
  pad: [80,80,80,80],
  line: {
    color: unpack(rows, 'species_id'),
    colorscale: [[0, 'red'], [0.5, 'green'], [1, 'blue']]
  },

  dimensions: [{
    range: [2, 4.5],
    label: 'sepal_width',
    values: unpack(rows, 'sepal_width')
  }, {
    constraintrange: [5, 6],
    range: [4,8],
    label: 'sepal_length',
    values: unpack(rows, 'sepal_length')
  }, {
    label: 'petal_width',
    range: [0, 2.5],
    values: unpack(rows, 'petal_width')
  }, {
    label: 'petal_length',
    range: [1, 7],
    values: unpack(rows, 'petal_length')
  }]
}];

var layout = {
  width: 800
};

Plotly.newPlot('myDiv', data, layout);

});

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Annotated Parallel Coordinates Plot
          
        

        
          
            
            
              
                d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/iris-id.csv', function(err, rows){

function unpack(rows, key) {
  return rows.map(function(row) {
    return row[key];
  });
}

var data = [{
  type: 'parcoords',
  pad: [80,80,80,80],
  line: {
    color: unpack(rows, 'species_id'),
    colorscale: [[0, 'red'], [0.5, 'green'], [1, 'blue']]
  },

  dimensions: [{
    range: [2, 4.5],
    label: 'sepal_width',
    values: unpack(rows, 'sepal_width')
  }, {
    constraintrange: [5, 6],
    range: [4,8],
    label: 'sepal_length',
    values: unpack(rows, 'sepal_length')
  }, {
    label: 'petal_width',
    range: [0, 2.5],
    values: unpack(rows, 'petal_width')
  }, {
    label: 'petal_length',
    range: [1, 7],
    values: unpack(rows, 'petal_length')
  }]
}];

var layout = {
  width: 800,
  annotations: [
	  {showarrow: false,
      text: 'Higher sepal width',
      x: 0, y: 1, xref: 'paper', yref: 'paper'},
	  {showarrow: false,
      text: 'Lower petal width and length',
      x: 0.9, y: .25, xref: 'paper', yref: 'paper'
    }]
};

Plotly.newPlot('myDiv', data, layout);

});

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Advanced Parallel Coordinates Plot
          
        

        
          
            
            
              
                d3.csv('https://raw.githubusercontent.com/bcdunbar/datasets/master/parcoords_data.csv', function(err, rows){

function unpack(rows, key) {
  return rows.map(function(row) {
    return row[key];
  });
}

var data = [{
  type: 'parcoords',
  line: {
    showscale: true,
    reversescale: true,
    colorscale: 'Jet',
    cmin: -4000,
    cmax: -100,
    color: unpack(rows, 'colorVal')
  },

  dimensions: [{
    constraintrange: [100000, 150000],
    range: [32000, 227900],
    label: 'Block height',
    values: unpack(rows, 'blockHeight')
  }, {
    range: [0, 700000],
    label: 'Block width',
    values: unpack(rows, 'blockWidth')
  }, {
    label: 'Cylinder material',
    tickvals: [0, 0.5, 1, 2, 3],
    ticktext: ['A', 'AB', 'B', 'Y', 'Z'],
    values: unpack(rows, 'cycMaterial')
  }, {
    label: 'Block material',
    tickvals: [0, 1, 2, 3],
    range: [-1, 4],
    values: unpack(rows, 'blockMaterial')
  }, {
    range: [134, 3154],
    label: 'Total weight',
    visible: true,
    values: unpack(rows, 'totalWeight')
  }, {
    range: [9, 19984],
    label: 'Assembly penalty weight',
    values: unpack(rows, 'assemblyPW')
  }, {
    range: [49000, 568000],
    label: 'Height st width',
    values: unpack(rows, 'HstW')
  }, {
    range: [-28000, 196430],
    label: 'Min height width',
    values: unpack(rows, 'minHW')
  }, {
     range: [98453, 501789],
     label: 'Min width diameter',
     values: unpack(rows, 'minWD')
  }, {
    range: [1417, 107154],
    label: 'RF block',
    values: unpack(rows, 'rfBlock')
  }]
}];

Plotly.newPlot('myDiv', data);

});\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Scientific Charts
            
            
                > Log Plots
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Log Plots
                  
                  in 
                  JavaScript
                  
                  
                
                How to make a plot with D3.js-based logarithmic axes in javascript. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Logarithmic Axes
          
        

        
          
            
            
              
                var trace1 = {
  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],
  y: [8, 7, 6, 5, 4, 3, 2, 1, 0],
  type: 'scatter'
};

var trace2 = {
  x: [0, 1, 2, 3, 4, 5, 6, 7, 8],
  y: [0, 1, 2, 3, 4, 5, 6, 7, 8],
  type: 'scatter'
};

var data = [trace1, trace2];

var layout = {
  xaxis: {
    type: 'log',
    autorange: true
  },
  yaxis: {
    type: 'log',
    autorange: true
  }
};

Plotly.newPlot('myDiv', data, layout);\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            

            

            

            
            
            
        
    
    


                
                


    
        
        

            
                Plotly JavaScript Open Source Graphing Library
                
                    Built on top of d3.js and stack.gl, Plotly.js is a high-level, declarative charting library. plotly.js ships with over 40 chart types, including 3D charts, statistical graphs, and SVG maps.
                    plotly.js is free and open source and you can view the source, report issues or contribute on GitHub.
                
            
        
        
          
            

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




            
            
                Read more about plotly.js features
                

                

                    
                        Sophisticated chart types
                    
                    
                        plotly.js abstracts the types of statistical and scientific charts that you would find in packages like matplotlib, ggplot2, or MATLAB.
                    

                    
                    
                        
                    
                    d3.json('https://plotly.com/~DanielCarrera/13.json', function(figure){
                  var trace = {
                    x: figure.data[0].x, y: figure.data[0].y, z: figure.data[0].z,
                    type: 'contour', autocolorscale: false,
                    colorscale: [[0,"rgb(  0,  0,  0)"],[0.3,"rgb(230,  0,  0)"],[0.6,"rgb(255,210,  0)"],[1,"rgb(255,255,255)"]],
                    reversescale: true, zmax: 2.5, zmin: -2.5
                  };
                  var layout = {
                    title: {
                      text: 'turbulence simulation'
                  },
                    xaxis: {
                      title: {
                          text: 'radial direction'
                      },
                      showline: true,
                      mirror: 'allticks',
                      ticks: 'inside'
                    },
                    yaxis: {
                        title: {
                            text: 'vertical direction'
                        },
                        showline: true,
                        mirror: 'allticks',
                        ticks: 'inside'
                    },
                    margin: {l: 40, b: 40, t: 60},
                    annotations: [{
                      showarrow: false,
                      text: 'Credit: Daniel Carrera',
                      x: 0, y: 0, xref: 'paper', yref: 'paper'
                    }]
                  }
                  Plotly.newPlot(document.getElementById('contour-plot'), [trace], layout, {showLink: false});
                });



                    Fully customizable
                    
                        plotly.js charts are described declaratively as JSON objects. Every aspect of the charts, such as colors, grid lines, and the legend, has a corresponding set of JSON attributes.
                        
                            view all of the available attributes
                        
                    

                    d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv', function(rows){
                    var trace = {
                      type: 'scatter',                    // set the chart type
                      mode: 'lines',                      // connect points with lines
                      x: rows.map(function(row){          // set the x-data
                        return row['Time'];
                      }),
                      y: rows.map(function(row){          // set the x-data
                        return row['10 Min Sampled Avg'];
                      }),
                      line: {                             // set the width of the line.
                        width: 1
                      },
                      error_y: {
                        array: rows.map(function(row){    // set the height of the error bars
                          return row['10 Min Std Dev'];
                        }),
                        thickness: 0.5,                   // set the thickness of the error bars
                        width: 0
                      }
                    };

                    var layout = {
                      yaxis: {
                        title: {
                          text: "Wind Speed"
                        }
                      },       // set the y axis title
                      xaxis: {
                        showgrid: false,                  // remove the x-axis grid lines
                        tickformat: "%B, %Y"              // customize the date format to "month, day"
                      },
                      margin: {                           // update the left, bottom, right, top margin
                        l: 40, b: 10, r: 10, t: 20
                      }
                    };

                    Plotly.newPlot(document.getElementById('wind-speed'), [trace], layout, {showLink: false});
                });



                    High performance
                    
                        
                            Most plotly graphs are drawn with SVG. This offers great compatibility across browsers and publication-quality vector image export. Unfortunately, there are inherent performance limitations with the number of SVG elements that you can draw in the DOM.
                            plotly.js uses stack.gl for high performance 2D and 3D charting.
                        
                        
                            
                                
                            
                            
                                This chart was drawn with the plotly.js chart type scattergl. scattergl charts render an order of magnitude faster than their SVG counterparts.
                            
                        
                        
                            
                                
                                
                                
                            
                            
                                All 3D charts in plotly.js are rendered with WebGL, leveraging the power of the GPU for fast interactivity.
                                view the interactive version
                            
                        
                    
                    Universal
                    
                        By abstracting charts to a declarative JSON structure, plotly.js is used as a browser-based charting library for Python, R, MATLAB.
                    

                
                
            
          


        
    


















    
        Fundamentals

        
        More Fundamentals »
        
    
    
        

            
                    
                    

    
        Configuration Options
        
            View Tutorial
            
        
    


                
                    
                    

    
        Responsive / Fluid Layouts
        
            View Tutorial
            
        
    


                
                    
                    

    
        uirevision in Plotly.react
        
            View Tutorial
            
        
    


                
                    
                    

    
        React Plotly.js
        
            View Tutorial
            
        
    


                
                    
                    

    
        Analytical Apps with Dash
        
            View Tutorial
            
        
    


                
    










    
        Basic Charts

        
        More Basic Charts »
        
    
    
        

            

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Scatter Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Line Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bar Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Pie Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bubble Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
    





    
        Statistical Charts

        
        More Statistical Charts »
        
    
    
        

            
                    
                    

    
        Error Bars
        
            View Tutorial
            
        
    


                
                    
                    

    
        Box Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        2d Density Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Continuous Error Bars
        
            View Tutorial
            
        
    


                
    





    
        Scientific Charts

        
        More Scientific Charts »
        
    
    
        

            
                    
                    

    
        Contour Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Heatmaps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ternary Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Parallel Coordinates Plot
        
            View Tutorial
            
        
    


                
                    
                    

    
        Log Plots
        
            View Tutorial
            
        
    


                
    





    
        Financial Charts

        
        More Financial Charts »
        
    
    
        

            
                    
                    

    
        Waterfall Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Indicators
        
            View Tutorial
            
        
    


                
                    
                    

    
        Candlestick Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Funnel and Funnelarea Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Time Series
        
            View Tutorial
            
        
    


                
    





    
        Maps

        
        More Maps »
        
    
    
        

            
                    
                    

    
        Migrate to Maplibre
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Map Layers
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Density Heatmap
        
            View Tutorial
            
        
    


                
                    
                    

    
        Choropleth Tile Map
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lines on Maps
        
            View Tutorial
            
        
    


                
    










    
        3D Charts

        
        More 3D Charts »
        
    
    
        

            
                    
                    

    
        3D Scatter Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ribbon Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Surface Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Mesh Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Line Plots
        
            View Tutorial
            
        
    


                
    





    
        Subplots

        
        More Subplots »
        
    
    
        

            
                    
                    

    
        Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Inset Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Mixed Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Table Subplots
        
            View Tutorial
            
        
    


                
    









    
        Custom Chart Events

        
    
    
        

            
                    
                    

    
        Click Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Hover Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Zoom Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Disable Zoom Events
        
            View Tutorial
            
        
    


                
    





    
        Add Custom Controls

        
        More Controls »
        
    
    
        

            
                    
                    

    
        Dropdown Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Button Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Slider Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lasso Selection
        
            View Tutorial
            
        
    


                
                    
                    

    
        Range Slider and Selector
        
            View Tutorial
            
        
    


                
    





    
        Animations

        
    
    
        

            
                    
                    

    
        Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Adding Sliders to Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Filled-Area Animation
        
            View Tutorial
            
        
    


                
                    
                    

    
        Map Animation
        
            View Tutorial\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Financial Charts
            
            
                > Waterfall Charts
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Waterfall Charts
                  
                  in 
                  JavaScript
                  
                  
                
                How to make a D3.js-based waterfall chart in javascript. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Basic Waterfall Chart
          
        

        
          
            
            
              
                var data = [
        {
            name: "2018",
            type: "waterfall",
            orientation: "v",
            measure: [
                "relative",
                "relative",
                "total",
                "relative",
                "relative",
                "total"
            ],
            x: [
                "Sales",
                "Consulting",
                "Net revenue",
                "Purchases",
                "Other expenses",
                "Profit before tax"
            ],
            textposition: "outside",
            text: [
                "+60",
                "+80",
                "",
                "-40",
                "-20",
                "Total"
            ],          
            y: [
                60,
                80,
                0,
                -40,
                -20,
                0
            ],
            connector: {
              line: {
                color: "rgb(63, 63, 63)"
              }
            },
        }
    ];
 layout = {
        title: {
            text: "Profit and loss statement 2018"
        },
        xaxis: {
            type: "category"
        },
        yaxis: {
            type: "linear"
        },
        autosize: true,
        showlegend: true
    };
Plotly.newPlot('myDiv', data, layout);
              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Multi Category Waterfall Chart
          
        

        
          
            
            
              
                var gd = document.getElementById('myDiv');
var data = [
    {
      type: "waterfall",
      x: [
        ["2016", "2017", "2017", "2017", "2017", "2018", "2018", "2018", "2018"],
        ["initial", "q1", "q2", "q3", "total", "q1", "q2", "q3", "total" ]
      ],
      measure: ["absolute", "relative", "relative", "relative", "total", "relative", "relative", "relative", "total"],
      y: [1, 2, 3, -1, null, 1, 2, -4, null],
      base: 1000
    },
    {
      type: "waterfall",
      x: [
        ["2016", "2017", "2017", "2017", "2017", "2018", "2018", "2018", "2018"],
        ["initial", "q1", "q2", "q3", "total", "q1", "q2", "q3", "total" ]
      ],
      measure: ["absolute", "relative", "relative", "relative", "total", "relative", "relative", "relative", "total"],
      y: [1.1, 2.2, 3.3, -1.1, null, 1.1, 2.2, -4.4, null],
      base: 1000
    }
  ];
var layout = {
    waterfallgroupgap : 0.5,
    xaxis: {
      title: {
        text: "MULTI-CATEGORY",
      },
      tickfont: {size: 16},
      ticks: "outside"
    }
  }
Plotly.newPlot('myDiv', data, layout);
              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Horizontal Waterfall Chart
          
        

        
          
            
            
              
                var gd = document.getElementById('myDiv');
var data = [
        {
            name: "2018",
            type: "waterfall",
            orientation: "h",
            measure: [
                "relative",
                "relative",
                "relative",
                "relative",
                "total",
                "relative",
                "relative",
                "relative",
                "relative",
                "total",
                "relative",
                "relative",
                "total",
                "relative",
                "total"
            ],
            y: [
                "Sales",
                "Consulting",
                "Maintenance",
                "Other revenue",
                "Net revenue",
                "Purchases",
                "Material expenses",
                "Personnel expenses",
                "Other expenses",
                "Operating profit",
                "Investment income",
                "Financial income",
                "Profit before tax",
                "Income tax (15%)",
                "Profit after tax"
            ],
            x: [
                375,
                128,
                78,
                27,
                null,
                -327,
                -12,
                -78,
                -12,
                null,
                32,
                89,
                null,
                -45,
                null
            ],
            connector: {
                mode: "between",
                line: {
                    width: 4,
                    color: "rgb(0, 0, 0)",
                    dash: 0
                }
            }
        }
    ];
var layout = {title: {
            text: "Profit and loss statement 2018<br>waterfall chart displaying positive and negative"
        },
        yaxis: {
            type: "category",
            autorange: "reversed"
        },
        xaxis: {
            type: "linear"
        },
        margin: { l: 150 },
        showlegend: true
    }
Plotly.newPlot('myDiv', data, layout);




              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Style Waterfall Chart
          
        

        
          
            
            
              
                var gd = document.getElementById('myDiv');
var data = [
    {
      type: "waterfall",
      x: [
        ["2016", "2017", "2017", "2017", "2017", "2018", "2018", "2018", "2018"],
        ["initial", "q1", "q2", "q3", "total", "q1", "q2", "q3", "total" ]
      ],
      measure: ["absolute", "relative", "relative", "relative", "total", "relative", "relative", "relative", "total"],
      y: [10, 20, 30, -10, null, 10, 20, -40, null],
      base: 300,
    decreasing: { marker: { color: "Maroon" , line:{color : "red", width :2}}},
    increasing: { marker: { color: "Teal"} },
    totals: { marker: { color: "deep sky blue", line:{color:'blue',width:3}} }
    }];
var layout = {title: {
            text: "Profit and loss statement"
        },
    waterfallgap : 0.3,
    xaxis: {
      title: { text: ""},
      tickfont: {size: 15},
      ticks: "outside"
    }
  }
Plotly.newPlot('myDiv', data, layout);\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Financial Charts
            
            
                > Indicators
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Indicators
                  
                  in 
                  JavaScript
                  
                  
                
                How to make a D3.js-based gauge chart in javascript. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Overview
          
        

        
          
            
              In this tutorial we introduce a new trace named "Indicator". The purpose of "indicator" is to visualize a single value specified by the "value" attribute.
Three distinct visual elements are available to represent that value: number, delta and gauge. Any combination of them can be specified via the "mode" attribute.
Top-level attributes are:
  
    value: the value to visualize
     mode: which visual elements to draw
     align: how to align number and delta (left, center, right)
     domain: the extent of the figure
  

Then we can configure the 3 different visual elements via their respective container:
  
     number is simply a representation of the number in text. It has attributes:
     valueformat: to format the number
     prefix: a string before the number
     suffix: a string after the number 
     font.(family|size): to control the font
  
 "delta" simply displays the difference between the value with respect to a reference. It has attributes:
  
     reference: the number to compare the value with
     relative: whether that difference is absolute or relative
     valueformat: to format the delta
     (increasing|decreasing).color: color to be used for positive or decreasing delta
     (increasing|decreasing).symbol: symbol displayed on the left of the delta
     font.(family|size): to control the font
     position: position relative to number (either top, left, bottom, right)
  
  Finally, we can have a simple title for the indicator via title with 'text' attribute which is a string, and 'align' which can be set to left, center, and right.
  There are two gauge types: angular and bullet. Here is a combination of both shapes (angular, bullet), and different modes (guage, delta, and value):

            
            
              
                var data = [
  {
    type: "indicator",
    value: 200,
    delta: { reference: 160 },
    gauge: { axis: { visible: false, range: [0, 250] } },
    domain: { row: 0, column: 0 }
  },
  {
    type: "indicator",
    value: 120,
    gauge: {
      shape: "bullet",
      axis: {
        visible: false,
        range: [-200, 200]
      }
    },
    domain: { x: [0.1, 0.5], y: [0.15, 0.35] }
  },
  {
    type: "indicator",
    mode: "number+delta",
    value: 300,
    domain: { row: 0, column: 1 }
  },
  { type: "indicator", mode: "delta", value: 40, domain: { row: 1, column: 1 } }
];

var layout = {
  width: 600,
  height: 400,
  margin: { t: 25, b: 25, l: 25, r: 25 },
  grid: { rows: 2, columns: 2, pattern: "independent" },
  template: {
    data: {
      indicator: [
        {
          title: { text: "Speed" },
          mode: "number+delta+gauge",
          delta: { reference: 90 }
        }
      ]
    }
  }
};

Plotly.newPlot('myDiv', data, layout);
              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            A Single Angular Gauge Chart
          
        

        
          
            
              
            
            
              
                var data = [
  {
    domain: { x: [0, 1], y: [0, 1] },
    value: 450,
    title: { text: "Speed" },
    type: "indicator",
    mode: "gauge+number",
    delta: { reference: 400 },
    gauge: { axis: { range: [null, 500] } }
  }
];

var layout = { width: 600, height: 400 };
Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Bullet Gauge
          
        

        
          
            
              The equivalent of above "angular gauge":

            
            
              
                var data = [
  {
    type: "indicator",
    mode: "number+gauge+delta",
    gauge: { shape: "bullet" },
    delta: { reference: 300 },
    value: 220,
    domain: { x: [0, 1], y: [0, 1] },
    title: { text: "Profit" }
  }
];

var layout = { width: 600, height: 250 };
Plotly.newPlot('myDiv', data, layout);


              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Showing Information above Your Chart
          
        

        
          
            
              Another interesting feature is that indicator trace sits above the other traces (even the 3d ones). This way, it can be easily used as an overlay as demonstrated below:

            
            
              
                var data = [
  {
    type: "indicator",
    mode: "number+delta",
    value: 492,
    delta: { reference: 512, valueformat: ".0f" },
    domain: { y: [0, 1], x: [0.25, 0.75] },
    title: { text: "Users online" }
  },
  {
    y: [325, 324, 405, 400, 424, 404, 417, 432, 419, 394, 410, 426, 413, 419, 404, 408, 401, 377, 368, 361, 356, 359, 375, 397, 394, 418, 437, 450, 430, 442, 424, 443, 420, 418, 423, 423, 426, 440, 437, 436, 447, 460, 478, 472, 450, 456, 436, 418, 429, 412, 429, 442, 464, 447, 434, 457, 474, 480, 499, 497, 480, 502, 512, 492]
  }
];

var layout = { width: 600, height: 450, xaxis: { range: [0, 62] } };
Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Data Cards / Big Numbers
          
        

        
          
            
              Data card helps to display more contextual information about the data. Sometimes one number is all you want to see in a report, such as total sales, annual revenue, etc. This example shows how to visualize these big numbers:

            
            
              
                var data = [
  {
    type: "indicator",
    mode: "number+delta",
    value: 400,
    number: { prefix: "$" },
    delta: { position: "top", reference: 320 },
    domain: { x: [0, 1], y: [0, 1] }
  }
];

var layout = {
  paper_bgcolor: "lightgray",
  width: 600,
  height: 200,
  margin: { t: 0, b: 0, l: 0, r: 0 }
};

Plotly.newPlot('myDiv', data, layout);


              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            
          
        

        
          
            
              It's possible to display several numbers

            
            
              
                var data = [
  {
    type: "indicator",
    mode: "number+delta",
    value: 200,
    domain: { x: [0, 0.5], y: [0, 0.5] },
    delta: { reference: 400, relative: true, position: "top" }
  },
  {
    type: "indicator",
    mode: "number+delta",
    value: 350,
    delta: { reference: 400, relative: true },
    domain: { x: [0, 0.5], y: [0.5, 1] }
  },
  {
    type: "indicator",
    mode: "number+delta",
    value: 450,
    title: {
      text:
        "Accounts<br><span style='font-size:0.8em;color:gray'>Subtitle</span><br><span style='font-size:0.8em;color:gray'>Subsubtitle</span>"
    },
    delta: { reference: 400, relative: true },
    domain: { x: [0.6, 1], y: [0, 1] }
  }
];

var layout = {
  width: 600,
  height: 400,
  margin: { t: 25, r: 25, l: 25, b: 25 }
};

Plotly.newPlot('myDiv', data, layout);\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Financial Charts
            
            
                > Candlestick Charts
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Candlestick Charts
                  
                  in 
                  JavaScript
                  
                  
                
                How to graph D3.js-based candlestick charts in javascript. Examples of candlestick charts. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Simple Candlestick Chart
          
        

        
          
            
            
              
                var trace1 = {

  x: ['2017-01-04', '2017-01-05', '2017-01-06', '2017-01-09', '2017-01-10', '2017-01-11', '2017-01-12', '2017-01-13', '2017-01-17', '2017-01-18', '2017-01-19', '2017-01-20', '2017-01-23', '2017-01-24', '2017-01-25', '2017-01-26', '2017-01-27', '2017-01-30', '2017-01-31', '2017-02-01', '2017-02-02', '2017-02-03', '2017-02-06', '2017-02-07', '2017-02-08', '2017-02-09', '2017-02-10', '2017-02-13', '2017-02-14', '2017-02-15'],

  close: [116.019997, 116.610001, 117.910004, 118.989998, 119.110001, 119.75, 119.25, 119.040001, 120, 119.989998, 119.779999, 120, 120.080002, 119.970001, 121.879997, 121.940002, 121.949997, 121.629997, 121.349998, 128.75, 128.529999, 129.080002, 130.289993, 131.529999, 132.039993, 132.419998, 132.119995, 133.289993, 135.020004, 135.509995],

  decreasing: {line: {color: '#7F7F7F'}},

  high: [116.510002, 116.860001, 118.160004, 119.43, 119.379997, 119.93, 119.300003, 119.620003, 120.239998, 120.5, 120.089996, 120.449997, 120.809998, 120.099998, 122.099998, 122.440002, 122.349998, 121.629997, 121.389999, 130.490005, 129.389999, 129.190002, 130.5, 132.089996, 132.220001, 132.449997, 132.940002, 133.820007, 135.089996, 136.270004],

  increasing: {line: {color: '#17BECF'}},

  line: {color: 'rgba(31,119,180,1)'},

  low: [115.75, 115.809998, 116.470001, 117.940002, 118.300003, 118.599998, 118.209999, 118.809998, 118.220001, 119.709999, 119.370003, 119.730003, 119.769997, 119.5, 120.279999, 121.599998, 121.599998, 120.660004, 120.620003, 127.010002, 127.779999, 128.160004, 128.899994, 130.449997, 131.220001, 131.119995, 132.050003, 132.75, 133.25, 134.619995],

  open: [115.849998, 115.919998, 116.779999, 117.949997, 118.769997, 118.739998, 118.900002, 119.110001, 118.339996, 120, 119.400002, 120.449997, 120, 119.550003, 120.419998, 121.669998, 122.139999, 120.93, 121.150002, 127.029999, 127.980003, 128.309998, 129.130005, 130.539993, 131.350006, 131.649994, 132.460007, 133.080002, 133.470001, 135.520004],

  type: 'candlestick',
  xaxis: 'x',
  yaxis: 'y'
};

var data = [trace1];

var layout = {
  dragmode: 'zoom',
  margin: {
    r: 10,
    t: 25,
    b: 40,
    l: 60
  },
  showlegend: false,
  xaxis: {
    autorange: true,
    domain: [0, 1],
    range: ['2017-01-03 12:00', '2017-02-15 12:00'],
    rangeslider: {range: ['2017-01-03 12:00', '2017-02-15 12:00']},
    title: {
      text: 'Date'
    },
    type: 'date'
  },
  yaxis: {
    autorange: true,
    domain: [0, 1],
    range: [114.609999778, 137.410004222],
    type: 'linear'
  }
};

Plotly.newPlot('myDiv', data, layout);
              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Candlestick Chart without Rangeslider
          
        

        
          
            
            
              
                d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv', function(err, rows){

function unpack(rows, key) {
  return rows.map(function(row) {
    return row[key];
  });
}

var trace = {
  x: unpack(rows, 'Date'),
  close: unpack(rows, 'AAPL.Close'),
  high: unpack(rows, 'AAPL.High'),
  low: unpack(rows, 'AAPL.Low'),
  open: unpack(rows, 'AAPL.Open'),

  // cutomise colors
  increasing: {line: {color: 'black'}},
  decreasing: {line: {color: 'red'}},

  type: 'candlestick',
  xaxis: 'x',
  yaxis: 'y'
};

var data = [trace];

var layout = {
  dragmode: 'zoom',
  showlegend: false,
  xaxis: {
    rangeslider: {
		 visible: false
	 }
  }
};

Plotly.newPlot('myDiv', data, layout);
});

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Customise Candlestick Chart with Shapes and Annotations
          
        

        
          
            
            
              
                var trace1 = {

  x: ['2017-01-17', '2017-01-18', '2017-01-19', '2017-01-20', '2017-01-23', '2017-01-24', '2017-01-25', '2017-01-26', '2017-01-27', '2017-01-30', '2017-01-31', '2017-02-01', '2017-02-02', '2017-02-03', '2017-02-06', '2017-02-07', '2017-02-08', '2017-02-09', '2017-02-10'],

  close: [120, 119.989998, 119.779999, 120, 120.080002, 119.970001, 121.879997, 121.940002, 121.949997, 121.629997, 121.349998, 128.75, 128.529999, 129.080002, 130.289993, 131.529999, 132.039993, 132.419998, 132.119995],

  decreasing: {line: {color: '#7F7F7F'}},

  high: [120.239998, 120.5, 120.089996, 120.449997, 120.809998, 120.099998, 122.099998, 122.440002, 122.349998, 121.629997, 121.389999, 130.490005, 129.389999, 129.190002, 130.5, 132.089996, 132.220001, 132.449997, 132.940002],

  increasing: {line: {color: '#17BECF'}},

  line: {color: 'rgba(31,119,180,1)'},

  low: [118.220001, 119.709999, 119.370003, 119.730003, 119.769997, 119.5, 120.279999, 121.599998, 121.599998, 120.660004, 120.620003, 127.010002, 127.779999, 128.160004, 128.899994, 130.449997, 131.220001, 131.119995, 132.050003],

  open: [118.339996, 120, 119.400002, 120.449997, 120, 119.550003, 120.419998, 121.669998, 122.139999, 120.93, 121.150002, 127.029999, 127.980003, 128.309998, 129.130005, 130.539993, 131.350006, 131.649994, 132.460007],

  type: 'candlestick',
  xaxis: 'x',
  yaxis: 'y'
};

var data = [trace1];

var layout = {
  dragmode: 'zoom',
  margin: {
    r: 10,
    t: 25,
    b: 40,
    l: 60
  },
  showlegend: false,
  xaxis: {
    autorange: true,
    rangeslider: {range: ['2017-01-17 12:00', '2017-02-10 12:00']},
    title: {
      text: 'Date'
    },
    type: 'date'
  },
  yaxis: {
    autorange: true,
    type: 'linear'
  },

  annotations: [
    {
      x: '2017-01-31',
      y: 0.9,
      xref: 'x',
      yref: 'paper',
      text: 'largest movement',
      font: {color: 'magenta'},
      showarrow: true,
      xanchor: 'right',
      ax: -20,
      ay: 0
    }
  ],

  shapes: [
      {
          type: 'rect',
          xref: 'x',
          yref: 'paper',
          x0: '2017-01-31',
          y0: 0,
          x1: '2017-02-01',
          y1: 1,
          fillcolor: '#d3d3d3',
          opacity: 0.2,
          line: {
              width: 0
          }
      }
    ]
};

Plotly.newPlot('myDiv', data, layout);
              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Customizing Candlestick Chart Colors
          
        

        
          
            
            
              
                d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv', function(err, rows){

function unpack(rows, key) {
  return rows.map(function(row) {
    return row[key];
  });
}

var trace = {
  x: unpack(rows, 'Date'),
  close: unpack(rows, 'AAPL.Close'),
  high: unpack(rows, 'AAPL.High'),
  low: unpack(rows, 'AAPL.Low'),
  open: unpack(rows, 'AAPL.Open'),

  // cutomise colors
  increasing: {line: {color: 'black'}},
  decreasing: {line: {color: 'red'}},

  type: 'candlestick',
  xaxis: 'x',
  yaxis: 'y'
};

var data = [trace];

var layout = {
  dragmode: 'zoom',
  showlegend: false,
  xaxis: {
    title: {
      text: 'Date'
    },
    range: ['2016-06-01 12:00', '2017-01-01 12:00']
  },
  yaxis: {
    autorange: true,
  }
};

Plotly.newPlot('myDiv', data, layout);
});

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Add Rangeselector
          
        

        
          
            
            
              
                d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv', function(err, rows){

function unpack(rows, key) {
  return rows.map(function(row) {
    return row[key];
  });
}

var trace = {
  x: unpack(rows, 'Date'),
  close: unpack(rows, 'AAPL.Close'),
  high: unpack(rows, 'AAPL.High'),
  low: unpack(rows, 'AAPL.Low'),
  open: unpack(rows, 'AAPL.Open'),

  // cutomise colors
  increasing: {line: {color: 'black'}},
  decreasing: {line: {color: 'red'}},

  type: 'candlestick',
  xaxis: 'x',
  yaxis: 'y'
};

var data = [trace];

var layout = {
  dragmode: 'zoom',
  showlegend: false,
  xaxis: {
    autorange: true,
    title: {
      text: 'Date'
    },
	  rangeselector: {
        x: 0,
        y: 1.2,
        xanchor: 'left',
        font: {size:8},
        buttons: [{
            step: 'month',
            stepmode: 'backward',
            count: 1,
            label: '1 month'
        }, {
            step: 'month',
            stepmode: 'backward',
            count: 6,
            label: '6 months'
        }, {
            step: 'all',
            label: 'All dates'
        }]
      }
  },
  yaxis: {
    autorange: true,
  }
};

Plotly.newPlot('myDiv', data, layout);
});\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Financial Charts
            
            
                > Funnel and Funnelarea Charts
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Funnel and Funnelarea Charts
                  
                  in 
                  JavaScript
                  
                  
                
                How to make a D3.js-based funnel chart in javascript. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Basic Funnel Plot
          
        

        
          
            
            
              
                var gd = document.getElementById('myDiv');
var data = [{type: 'funnel', y: ["Website visit", "Downloads", "Potential customers", "Invoice sent", "Closed delas"], x: [13873, 10533, 5443, 2703, 908], hoverinfo: 'x+percent previous+percent initial'}];

var layout = {margin: {l: 150}, width:600, height: 500}

Plotly.newPlot('myDiv', data, layout);
              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Setting Marker Size and Color
          
        

        
          
            
            
              
                var gd = document.getElementById('myDiv');

var data = [{type: 'funnel',
             y: ["Sales person A", "Sales person B", "Sales person C", "Sales person D", "Sales person E"],
             x: [1200, 909.4, 600.6, 300, 80], textposition: "inside", textinfo: "value+percent initial",
             hoverinfo: 'percent total+x', opacity: 0.65, marker: {color: ["59D4E8", "DDB6C6", "A696C8", "67EACA", "94D2E6"],
             line: {"width": [4, 2, 2, 3, 1, 1], color: ["3E4E88", "606470", "3E4E88", "606470", "3E4E88"]}},
             connector: {line: {color: "royalblue", dash: "dot", width: 3}}}];

var layout = {margin: {l: 100}, width: 600, height: 500}

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Stacked Funnel
          
        

        
          
            
            
              
                var gd = document.getElementById('myDiv');
var data = [{type: 'funnel', name: 'Montreal',
  y: ["Website visit", "Downloads", "Potential customers", "Requested price"],
  x: [120, 60, 30, 20],
  textinfo: "value+percent initial"},
  {
     type: 'funnel',name: 'Toronto',
    y: ["Website visit", "Downloads", "Potential customers", "Requested price", "invoice sent"],
    x: [100, 60, 40, 30, 20], textposition: "inside", textinfo: "value+percent previous"},
  {
    type: 'funnel',name: 'Vancouver',
    y: ["Website visit", "Downloads", "Potential customers", "Requested price", "invoice sent", "closed deals"],
    x: [90, 70, 50, 30, 10, 5], textposition: "outside", textinfo: "value+percent total"}];

var layout = {margin: {l: 130, r: 0}, width: 600, funnelmode: "stack", showlegend: 'true'}

Plotly.newPlot('myDiv', data, layout);
              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Funnelarea Plot
          
        

        
          
            
            
              
                var gd = document.getElementById('myDiv');
var data = [{type: 'funnelarea', values: [5, 4, 3, 2, 1], text: ["The 1st", "The 2nd", "The 3rd", "The 4th", "The 5th"],
      marker: {colors: ["59D4E8", "DDB6C6", "A696C8", "67EACA", "94D2E6"],
                line: {color: ["3E4E88", "606470", "3E4E88", "606470", "3E4E88"], width: [2, 1, 5, 0, 3]}},
      textfont: {family: "Old Standard TT", size: 13, color: "black"}, opacity: 0.65}];

var layout = {margin: {l: 200 , r: 200}, funnelmode: "stack", showlegend: 'True'}

Plotly.newPlot('myDiv', data, layout);
              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Multi Funnelarea
          
        

        
          
            
            
              
                var gd = document.getElementById('myDiv');
var data = [{type: 'funnelarea', scalegroup: "first", values: [500, 450, 340, 230, 220, 110],
    textinfo: "value", title: {position: "top center", text: "Sales for Sale Person A in U.S."},
    domain: {x: [0, 0.5], y: [0, 0.5]}},
{
    type: 'funnelarea', scalegroup: "first", values: [600, 500, 400, 300, 200, 100], textinfo: "value",
    title: {position: "top center", text: "Sales of Sale Person B in Canada"},
    domain: {x: [0, 0.5], y: [0.55, 1]}},
{
    type:'funnelarea', scalegroup: "second", values: [510, 480, 440, 330, 220, 100], textinfo: "value",
    title: {position: "top left", text: "Sales of Sale Person A in Canada"},
    domain: {x: [0.55, 1], y: [0, 0.5]}},
{
  type: 'funnelarea', scalegroup: "second", values: [360, 250, 240, 130, 120, 60],
  textinfo: "value", title: {position: "top left", text: "Sales of Sale Person B in U.S."},
  domain: {x: [0.55, 1], y: [0.55, 1]}}];

var layout = {width: 600,shapes: [
            {x0: 0, x1: 0.5, y0: 0, y1: 0.5},
            {x0: 0, x1: 0.5, y0: 0.55, y1: 1},
            {x0: 0.55, x1: 1, y0: 0, y1: 0.5},
            {x0: 0.55, x1: 1, y0: 0.55, y1: 1}]}

Plotly.newPlot('myDiv', data, layout);\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Financial Charts
            
            
                > Time Series
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Time Series
                  
                  in 
                  JavaScript
                  
                  
                
                How to plot D3.js-based date and time in Plotly.js. An example of a time-series plot. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Date Strings
          
        

        
          
            
            
              
                var data = [
  {
    x: ['2013-10-04 22:23:00', '2013-11-04 22:23:00', '2013-12-04 22:23:00'],
    y: [1, 3, 6],
    type: 'scatter'
  }
];

Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Basic Time Series
          
        

        
          
            
            
              
                d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}


var trace1 = {
  type: "scatter",
  mode: "lines",
  name: 'AAPL High',
  x: unpack(rows, 'Date'),
  y: unpack(rows, 'AAPL.High'),
  line: {color: '#17BECF'}
}

var trace2 = {
  type: "scatter",
  mode: "lines",
  name: 'AAPL Low',
  x: unpack(rows, 'Date'),
  y: unpack(rows, 'AAPL.Low'),
  line: {color: '#7F7F7F'}
}

var data = [trace1,trace2];

var layout = {
  title: {
    text: 'Date'
  },
};

Plotly.newPlot('myDiv', data, layout);
})

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Manually Set Range
          
        

        
          
            
            
              
                d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}


var trace1 = {
  type: "scatter",
  mode: "lines",
  x: unpack(rows, 'Date'),
  y: unpack(rows, 'AAPL.High'),
  line: {color: '#17BECF'}
}

var trace2 = {
  type: "scatter",
  mode: "lines",
  x: unpack(rows, 'Date'),
  y: unpack(rows, 'AAPL.Low'),
  line: {color: '#7F7F7F'}
}

var data = [trace1,trace2];

var layout = {
  title: {
    text: 'Custom Range'
  },
  xaxis: {
    range: ['2016-07-01', '2016-12-31'],
    type: 'date'
  },
  yaxis: {
    autorange: true,
    range: [86.8700008333, 138.870004167],
    type: 'linear'
  }
};

Plotly.newPlot('myDiv', data, layout);
})

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Time Series with Rangeslider
          
        

        
          
            
            
              
                d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}


var trace1 = {
  type: "scatter",
  mode: "lines",
  name: 'AAPL High',
  x: unpack(rows, 'Date'),
  y: unpack(rows, 'AAPL.High'),
  line: {color: '#17BECF'}
}

var trace2 = {
  type: "scatter",
  mode: "lines",
  name: 'AAPL Low',
  x: unpack(rows, 'Date'),
  y: unpack(rows, 'AAPL.Low'),
  line: {color: '#7F7F7F'}
}

var data = [trace1,trace2];

var layout = {
  title: {text: 'Time Series with Rangeslider'},
  xaxis: {
    autorange: true,
    range: ['2015-02-17', '2017-02-16'],
    rangeselector: {buttons: [
        {
          count: 1,
          label: '1m',
          step: 'month',
          stepmode: 'backward'
        },
        {
          count: 6,
          label: '6m',
          step: 'month',
          stepmode: 'backward'
        },
        {step: 'all'}
      ]},
    rangeslider: {range: ['2015-02-17', '2017-02-16']},
    type: 'date'
  },
  yaxis: {
    autorange: true,
    range: [86.8700008333, 138.870004167],
    type: 'linear'
  }
};

Plotly.newPlot('myDiv', data, layout);
})\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            

            

            

            
            
            
        
    
    


                
                


    
        
        

            
                Plotly JavaScript Open Source Graphing Library
                
                    Built on top of d3.js and stack.gl, Plotly.js is a high-level, declarative charting library. plotly.js ships with over 40 chart types, including 3D charts, statistical graphs, and SVG maps.
                    plotly.js is free and open source and you can view the source, report issues or contribute on GitHub.
                
            
        
        
          
            

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




            
            
                Read more about plotly.js features
                

                

                    
                        Sophisticated chart types
                    
                    
                        plotly.js abstracts the types of statistical and scientific charts that you would find in packages like matplotlib, ggplot2, or MATLAB.
                    

                    
                    
                        
                    
                    d3.json('https://plotly.com/~DanielCarrera/13.json', function(figure){
                  var trace = {
                    x: figure.data[0].x, y: figure.data[0].y, z: figure.data[0].z,
                    type: 'contour', autocolorscale: false,
                    colorscale: [[0,"rgb(  0,  0,  0)"],[0.3,"rgb(230,  0,  0)"],[0.6,"rgb(255,210,  0)"],[1,"rgb(255,255,255)"]],
                    reversescale: true, zmax: 2.5, zmin: -2.5
                  };
                  var layout = {
                    title: {
                      text: 'turbulence simulation'
                  },
                    xaxis: {
                      title: {
                          text: 'radial direction'
                      },
                      showline: true,
                      mirror: 'allticks',
                      ticks: 'inside'
                    },
                    yaxis: {
                        title: {
                            text: 'vertical direction'
                        },
                        showline: true,
                        mirror: 'allticks',
                        ticks: 'inside'
                    },
                    margin: {l: 40, b: 40, t: 60},
                    annotations: [{
                      showarrow: false,
                      text: 'Credit: Daniel Carrera',
                      x: 0, y: 0, xref: 'paper', yref: 'paper'
                    }]
                  }
                  Plotly.newPlot(document.getElementById('contour-plot'), [trace], layout, {showLink: false});
                });



                    Fully customizable
                    
                        plotly.js charts are described declaratively as JSON objects. Every aspect of the charts, such as colors, grid lines, and the legend, has a corresponding set of JSON attributes.
                        
                            view all of the available attributes
                        
                    

                    d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv', function(rows){
                    var trace = {
                      type: 'scatter',                    // set the chart type
                      mode: 'lines',                      // connect points with lines
                      x: rows.map(function(row){          // set the x-data
                        return row['Time'];
                      }),
                      y: rows.map(function(row){          // set the x-data
                        return row['10 Min Sampled Avg'];
                      }),
                      line: {                             // set the width of the line.
                        width: 1
                      },
                      error_y: {
                        array: rows.map(function(row){    // set the height of the error bars
                          return row['10 Min Std Dev'];
                        }),
                        thickness: 0.5,                   // set the thickness of the error bars
                        width: 0
                      }
                    };

                    var layout = {
                      yaxis: {
                        title: {
                          text: "Wind Speed"
                        }
                      },       // set the y axis title
                      xaxis: {
                        showgrid: false,                  // remove the x-axis grid lines
                        tickformat: "%B, %Y"              // customize the date format to "month, day"
                      },
                      margin: {                           // update the left, bottom, right, top margin
                        l: 40, b: 10, r: 10, t: 20
                      }
                    };

                    Plotly.newPlot(document.getElementById('wind-speed'), [trace], layout, {showLink: false});
                });



                    High performance
                    
                        
                            Most plotly graphs are drawn with SVG. This offers great compatibility across browsers and publication-quality vector image export. Unfortunately, there are inherent performance limitations with the number of SVG elements that you can draw in the DOM.
                            plotly.js uses stack.gl for high performance 2D and 3D charting.
                        
                        
                            
                                
                            
                            
                                This chart was drawn with the plotly.js chart type scattergl. scattergl charts render an order of magnitude faster than their SVG counterparts.
                            
                        
                        
                            
                                
                                
                                
                            
                            
                                All 3D charts in plotly.js are rendered with WebGL, leveraging the power of the GPU for fast interactivity.
                                view the interactive version
                            
                        
                    
                    Universal
                    
                        By abstracting charts to a declarative JSON structure, plotly.js is used as a browser-based charting library for Python, R, MATLAB.
                    

                
                
            
          


        
    


















    
        Fundamentals

        
        More Fundamentals »
        
    
    
        

            
                    
                    

    
        Configuration Options
        
            View Tutorial
            
        
    


                
                    
                    

    
        Responsive / Fluid Layouts
        
            View Tutorial
            
        
    


                
                    
                    

    
        uirevision in Plotly.react
        
            View Tutorial
            
        
    


                
                    
                    

    
        React Plotly.js
        
            View Tutorial
            
        
    


                
                    
                    

    
        Analytical Apps with Dash
        
            View Tutorial
            
        
    


                
    










    
        Basic Charts

        
        More Basic Charts »
        
    
    
        

            

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Scatter Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Line Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bar Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Pie Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bubble Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
    





    
        Statistical Charts

        
        More Statistical Charts »
        
    
    
        

            
                    
                    

    
        Error Bars
        
            View Tutorial
            
        
    


                
                    
                    

    
        Box Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        2d Density Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Continuous Error Bars
        
            View Tutorial
            
        
    


                
    





    
        Scientific Charts

        
        More Scientific Charts »
        
    
    
        

            
                    
                    

    
        Contour Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Heatmaps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ternary Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Parallel Coordinates Plot
        
            View Tutorial
            
        
    


                
                    
                    

    
        Log Plots
        
            View Tutorial
            
        
    


                
    





    
        Financial Charts

        
        More Financial Charts »
        
    
    
        

            
                    
                    

    
        Waterfall Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Indicators
        
            View Tutorial
            
        
    


                
                    
                    

    
        Candlestick Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Funnel and Funnelarea Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Time Series
        
            View Tutorial
            
        
    


                
    





    
        Maps

        
        More Maps »
        
    
    
        

            
                    
                    

    
        Migrate to Maplibre
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Map Layers
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Density Heatmap
        
            View Tutorial
            
        
    


                
                    
                    

    
        Choropleth Tile Map
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lines on Maps
        
            View Tutorial
            
        
    


                
    










    
        3D Charts

        
        More 3D Charts »
        
    
    
        

            
                    
                    

    
        3D Scatter Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ribbon Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Surface Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Mesh Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Line Plots
        
            View Tutorial
            
        
    


                
    





    
        Subplots

        
        More Subplots »
        
    
    
        

            
                    
                    

    
        Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Inset Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Mixed Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Table Subplots
        
            View Tutorial
            
        
    


                
    









    
        Custom Chart Events

        
    
    
        

            
                    
                    

    
        Click Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Hover Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Zoom Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Disable Zoom Events
        
            View Tutorial
            
        
    


                
    





    
        Add Custom Controls

        
        More Controls »
        
    
    
        

            
                    
                    

    
        Dropdown Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Button Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Slider Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lasso Selection
        
            View Tutorial
            
        
    


                
                    
                    

    
        Range Slider and Selector
        
            View Tutorial
            
        
    


                
    





    
        Animations

        
    
    
        

            
                    
                    

    
        Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Adding Sliders to Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Filled-Area Animation
        
            View Tutorial
            
        
    


                
                    
                    

    
        Map Animation
        
            View Tutorial\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Maps
            
            
                > Migrate to Maplibre
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Migrate to Maplibre
                  
                  in 
                  JavaScript
                  
                  
                
                How to migrate from Mapbox traces to Maplibre traces. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          With the release of Plotly.js v2.35.0, we are introducing a new set of trace types for maps with tile underlays:


    Choroplethmap
    Scattermap
    Densitymap


These traces replace the existing Mapbox traces, Choroplethmapbox, Scattermapbox,
    Densitymapbox, but use MapLibre as the map renderer rather than
    Mapbox.


When switching to the new traces, keep an eye out for improved rendering performance, WebGL2 support, and over time,
    improved features in the Plotly map traces inherited from the MapLibre renderer, including projection support, globe
    views, terrain support, and support for modern mapping standards.

You can learn more about the motivations for this change in our announcement
        post.

As a result of removing Mapbox as the rendering engine, we're also removing the Mapbox branding from these trace
    names.
    This means that migrating from Mapbox traces to MapLibre traces will require some code changes in your projects.


    Change trace names from *mapbox to *map. For any existing trace name ending in
        *mapbox,
        ensure you've removed the "box" suffix.
    
    If in use, update layout.mapbox argument in your layout configuration to layout.map.
        The nested properties are identical in the new map traces, so no other changes should be required.
    If in use, update mapbox_style to map_style.
    Verify your map_style settings. With mapbox traces, we bundle basic,
        streets,
        outdoors, light, dark, satellite, and
        satellite-streets styles,
        using Mapbox styling. These style names are still available, but they now reference slightly different styles
        provided by other tools.
    


Note that Mapbox API keys are no longer required for Plotly-provided styles, but using external styles in your Plotly
    maps remains supported with the existing API.\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Maps
            
            
                > Tile Map Layers
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Tile Map Layers
                  
                  in 
                  JavaScript
                  
                  
                
                How to make a tile-based maps in JavaScript with various base layers. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            How Layers work in Tile-based Maps
          
        

        
          
            
              If your figure contains one or more traces of type Scattermap, Choroplethmap or Densitymap, the layout object in your figure contains configuration information for the map itself. The map is composed of various layers, of three different types.

     layout.map.style defines the lowest layers, also known as your "base map"
     The various traces in data are by default rendered above the base map (although this can be controlled via the below attribute).
     layout.map.layers is an array that defines more layers that are by default rendered above the traces in data (although this can also be controlled via the below attribute).


            
            
            
          
          
        
    
    
      
        
          
            OpenStreetMap tiles
          
        

        
          
            
              Here is a simple map rendered with "open-street-map" tiles.

            
            
              
                d3.csv(
	"https://raw.githubusercontent.com/plotly/datasets/master/2015_06_30_precipitation.csv",
	function(err, rows) {
		function unpack(rows, key) {
			return rows.map(function(row) {
				return row[key];
			});
		}

		var data = [
			{
				type: "scattermap",
				text: unpack(rows, "Globvalue"),
				lon: unpack(rows, "Lon"),
				lat: unpack(rows, "Lat"),
				marker: { color: "fuchsia", size: 4 }
			}
		];

		var layout = {
			dragmode: "zoom",
			map: { style: "open-street-map", center: { lat: 38, lon: -90 }, zoom: 3 },
			margin: { r: 0, t: 0, b: 0, l: 0 }
		};

		Plotly.newPlot("myDiv", data, layout);
	}
);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Using "layout.map.layers" to Specify a Base Map
          
        

        
          
            
              If you have access to your own private tile servers, or wish to use a tile server not included in the list above, the recommended approach is to set layout.map.style to "white-bg" and to use layout.map.layers with below to specify a custom base map.
If you omit the below attribute when using this approach, your data will likely be hidden by fully-opaque raster tiles!

            
            
            
          
          
        
    
    
      
        
          
            Base Tiles from the USGS
          
        

        
          
            
              Here is an example of a map which uses a public USGS imagery map, specified in layout.map.layers, and which is rendered below the data layer.

            
            
              
                d3.csv(
	"https://raw.githubusercontent.com/plotly/datasets/master/2015_06_30_precipitation.csv",
	function(err, rows) {
		function unpack(rows, key) {
			return rows.map(function(row) {
				return row[key];
			});
		}

var data = [
	{
		type: "scattermap",
		text: unpack(rows, "Globvalue"),
		lon: unpack(rows, "Lon"),
		lat: unpack(rows, "Lat"),
		marker: { color: "fuchsia", size: 4 }
	}
];

var layout = {
	dragmode: "zoom",
	map: {
		style: "white-bg",
		layers: [
			{
				sourcetype: "raster",
				source: ["https://basemap.nationalmap.gov/arcgis/rest/services/USGSImageryOnly/MapServer/tile/{z}/{y}/{x}"],
				below: "traces"
			}
		],
		center: { lat: 38, lon: -90 },
		zoom: 3
	},
	margin: { r: 0, t: 0, b: 0, l: 0 }
};

Plotly.newPlot("myDiv", data, layout);
	}
);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Base Tiles from the USGS, radar overlay from Environment Canada
          
        

        
          
            
              Here is the same example, with in addition, a WMS layer from Environment Canada which displays near-real-time radar imagery in partly-transparent raster tiles, rendered above the go.Scattermap trace, as is the default.

            
            
              
                d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/2015_06_30_precipitation.csv', function(err, rows){
      function unpack(rows, key) {
          return rows.map(function(row) { return row[key]; });
		}

var data = [{
        type: 'scattermap', text: unpack(rows, 'Globvalue'),
        lon: unpack(rows, 'Lon'), lat: unpack(rows, 'Lat'),
        marker: {color: 'fuchsia', size: 4}
    }];

var layout = {
	dragmode: 'zoom',
	map: {
		style: 'white-bg',
		layers: [
			{
            "below": 'traces',
            "sourcetype": "raster",
            "source": [
                "https://basemap.nationalmap.gov/arcgis/rest/services/USGSImageryOnly/MapServer/tile/{z}/{y}/{x}"
            ]
        },
			{
             sourcetype: "raster",
			 source: ["https://geo.weather.gc.ca/geomet/?SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&BBOX={bbox-epsg-3857}&CRS=EPSG:3857&WIDTH=1000&HEIGHT=1000&LAYERS=RADAR_1KM_RDBR&TILED=true&FORMAT=image/png"]}],
		below: 'traces',
		center: {lat: 38, lon: -90}, zoom: 4},
	margin: {r: 0, t: 0, b: 0, l: 0},
	showlegend: false};

Plotly.newPlot('myDiv', data, layout);
  });

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Dark tiles
          
        

        
          
            
            
              
                var url = "https://maplibre.org/maplibre-gl-js/docs/assets/significant-earthquakes-2015.geojson";

d3.json(url, (err, raw) => {
  var lon = raw.features.map(f => f.geometry.coordinates[0]);
  var lat = raw.features.map(f => f.geometry.coordinates[1]);
  var z = raw.features.map(f => f.properties.mag);

  var data = [
    { type: "scattermap", lon: lon, lat: lat, z: z, hoverinfo: "y" }
  ];

  var layout = {
    map: { style: "dark", zoom: 2, center: { lon: -150, lat: 60 } },
    margin: { t: 0, b: 0 }
  };

  Plotly.newPlot('myDiv', data, layout);
});

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Mapbox Maps and Access Tokens
          
        

        
          
            
              > Mapbox traces are deprecated and may be removed in a future version of Plotly.js.

The word "mapbox" in the trace names and layout.mapbox refers to the Mapbox GL JS open-source library.
If your basemap in layout.mapbox.style uses data from the Mapbox service,
then you will need to register for a free account at https://mapbox.com/ and obtain a Mapbox Access token.
If your basemap uses data from the Stadia Maps service (see below for details), you'll need to register for a Stadia Maps account and token.

To use a token, provide it as mapboxAccessToken in the setPlotConfig function, or as a variable that would be passed as an argument of newPlot.
If your layout.mapbox.style does not use data from the Mapbox service, you do not need to register for a Mapbox account.
Base Maps in layout.mapbox.style
The accepted values for layout.mapbox.style are one of the following tiles.

     "white-bg" yields an empty white canvas which results in no external HTTP requests 
     "open-street-map", "carto-positron", or "carto-darkmatter" yield maps composed of raster tiles from various public tile servers which do not require signups or access tokens 
     "stamen-terrain", "stamen-toner" or "stamen-watercolor" yield maps composed of raster tiles from the Stadia Maps service and require a Stadia Maps account and token.
     "basic", "streets", "outdoors", "light", "dark", "satellite", or "satellite-streets" yield maps composed of vector tiles from the Mapbox service, and do require a Mapbox Access Token or an on-premise Mapbox installation. 
     A Mapbox service style URL, which requires a Mapbox Access Token or an on-premise Mapbox installation. 
     A Mapbox Style object as defined at https://docs.mapbox.com/mapbox-gl-js/style-spec/\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Maps
            
            
                > Tile Density Heatmap
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Tile Density Heatmap
                  
                  in 
                  JavaScript
                  
                  
                
                How to make a tile-based density heatmap in JavaScript. A density heatmap uses a variable binding expression to display population density. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Light Tile
          
        

        
          
            
            
              
                var data = [
  {type: "densitymap", lon: [10, 20, 30], lat: [15, 25, 35], z: [1, 3, 2],
   radius: 50, colorbar: {y: 1, yanchor: 'top', len: 0.45}},
  {type: 'densitymap', lon: [-10, -20, -30], lat: [15, 25, 35],
   radius: [50, 100, 10],  colorbar: {y: 0, yanchor: 'bottom', len: 0.45}
  }];

var layout = {map: {style: 'light', center: {lat: 20}}, width: 600, height: 400};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Outdoors Tile
          
        

        
          
            
            
              
                d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv',
  function(err, rows){function unpack(rows, key) {return rows.map(function(row){ return row[key];
})};

var data = [{
  lon: unpack(rows, 'Longitude'), lat: unpack(rows, 'Latitude'), radius:10,
  z: unpack(rows, 'Magnitude'), type: "densitymap", coloraxis: 'coloraxis',
  hoverinfo: 'skip'}];

var layout = {
    map: {center: {lon: 60, lat: 30}, style: "outdoors", zoom: 2},
    coloraxis: {colorscale: "Viridis"}, title: {text: "Earthquake Magnitude"},
    width: 600, height: 400, margin: {t: 30, b: 0}};

Plotly.newPlot('myDiv', data, layout);
})

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Stamen Terrain Tile
          
        

        
          
            
              
            
            
              
                var data = [{type: 'densitymapbox', lon: [10, 20, 30], lat: [15, 25, 35], z: [1, 3, 2]}];

var layout = {width: 600, height: 400, mapbox: {style: 'https://tiles.stadiamaps.com/styles/stamen_watercolor.json?api_key=YOUR-API-KEY'}};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Light Tile (Mapbox) - Requires Token
          
        

        
          
            
              Mapbox traces are deprecated and may be removed in a future version of Plotly.js.

Earlier examples use traces that render with Maplibre GL JS.
These traces were introduced in Plotly.js 2.35.0 and replace Mapbox-based tile maps,
which are now deprecated. Here's one of the earlier examples written using the Mapbox-based densitymapbox trace.

            
            
              
                var data = [
  {type: "densitymapbox", lon: [10, 20, 30], lat: [15, 25, 35], z: [1, 3, 2],
   radius: 50, colorbar: {y: 1, yanchor: 'top', len: 0.45}},
  {type: 'densitymapbox', lon: [-10, -20, -30], lat: [15, 25, 35],
   radius: [50, 100, 10],  colorbar: {y: 0, yanchor: 'bottom', len: 0.45}
  }];

var layout = {mapbox: {style: 'light', center: {lat: 20}}, width: 600, height: 400};

var config = {mapboxAccessToken: "your access token"};

Plotly.newPlot('myDiv', data, layout, config);\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Maps
            
            
                > Choropleth Tile Map
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Choropleth Tile Map
                  
                  in 
                  JavaScript
                  
                  
                
                How to make a tile-based choropleth map in JavaScript. A Choropleth map shades geographic regions by value. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Basic Tile
          
        

        
          
            
              This tutorial uses Maplibre GL JS to make a map of US states using vector tiles.

            
            
              
                var data = [{
  type: "choroplethmap", locations: ["NY", "MA", "VT"], z: [-50, -10, -20],
  geojson: "https://raw.githubusercontent.com/python-visualization/folium/master/examples/data/us-states.json"
}];

var layout = {map: {center: {lon: -74, lat: 43}, zoom: 3.5},
              width: 600, height:400};

Plotly.newPlot('myDiv', data, layout);
              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Streets Tile
          
        

        
          
            
              The following example sets geojson object of type feature and geometries of type 'Polygon'. For more information see geojson attribute in the reference page.
As you see, the scattermap trace is above the Choropleth map trace. To set the Choropleth map trace above all the other traces you should set below attribute.

            
            
              
                var data = [
   {type: "scattermap", lon: [-86], lat: [34], marker: {size: 20, color: 'purple'}},
   {
    type: "choroplethmap",locations: ["AL"], z: [10], coloraxis: "coloraxis",           geojson: {type: "Feature", id: "AL", geometry: {type: "Polygon", coordinates: [[
    [-86, 35], [-85, 34], [-85, 32], [-85, 32], [-85, 32], [-85, 32], [-85, 31],
    [-86, 31], [-87, 31], [-87, 31], [-88, 30], [-88, 30], [-88, 30], [-88, 30],
    [-88, 34], [-88, 35]]]
   }}}];

var layout = {width: 600, height: 400, map: {style: 'streets',
    center: {lon: -86, lat: 33}, zoom: 5}, marker: {line: {color: "blue"}},
    coloraxis: {showscale: false, colorscale: "Viridis"}};

Plotly.newPlot('myDiv', data, layout);
              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Dark tile
          
        

        
          
            
              This example uses zmin and zmax to define the lower bound and upper bound of the color domain. If these attributes are not set, Plotly determines the color domain based on the input data.

            
            
              
                var data = [{
 type: "choroplethmap", name: "US states", geojson: "https://raw.githubusercontent.com/python-visualization/folium/master/examples/data/us-states.json", locations: [ "AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY" ],
z: [ 141, 140, 155, 147, 132, 146, 151, 137, 146, 136, 145, 141, 149, 151, 138, 158, 164, 141, 146, 145, 142, 150, 155, 160, 156, 161, 147, 164, 150, 152, 155, 167, 145, 146, 151, 154, 161, 145, 155, 150, 151, 162, 172, 169, 170, 151, 152, 173, 160, 176 ],
zmin: 25, zmax: 280, colorbar: {y: 0, yanchor: "bottom", title: {text: "US states", side: "right"}}}
 ];

var layout = {map: {style: "dark", center: {lon: -110, lat: 50}, zoom: 0.8}, width: 600, height: 400, margin: {t: 0, b: 0}};

Plotly.newPlot('myDiv', data, layout);
              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Basic Tile using Mapbox
          
        

        
          
            
              > Mapbox traces are deprecated and may be removed in a future version of Plotly.js.

Earlier examples use traces that render with Maplibre GL JS.
These traces were introduced in Plotly.js 2.35.0 and replace Mapbox-based tile maps,
which are now deprecated. Here's one of the earlier examples using the Mapbox-based choroplethmapbox trace

            
            
              
                var data = [{
  type: "choroplethmapbox", locations: ["NY", "MA", "VT"], z: [-50, -10, -20],
  geojson: "https://raw.githubusercontent.com/python-visualization/folium/master/examples/data/us-states.json"
}];

var layout = {mapbox: {center: {lon: -74, lat: 43}, zoom: 3.5},
              width: 600, height:400};

var config = {mapboxAccessToken: "your access token"};

Plotly.newPlot('myDiv', data, layout, config);\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Maps
            
            
                > Lines on Maps
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Lines on Maps
                  
                  in 
                  JavaScript
                  
                  
                
                How to draw D3.js-based lines, great circles, and contours on maps in JavaScript. Lines on maps can show distance between geographic points or be contour lines (isolines, isopleths, or isarithms). 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Lines on an Orthographic Map
          
        

        
          
            
            
              
                d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/globe_contours.csv', function(err, rows){

    function unpack(rows, key) {
        return rows.map(function(row) { return row[key]; });
    }

    var data = [];
    var scl =['rgb(213,62,79)','rgb(244,109,67)','rgb(253,174,97)','rgb(254,224,139)','rgb(255,255,191)','rgb(230,245,152)','rgb(171,221,164)','rgb(102,194,165)','rgb(50,136,189)'];
    var allLats = [];
    var allLons = [];

    for ( var i = 0 ; i < scl.length; i++){
        var latHead = 'lat-'+i;
        var lonHead = 'lon-'+i;
        var lat = unpack(rows, latHead);
        var lon = unpack(rows, lonHead);
        allLats.push(lat);
        allLons.push(lon);
    }

    for ( var i = 0 ; i < scl.length; i++) {
        var current = {
            type:'scattergeo',
            lon: allLons[i],
            lat: allLats[i],
            mode: 'lines',
            line: {
                width: 2,
                color: scl[i]
            }
        }
        data.push(current);
    };


    var layout = {
        geo: {
            projection: {
                type: 'orthographic',
                rotation: {
                    lon: -100,
                    lat: 40
                },
            },
            showocean: true,
            oceancolor: 'rgb(0, 255, 255)',
            showland: true,
            landcolor: 'rgb(230, 145, 56)',
            showlakes: true,
            lakecolor: 'rgb(0, 255, 255)',
            showcountries: true,
            lonaxis: {
                showgrid: true,
                gridcolor: 'rgb(102, 102, 102)'
            },
            lataxis: {
                showgrid: true,
                gridcolor: 'rgb(102, 102, 102)'
            }
        }
    };

    Plotly.newPlot("myDiv", data, layout, {showLink: false});
});

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            London to NYC Great Circle
          
        

        
          
            
            
              
                var data = [{
    type: 'scattergeo',
    lat: [ 40.7127, 51.5072 ],
    lon: [ -74.0059, 0.1275 ],
    mode: 'lines',
    line:{
        width: 2,
        color: 'blue'
    }
  }];

var layout = {
  title: {text: 'London to NYC Great Circle'},
  showlegend: false,
  geo: {
      resolution: 50,
      showland: true,
      showlakes: true,
      landcolor: 'rgb(204, 204, 204)',
      countrycolor: 'rgb(204, 204, 204)',
      lakecolor: 'rgb(255, 255, 255)',
      projection: {
        type: 'equirectangular'
      },
      coastlinewidth: 2,
      lataxis: {
        range: [ 20, 60 ],
        showgrid: true,
        tickmode: 'linear',
        dtick: 10
      },
      lonaxis:{
        range: [-100, 20],
        showgrid: true,
        tickmode: 'linear',
        dtick: 20
      }
    }
};

Plotly.newPlot('myDiv', data, layout);


              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            US Flight Paths Map
          
        

        
          
            
            
              
                d3.csv('https://raw.githubusercontent.com/plotly/datasets/c34aaa0b1b3cddad335173cb7bc0181897201ee6/2011_february_aa_flight_paths.csv', function(err, rows){
    function unpack(rows, key) {
        return rows.map(function(row) { return row[key]; });}

    function getMaxOfArray(numArray) {
        return Math.max.apply(null, numArray);
    }

    var data = [];
    var count = unpack(rows, 'cnt');
    var startLongitude = unpack(rows, 'start_lon');
    var endLongitude = unpack(rows, 'end_lon');
    var startLat = unpack(rows, 'start_lat');
    var endLat = unpack(rows, 'end_lat');

    for ( var i = 0 ; i < count.length; i++ ) {
        var opacityValue = count[i]/getMaxOfArray(count);

        var result = {
            type: 'scattergeo',
            locationmode: 'USA-states',
            lon: [ startLongitude[i] , endLongitude[i] ],
            lat: [ startLat[i] , endLat[i] ],
            mode: 'lines',
            line: {
                width: 1,
                color: 'red'
            },
            opacity: opacityValue
        };

        data.push(result);
    };

    var layout = {
        title: {text: 'Feb. 2011 American Airline flight paths'},
        showlegend: false,
        geo:{
            scope: 'north america',
            projection: {
                type: 'azimuthal equal area'
            },
            showland: true,
            landcolor: 'rgb(243,243,243)',
            countrycolor: 'rgb(204,204,204)'
        }
    };

    Plotly.newPlot("myDiv", data, layout, {showLink: false});

});\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            

            

            

            
            
            
        
    
    


                
                


    
        
        

            
                Plotly JavaScript Open Source Graphing Library
                
                    Built on top of d3.js and stack.gl, Plotly.js is a high-level, declarative charting library. plotly.js ships with over 40 chart types, including 3D charts, statistical graphs, and SVG maps.
                    plotly.js is free and open source and you can view the source, report issues or contribute on GitHub.
                
            
        
        
          
            

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




            
            
                Read more about plotly.js features
                

                

                    
                        Sophisticated chart types
                    
                    
                        plotly.js abstracts the types of statistical and scientific charts that you would find in packages like matplotlib, ggplot2, or MATLAB.
                    

                    
                    
                        
                    
                    d3.json('https://plotly.com/~DanielCarrera/13.json', function(figure){
                  var trace = {
                    x: figure.data[0].x, y: figure.data[0].y, z: figure.data[0].z,
                    type: 'contour', autocolorscale: false,
                    colorscale: [[0,"rgb(  0,  0,  0)"],[0.3,"rgb(230,  0,  0)"],[0.6,"rgb(255,210,  0)"],[1,"rgb(255,255,255)"]],
                    reversescale: true, zmax: 2.5, zmin: -2.5
                  };
                  var layout = {
                    title: {
                      text: 'turbulence simulation'
                  },
                    xaxis: {
                      title: {
                          text: 'radial direction'
                      },
                      showline: true,
                      mirror: 'allticks',
                      ticks: 'inside'
                    },
                    yaxis: {
                        title: {
                            text: 'vertical direction'
                        },
                        showline: true,
                        mirror: 'allticks',
                        ticks: 'inside'
                    },
                    margin: {l: 40, b: 40, t: 60},
                    annotations: [{
                      showarrow: false,
                      text: 'Credit: Daniel Carrera',
                      x: 0, y: 0, xref: 'paper', yref: 'paper'
                    }]
                  }
                  Plotly.newPlot(document.getElementById('contour-plot'), [trace], layout, {showLink: false});
                });



                    Fully customizable
                    
                        plotly.js charts are described declaratively as JSON objects. Every aspect of the charts, such as colors, grid lines, and the legend, has a corresponding set of JSON attributes.
                        
                            view all of the available attributes
                        
                    

                    d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv', function(rows){
                    var trace = {
                      type: 'scatter',                    // set the chart type
                      mode: 'lines',                      // connect points with lines
                      x: rows.map(function(row){          // set the x-data
                        return row['Time'];
                      }),
                      y: rows.map(function(row){          // set the x-data
                        return row['10 Min Sampled Avg'];
                      }),
                      line: {                             // set the width of the line.
                        width: 1
                      },
                      error_y: {
                        array: rows.map(function(row){    // set the height of the error bars
                          return row['10 Min Std Dev'];
                        }),
                        thickness: 0.5,                   // set the thickness of the error bars
                        width: 0
                      }
                    };

                    var layout = {
                      yaxis: {
                        title: {
                          text: "Wind Speed"
                        }
                      },       // set the y axis title
                      xaxis: {
                        showgrid: false,                  // remove the x-axis grid lines
                        tickformat: "%B, %Y"              // customize the date format to "month, day"
                      },
                      margin: {                           // update the left, bottom, right, top margin
                        l: 40, b: 10, r: 10, t: 20
                      }
                    };

                    Plotly.newPlot(document.getElementById('wind-speed'), [trace], layout, {showLink: false});
                });



                    High performance
                    
                        
                            Most plotly graphs are drawn with SVG. This offers great compatibility across browsers and publication-quality vector image export. Unfortunately, there are inherent performance limitations with the number of SVG elements that you can draw in the DOM.
                            plotly.js uses stack.gl for high performance 2D and 3D charting.
                        
                        
                            
                                
                            
                            
                                This chart was drawn with the plotly.js chart type scattergl. scattergl charts render an order of magnitude faster than their SVG counterparts.
                            
                        
                        
                            
                                
                                
                                
                            
                            
                                All 3D charts in plotly.js are rendered with WebGL, leveraging the power of the GPU for fast interactivity.
                                view the interactive version
                            
                        
                    
                    Universal
                    
                        By abstracting charts to a declarative JSON structure, plotly.js is used as a browser-based charting library for Python, R, MATLAB.
                    

                
                
            
          


        
    


















    
        Fundamentals

        
        More Fundamentals »
        
    
    
        

            
                    
                    

    
        Configuration Options
        
            View Tutorial
            
        
    


                
                    
                    

    
        Responsive / Fluid Layouts
        
            View Tutorial
            
        
    


                
                    
                    

    
        uirevision in Plotly.react
        
            View Tutorial
            
        
    


                
                    
                    

    
        React Plotly.js
        
            View Tutorial
            
        
    


                
                    
                    

    
        Analytical Apps with Dash
        
            View Tutorial
            
        
    


                
    










    
        Basic Charts

        
        More Basic Charts »
        
    
    
        

            

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Scatter Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Line Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bar Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Pie Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bubble Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
    





    
        Statistical Charts

        
        More Statistical Charts »
        
    
    
        

            
                    
                    

    
        Error Bars
        
            View Tutorial
            
        
    


                
                    
                    

    
        Box Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        2d Density Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Continuous Error Bars
        
            View Tutorial
            
        
    


                
    





    
        Scientific Charts

        
        More Scientific Charts »
        
    
    
        

            
                    
                    

    
        Contour Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Heatmaps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ternary Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Parallel Coordinates Plot
        
            View Tutorial
            
        
    


                
                    
                    

    
        Log Plots
        
            View Tutorial
            
        
    


                
    





    
        Financial Charts

        
        More Financial Charts »
        
    
    
        

            
                    
                    

    
        Waterfall Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Indicators
        
            View Tutorial
            
        
    


                
                    
                    

    
        Candlestick Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Funnel and Funnelarea Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Time Series
        
            View Tutorial
            
        
    


                
    





    
        Maps

        
        More Maps »
        
    
    
        

            
                    
                    

    
        Migrate to Maplibre
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Map Layers
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Density Heatmap
        
            View Tutorial
            
        
    


                
                    
                    

    
        Choropleth Tile Map
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lines on Maps
        
            View Tutorial
            
        
    


                
    










    
        3D Charts

        
        More 3D Charts »
        
    
    
        

            
                    
                    

    
        3D Scatter Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ribbon Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Surface Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Mesh Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Line Plots
        
            View Tutorial
            
        
    


                
    





    
        Subplots

        
        More Subplots »
        
    
    
        

            
                    
                    

    
        Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Inset Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Mixed Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Table Subplots
        
            View Tutorial
            
        
    


                
    









    
        Custom Chart Events

        
    
    
        

            
                    
                    

    
        Click Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Hover Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Zoom Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Disable Zoom Events
        
            View Tutorial
            
        
    


                
    





    
        Add Custom Controls

        
        More Controls »
        
    
    
        

            
                    
                    

    
        Dropdown Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Button Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Slider Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lasso Selection
        
            View Tutorial
            
        
    


                
                    
                    

    
        Range Slider and Selector
        
            View Tutorial
            
        
    


                
    





    
        Animations

        
    
    
        

            
                    
                    

    
        Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Adding Sliders to Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Filled-Area Animation
        
            View Tutorial
            
        
    


                
                    
                    

    
        Map Animation
        
            View Tutorial\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > 3D Charts
            
            
                > 3D Scatter Plots
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  3D Scatter Plots
                  
                  in 
                  JavaScript
                  
                  
                
                How to make 3D scatter plots in javascript. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            3D Scatter Plot
          
        

        
          
            
            
              
                d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/3d-scatter.csv', function(err, rows){
function unpack(rows, key) {
	return rows.map(function(row)
	{ return row[key]; });}

var trace1 = {
	x:unpack(rows, 'x1'), y: unpack(rows, 'y1'), z: unpack(rows, 'z1'),
	mode: 'markers',
	marker: {
		size: 12,
		line: {
		color: 'rgba(217, 217, 217, 0.14)',
		width: 0.5},
		opacity: 0.8},
	type: 'scatter3d'
};

var trace2 = {
	x:unpack(rows, 'x2'), y: unpack(rows, 'y2'), z: unpack(rows, 'z2'),
	mode: 'markers',
	marker: {
		color: 'rgb(127, 127, 127)',
		size: 12,
		symbol: 'circle',
		line: {
		color: 'rgb(204, 204, 204)',
		width: 1},
		opacity: 0.8},
	type: 'scatter3d'};

var data = [trace1, trace2];
var layout = {margin: {
	l: 0,
	r: 0,
	b: 0,
	t: 0
  }};
Plotly.newPlot('myDiv', data, layout);
});\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > 3D Charts
            
            
                > Ribbon Plots
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Ribbon Plots
                  
                  in 
                  JavaScript
                  
                  
                
                How to make a D3.js-based ribbon plot in JavaScript. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Basic Ribbon Plot
          
        

        
          
            
            
              
                d3.json('https://raw.githubusercontent.com/plotly/datasets/master/3d-ribbon.json', function(figure){

  var trace1 = {
    x:figure.data[0].x, y:figure.data[0].y, z:figure.data[0].z,
    name: '',
    colorscale: figure.data[0].colorscale,
    type: 'surface',
    showscale: false
  }
  var trace2 = {
    x:figure.data[1].x, y:figure.data[1].y, z:figure.data[1].z,
    name: '',
    colorscale: figure.data[1].colorscale,
    type: 'surface',
    showscale: false
  }
  var trace3 = {
    x:figure.data[2].x, y:figure.data[2].y, z:figure.data[2].z,
    colorscale: figure.data[2].colorscale,
    type: 'surface',
    showscale: false
  }
  var trace4 = {
    x:figure.data[3].x, y:figure.data[3].y, z:figure.data[3].z,
    colorscale: figure.data[3].colorscale,
    type: 'surface',
    showscale: false
  }
  var trace5 = {
    x:figure.data[4].x, y:figure.data[4].y, z:figure.data[4].z,
    colorscale: figure.data[4].colorscale,
    type: 'surface',
    showscale: false
  }
  var trace6 = {
    x:figure.data[5].x, y:figure.data[5].y, z:figure.data[5].z,
    colorscale: figure.data[5].colorscale,
    type: 'surface',
    showscale: false
  }
  var trace7 = {
    x:figure.data[6].x, y:figure.data[6].y, z:figure.data[6].z,
    name: '',
    colorscale: figure.data[6].colorscale,
    type: 'surface',
    showscale: false
  }

  var data = [trace1, trace2, trace3, trace4, trace5, trace6, trace7];

  var layout = {
    title: {
      text: 'Ribbon Plot'
    },
    showlegend: false,
    autosize: true,
    width: 600,
    height: 600,
    scene: {
      xaxis: {title: {text: 'Sample #'}},
      yaxis: {title: {text: 'Wavelength'}},
      zaxis: {title: {text: 'OD'}}
    }
  };
  Plotly.newPlot('myDiv', data, layout);
});\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > 3D Charts
            
            
                > 3D Surface Plots
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  3D Surface Plots
                  
                  in 
                  JavaScript
                  
                  
                
                How to make 3D surface plots in javascript. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Topographical 3D Surface Plot
          
        

        
          
            
            
              
                d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv', function(err, rows){
function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}

var z_data=[ ]
for(i=0;i<24;i++)
{
  z_data.push(unpack(rows,i));
}

var data = [{
           z: z_data,
           type: 'surface'
        }];

var layout = {
  title: {
    text: 'Mt Bruno Elevation'
  },
  autosize: false,
  width: 500,
  height: 500,
  margin: {
    l: 65,
    r: 50,
    b: 65,
    t: 90,
  }
};
Plotly.newPlot('myDiv', data, layout);
});

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Surface Plot With Contours
          
        

        
          
            
              Display and customize contour data for each axis using the contours attribute (reference).

            
            
              
                d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv', function(err, rows){
function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}
var z_data=[ ]
for(i=0;i<24;i++)
{
  z_data.push(unpack(rows,i));
}

var data = [{
  z: z_data,
  type: 'surface',
  contours: {
    z: {
      show:true,
      usecolormap: true,
      highlightcolor:"#42f462",
      project:{z: true}
    }
  }
}];

var layout = {
  title: {
    text: 'Mt Bruno Elevation With Projected Contours'
  },
  scene: {camera: {eye: {x: 1.87, y: 0.88, z: -0.64}}},
  autosize: false,
  width: 500,
  height: 500,
  margin: {
    l: 65,
    r: 50,
    b: 65,
    t: 90,
  }
};

Plotly.newPlot('myDiv', data, layout);
});

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Multiple 3D Surface Plots
          
        

        
          
            
            
              
                z1 = [
    [8.83,8.89,8.81,8.87,8.9,8.87],
    [8.89,8.94,8.85,8.94,8.96,8.92],
    [8.84,8.9,8.82,8.92,8.93,8.91],
    [8.79,8.85,8.79,8.9,8.94,8.92],
    [8.79,8.88,8.81,8.9,8.95,8.92],
    [8.8,8.82,8.78,8.91,8.94,8.92],
    [8.75,8.78,8.77,8.91,8.95,8.92],
    [8.8,8.8,8.77,8.91,8.95,8.94],
    [8.74,8.81,8.76,8.93,8.98,8.99],
    [8.89,8.99,8.92,9.1,9.13,9.11],
    [8.97,8.97,8.91,9.09,9.11,9.11],
    [9.04,9.08,9.05,9.25,9.28,9.27],
    [9,9.01,9,9.2,9.23,9.2],
    [8.99,8.99,8.98,9.18,9.2,9.19],
    [8.93,8.97,8.97,9.18,9.2,9.18]
];

z2 = [];
for (var i=0;i<z1.length;i++ ) { 
  z2_row = [];
    for(var j=0;j<z1[i].length;j++) { 
      z2_row.push(z1[i][j]+1);
    }
    z2.push(z2_row);
}

z3 = []
for (var i=0;i<z1.length;i++ ) { 
  z3_row = [];
    for(var j=0;j<z1[i].length;j++) { 
      z3_row.push(z1[i][j]-1);
    }
    z3.push(z3_row);
}
var data_z1 = {z: z1, type: 'surface'};
var data_z2 = {z: z2, showscale: false, opacity:0.9, type: 'surface'};
var data_z3 = {z: z3, showscale: false, opacity:0.9, type: 'surface'};



Plotly.newPlot('myDiv', [data_z1, data_z2, data_z3]);\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > 3D Charts
            
            
                > 3D Mesh Plots
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  3D Mesh Plots
                  
                  in 
                  JavaScript
                  
                  
                
                How to make 3D mesh plots in javascript. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Simple 3D Mesh Plot
          
        

        
          
            
            
              
                // Generating random data..
a=[]; b=[]; c=[];
for(i=0;i<50;i++)
  {
    var a_ = Math.random(); 
    a.push(a_);
    
    var b_ = Math.random(); 
    b.push(b_);
    
    var c_ = Math.random(); 
    c.push(c_);
  }
// Plotting the mesh
var data=[
    {
      opacity:0.8,
      color:'rgb(300,100,200)',
      type: 'mesh3d',
      x: a,
      y: b,
      z: c,
    }
];
Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            3D Mesh Plot with Alphahull
          
        

        
          
            
            
              
                // Generating random data..
a=[]; b=[]; c=[];
for(i=0;i<50;i++)
  {
  var a_ = Math.random(); 
   a.push(a_);
  
  var b_ = Math.random(); 
   b.push(b_);
  
  var c_ = Math.random(); 
   c.push(c_);
  }
// Plotting the mesh
var data=[
  {
    alphahull:5,
    opacity:0.8,
    color:'rgb(200,100,300)',
    type: 'mesh3d',
    x: a,
    y: b,
    z: c,
  }
];
Plotly.newPlot('myDiv', data);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            3D Mesh Tetrahedron
          
        

        
          
            
            
              
                var data = [{
    type: "mesh3d",
    x: [0, 1, 2, 0],
    y: [0, 0, 1, 2],
    z: [0, 2, 0, 1],
    i: [0, 0, 0, 1],
    j: [1, 2, 3, 2],
    k: [2, 3, 1, 3],
    intensity: [0, 0.33, 0.66, 1],
    colorscale: [
      [0, 'rgb(255, 0, 0)'],
      [0.5, 'rgb(0, 255, 0)'],
      [1, 'rgb(0, 0, 255)']
    ]
  }
];

Plotly.newPlot('myDiv', data, {});

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            3D Mesh Cube
          
        

        
          
            
            
              
                var intensity = [0, 0.14285714285714285, 0.2857142857142857, 0.42857142857142855, 0.5714285714285714, 0.7142857142857143, 0.8571428571428571, 1];

var data = [{
    type: "mesh3d",
    x: [0, 0, 1, 1, 0, 0, 1, 1],
    y: [0, 1, 1, 0, 0, 1, 1, 0],
    z: [0, 0, 0, 0, 1, 1, 1, 1],
    i: [7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2],
    j: [3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3],
    k: [0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6],
    intensity: intensity,
    colorscale: [
      [0, 'rgb(255, 0, 255)'],
      [0.5, 'rgb(0, 255, 0)'],
      [1, 'rgb(0, 0, 255)']
    ]
  }
];

Plotly.newPlot('myDiv', data, {});\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > 3D Charts
            
            
                > 3D Line Plots
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  3D Line Plots
                  
                  in 
                  JavaScript
                  
                  
                
                How to make 3D line plots in javascript. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            3D Line Plot
          
        

        
          
            
            
              
                d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/3d-line1.csv', function(err, rows){
      function unpack(rows, key) {
          return rows.map(function(row)
          { return row[key]; }); }

var x = unpack(rows , 'x');
var y = unpack(rows , 'y');
var z = unpack(rows , 'z');
var c = unpack(rows , 'color');
Plotly.newPlot('myDiv', [{
  type: 'scatter3d',
  mode: 'lines',
  x: x,
  y: y,
  z: z,
  opacity: 1,
  line: {
    width: 6,
    color: c,
    reversescale: false
  }
}], {
  height: 640
});
});

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            3D Line + Markers Plot
          
        

        
          
            
            
              
                var pointCount = 31;
var i, r;

var x = [];
var y = [];
var z = [];
var c = [];

for(i = 0; i < pointCount; i++) 
{
   r = 10 * Math.cos(i / 10);
   x.push(r * Math.cos(i));
   y.push(r * Math.sin(i));
   z.push(i);
   c.push(i)
}

Plotly.newPlot('myDiv', [{
  type: 'scatter3d',
  mode: 'lines+markers',
  x: x,
  y: y,
  z: z,
  line: {
    width: 6,
    color: c,
    colorscale: "Viridis"},
  marker: {
    size: 3.5,
    color: c,
    colorscale: "Greens",
    cmin: -20,
    cmax: 50
  }},                  
]);
              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            3D Line Spiral Plot
          
        

        
          
            
            
              
                var pointCount = 3142;
var i, r;

var x = [];
var y = [];
var z = [];
var c = [];

for(i = 0; i < pointCount; i++)
 {
     r = i * (pointCount - i);
     x.push(r * Math.cos(i / 30));
     y.push(r * Math.sin(i / 30));
     z.push(i);
     c.push(i)
 }

Plotly.newPlot('myDiv', [{
     type: 'scatter3d',
     mode: 'lines',
     x: x,
     y: y,
     z: z,
     opacity: 0.7,
     line: {
       width: 10,
       color: c,
       colorscale: 'Viridis'}
    }]);
              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            3D Random Walk Plot
          
        

        
          
            
            
              
                d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/_3d-line-plot.csv', function(err, rows){
      function unpack(rows, key) {
          return rows.map(function(row)
          { return row[key]; });
      }

var trace1 = {
  x: unpack(rows, 'x1'),
  y: unpack(rows, 'y1'),
  z: unpack(rows, 'z1'),
  mode: 'lines',
  marker: {
    color: '#1f77b4',
    size: 12,
    symbol: 'circle',
    line: {
      color: 'rgb(0,0,0)',
      width: 0
    }},
  line: {
    color: '#1f77b4',
    width: 1
  },
  type: 'scatter3d'
};

var trace2 = {
  x: unpack(rows, 'x2'),
  y: unpack(rows, 'y2'),
  z: unpack(rows, 'z2'),
  mode: 'lines',
  marker: {
    color: '#9467bd',
    size: 12,
    symbol: 'circle',
    line: {
      color: 'rgb(0,0,0)',
      width: 0
    }},
  line: {
    color: 'rgb(44, 160, 44)',
    width: 1
  },
  type: 'scatter3d'
};

var trace3 = {
  x: unpack(rows, 'x3'),
  y: unpack(rows, 'y3'),
  z: unpack(rows, 'z3'),
  mode: 'lines',
  marker: {
    color: '#bcbd22',
    size: 12,
    symbol: 'circle',
    line: {
      color: 'rgb(0,0,0)',
      width: 0
    }},
  line: {
    color: '#bcbd22',
    width: 1
  },
  type: 'scatter3d'
};

var data = [trace1, trace2, trace3];
var layout = {
  title: {
    text: '3D Line Plot'
  },
  autosize: false,
  width: 500,
  height: 500,
  margin: {
    l: 0,
    r: 0,
    b: 0,
    t: 65
  }
};
Plotly.newPlot('myDiv', data, layout);
});\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            

            

            

            
            
            
        
    
    


                
                


    
        
        

            
                Plotly JavaScript Open Source Graphing Library
                
                    Built on top of d3.js and stack.gl, Plotly.js is a high-level, declarative charting library. plotly.js ships with over 40 chart types, including 3D charts, statistical graphs, and SVG maps.
                    plotly.js is free and open source and you can view the source, report issues or contribute on GitHub.
                
            
        
        
          
            

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




            
            
                Read more about plotly.js features
                

                

                    
                        Sophisticated chart types
                    
                    
                        plotly.js abstracts the types of statistical and scientific charts that you would find in packages like matplotlib, ggplot2, or MATLAB.
                    

                    
                    
                        
                    
                    d3.json('https://plotly.com/~DanielCarrera/13.json', function(figure){
                  var trace = {
                    x: figure.data[0].x, y: figure.data[0].y, z: figure.data[0].z,
                    type: 'contour', autocolorscale: false,
                    colorscale: [[0,"rgb(  0,  0,  0)"],[0.3,"rgb(230,  0,  0)"],[0.6,"rgb(255,210,  0)"],[1,"rgb(255,255,255)"]],
                    reversescale: true, zmax: 2.5, zmin: -2.5
                  };
                  var layout = {
                    title: {
                      text: 'turbulence simulation'
                  },
                    xaxis: {
                      title: {
                          text: 'radial direction'
                      },
                      showline: true,
                      mirror: 'allticks',
                      ticks: 'inside'
                    },
                    yaxis: {
                        title: {
                            text: 'vertical direction'
                        },
                        showline: true,
                        mirror: 'allticks',
                        ticks: 'inside'
                    },
                    margin: {l: 40, b: 40, t: 60},
                    annotations: [{
                      showarrow: false,
                      text: 'Credit: Daniel Carrera',
                      x: 0, y: 0, xref: 'paper', yref: 'paper'
                    }]
                  }
                  Plotly.newPlot(document.getElementById('contour-plot'), [trace], layout, {showLink: false});
                });



                    Fully customizable
                    
                        plotly.js charts are described declaratively as JSON objects. Every aspect of the charts, such as colors, grid lines, and the legend, has a corresponding set of JSON attributes.
                        
                            view all of the available attributes
                        
                    

                    d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv', function(rows){
                    var trace = {
                      type: 'scatter',                    // set the chart type
                      mode: 'lines',                      // connect points with lines
                      x: rows.map(function(row){          // set the x-data
                        return row['Time'];
                      }),
                      y: rows.map(function(row){          // set the x-data
                        return row['10 Min Sampled Avg'];
                      }),
                      line: {                             // set the width of the line.
                        width: 1
                      },
                      error_y: {
                        array: rows.map(function(row){    // set the height of the error bars
                          return row['10 Min Std Dev'];
                        }),
                        thickness: 0.5,                   // set the thickness of the error bars
                        width: 0
                      }
                    };

                    var layout = {
                      yaxis: {
                        title: {
                          text: "Wind Speed"
                        }
                      },       // set the y axis title
                      xaxis: {
                        showgrid: false,                  // remove the x-axis grid lines
                        tickformat: "%B, %Y"              // customize the date format to "month, day"
                      },
                      margin: {                           // update the left, bottom, right, top margin
                        l: 40, b: 10, r: 10, t: 20
                      }
                    };

                    Plotly.newPlot(document.getElementById('wind-speed'), [trace], layout, {showLink: false});
                });



                    High performance
                    
                        
                            Most plotly graphs are drawn with SVG. This offers great compatibility across browsers and publication-quality vector image export. Unfortunately, there are inherent performance limitations with the number of SVG elements that you can draw in the DOM.
                            plotly.js uses stack.gl for high performance 2D and 3D charting.
                        
                        
                            
                                
                            
                            
                                This chart was drawn with the plotly.js chart type scattergl. scattergl charts render an order of magnitude faster than their SVG counterparts.
                            
                        
                        
                            
                                
                                
                                
                            
                            
                                All 3D charts in plotly.js are rendered with WebGL, leveraging the power of the GPU for fast interactivity.
                                view the interactive version
                            
                        
                    
                    Universal
                    
                        By abstracting charts to a declarative JSON structure, plotly.js is used as a browser-based charting library for Python, R, MATLAB.
                    

                
                
            
          


        
    


















    
        Fundamentals

        
        More Fundamentals »
        
    
    
        

            
                    
                    

    
        Configuration Options
        
            View Tutorial
            
        
    


                
                    
                    

    
        Responsive / Fluid Layouts
        
            View Tutorial
            
        
    


                
                    
                    

    
        uirevision in Plotly.react
        
            View Tutorial
            
        
    


                
                    
                    

    
        React Plotly.js
        
            View Tutorial
            
        
    


                
                    
                    

    
        Analytical Apps with Dash
        
            View Tutorial
            
        
    


                
    










    
        Basic Charts

        
        More Basic Charts »
        
    
    
        

            

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Scatter Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Line Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bar Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Pie Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bubble Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
    





    
        Statistical Charts

        
        More Statistical Charts »
        
    
    
        

            
                    
                    

    
        Error Bars
        
            View Tutorial
            
        
    


                
                    
                    

    
        Box Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        2d Density Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Continuous Error Bars
        
            View Tutorial
            
        
    


                
    





    
        Scientific Charts

        
        More Scientific Charts »
        
    
    
        

            
                    
                    

    
        Contour Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Heatmaps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ternary Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Parallel Coordinates Plot
        
            View Tutorial
            
        
    


                
                    
                    

    
        Log Plots
        
            View Tutorial
            
        
    


                
    





    
        Financial Charts

        
        More Financial Charts »
        
    
    
        

            
                    
                    

    
        Waterfall Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Indicators
        
            View Tutorial
            
        
    


                
                    
                    

    
        Candlestick Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Funnel and Funnelarea Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Time Series
        
            View Tutorial
            
        
    


                
    





    
        Maps

        
        More Maps »
        
    
    
        

            
                    
                    

    
        Migrate to Maplibre
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Map Layers
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Density Heatmap
        
            View Tutorial
            
        
    


                
                    
                    

    
        Choropleth Tile Map
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lines on Maps
        
            View Tutorial
            
        
    


                
    










    
        3D Charts

        
        More 3D Charts »
        
    
    
        

            
                    
                    

    
        3D Scatter Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ribbon Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Surface Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Mesh Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Line Plots
        
            View Tutorial
            
        
    


                
    





    
        Subplots

        
        More Subplots »
        
    
    
        

            
                    
                    

    
        Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Inset Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Mixed Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Table Subplots
        
            View Tutorial
            
        
    


                
    









    
        Custom Chart Events

        
    
    
        

            
                    
                    

    
        Click Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Hover Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Zoom Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Disable Zoom Events
        
            View Tutorial
            
        
    


                
    





    
        Add Custom Controls

        
        More Controls »
        
    
    
        

            
                    
                    

    
        Dropdown Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Button Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Slider Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lasso Selection
        
            View Tutorial
            
        
    


                
                    
                    

    
        Range Slider and Selector
        
            View Tutorial
            
        
    


                
    





    
        Animations

        
    
    
        

            
                    
                    

    
        Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Adding Sliders to Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Filled-Area Animation
        
            View Tutorial
            
        
    


                
                    
                    

    
        Map Animation
        
            View Tutorial\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Subplots
            
            
                > Subplots
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Subplots
                  
                  in 
                  JavaScript
                  
                  
                
                How to make D3.js-based subplots in Plotly.js. Seven examples of stacked, custom-sized, and gridded subplots. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Simple Subplot
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3],
  y: [4, 5, 6],
  type: 'scatter'
};

var trace2 = {
  x: [20, 30, 40],
  y: [50, 60, 70],
  xaxis: 'x2',
  yaxis: 'y2',
  type: 'scatter'
};

var data = [trace1, trace2];

var layout = {
  grid: {rows: 1, columns: 2, pattern: 'independent'},
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Custom Sized Subplot
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3],
  y: [4, 5, 6],
  type: 'scatter'
};

var trace2 = {
  x: [20, 30, 40],
  y: [50, 60, 70],
  xaxis: 'x2',
  yaxis: 'y2',
  type: 'scatter'
};

var data = [trace1, trace2];

var layout = {
  xaxis: {domain: [0, 0.7]},
  yaxis2: {anchor: 'x2'},
  xaxis2: {domain: [0.8, 1]}
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Multiple Subplots
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3],
  y: [4, 5, 6],
  type: 'scatter'
};

var trace2 = {
  x: [20, 30, 40],
  y: [50, 60, 70],
  xaxis: 'x2',
  yaxis: 'y2',
  type: 'scatter'
};

var trace3 = {
  x: [300, 400, 500],
  y: [600, 700, 800],
  xaxis: 'x3',
  yaxis: 'y3',
  type: 'scatter'
};

var trace4 = {
  x: [4000, 5000, 6000],
  y: [7000, 8000, 9000],
  xaxis: 'x4',
  yaxis: 'y4',
  type: 'scatter'
};

var data = [trace1, trace2, trace3, trace4];

var layout = {
  grid: {rows: 2, columns: 2, pattern: 'independent'},
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Subplots with Shared Axes
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3],
  y: [2, 3, 4],
  type: 'scatter'
};

var trace2 = {
  x: [20, 30, 40],
  y: [5, 5, 5],
  xaxis: 'x2',
  yaxis: 'y',
  type: 'scatter'
};

var trace3 = {
  x: [2, 3, 4],
  y: [600, 700, 800],
  xaxis: 'x',
  yaxis: 'y3',
  type: 'scatter'
};

var trace4 = {
  x: [4000, 5000, 6000],
  y: [7000, 8000, 9000],
  xaxis: 'x4',
  yaxis: 'y4',
  type: 'scatter'
};

var data = [trace1, trace2, trace3, trace4];

var layout = {
  grid: {
    rows: 2,
    columns: 2,
    subplots:[['xy','x2y'], ['xy3','x4y4']],
    roworder:'bottom to top'
  }
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Stacked Subplots
          
        

        
          
            
            
              
                var trace1 = {
  x: [0, 1, 2],
  y: [10, 11, 12],
  type: 'scatter'
};

var trace2 = {
  x: [2, 3, 4],
  y: [100, 110, 120],
  xaxis: 'x2',
  yaxis: 'y2',
  type: 'scatter'
};

var trace3 = {
  x: [3, 4, 5],
  y: [1000, 1100, 1200],
  xaxis: 'x3',
  yaxis: 'y3',
  type: 'scatter'
};

var data = [trace1, trace2, trace3];

var layout = {
grid: {
    rows: 3,
    columns: 1,
    pattern: 'independent',
    roworder: 'bottom to top'}
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Stacked Subplots with a Shared X-Axis
          
        

        
          
            
            
              
                var trace1 = {
  x: [0, 1, 2],
  y: [10, 11, 12],
  type: 'scatter'
};

var trace2 = {
  x: [2, 3, 4],
  y: [100, 110, 120],
  yaxis: 'y2',
  type: 'scatter'
};

var trace3 = {
  x: [3, 4, 5],
  y: [1000, 1100, 1200],
  yaxis: 'y3',
  type: 'scatter'
};

var data = [trace1, trace2, trace3];

var layout = {
  yaxis: {domain: [0, 0.33]},
  legend: {traceorder: 'reversed'},
  yaxis2: {domain: [0.33, 0.66]},
  yaxis3: {domain: [0.66, 1]}
};

Plotly.newPlot('myDiv', data, layout);

              
            
            
          
          
            

            
            
              
                
                
              
              
              
              
            
          
        
    
    
      
        
          
            Multiple Custom Sized Subplots
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2],
  y: [1, 2],
  type: 'scatter',
  name: '(1,1)'
};

var trace2 = {
  x: [1, 2],
  y: [1, 2],
  type: 'scatter',
  name: '(1,2)',
  xaxis: 'x2',
  yaxis: 'y2'
};

var trace3 = {
  x: [1, 2],
  y: [1, 2],
  type: 'scatter',
  name: '(1,2)',
  xaxis: 'x3',
  yaxis: 'y3'
};

var trace4 = {
  x: [1, 2],
  y: [1, 2],
  type: 'scatter',
  name: '(1,2)',
  xaxis: 'x4',
  yaxis: 'y4'
};

var data = [trace1, trace2, trace3, trace4];

var layout = {
  title: {text: 'Multiple Custom Sized Subplots'},
  xaxis: {
    domain: [0, 0.45],
    anchor: 'y1'
  },
  yaxis: {
    domain: [0.5, 1],
    anchor: 'x1'
  },
  xaxis2: {
    domain: [0.55, 1],
    anchor: 'y2'
  },
  yaxis2: {
    domain: [0.8, 1],
    anchor: 'x2'
  },
  xaxis3: {
    domain: [0.55, 1],
    anchor: 'y3'
  },
  yaxis3: {
    domain: [0.5, 0.75],
    anchor: 'x3'
  },
  xaxis4: {
    domain: [0, 1],
    anchor: 'y4'
  },
  yaxis4: {
    domain: [0, 0.45],
    anchor: 'x4'
  }
};

Plotly.newPlot('myDiv', data, layout);\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Subplots
            
            
                > Inset Plots
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Inset Plots
                  
                  in 
                  JavaScript
                  
                  
                
                How to make an inset graph in D3.js-based javascript charts. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Simple Inset Graph
          
        

        
          
            
            
              
                var trace1 = {
  x: [1, 2, 3],
  y: [4, 3, 2],
  type: 'scatter'
};

var trace2 = {
  x: [20, 30, 40],
  y: [30, 40, 50],
  xaxis: 'x2',
  yaxis: 'y2',
  type: 'scatter'
};

var data = [trace1, trace2];

var layout = {
  yaxis2: {
    domain: [0.6, 0.95],
    anchor: 'x2'
  },
  xaxis2: {
    domain: [0.6, 0.95],
    anchor: 'y2'
  }
};

Plotly.newPlot('myDiv', data, layout);\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Subplots
            
            
                > 3D Subplots
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  3D Subplots
                  
                  in 
                  JavaScript
                  
                  
                
                How to make 3D Subplots in javascript. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Multiple 3D Subplots
          
        

        
          
            
            
              
                function getrandom(num , mul) {
    var value = [ ];
    for ( i=0; i <= num; i++ ) {
        var rand = Math.random() * mul;
        value.push(rand);
    }
    return value;
}

var trace1 =  {
     opacity: 0.5,
     color: 'rgba(255,127,80,0.7)',
     type: 'mesh3d',
     x: getrandom(50 , -75),
     y: getrandom(50 , 75),
     z: getrandom(50 , 75),
     scene: "scene1"
    };

var trace2 =  {
     opacity: 0.5,
     color: 'pink',
     type: 'mesh3d',
     x: getrandom(50 , -75),
     y: getrandom(50 , 75),
     z: getrandom(50 , 75),
     scene: "scene2"
    };

var trace3 = {
     opacity:0.4,
     color:'rgb(033,255,100)',
     type: 'mesh3d',
     x: getrandom(50 , -75),
     y: getrandom(50 , -75),
     z: getrandom(50 , -75),
     scene: "scene3",
    };

var trace4 = {
     opacity: 0.5,
     color:'rgb(200,100,200)',
     type: 'mesh3d',
     x: getrandom(50 , -75),
     y: getrandom(50 , 75),
     z: getrandom(50 , 75),
     scene: "scene4"
    };
    
var trace5 =  {
    opacity: 0.5,
    color:'rgb(00,150,200)',
    type: 'mesh3d',
    x: getrandom(50 , 100),
    y: getrandom(50 , 100),
    z: getrandom(50 , 100),
    scene: "scene5",
    }

var layout = {
    scene1: {
        domain: {
            x: [0.0,  0.5],
            y: [0.5, 1.0]
        },},
    scene2: {
        domain: {
            x: [0.5, 1],
            y: [0.5, 1.0]
        }},
     scene3: {
        domain: {
            x: [0.0,  0.33],
            y: [0, 0.5]
        },},
    scene4: {
        domain: {
            x: [0.33, 0.66],
            y: [0, 0.5]
        }},
    scene5: {
        domain: {
            x: [0.66, 0.99],
            y: [0, 0.5]
        },},
  height: 600,
   margin: {
    l: 0,
    r: 0,
    b: 0,
    t: 0,
    pad: 0
  },
}    
     
Plotly.newPlot('myDiv', [trace1,trace2,trace3,trace4,trace5], layout);\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Subplots
            
            
                > Mixed Subplots
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Mixed Subplots
                  
                  in 
                  JavaScript
                  
                  
                
                How to make Mixed Subplots in javascript. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Mixed Subplots
          
        

        
          
            
            
              
                d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/volcano_db.csv', function(err, rows){
      function unpack(rows, key) {
          return rows.map(function(row) { return row[key]; });
      }

var trace1 = {
  x: unpack(rows, 'Status'),
  y: unpack(rows, 'Type'),
  z: unpack(rows, 'Elev'),
  marker: {
    size: 2,
    color: unpack(rows, 'Elev'),
    colorscale: 'Reds',
    line: {color: 'transparent'}
  },
  mode: 'markers',
  type: 'scatter3d',
  text: unpack(rows, 'Country'),
  hoverinfo: 'x+y+z+text',
  showlegend: false
};

var x = unpack(rows, 'Elev');

var trace2 = {
    x: unpack(rows, 'Elev'),
    type: 'histogram',
    hoverinfo: 'x+y',
    showlegend: false,
    xaxis: 'x2',
    yaxis: 'y2',
	 marker: {
		 color: 'red'
	}};

var trace3 = {
    geo: 'geo3',
    type:'scattergeo',
    locationmode: 'world',
    lon: unpack(rows, 'Longitude'),
    lat: unpack(rows, 'Latitude'),
    hoverinfo:  'text',
    text:  unpack(rows, 'Elev'),
    mode: 'markers',
    showlegend: false,
    marker: {
      size: 4,
      color: unpack(rows, 'Elev'),
      colorscale: 'Reds',
      opacity: 0.8,
      symbol: 'circle',
      line: {
        width: 1
      }
    }
};

var data = [trace1, trace2, trace3];

var layout = {
      paper_bgcolor: 'black',
      plot_bgcolor: 'black',
      title: {text: 'Volcano Database: Elevation'},
      font: {color: 'white'},
      colorbar: true,
      annotations: [{
         x: 0,
         y: 0,
         xref: 'paper',
         yref: 'paper',
         text: 'Source: NOAA',
         showarrow: false
      }],
      geo3: {
        domain: {
      x: [0, 0.45],
      y: [0.02, 0.98]
		  },
        scope: 'world',
        projection: {
          type: 'orthographic'
        },
        showland: true,
        showocean: true,
        showlakes: true,
        landcolor: 'rgb(250,250,250)',
        lakecolor: 'rgb(127,205,255)',
        oceancolor: 'rgb(6,66,115)',
        subunitcolor: 'rgb(217,217,217)',
        countrycolor: 'rgb(217,217,217)',
        countrywidth: 0.5,
        subunitwidth: 0.5,
        bgcolor: 'black'
      },
	scene: {domain: {
      x: [0.55, 1],
      y: [0, 0.6]
    },
    xaxis: {
      title: {
          text: 'Status'
      },
      showticklabels: false,
      showgrid: true,
      gridcolor: 'white'
    },
    yaxis: {
        title: {
            text: 'Type'
        },
        showticklabels: false,
        showgrid: true,
        gridcolor: 'white'
    },
    zaxis: {
        title: {
            text: 'Elev'
        },
        showgrid: true,
        gridcolor: 'white'
    }
			 },
	yaxis2: {
		anchor: 'x2',
      domain: [0.7, 1],
      showgrid: false
	},
	xaxis2: {
      tickangle: 45,
      anchor: 'y2',
	  ticksuffix: 'm',
      domain: [0.6, 1]},
};

Plotly.newPlot("myDiv", data, layout, {showLink: false});

});\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Subplots
            
            
                > Table Subplots
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Table Subplots
                  
                  in 
                  JavaScript
                  
                  
                
                How to make a D3.js-based table subplots in javascript. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Table and Chart Subplot
          
        

        
          
            
            
              
                d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/Mining-BTC-180.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
  }

  // header values
  var headerNames = d3.keys(rows[0]);
  var headerValues = [headerNames[1],headerNames[2],
                      headerNames[3],headerNames[4]];

  // cell values
  var cellValues = [];
  for (i = 0; i < headerValues.length; i++) {
    cellValue = unpack(rows, headerValues[i]);
    cellValues[i] = cellValue;
  }

  // clean date
  for (i = 0; i < cellValues[0].length; i++) {
  var dateValue = cellValues[0][i].split(' ')[0]
  cellValues[0][i] = dateValue
  }

  // create table
  var table = {
    type: 'table',
    columnwidth: [150,200,200,150],
    columnorder: [0,1,2,3],
    header: {
      values: headerValues,
      align: "center",
      line: {width: 1, color: 'rgb(50, 50, 50)'},
      fill: {color: ['rgb(235, 100, 230)']},
      font: {family: "Arial", size: 11, color: "white"}
    },
    cells: {
      values: cellValues,
      align: ["center", "center"],
      line: {color: "black", width: 1},
      fill: {color: ['rgb(235, 193, 238)', 'rgba(228, 222, 249, 0.65)']},
      font: {family: "Arial", size: 10, color: ["black"]}
    },
    xaxis: 'x',
    yaxis: 'y',
    domain: {x: [0,0.4], y: [0,1]}
  }

  // create 1st plot
  var trace1 = {
    x: unpack(rows, 'Date'),
    y: unpack(rows, 'Hash-rate'),
    xaxis: 'x1',
    yaxis: 'y1',
    mode: 'lines',
    line: {width: 2, color: '#9748a1'},
    name: 'hash-rate-TH/s'
  }
  // create 2nd plot
  var trace2 = {
    x: unpack(rows, 'Date'),
    y: unpack(rows, 'Mining-revenue-USD'),
    xaxis: 'x2',
    yaxis: 'y2',
    mode: 'lines',
    line: {width: 2, color: '#b04553'},
    name: 'Mining-revenue-USD'
  }

  // create 3rd plot
  var trace3 = {
    x: unpack(rows, 'Date'),
    y: unpack(rows, 'Transaction-fees-BTC'),
    xaxis: 'x3',
    yaxis: 'y3',
    mode: 'lines',
    line: {width: 2, color: '#af7bbd'},
    name: 'Transaction-fees-BTC'
  }

  var data = [table,trace1,trace2,trace3]

  // define subplot axes
  var axis = {
    showline: true,
    zeroline: false,
    showgrid: true,
    mirror:true,
    ticklen: 4,
    gridcolor: '#ffffff',
    tickfont: {size: 10},
  }

  var axis1 = {domain: [0.5, 1], anchor: 'y1', showticklabels: false}
  var axis2 = {domain: [0.5, 1], anchor: 'y2', showticklabels: false}
  var axis3 = {domain: [0.5, 1], anchor: 'y3'}
  var axis4 = {domain: [0.66, 0.98], anchor: 'x1', hoverformat: '.2f'}
  var axis5 = {domain: [0.34, 0.64], anchor: 'x2', tickprefix: '$', hoverformat: '.2f'}
  var axis6 = {domain: [0.0, 0.32], anchor: 'x3', tickprefix: '\u20BF', hoverformat: '.2f'}

  // define layout
  var layout = {
    title: {text: "Bitcoin mining stats for 180 days"},
    plot_bgcolor: 'rgba(228, 222, 249, 0.65)',
    showlegend: false,
    xaxis1: Object.assign(axis1,axis),
    xaxis2: Object.assign(axis2,axis),
    xaxis3: Object.assign(axis3,axis),
    yaxis1: Object.assign(axis4,axis),
    yaxis2: Object.assign(axis5,axis),
    yaxis3: Object.assign(axis6,axis)
  }

  Plotly.newPlot('myDiv', data, layout);

});\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            

            

            

            
            
            
        
    
    


                
                


    
        
        

            
                Plotly JavaScript Open Source Graphing Library
                
                    Built on top of d3.js and stack.gl, Plotly.js is a high-level, declarative charting library. plotly.js ships with over 40 chart types, including 3D charts, statistical graphs, and SVG maps.
                    plotly.js is free and open source and you can view the source, report issues or contribute on GitHub.
                
            
        
        
          
            

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




            
            
                Read more about plotly.js features
                

                

                    
                        Sophisticated chart types
                    
                    
                        plotly.js abstracts the types of statistical and scientific charts that you would find in packages like matplotlib, ggplot2, or MATLAB.
                    

                    
                    
                        
                    
                    d3.json('https://plotly.com/~DanielCarrera/13.json', function(figure){
                  var trace = {
                    x: figure.data[0].x, y: figure.data[0].y, z: figure.data[0].z,
                    type: 'contour', autocolorscale: false,
                    colorscale: [[0,"rgb(  0,  0,  0)"],[0.3,"rgb(230,  0,  0)"],[0.6,"rgb(255,210,  0)"],[1,"rgb(255,255,255)"]],
                    reversescale: true, zmax: 2.5, zmin: -2.5
                  };
                  var layout = {
                    title: {
                      text: 'turbulence simulation'
                  },
                    xaxis: {
                      title: {
                          text: 'radial direction'
                      },
                      showline: true,
                      mirror: 'allticks',
                      ticks: 'inside'
                    },
                    yaxis: {
                        title: {
                            text: 'vertical direction'
                        },
                        showline: true,
                        mirror: 'allticks',
                        ticks: 'inside'
                    },
                    margin: {l: 40, b: 40, t: 60},
                    annotations: [{
                      showarrow: false,
                      text: 'Credit: Daniel Carrera',
                      x: 0, y: 0, xref: 'paper', yref: 'paper'
                    }]
                  }
                  Plotly.newPlot(document.getElementById('contour-plot'), [trace], layout, {showLink: false});
                });



                    Fully customizable
                    
                        plotly.js charts are described declaratively as JSON objects. Every aspect of the charts, such as colors, grid lines, and the legend, has a corresponding set of JSON attributes.
                        
                            view all of the available attributes
                        
                    

                    d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv', function(rows){
                    var trace = {
                      type: 'scatter',                    // set the chart type
                      mode: 'lines',                      // connect points with lines
                      x: rows.map(function(row){          // set the x-data
                        return row['Time'];
                      }),
                      y: rows.map(function(row){          // set the x-data
                        return row['10 Min Sampled Avg'];
                      }),
                      line: {                             // set the width of the line.
                        width: 1
                      },
                      error_y: {
                        array: rows.map(function(row){    // set the height of the error bars
                          return row['10 Min Std Dev'];
                        }),
                        thickness: 0.5,                   // set the thickness of the error bars
                        width: 0
                      }
                    };

                    var layout = {
                      yaxis: {
                        title: {
                          text: "Wind Speed"
                        }
                      },       // set the y axis title
                      xaxis: {
                        showgrid: false,                  // remove the x-axis grid lines
                        tickformat: "%B, %Y"              // customize the date format to "month, day"
                      },
                      margin: {                           // update the left, bottom, right, top margin
                        l: 40, b: 10, r: 10, t: 20
                      }
                    };

                    Plotly.newPlot(document.getElementById('wind-speed'), [trace], layout, {showLink: false});
                });



                    High performance
                    
                        
                            Most plotly graphs are drawn with SVG. This offers great compatibility across browsers and publication-quality vector image export. Unfortunately, there are inherent performance limitations with the number of SVG elements that you can draw in the DOM.
                            plotly.js uses stack.gl for high performance 2D and 3D charting.
                        
                        
                            
                                
                            
                            
                                This chart was drawn with the plotly.js chart type scattergl. scattergl charts render an order of magnitude faster than their SVG counterparts.
                            
                        
                        
                            
                                
                                
                                
                            
                            
                                All 3D charts in plotly.js are rendered with WebGL, leveraging the power of the GPU for fast interactivity.
                                view the interactive version
                            
                        
                    
                    Universal
                    
                        By abstracting charts to a declarative JSON structure, plotly.js is used as a browser-based charting library for Python, R, MATLAB.
                    

                
                
            
          


        
    


















    
        Fundamentals

        
        More Fundamentals »
        
    
    
        

            
                    
                    

    
        Configuration Options
        
            View Tutorial
            
        
    


                
                    
                    

    
        Responsive / Fluid Layouts
        
            View Tutorial
            
        
    


                
                    
                    

    
        uirevision in Plotly.react
        
            View Tutorial
            
        
    


                
                    
                    

    
        React Plotly.js
        
            View Tutorial
            
        
    


                
                    
                    

    
        Analytical Apps with Dash
        
            View Tutorial
            
        
    


                
    










    
        Basic Charts

        
        More Basic Charts »
        
    
    
        

            

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Scatter Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Line Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bar Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Pie Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bubble Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
    





    
        Statistical Charts

        
        More Statistical Charts »
        
    
    
        

            
                    
                    

    
        Error Bars
        
            View Tutorial
            
        
    


                
                    
                    

    
        Box Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        2d Density Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Continuous Error Bars
        
            View Tutorial
            
        
    


                
    





    
        Scientific Charts

        
        More Scientific Charts »
        
    
    
        

            
                    
                    

    
        Contour Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Heatmaps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ternary Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Parallel Coordinates Plot
        
            View Tutorial
            
        
    


                
                    
                    

    
        Log Plots
        
            View Tutorial
            
        
    


                
    





    
        Financial Charts

        
        More Financial Charts »
        
    
    
        

            
                    
                    

    
        Waterfall Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Indicators
        
            View Tutorial
            
        
    


                
                    
                    

    
        Candlestick Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Funnel and Funnelarea Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Time Series
        
            View Tutorial
            
        
    


                
    





    
        Maps

        
        More Maps »
        
    
    
        

            
                    
                    

    
        Migrate to Maplibre
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Map Layers
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Density Heatmap
        
            View Tutorial
            
        
    


                
                    
                    

    
        Choropleth Tile Map
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lines on Maps
        
            View Tutorial
            
        
    


                
    










    
        3D Charts

        
        More 3D Charts »
        
    
    
        

            
                    
                    

    
        3D Scatter Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ribbon Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Surface Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Mesh Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Line Plots
        
            View Tutorial
            
        
    


                
    





    
        Subplots

        
        More Subplots »
        
    
    
        

            
                    
                    

    
        Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Inset Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Mixed Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Table Subplots
        
            View Tutorial
            
        
    


                
    









    
        Custom Chart Events

        
    
    
        

            
                    
                    

    
        Click Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Hover Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Zoom Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Disable Zoom Events
        
            View Tutorial
            
        
    


                
    





    
        Add Custom Controls

        
        More Controls »
        
    
    
        

            
                    
                    

    
        Dropdown Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Button Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Slider Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lasso Selection
        
            View Tutorial
            
        
    


                
                    
                    

    
        Range Slider and Selector
        
            View Tutorial
            
        
    


                
    





    
        Animations

        
    
    
        

            
                    
                    

    
        Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Adding Sliders to Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Filled-Area Animation
        
            View Tutorial
            
        
    


                
                    
                    

    
        Map Animation
        
            View Tutorial\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Chart Events
            
            
                > Click Events
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Click Events
                  
                  in 
                  JavaScript
                  
                  
                
                How to bind callback functions to click events in D3.js-based JavaScript charts. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Click Event Data
          
        

        
          
            
            
              
                {
  points: [{
    curveNumber: 2,  // index in data of the trace associated with the selected point
    pointNumber: 2,  // index of the selected point
    x: 5,        // x value
    y: 600,      // y value
    data: {/* */},       // ref to the trace as sent to Plotly.newPlot associated with the selected point
    fullData: {/* */},   // ref to the trace including all the defaults
   xaxis: {/* */},   // ref to x-axis object (i.e layout.xaxis) associated with the selected point
   yaxis: {/* */}    // ref to y-axis object " "
  }, {
    /* similarly for other selected points */
  }]
}

              
            
            
          
          
        
    
    
      
        
          
            Binding to Click Events
          
        

        
          
            
            
              
                var myPlot = document.getElementById('myDiv'),
    N = 16,
    x = d3.range(N),
    y = d3.range(N).map( d3.random.normal() ),
    data = [ { x:x, y:y, type:'scatter',
            mode:'markers', marker:{size:16} } ],
    layout = {
        hovermode:'closest',
        title: {text: 'Click on Points'}
     };

Plotly.newPlot('myDiv', data, layout);

myPlot.on('plotly_click', function(data){
    var pts = '';
    for(var i=0; i < data.points.length; i++){
        pts = 'x = '+data.points[i].x +'\ny = '+
            data.points[i].y.toPrecision(4) + '\n\n';
    }
    alert('Closest point clicked:\n\n'+pts);
});

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Create annotation on click event
          
        

        
          
            
            
              
                var myPlot = document.getElementById('myDiv'),
    N = 100,
    x = d3.range(N),
    y1 = d3.range(N).map( d3.random.normal() ),
    y2 = d3.range(N).map( d3.random.normal(-2) ),
    y3 = d3.range(N).map( d3.random.normal(2) ),
    trace1 = { x:x, y:y1, type:'scatter', mode:'lines', name:'Jeff' },
    trace2 = { x:x, y:y2, type:'scatter', mode:'lines', name:'Terren' },
    trace3 = { x:x, y:y3, type:'scatter', mode:'lines', name:'Arthur' },
    data = [ trace1, trace2, trace3 ],
    layout = {
        hovermode:'closest',
        title: {text: 'Click on Points to add an Annotation on it'}
     };

Plotly.newPlot('myDiv', data, layout);

myPlot.on('plotly_click', function(data){
    var pts = '';
    for(var i=0; i < data.points.length; i++){
        annotate_text = 'x = '+data.points[i].x +
                      'y = '+data.points[i].y.toPrecision(4);

        annotation = {
          text: annotate_text,
          x: data.points[i].x,
          y: parseFloat(data.points[i].y.toPrecision(4))
        }

        annotations = self.layout.annotations || [];
        annotations.push(annotation);
        Plotly.relayout('myDiv',{annotations: annotations})
    }
});\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Chart Events
            
            
                > Hover Events
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Hover Events
                  
                  in 
                  JavaScript
                  
                  
                
                How to bind callback functions to hover events in D3.js-based JavaScript charts. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Hover Event Data
          
        

        
          
            
            
              
                {
  points: [{
    curveNumber: 2,  // index in data of the trace associated with the selected point 
    pointNumber: 2,  // index of the selected point
    x: 5,        // x value
    y: 600,      // y value
    data: {/* */},       // ref to the trace as sent to Plotly.newPlot associated with the selected point
    fullData: {/* */},   // ref to the trace including all the defaults
   xaxis: {/* */},   // ref to x-axis object (i.e layout.xaxis) associated with the selected point
   yaxis: {/* */}    // ref to y-axis object " "
  }, {
    /* similarly for other selected points */
  }]
}

              
            
            
          
          
        
    
    
      
        
          
            Capturing Hover Events: Data
          
        

        
          
            
            
              
                var myPlot = document.getElementById('myDiv'),
    hoverInfo = document.getElementById('hoverinfo'),
    N = 16,
    x = d3.range(N),
    y1 = d3.range(N).map( d3.random.normal() ),
    y2 = d3.range(N).map( d3.random.normal() ),
    data = [ { x:x, y:y1, type:'scatter', name:'Trial 1',
        mode:'markers', marker:{size:16} },
        { x:x, y:y2, type:'scatter', name:'Trial 2',
        mode:'markers', marker:{size:16} } ];
    layout = {
        hovermode:'closest',
        title: {text: 'Hover on Points'}
     };

Plotly.newPlot('myDiv', data, layout);

myPlot.on('plotly_hover', function(data){
    var infotext = data.points.map(function(d){
      return (d.data.name+': x= '+d.x+', y= '+d.y.toPrecision(3));
    });

    hoverInfo.innerHTML = infotext.join('<br/>');
})
 .on('plotly_unhover', function(data){
    hoverInfo.innerHTML = '';
});

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Capturing Hover Events: Pixels
          
        

        
          
            
            
              
                var myPlot = document.getElementById('myDiv'),
    hoverInfo = document.getElementById('hoverinfo'),
    N = 16,
    x = d3.range(N),
    y1 = d3.range(N).map(d3.random.normal()),
    y2 = d3.range(N).map(d3.random.normal()),
    data = [{x:x, y:y1, type:'scatter', name:'Trial 1',
        mode:'markers', marker:{size:16}},
        {x:x, y:y2, type:'scatter', name:'Trial 2',
        mode:'markers', marker:{size:16}}],
    layout = {hovermode:'closest',
              title: {text: 'Hover on Points to see<br>Pixel Coordinates'}};

Plotly.newPlot('myDiv', data, layout);

myPlot.on('plotly_hover', function(data){
    var xaxis = data.points[0].xaxis,
        yaxis = data.points[0].yaxis;
    var infotext = data.points.map(function(d){
      return ('width: '+xaxis.l2p(d.x)+', height: '+yaxis.l2p(d.y));
    });

    hoverInfo.innerHTML = infotext.join('<br/>');
})
 .on('plotly_unhover', function(data){
    hoverInfo.innerHTML = '';
});

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Triggering Hover Events
          
        

        
          
            
            
              
                var myPlot = document.getElementById('myDiv'),
    hoverButton = document.getElementById('hoverbutton'),
    N = 16,
    x = d3.range(N),
    y1 = d3.range(N).map( d3.random.normal() ),
    y2 = d3.range(N).map( d3.random.normal() ),
    data = [ { x:x, y:y1, type:'scatter', name:'Trial 1',
        mode:'markers', marker:{size:16} },
        { x:x, y:y2, type:'scatter', name:'Trial 2',
        mode:'markers', marker:{size:16} } ];
    layout = {
        hovermode:'closest',
        title: {text: 'Click "Go" button to trigger hover'}
     };

Plotly.newPlot('myDiv', data, layout);

myPlot.on('plotly_beforehover',function(){
    return false;
});

hoverButton.addEventListener('click', function(){
    var curve1 = Math.floor(Math.random()*2),
        curve2 = Math.floor(Math.random()*2),
        point1 = Math.floor(Math.random()*14),
        point2 = Math.floor(Math.random()*14);
    Plotly.Fx.hover('myDiv',[
        {curveNumber:curve1, pointNumber:point1},
        {curveNumber:curve2, pointNumber:point2}
    ]);
});

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Coupled Hover Events
          
        

        
          
            
            
              
                var myPlot = document.getElementById('myDiv'),
    N = 12,
    x1 = d3.range(N).map( d3.random.normal() ),
    x2 = d3.range(N).map( d3.random.normal() ),
    x3 = d3.range(N).map( d3.random.normal() ),
    y1 = d3.range(N).map( d3.random.normal() ),
    y2 = d3.range(N).map( d3.random.normal() ),
    y3 = d3.range(N).map( d3.random.normal() ),
    months = ['January', 'February', 'March', 'April',
              'May', 'June', 'July', 'August',
              'September', 'October', 'November', 'December']
    data = [{ x: x1, y: y1, text: months, type: 'scatter', name: '2014', hoverinfo: 'text+x+y',
              mode: 'markers', marker: {color: 'rgba(200, 50, 100, .7)', size: 16}
            },
            { x: x2, y: y2, text: months, type: 'scatter', name: '2015', hoverinfo: 'text+x+y',
             mode: 'markers', marker: {color: 'rgba(120, 20, 130, .7)', size: 16}
            },
            { x: x3, y: y3, text: months, type: 'scatter', name: '2016', hoverinfo: 'text+x+y',
             mode: 'markers', marker: {color: 'rgba(10, 180, 180, .8)', size: 16}
            }];
    layout = {
        hovermode:'closest',
        title: {text: 'Display Hover Info for Related Points'},
        xaxis:{zeroline:false, hoverformat: '.2r'},
        yaxis:{zeroline:false, hoverformat: '.2r'}
     };

Plotly.newPlot('myDiv', data, layout);

myPlot.on('plotly_hover', function (eventdata){
    var points = eventdata.points[0],
        pointNum = points.pointNumber;

    Plotly.Fx.hover('myDiv',[
        { curveNumber:0, pointNumber:pointNum },
        { curveNumber:1, pointNumber:pointNum },
        { curveNumber:2, pointNumber:pointNum },
    ]);
});

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Combined Click and Hover Events
          
        

        
          
            
            
              
                This is a more complex example that uses both hover, and click events to display traces. Take a look in the codepen javascript!\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Chart Events
            
            
                > Zoom Events
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Zoom Events
                  
                  in 
                  JavaScript
                  
                  
                
                How to bind callback functions to zoom events in D3.js-based JavaScript charts. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Binding to Zoom Events
          
        

        
          
            
            
              
                var graphDiv = document.getElementById('myDiv');

var N = 40,
    x = d3.range(N),
    y = d3.range(N).map( d3.random.normal() ),
    data = [ { x:x, y:y } ];
    layout = { title: {text: 'Click-drag to zoom' }};

Plotly.newPlot(graphDiv, data, layout);

graphDiv.on('plotly_relayout',
    function(eventdata){
        alert( 'ZOOM!' + '\n\n' +
            'Event data:' + '\n' +
             JSON.stringify(eventdata) + '\n\n' +
            'x-axis start:' + eventdata['xaxis.range[0]'] + '\n' +
            'x-axis end:' + eventdata['xaxis.range[1]'] );
    });\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Chart Events
            
            
                > Disable Zoom Events
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Disable Zoom Events
                  
                  in 
                  JavaScript
                  
                  
                
                How to disable zoom events in JavaScript charts. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Disabling Zoom Events for X Axis
          
        

        
          
            
            
              
                function makeplot() {
    d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv", function(data){ processData(data) } );

};

function processData(allRows) {

    console.log(allRows);
    var x = [], y = [], standard_deviation = [];

    for (var i=0; i < allRows.length; i++) {
        row = allRows[i];
        x.push( row['AAPL_x'] );
        y.push( row['AAPL_y'] );
    }
    console.log( 'X',x, 'Y',y, 'SD',standard_deviation );
    makePlotly( x, y, standard_deviation );
}

function makePlotly( x, y, standard_deviation ){
    var plotDiv = document.getElementById("myDiv");
    var traces = [{
        x: x,
        y: y
    }];

    var layout = {
        title: {
            text: 'Plotting CSV data from AJAX call'
        },
        xaxis: {
            fixedrange: true
        }
    };

    Plotly.newPlot('myDiv', traces, layout);
};
  makeplot();


              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Disabling Zoom Events for X and Y Axis
          
        

        
          
            
            
              
                function makeplot() {
    d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv", function(data){ processData(data) } );

};

function processData(allRows) {

    var x = [], y = [], standard_deviation = [];

    for (var i=0; i < allRows.length; i++) {
        row = allRows[i];
        x.push( row['AAPL_x'] );
        y.push( row['AAPL_y'] );
    }
    makePlotly( x, y, standard_deviation );
}

function makePlotly( x, y, standard_deviation ){
    var plotDiv = document.getElementById("myDiv");
    var traces = [{
        x: x,
        y: y
    }];

    var layout = {
        title: {
            text: 'Plotting CSV data from AJAX call'
        },
        yaxis: {fixedrange: true},
        xaxis: {fixedrange: true}
    };

    Plotly.newPlot('myDiv', traces, layout);
};
  makeplot();\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            

            

            

            
            
            
        
    
    


                
                


    
        
        

            
                Plotly JavaScript Open Source Graphing Library
                
                    Built on top of d3.js and stack.gl, Plotly.js is a high-level, declarative charting library. plotly.js ships with over 40 chart types, including 3D charts, statistical graphs, and SVG maps.
                    plotly.js is free and open source and you can view the source, report issues or contribute on GitHub.
                
            
        
        
          
            

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




            
            
                Read more about plotly.js features
                

                

                    
                        Sophisticated chart types
                    
                    
                        plotly.js abstracts the types of statistical and scientific charts that you would find in packages like matplotlib, ggplot2, or MATLAB.
                    

                    
                    
                        
                    
                    d3.json('https://plotly.com/~DanielCarrera/13.json', function(figure){
                  var trace = {
                    x: figure.data[0].x, y: figure.data[0].y, z: figure.data[0].z,
                    type: 'contour', autocolorscale: false,
                    colorscale: [[0,"rgb(  0,  0,  0)"],[0.3,"rgb(230,  0,  0)"],[0.6,"rgb(255,210,  0)"],[1,"rgb(255,255,255)"]],
                    reversescale: true, zmax: 2.5, zmin: -2.5
                  };
                  var layout = {
                    title: {
                      text: 'turbulence simulation'
                  },
                    xaxis: {
                      title: {
                          text: 'radial direction'
                      },
                      showline: true,
                      mirror: 'allticks',
                      ticks: 'inside'
                    },
                    yaxis: {
                        title: {
                            text: 'vertical direction'
                        },
                        showline: true,
                        mirror: 'allticks',
                        ticks: 'inside'
                    },
                    margin: {l: 40, b: 40, t: 60},
                    annotations: [{
                      showarrow: false,
                      text: 'Credit: Daniel Carrera',
                      x: 0, y: 0, xref: 'paper', yref: 'paper'
                    }]
                  }
                  Plotly.newPlot(document.getElementById('contour-plot'), [trace], layout, {showLink: false});
                });



                    Fully customizable
                    
                        plotly.js charts are described declaratively as JSON objects. Every aspect of the charts, such as colors, grid lines, and the legend, has a corresponding set of JSON attributes.
                        
                            view all of the available attributes
                        
                    

                    d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/wind_speed_laurel_nebraska.csv', function(rows){
                    var trace = {
                      type: 'scatter',                    // set the chart type
                      mode: 'lines',                      // connect points with lines
                      x: rows.map(function(row){          // set the x-data
                        return row['Time'];
                      }),
                      y: rows.map(function(row){          // set the x-data
                        return row['10 Min Sampled Avg'];
                      }),
                      line: {                             // set the width of the line.
                        width: 1
                      },
                      error_y: {
                        array: rows.map(function(row){    // set the height of the error bars
                          return row['10 Min Std Dev'];
                        }),
                        thickness: 0.5,                   // set the thickness of the error bars
                        width: 0
                      }
                    };

                    var layout = {
                      yaxis: {
                        title: {
                          text: "Wind Speed"
                        }
                      },       // set the y axis title
                      xaxis: {
                        showgrid: false,                  // remove the x-axis grid lines
                        tickformat: "%B, %Y"              // customize the date format to "month, day"
                      },
                      margin: {                           // update the left, bottom, right, top margin
                        l: 40, b: 10, r: 10, t: 20
                      }
                    };

                    Plotly.newPlot(document.getElementById('wind-speed'), [trace], layout, {showLink: false});
                });



                    High performance
                    
                        
                            Most plotly graphs are drawn with SVG. This offers great compatibility across browsers and publication-quality vector image export. Unfortunately, there are inherent performance limitations with the number of SVG elements that you can draw in the DOM.
                            plotly.js uses stack.gl for high performance 2D and 3D charting.
                        
                        
                            
                                
                            
                            
                                This chart was drawn with the plotly.js chart type scattergl. scattergl charts render an order of magnitude faster than their SVG counterparts.
                            
                        
                        
                            
                                
                                
                                
                            
                            
                                All 3D charts in plotly.js are rendered with WebGL, leveraging the power of the GPU for fast interactivity.
                                view the interactive version
                            
                        
                    
                    Universal
                    
                        By abstracting charts to a declarative JSON structure, plotly.js is used as a browser-based charting library for Python, R, MATLAB.
                    

                
                
            
          


        
    


















    
        Fundamentals

        
        More Fundamentals »
        
    
    
        

            
                    
                    

    
        Configuration Options
        
            View Tutorial
            
        
    


                
                    
                    

    
        Responsive / Fluid Layouts
        
            View Tutorial
            
        
    


                
                    
                    

    
        uirevision in Plotly.react
        
            View Tutorial
            
        
    


                
                    
                    

    
        React Plotly.js
        
            View Tutorial
            
        
    


                
                    
                    

    
        Analytical Apps with Dash
        
            View Tutorial
            
        
    


                
    










    
        Basic Charts

        
        More Basic Charts »
        
    
    
        

            

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Scatter Plots
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Line Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bar Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Pie Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
                    
                    

    
        Bubble Charts
        
            View Tutorial
            
        
    


                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                

                
    





    
        Statistical Charts

        
        More Statistical Charts »
        
    
    
        

            
                    
                    

    
        Error Bars
        
            View Tutorial
            
        
    


                
                    
                    

    
        Box Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Histograms
        
            View Tutorial
            
        
    


                
                    
                    

    
        2d Density Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Continuous Error Bars
        
            View Tutorial
            
        
    


                
    





    
        Scientific Charts

        
        More Scientific Charts »
        
    
    
        

            
                    
                    

    
        Contour Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Heatmaps
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ternary Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Parallel Coordinates Plot
        
            View Tutorial
            
        
    


                
                    
                    

    
        Log Plots
        
            View Tutorial
            
        
    


                
    





    
        Financial Charts

        
        More Financial Charts »
        
    
    
        

            
                    
                    

    
        Waterfall Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Indicators
        
            View Tutorial
            
        
    


                
                    
                    

    
        Candlestick Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Funnel and Funnelarea Charts
        
            View Tutorial
            
        
    


                
                    
                    

    
        Time Series
        
            View Tutorial
            
        
    


                
    





    
        Maps

        
        More Maps »
        
    
    
        

            
                    
                    

    
        Migrate to Maplibre
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Map Layers
        
            View Tutorial
            
        
    


                
                    
                    

    
        Tile Density Heatmap
        
            View Tutorial
            
        
    


                
                    
                    

    
        Choropleth Tile Map
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lines on Maps
        
            View Tutorial
            
        
    


                
    










    
        3D Charts

        
        More 3D Charts »
        
    
    
        

            
                    
                    

    
        3D Scatter Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Ribbon Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Surface Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Mesh Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Line Plots
        
            View Tutorial
            
        
    


                
    





    
        Subplots

        
        More Subplots »
        
    
    
        

            
                    
                    

    
        Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Inset Plots
        
            View Tutorial
            
        
    


                
                    
                    

    
        3D Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Mixed Subplots
        
            View Tutorial
            
        
    


                
                    
                    

    
        Table Subplots
        
            View Tutorial
            
        
    


                
    









    
        Custom Chart Events

        
    
    
        

            
                    
                    

    
        Click Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Hover Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Zoom Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Disable Zoom Events
        
            View Tutorial
            
        
    


                
    





    
        Add Custom Controls

        
        More Controls »
        
    
    
        

            
                    
                    

    
        Dropdown Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Button Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Slider Events
        
            View Tutorial
            
        
    


                
                    
                    

    
        Lasso Selection
        
            View Tutorial
            
        
    


                
                    
                    

    
        Range Slider and Selector
        
            View Tutorial
            
        
    


                
    





    
        Animations

        
    
    
        

            
                    
                    

    
        Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Adding Sliders to Animations
        
            View Tutorial
            
        
    


                
                    
                    

    
        Filled-Area Animation
        
            View Tutorial
            
        
    


                
                    
                    

    
        Map Animation
        
            View Tutorial\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
        
            Examples
            
                
                    
                    
                        Fundamentals
                    
                    

                    
                    
                        Basic Charts
                    
                    

                    
                    
                        Statistical
                            Charts
                    
                    

                    
                    
                        Scientific
                            Charts
                    
                    

                    
                    
                        Financial Charts
                    
                    

                    
                    
                        Maps
                    
                    

                    

                    

                    
                    
                        3D Charts
                    
                    

                    
                    
                        Subplots
                    
                    

                    
                    
                        Chart Events
                    
                    

                    
                    
                        Animations
                    
                    

                    

                    

                    

                    

                    

                    

                    


                    
                    

                    

                    

                    

                    
                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    


                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    

                    
                    

                    
                
            
        
        
        
    

    
    
      
    




            
            
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Custom Controls
            
            
            
        
    
    


                
                
    
        
        

            
                Add Custom Controls
                Plotly.js makes interactive, publication-quality graphs online. Examples of how to make controls in charts.
                

  Deploy Plotly_js AI Dash apps on private Kubernetes clusters: 
    Pricing
     | 
    Demo
     | 
    Overview
     | 
    AI App Services
  




            
        
    



    Add Custom Controls
    
    
        

                        

    
        Dropdown Events
        
            View Tutorial
            
        
    




            

                        

    
        Button Events
        
            View Tutorial
            
        
    




            

                        

    
        Slider Events
        
            View Tutorial
            
        
    




            

                        

    
        Lasso Selection
        
            View Tutorial
            
        
    




            

                        

    
        Range Slider and Selector
        
            View Tutorial\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Custom Controls
            
            
                > Dropdown Events
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Dropdown Events
                  
                  in 
                  JavaScript
                  
                  
                
                Use Plotly to create custom dropdowns in D3.js-based JavaScript charts. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Add Two Dropdown Menus to a Chart with Plotly.js
          
        

        
          
            
            
              
                function makeTrace(i) {
    return {
        y: Array.apply(null, Array(10)).map(() => Math.random()),
        line: {
            shape: 'spline' ,
            color: 'red'
        },
        visible: i === 0,
        name: 'Data set ' + i,
    };
}

Plotly.newPlot('myDiv', [0, 1, 2, 3].map(makeTrace), {
    updatemenus: [{
        y: 0.8,
        yanchor: 'top',
        buttons: [{
            method: 'restyle',
            args: ['line.color', 'red'],
            label: 'red'
        }, {
            method: 'restyle',
            args: ['line.color', 'blue'],
            label: 'blue'
        }, {
            method: 'restyle',
            args: ['line.color', 'green'],
            label: 'green'
        }]
    }, {
        y: 1,
        yanchor: 'top',
        buttons: [{
            method: 'restyle',
            args: ['visible', [true, false, false, false]],
            label: 'Data set 0'
        }, {
            method: 'restyle',
            args: ['visible', [false, true, false, false]],
            label: 'Data set 1'
        }, {
            method: 'restyle',
            args: ['visible', [false, false, true, false]],
            label: 'Data set 2'
        }, {
            method: 'restyle',
            args: ['visible', [false, false, false, true]],
            label: 'Data set 3'
        }]
    }],
});
              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Bind dropdown events to Plotly.js charts
          
        

        
          
            
            
              
                d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv', function(err, rows){

    function unpack(rows, key) {
        return rows.map(function(row) { return row[key]; });
    }

    var allCountryNames = unpack(rows, 'country'),
        allYear = unpack(rows, 'year'),
        allGdp = unpack(rows, 'gdpPercap'),
        listofCountries = [],
        currentCountry,
        currentGdp = [],
        currentYear = [];

    for (var i = 0; i < allCountryNames.length; i++ ){
        if (listofCountries.indexOf(allCountryNames[i]) === -1 ){
            listofCountries.push(allCountryNames[i]);
        }
    }

    function getCountryData(chosenCountry) {
        currentGdp = [];
        currentYear = [];
        for (var i = 0 ; i < allCountryNames.length ; i++){
            if ( allCountryNames[i] === chosenCountry ) {
                currentGdp.push(allGdp[i]);
                currentYear.push(allYear[i]);
            }
        }
    };

    // Default Country Data
    setBubblePlot('Afghanistan');

    function setBubblePlot(chosenCountry) {
        getCountryData(chosenCountry);

        var trace1 = {
            x: currentYear,
            y: currentGdp,
            mode: 'lines+markers',
            marker: {
                size: 12,
                opacity: 0.5
            }
        };

        var data = [trace1];

        var layout = {
            title: {text: 'Line and Scatter Plot'},
            height: 400,
            width: 480
        };

        Plotly.newPlot('myDiv', data, layout);
    };

    var innerContainer = document.querySelector('[data-num="0"'),
        plotEl = innerContainer.querySelector('.plot'),
        countrySelector = innerContainer.querySelector('.countrydata');

    function assignOptions(textArray, selector) {
        for (var i = 0; i < textArray.length;  i++) {
            var currentOption = document.createElement('option');
            currentOption.text = textArray[i];
            selector.appendChild(currentOption);
        }
    }

    assignOptions(listofCountries, countrySelector);

    function updateCountry(){
        setBubblePlot(countrySelector.value);
    }

    countrySelector.addEventListener('change', updateCountry, false);
});\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Custom Controls
            
            
                > Button Events
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Button Events
                  
                  in 
                  JavaScript
                  
                  
                
                How to bind callback functions to custom buttons in D3.js-based JavaScript charts. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Restyle Button Single Attribute
          
        

        
          
            
              The restyle method should be used when modifying the data and data attributes of the graph
This example demonstrates how to update a single data attribute: chart type with the restyle method.

            
            
              
                d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv', function(err, rows){
function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}
var z_data=[ ]
for(i=0;i<24;i++)
{
  z_data.push(unpack(rows,i));
}

var data = [{
        z: z_data,
        type:'surface',
        colorscale:'Viridis'
}]

var updatemenus=[
    {
        buttons: [
            {
                args: ['type', 'surface'],
                label: '3D Surface',
                method: 'restyle'
            },
            {
                args: ['type', 'heatmap'],
                label:'Heatmap',
                method:'restyle'
            }
        ],
        direction: 'left',
        pad: {'r': 10, 't': 10},
        showactive: true,
        type: 'buttons',
        x: 0.1,
        xanchor: 'left',
        y: 1.1,
        yanchor: 'top'
    }
]

var annotations = [
    {
      text: 'Trace type:',
      x: 0,
      y: 1.085,
      yref: 'paper',
      align: 'left',
      showarrow: false
    }
]

var layout = {
    width: 800,
    height: 900,
    autosize: false,
    margin: {t: 0, b: 0, l: 0, r: 0},
    updatemenus: updatemenus,
    annotations: annotations,
    scene: {
        xaxis:{
            gridcolor: 'rgb(255, 255, 255)',
            zerolinecolor: 'rgb(255, 255, 255)',
            showbackground: true,
            backgroundcolor:'rgb(230, 230,230)'
        },
        yaxis: {
            gridcolor: 'rgb(255, 255, 255)',
            zerolinecolor: 'rgb(255, 255, 255)',
            showbackground: true,
            backgroundcolor: 'rgb(230, 230, 230)'
        },
        zaxis: {
            gridcolor: 'rgb(255, 255, 255)',
            zerolinecolor: 'rgb(255, 255, 255)',
            showbackground: true,
            backgroundcolor: 'rgb(230, 230,230)'
        },
        aspectratio: {x: 1, y: 1, z: 0.7},
        aspectmode: 'manual'
  }
}


Plotly.newPlot("myDiv", data, layout);

});

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Restyle Button Multiple Attributes
          
        

        
          
            
              This example demonstrates how to use a restyle button to update single attributes by passing a two element array
to a button's args attribute or update multiple attributes at the same time by passing an array containing an object.

            
            
              
                d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv', function(err, rows){
function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}

var button_layer_1_height = 1.12
var button_layer_2_height = 1.0
var annotation_offset = 0.04

var z_data=[ ]
for(i=0;i<24;i++)
{
  z_data.push(unpack(rows,i));
}

var data = [{
        z: z_data,
        type:'surface',
        colorscale:'Viridis'
}]

var updatemenus=[
    {
        buttons: [
            {
                args: ['type', 'surface'],
                label: '3D Surface',
                method: 'restyle'
            },
            {
                args: ['type', 'heatmap'],
                label:'Heatmap',
                method:'restyle'
            },
            {
                args: ['type', 'contour'],
                label:'Contour',
                method:'restyle'
            }
        ],
        direction: 'left',
        pad: {'r': 10, 't': 10},
        showactive: true,
        type: 'buttons',
        x: 0.15,
        xanchor: 'left',
        y: button_layer_2_height,
        yanchor: 'top'
    },
    {
        buttons: [
            {
                args: ['reversescale', true],
                label: 'Reverse',
                method: 'restyle'
            },
            {
                args: ['reversescale', false],
                label:'Undo Reverse',
                method:'restyle'
            }
        ],
        direction: 'down',
        pad: {'r': 10, 't': 10},
        showactive: true,
        type: 'dropdown',
        x: 0.56,
        xanchor: 'left',
        y: button_layer_2_height,
        yanchor: 'top'
    },
    {
        buttons: [
            {
                args: [{'contours.showlines':false, 'type':'contour'}],
                label: 'Hide lines',
                method: 'restyle'
            },
            {
                args: [{'contours.showlines':true, 'type':'contour'}],
                label:'Show lines',
                method:'restyle'
            }
        ],
        direction: 'down',
        pad: {'r': 10, 't': 10},
        showactive: true,
        type: 'dropdown',
        x: 0.78,
        xanchor: 'left',
        y: button_layer_2_height,
        yanchor: 'top'
    },
    {
        buttons: [
            {
                args: ['colorscale', 'Viridis'],
                label: 'Viridis',
                method: 'restyle'
            },
            {
                args: ['colorscale', 'Electric'],
                label:'Electric',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Earth'],
                label:'Earth',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Hot'],
                label:'Hot',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Jet'],
                label:'Jet',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Portland'],
                label:'Portland',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Rainbow'],
                label:'Rainbow',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Blackbody'],
                label:'Blackbody',
                method:'restyle'
            },

            {
                args: ['colorscale', 'Cividis'],
                label:'Cividis',
                method:'restyle'
            }
        ],
        direction: 'left',
        pad: {'r': 10, 't': 10},
        showactive: true,
        type: 'buttons',
        x: 0.15,
        xanchor: 'left',
        y: button_layer_1_height,
        yanchor: 'top'
    },
]

var annotations = [
    {
      text: 'Trace type:',
      x: 0,
      y: button_layer_2_height - annotation_offset,
      yref: 'paper',
      align: 'left',
      showarrow: false
    },
    {
      text: 'Colorscale:',
      x: 0,
      y: button_layer_1_height - annotation_offset,
      yref: 'paper',
      align: 'left',
      showarrow: false
    },
]

var layout = {
    margin: {t: 0, b: 0, l: 0, r: 0},
    updatemenus: updatemenus,
    annotations: annotations,
    scene: {
        xaxis:{
            gridcolor: 'rgb(255, 255, 255)',
            zerolinecolor: 'rgb(255, 255, 255)',
            showbackground: true,
            backgroundcolor:'rgb(230, 230,230)'
        },
        yaxis: {
            gridcolor: 'rgb(255, 255, 255)',
            zerolinecolor: 'rgb(255, 255, 255)',
            showbackground: true,
            backgroundcolor: 'rgb(230, 230, 230)'
        },
        zaxis: {
            gridcolor: 'rgb(255, 255, 255)',
            zerolinecolor: 'rgb(255, 255, 255)',
            showbackground: true,
            backgroundcolor: 'rgb(230, 230,230)'
        },
        aspectratio: {x: 1, y: 1, z: 0.7},
        aspectmode: 'manual'
  }
}


Plotly.newPlot("myDiv", data, layout);

});

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Relayout Button
          
        

        
          
            
              The relayout method should be used when modifying the layout attributes of the graph.
Update One Layout Attribute
This example demonstrates how to update a layout attribute: chart type with the relayout method.

            
            
              
                d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/normal-clusters.csv', function(err, rows){
function unpack(rows, key) {
  return rows.map(function(row) { return parseFloat(row[key]); });
}

var button_layer_height = 1.2
var x0 = unpack(rows,'x0')
var x1 = unpack(rows,'x1')
var x2 = unpack(rows,'x2')
var y0 = unpack(rows,'y0')
var y1 = unpack(rows,'y1')
var y2 = unpack(rows,'y2')

var data = [{
    x: x0,
    y: y0,
    mode: 'markers',
    marker: {color: '#835AF1'}
  },
  {
    x: x1,
    y: y1,
    mode: 'markers',
    marker: {color: '#7FA6EE'}
  },
  {
    x: x2,
    y: y2,
    mode: 'markers',
    marker: {color: '#B8F7D4'}
  },

]

var cluster0 = {type: 'circle',
                 xref: 'x', yref: 'y',
                 x0: Math.min(...x0), y0: Math.min(...y0),
                 x1: Math.max(...x0), y1: Math.max(...y0),
                 opacity: 0.25,
                 line: {color: '#835AF1'},
                 fillcolor: '#835AF1'}

var cluster1 = {type: 'circle',
                 xref: 'x', yref: 'y',
                 x0: Math.min(...x1), y0: Math.min(...y1),
                 x1: Math.max(...x1), y1: Math.max(...y1),
                 opacity: 0.25,
                 line: {color: '#7FA6EE'},
                 fillcolor: '#7FA6EE'}

var cluster2 = {type: 'circle',
                 xref: 'x', yref: 'y',
                 x0: Math.min(...x2), y0: Math.min(...y2),
                 x1: Math.max(...x2), y1: Math.max(...y2),
                 opacity: 0.25,
                 line: {color: '#B8F7D4'},
                 fillcolor: '#B8F7D4'}

var updatemenus=[
    {
        buttons: [
            {
                args: ['shapes', []],
                label: 'None',
                method: 'relayout'
            },
            {
                args: ['shapes', [cluster0]],
                label: 'Cluster 0',
                method: 'relayout'
            },
            {
                args: ['shapes', [cluster1]],
                label: 'Cluster 1',
                method: 'relayout'
            },
            {
                args: ['shapes', [cluster2]],
                label: 'Cluster 2',
                method: 'relayout'
            },
            {
                args: ['shapes', [cluster0, cluster1, cluster2]],
                label: 'All',
                method: 'relayout'
            },
        ],
        direction: 'left',
        pad: {'r': 10, 't': 10},
        showactive: true,
        type: 'buttons',
        x: 0.1,
        xanchor: 'left',
        y: button_layer_height,
        yanchor: 'top'
    },

]

var layout = {
    updatemenus: updatemenus,
    showlegend: false
}


Plotly.newPlot("myDiv", data, layout);

});

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Update Button
          
        

        
          
            
              The update method should be used when modifying the data and layout sections of the graph.
This example demonstrates how to update which traces are displayed while simulaneously updating
layout attributes such as the chart title and annotations.

            
            
              
                d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv', function(err, rows){
function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}

const arrAvg = arr => arr.reduce((a,b) => a + b, 0) / arr.length

var button_layer_2_height = 1.2
var high = unpack(rows, 'AAPL.High').map(x => parseFloat(x))
var low = unpack(rows, 'AAPL.Low').map(x => parseFloat(x))
var date = unpack(rows, 'Date')


var high_ave = arrAvg(high)
var high_max = Math.max(...high)
var low_ave = arrAvg(low)
var low_min = Math.min(...low)

var data = [{
    x: date,
    y: high,
    mode: 'lines',
    name: 'High',
    marker: {color: '#33CFA5'}
  },
  {
    x: date,
    y: date.map(a => high_ave),
    mode: 'lines',
    name: 'Low Average',
    line: {color: '#33CFA5', dash: 'dash'},
    visible: false
  },
  {
    x: date,
    y: low,
    name: 'Low',
    mode: 'lines',
    marker: {color: '#F06A6A'}
  },
  {
    x: date,
    y: date.map(a => low_ave),
    mode: 'lines',
    name: 'High Average',
    visible: false,
    line: {color: '#F06A6A', dash: 'dash'}
  },

]

var high_annotations = [
    {
      text: 'High Average:<br>' + high_ave.toFixed(2),
      x: '2016-03-01',
      y: high_ave,
      yref: 'y', xref: 'x',
      ay: -40, ax: 0
    },
    {
      text: 'High Max:<br>' + high_max.toFixed(2),
      x: date[high.indexOf(high_max)],
      y: high_max,
      yref: 'y', xref: 'x',
      ay: -40, ax: 0
    },
]

var low_annotations = [{
      text: 'Low Average:<br>' + low_ave.toFixed(2),
      x: '2015-05-01',
      y: low_ave,
      yref: 'y', xref: 'x',
      ay: 40, ax: 0
    },
    {
      text: 'Low Min:<br>' + low_min.toFixed(2),
      x: date[low.indexOf(low_min)],
      y: low_min,
      yref: 'y', xref: 'x',
      ay: 40, ax: 0
    }
 ]

var updatemenus=[
    {
        buttons: [
            {
                args: [{'visible': [true, true, false, false]},
                       {'title': 'Yahoo High',
                        'annotations': high_annotations}],
                label: 'High',
                method: 'update'
            },
            {
                args: [{'visible': [false, false, true, true,]},
                       {'title': 'Yahoo Low',
                        'annotations': low_annotations}],
                label: 'Low',
                method: 'update'
            },
            {
                args: [{'visible': [true, true, true, true,]},
                       {'title': 'Yahoo',
                        'annotations': [...low_annotations, ...high_annotations]}],
                label: 'Both',
                method: 'update'
            },
            {
                args: [{'visible': [true, false, true, false,]},
                       {'title': 'Yahoo',
                        'annotations': []}],
                label: 'Reset',
                method: 'update'
            },

        ],
        direction: 'left',
        pad: {'r': 10, 't': 10},
        showactive: true,
        type: 'buttons',
        x: 0.1,
        xanchor: 'left',
        y: button_layer_2_height,
        yanchor: 'top'
    },

]

var layout = {
  title: {
      text: 'Yahoo'
  },
  updatemenus: updatemenus,
  showlegend: false
}


Plotly.newPlot("myDiv", data, layout);

});

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Animate Button
          
        

        
          
            
              Refer to our animation docs: https://plotly.com/javascript/#animations for examples on how to use the animate method with Plotly buttons.

            
            
            
          
          
        
    
    
      
        
          
            Style the Buttons
          
        

        
          
            
              When adding buttons to Plotly charts, users have the option of styling the color, font, padding,
and position of the buttons. The example below demonstrates how to apply different styling options.
See all updatemenus styling attributes here: https://plotly.com/javascript/reference/layout/#layout-updatemenus.

            
            
              
                d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/api_docs/mt_bruno_elevation.csv', function(err, rows){
function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}

var button_layer_1_height = 1.12
var button_layer_2_height = 1.0
var annotation_offset = 0.04

var z_data=[ ]
for(i=0;i<24;i++)
{
  z_data.push(unpack(rows,i));
}

var data = [{
        z: z_data,
        type:'surface',
        colorscale:'Viridis'
}]

var updatemenus=[
    {
        buttons: [
            {
                args: ['type', 'surface'],
                label: '3D Surface',
                method: 'restyle'
            },
            {
                args: ['type', 'heatmap'],
                label:'Heatmap',
                method:'restyle'
            },
            {
                args: ['type', 'contour'],
                label:'Contour',
                method:'restyle'
            }
        ],
        direction: 'left',
        pad: {'r': 10, 't': 10},
        showactive: true,
        type: 'buttons',
        x: 0.15,
        xanchor: 'left',
        y: button_layer_2_height,
        yanchor: 'top',
        font: {color: '#5072a8'}
    },
    {
        buttons: [
            {
                args: ['reversescale', true],
                label: 'Reverse',
                method: 'restyle'
            },
            {
                args: ['reversescale', false],
                label:'Undo Reverse',
                method:'restyle'
            }
        ],
        direction: 'down',
        pad: {'r': 10, 't': 10},
        showactive: true,
        type: 'dropdown',
        x: 0.56,
        xanchor: 'left',
        y: button_layer_2_height,
        yanchor: 'top',
        active: 1,
        font: {color: '#5072a8'}
    },
    {
        buttons: [
            {
                args: [{'contours.showlines':false, 'type':'contour'}],
                label: 'Hide lines',
                method: 'restyle'
            },
            {
                args: [{'contours.showlines':true, 'type':'contour'}],
                label:'Show lines',
                method:'restyle'
            }
        ],
        direction: 'down',
        pad: {'r': 10, 't': 10},
        showactive: true,
        type: 'dropdown',
        x: 0.78,
        xanchor: 'left',
        y: button_layer_2_height,
        yanchor: 'top',
        font: {color: '#5072a8'}
    },
    {
        buttons: [
            {
                args: ['colorscale', 'Viridis'],
                label: 'Viridis',
                method: 'restyle'
            },
            {
                args: ['colorscale', 'Electric'],
                label:'Electric',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Earth'],
                label:'Earth',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Hot'],
                label:'Hot',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Jet'],
                label:'Jet',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Portland'],
                label:'Portland',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Rainbow'],
                label:'Rainbow',
                method:'restyle'
            },
            {
                args: ['colorscale', 'Blackbody'],
                label:'Blackbody',
                method:'restyle'
            },

            {
                args: ['colorscale', 'Cividis'],
                label:'Cividis',
                method:'restyle'
            }
        ],
        direction: 'left',
        pad: {'r': 10, 't': 10},
        showactive: true,
        type: 'buttons',
        x: 0.15,
        xanchor: 'left',
        y: button_layer_1_height,
        yanchor: 'top',
        active: 1,
        bgcolor: '#aaaaaa',
        bordercolor: '#FFFFFF'
    },
]

var annotations = [
    {
      text: 'Trace type:',
      x: 0,
      y: button_layer_2_height - annotation_offset,
      yref: 'paper',
      align: 'left',
      showarrow: false
    },
    {
      text: 'Colorscale:',
      x: 0,
      y: button_layer_1_height - annotation_offset,
      yref: 'paper',
      align: 'left',
      showarrow: false
    },
]

var layout = {
    paper_bgcolor: 'black',
    margin: {t: 0, b: 0, l: 0, r: 0},
    updatemenus: updatemenus,
    annotations: annotations,
    scene: {
        bgcolor: 'black',
        aspectratio: {x: 1, y: 1, z: 0.7},
        aspectmode: 'manual'
  }
}


Plotly.newPlot("myDiv", data, layout);

});\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Custom Controls
            
            
                > Slider Events
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Slider Events
                  
                  in 
                  JavaScript
                  
                  
                
                Use Plotly to create custom sliders in D3.js-based JavaScript charts. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Basic Slider
          
        

        
          
            
            
              
                Plotly.newPlot('myDiv', [{
  x: [1, 2, 3],
  y: [2, 1, 3]
}], {
  sliders: [{
    pad: {t: 30},
    currentvalue: {
      xanchor: 'right',
      prefix: 'color: ',
      font: {
        color: '#888',
        size: 20
      }
    },
    steps: [{
      label: 'red',
      method: 'restyle',
      args: ['line.color', 'red']
    }, {
      label: 'green',
      method: 'restyle',
      args: ['line.color', 'green']
    }, {
      label: 'blue',
      method: 'restyle',
      args: ['line.color', 'blue']
    }]
  }]
});

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Bind Components to the Appearance of a Plot
          
        

        
          
            
            
              
                Plotly.newPlot('myDiv', [{
  x: [1, 2, 3],
  y: [2, 1, 3]
}], {
  sliders: [{
    pad: {t: 30},
    len: 0.5,
    x: 0.5,
    currentvalue: {
      xanchor: 'right',
      prefix: 'color: ',
      font: {
        color: '#888',
        size: 20
      }
    },
    // If all of a component's commands affect a single attribute, the component
    // will be bound to the plot and will automatically update to reflect changes.
    steps: [{
      label: 'red',
      method: 'restyle',
      args: ['line.color', 'red']
    }, {
      label: 'green',
      method: 'restyle',
      args: ['line.color', 'green']
    }, {
      label: 'blue',
      method: 'restyle',
      args: ['line.color', 'blue']
    }]
  }],
  updatemenus: [{
    pad: {t: 60, r: 30},
    type: 'buttons',
    xanchor: 'left',
    yanchor: 'top',
    x: 00,
    y: 0,
    direction: 'right',
    buttons: [{
      label: 'red',
      method: 'restyle',
      args: ['line.color', 'red']
    }, {
      label: 'green',
      method: 'restyle',
      args: ['line.color', 'green']
    }, {
      label: 'blue',
      method: 'restyle',
      args: ['line.color', 'blue']
    }]
  }]
});

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Add a Play Button to Control a Slider
          
        

        
          
            
            
              
                Plotly.newPlot('myDiv', {
  data: [{
    x: [1, 2, 3],
    y: [2, 1, 3],
    line: {
      color: 'red',
      simplify: false,
    }
  }],
  layout: {
    sliders: [{
      pad: {t: 30},
      x: 0.05,
      len: 0.95,
      currentvalue: {
        xanchor: 'right',
        prefix: 'color: ',
        font: {
          color: '#888',
          size: 20
        }
      },
      transition: {duration: 500},
      // By default, animate commands are bound to the most recently animated frame:
      steps: [{
        label: 'red',
        method: 'animate',
        args: [['red'], {
          mode: 'immediate',
          frame: {redraw: false, duration: 500},
          transition: {duration: 500}
        }]
      }, {
        label: 'green',
        method: 'animate',
        args: [['green'], {
          mode: 'immediate',
          frame: {redraw: false, duration: 500},
          transition: {duration: 500}
        }]
      }, {
        label: 'blue',
        method: 'animate',
        args: [['blue'], {
          mode: 'immediate',
          frame: {redraw: false, duration: 500},
          transition: {duration: 500}
        }]
      }]
    }],
    updatemenus: [{
      type: 'buttons',
      showactive: false,
      x: 0.05,
      y: 0,
      xanchor: 'right',
      yanchor: 'top',
      pad: {t: 60, r: 20},
      buttons: [{
        label: 'Play',
        method: 'animate',
        args: [null, {
          fromcurrent: true,
          frame: {redraw: false, duration: 1000},
          transition: {duration: 500}
        }]
      }]
    }]
  },
  // The slider itself does not contain any notion of timing, so animating a slider
  // must be accomplished through a sequence of frames. Here we'll change the color
  // and the data of a single trace:
  frames: [{
    name: 'red',
    data: [{
      y: [2, 1, 3],
      'line.color': 'red'
    }]
  }, {
    name: 'green',
    data: [{
      y: [3, 2, 1],
      'line.color': 'green'}]
  }, {
    name: 'blue',
    data: [{
      y: [1, 3, 2],
      'line.color': 'blue'}]
  }]
});\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Custom Controls
            
            
                > Lasso Selection
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Lasso Selection
                  
                  in 
                  JavaScript
                  
                  
                
                How to bind callback functions to lasso selection in JavaScript D3.js-based charts. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Lasso Selection
          
        

        
          
            
            
              
                var graphDiv = document.getElementById('myDiv');
var N = 1000;
var color1 = '#7b3294';
var color1Light = '#c2a5cf';
var colorX = '#ffa7b5';
var colorY = '#fdae61';

function randomArray() {
  var out = new Array(N);
  for(var i = 0; i < N; i++) {
    out[i] = Math.random();
  }
  return out;
}
var x = randomArray();
var y = randomArray();

Plotly.newPlot(graphDiv, [{
  type: 'scatter',
  mode: 'markers',
  x: x,
  y: y,
  xaxis: 'x',
  yaxis: 'y',
  name: 'random data',
  marker: {color: color1, size: 10}
}, {
  type: 'histogram',
  x: x,
  xaxis: 'x2',
  yaxis: 'y2',
  name: 'x coord dist.',
  marker: {color: colorX}
}, {
  type: 'histogram',
  x: y,
  xaxis: 'x3',
  yaxis: 'y3',
  name: 'y coord dist.',
  marker: {color: colorY}
}], {
  title: {
    text: 'Lasso around the scatter points to see sub-distributions'
  },
  dragmode: 'lasso',
  xaxis: {
    zeroline: false,
  },
  yaxis: {
    domain: [0.55, 1],
  },
  xaxis2: {
    domain: [0, 0.45],
    anchor: 'y2',
  },
  yaxis2: {
    domain: [0, 0.45],
    anchor: 'x2'
  },
  xaxis3: {
    domain: [0.55, 1],
    anchor: 'y3'
  },
  yaxis3: {
    domain: [0, 0.45],
    anchor: 'x3'
  }
});

graphDiv.on('plotly_selected', function(eventData) {
  var x = [];
  var y = [];

  var colors = [];
  for(var i = 0; i < N; i++) colors.push(color1Light);

  console.log(eventData.points)

  eventData.points.forEach(function(pt) {
    x.push(pt.x);
    y.push(pt.y);
    colors[pt.pointNumber] = color1;
  });

  Plotly.restyle(graphDiv, {
    x: [x, y],
    xbins: {}
  }, [1, 2]);

  Plotly.restyle(graphDiv, 'marker.color', [colors], [0]);
});\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Custom Controls
            
            
                > Range Slider and Selector
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Range Slider and Selector
                  
                  in 
                  JavaScript
                  
                  
                
                How to add range sliders to a D3.js-based line or scatter chart. Examples of Range Sliders 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Basic Range Slider on Time Series
          
        

        
          
            
            
              
                var rawDataURL = 'https://raw.githubusercontent.com/plotly/datasets/master/2016-weather-data-seattle.csv';
var xField = 'Date';
var yField = 'Mean_TemperatureC';

var selectorOptions = {
    buttons: [{
        step: 'month',
        stepmode: 'backward',
        count: 1,
        label: '1m'
    }, {
        step: 'month',
        stepmode: 'backward',
        count: 6,
        label: '6m'
    }, {
        step: 'year',
        stepmode: 'todate',
        count: 1,
        label: 'YTD'
    }, {
        step: 'year',
        stepmode: 'backward',
        count: 1,
        label: '1y'
    }, {
        step: 'all',
    }],
};

d3.csv(rawDataURL, function(err, rawData) {
    if(err) throw err;

    var data = prepData(rawData);
    var layout = {
        title: {
            text: 'Time series with range slider and selectors'
        },
        xaxis: {
            rangeselector: selectorOptions,
            rangeslider: {}
        },
        yaxis: {
            fixedrange: true
        }
    };

    Plotly.newPlot('myDiv', data, layout);
});

function prepData(rawData) {
    var x = [];
    var y = [];

    rawData.forEach(function(datum, i) {

        x.push(new Date(datum[xField]));
        y.push(datum[yField]);
    });

    return [{
        mode: 'lines',
        x: x,
        y: y
    }];
}\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Animations
            
            
                > Animations
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Animations
                  
                  in 
                  JavaScript
                  
                  
                
                How to animate charts in JavaScript with the animate API. 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Animating the Data
          
        

        
          
            
              The animate command lets you add dynamic behavior to Plotly graphs in a number of different ways. At its core, Plotly.animate transitions traces to a new state or sequence of states. When you tell Plotly to animate, it merges the properties you've supplied into the current state of the plot. Therefore to animate a trace, you must first plot the trace you wish to animate.

The example below transitions to new y-values each time the button is pressed. Since the transition animation occurs within a frame, frame.duration must be set at least as long as transition.duration. Note that to prevent artifacts while animating, the default line simplification algorithm is explicitly disabled. Currently, only scatter traces may be smoothly transitioned from one state to the next. Other traces are compatible with frames and animations but will be updated instantaneously.

            
            
              
                Plotly.newPlot('myDiv', [{
  x: [1, 2, 3],
  y: [0, 0.5, 1],
  line: {simplify: false},
}]);

function randomize() {
  Plotly.animate('myDiv', {
    data: [{y: [Math.random(), Math.random(), Math.random()]}],
    traces: [0],
    layout: {}
  }, {
    transition: {
      duration: 500,
      easing: 'cubic-in-out'
    },
    frame: {
      duration: 500
    }
  })
}

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Animating the Layout
          
        

        
          
            
              The example below transitions to a new axis range each time the button is pressed. A present limitation of the animate API is that only one of either data or layout may be smoothly transitioned at a time. If both are provided, the data will be updated instantaneously after the layout is transitioned.

            
            
              
                var n = 500;
var x = [], y = [];
for (var i = 0; i < n; i++) {
  x[i] = i / (n - 1);
  y[i] = x[i] + 0.2 * (Math.random() - 0.5);
}

Plotly.newPlot('myDiv', [{
  x: x,
  y: y,
  mode: 'markers'
}], {
  xaxis: {range: [0, 1]},
  yaxis: {range: [0, 1]}
});

function zoom() {
  var min = 0.45 * Math.random();
  var max = 0.55 + 0.45 * Math.random();
  Plotly.animate('myDiv', {
    layout: {
      xaxis: {range: [min, max]},
      yaxis: {range: [min, max]}
    }
  }, {
    transition: {
      duration: 500,
      easing: 'cubic-in-out'
    }
  })
}

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Defining Named Frames with Plotly.addFrames
          
        

        
          
            
              The above examples pass the data itself through the Plotly.animate command. You may instead predefine named frames through the Plotly.addFrames command. Then, instead of passing frames through Plotly.animate, you may simply refer to a frame by name.

Similar to traces, frames are assigned a serial index as they are added. Frames may be updated by passing an array of frame indices. For example, the command to update the frame with index 2 would be Plotly.addFrames('myDiv', [{...}], [2]). Frames can be similarly deleted with, for example, Plotly.deleteFrames('myDiv', [2]).

The following example uses frames together with an updatemenu for interactive transitions.

            
            
              
                var frames = [
  {name: 'sine', data: [{x: [], y: []}]},
  {name: 'cosine', data: [{x: [], y: []}]},
  {name: 'circle', data: [{x: [], y: []}]},
];

var n = 100;
for (var i = 0; i < n; i++) {
  var t = i / (n - 1) * 2 - 1;

  // A sine wave:
  frames[0].data[0].x[i] = t * Math.PI;
  frames[0].data[0].y[i] = Math.sin(t * Math.PI);

  // A cosine wave:
  frames[1].data[0].x[i] = t * Math.PI;
  frames[1].data[0].y[i] = Math.cos(t * Math.PI);

  // A circle:
  frames[2].data[0].x[i] = Math.sin(t * Math.PI);
  frames[2].data[0].y[i] = Math.cos(t * Math.PI);
}

Plotly.newPlot('myDiv', [{
  x: frames[0].data[0].x,
  y: frames[0].data[0].y,
  line: {simplify: false},
}], {
  xaxis: {range: [-Math.PI, Math.PI]},
  yaxis: {range: [-1.2, 1.2]},
  updatemenus: [{
    buttons: [
      {method: 'animate', args: [['sine']], label: 'sine'},
      {method: 'animate', args: [['cosine']], label: 'cosine'},
      {method: 'animate', args: [['circle']], label: 'circle'}
    ]
  }]
}).then(function() {
  Plotly.addFrames('myDiv', frames);
});

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Animating Sequences of Frames
          
        

        
          
            
              The above examples have used one frame at a time. Whether passing objects as frames or referring to frames by name, you may pass multiple frames together in an array. If null or undefined is passed as the second argument (i.e. Plotly.animate('myDiv')), then all defined frames will be animated in sequence.

The third argument of Plotly.animate contains animation options. The transition duration defines the amount of time spent interpolating a trace from one state to another (currently limited to scatter traces), while the frame duration defines the total time spent in that state, including time spent transitioning. The example below has two frames, each with their own transition and frame timing.

            
            
              
                Plotly.newPlot('myDiv', [{
  x: [0, 0],
  y: [-1, 1],
}], {
  xaxis: {range: [-Math.PI, Math.PI]},
  yaxis: {range: [-1.3, 1.3]}
}).then(function () {
  Plotly.addFrames('myDiv', [
    {
      data: [{x: [1, -1], y: [0, 0]}],
      name: 'frame1'
    }, {
      data: [{x: [0, 0], y: [-1, 1]}],
      name: 'frame2'
    }
  ]);
})

function startAnimation() {
  Plotly.animate('myDiv', ['frame1', 'frame2'], {
    frame: [
      {duration: 1500},
      {duration: 500},
    ],
    transition: [
      {duration: 800, easing: 'elastic-in'},
      {duration: 100, easing: 'cubic-in'},
    ],
    mode: 'afterall'
  })
}

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Animating Many Frames Quickly
          
        

        
          
            
              By default and to ensure any properties that cannot be animated are applied to the plot, a full redraw occurs after each transition. This is generally desirable, but hurts performance when you wish to animate frames as quickly as possible. The example below performs a live simulation of the Lorenz attractor and greatly improves the performance by eliminating the redraw with  redraw: false.

            
            
              
                var n = 100;
var x = [], y = [], z = [];
var dt = 0.015;

for (i = 0; i < n; i++) {
  x[i] = Math.random() * 2 - 1;
  y[i] = Math.random() * 2 - 1;
  z[i] = 30 + Math.random() * 10;
}

Plotly.newPlot('myDiv', [{
  x: x,
  y: z,
  mode: 'markers'
}], {
  xaxis: {range: [-40, 40]},
  yaxis: {range: [0, 60]}
})

function compute () {
  var s = 10, b = 8/3, r = 28;
  var dx, dy, dz;
  var xh, yh, zh;
  for (var i = 0; i < n; i++) {
    dx = s * (y[i] - x[i]);
    dy = x[i] * (r - z[i]) - y[i];
    dz = x[i] * y[i] - b * z[i];

    xh = x[i] + dx * dt * 0.5;
    yh = y[i] + dy * dt * 0.5;
    zh = z[i] + dz * dt * 0.5;

    dx = s * (yh - xh);
    dy = xh * (r - zh) - yh;
    dz = xh * yh - b * zh;

    x[i] += dx * dt;
    y[i] += dy * dt;
    z[i] += dz * dt;
  }
}

function update () {
  compute();

  Plotly.animate('myDiv', {
    data: [{x: x, y: z}]
  }, {
    transition: {
      duration: 0
    },
    frame: {
      duration: 0,
      redraw: false
    }
  });

  requestAnimationFrame(update);
}

requestAnimationFrame(update);

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Object Constancy
          
        

        
          
            
              For scatter traces, you may wish to retain a marker's identity as it is updated. If you include an array of string ids with the trace, the marker identity will be retained. By shuffling the ids, the example below shuffles the markers each time the button is pressed.

            
            
              
                function shuffleInPlace(array) {
  for (var i = array.length - 1; i > 0; i--) {
    var j = Math.floor(Math.random() * (i + 1));
    var temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }
}

var ids = ['1', '2', '3', '4', '5', '6'];

Plotly.newPlot('myDiv', [{
  x: [1, 0.5, -0.5, -1, -0.5, 0.5],
  y: [0, 0.866, 0.866, 0, -0.866, -0.866],
  marker:{size:14,
			 color:['#631357', '#880E4F', '#AD1457',
					  '#F06292', '#F48FB1']},
  ids: ids,
  mode: 'markers'
}], {
  xaxis: {range: [-3, 3]},
  yaxis: {range: [-2, 2]}
});

function animateShuffle() {
  shuffleInPlace(ids);
  Plotly.animate('myDiv', [{
    data: [{ids: ids}]
  }]);
}

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Frame Groups and Animation Modes
          
        

        
          
            
              The following example combines many of these concepts to draw a glass filling with water.

The first row of buttons animates a different set of predefined frames by changing the second argument of Plotly.animate. Passing null or undefined animates all defined frames in sequence, while passing an array of strings (here, the frames in reverse) animates a specific sequence of frames. By passing a plain string (here, lower or upper), it filters the animated frames to those with a group property equal to that name. The stop button is accomplished by interrupting the current animation with an empty list of frames, therefore simply stopping the animation at the end of the current frame.

The second row of buttons animates all frames with different animation modes. The mode option defines whether an animation either interrupts or follows the current animation. immediate mode discards all queued frames and begins a new sequence immediately. The next mode is very similar but doesn't begin the new animation until the end of the current frame. Finally, afterall queues the new frames so that the new animation begins only after all previous animations have completed.

            
            
              
                var i, j, t, x, y, name;
var frames = [];
var nFrames = 10;
var n = 80;
var reverseFrames = [];

for (i = 0; i < nFrames; i++) {
  var fill = 0.1 + 0.9 * i / (nFrames - 1);
  x = [-1];
  y = [0];

  // A wave across the top:
  for (j = 0; j < n; j++) {
    t = j / (n - 1);
    x.push(-1 - fill + (2 + 2 * fill) * t);
    y.push(fill + 0.05 * Math.sin(t * Math.PI * 2 * i));
  }

  // Close the loop to draw the water:
  x.push(1, -1);
  y.push(0, 0);

  // Choose a name:
  name = 'frame' + i;

  // Store it in an array so we can animate in reverse order:
  reverseFrames.unshift(name);

  // Create the frame:
  frames.push({
    name: name,
    data: [{x: x, y: y}],
    group: i < nFrames / 2 ? 'lower' : 'upper'
  })
}

Plotly.newPlot('myDiv', [{
  // Set up the initial water:
  x: frames[0].data[0].x,
  y: frames[0].data[0].y,
  mode: 'lines',
  fill: 'toself',
  showlegend: false,
  line: {simplify: false}
}, {
  // Draw a glass:
  x: [-1, 1, 2.1, -2.1, -1],
  y: [0, 0, 1.1, 1.1, 0],
  mode: 'lines',
  fill: 'toself',
  showlegend: false,
  fillcolor: 'rgba(0, 0, 0, 0.1)',
  line: {color: 'rgba(100,100,100,0.2)'}
}], {
  xaxis: {range: [-3, 3]},
  yaxis: {range: [-0.1, 1.5]}
}).then(function() {
  // Add the frames so we can animate them:
  Plotly.addFrames('myDiv', frames);
});

// Stop the animation by animating to an empty set of frames:
function stopAnimation () {
  Plotly.animate('myDiv', [], {mode: 'next'});
}

function startAnimation (groupOrFrames, mode) {
  Plotly.animate('myDiv', groupOrFrames, {
    transition: {
      duration: 500,
      easing: 'linear'
    },
    frame: {
      duration: 500,
      redraw: false,
    },
    mode: mode
  });
}

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Animating with a Slider
          
        

        
          
            
              See Adding Sliders to Animations.\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Animations
            
            
                > Adding Sliders to Animations
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Adding Sliders to Animations
                  
                  in 
                  JavaScript
                  
                  
                
                How to make the classic Gapminder Animation using sliders and buttons in Plotly JS 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Animating with a Slider
          
        

        
          
            
            
              
                d3.csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv', function (err, data) {
  // Create a lookup table to sort and regroup the columns of data,
  // first by year, then by continent:
  var lookup = {};
  function getData(year, continent) {
    var byYear, trace;
    if (!(byYear = lookup[year])) {;
      byYear = lookup[year] = {};
    }
	 // If a container for this year + continent doesn't exist yet,
	 // then create one:
    if (!(trace = byYear[continent])) {
      trace = byYear[continent] = {
        x: [],
        y: [],
        id: [],
        text: [],
        marker: {size: []}
      };
    }
    return trace;
  }

  // Go through each row, get the right trace, and append the data:
  for (var i = 0; i < data.length; i++) {
    var datum = data[i];
    var trace = getData(datum.year, datum.continent);
    trace.text.push(datum.country);
    trace.id.push(datum.country);
    trace.x.push(datum.lifeExp);
    trace.y.push(datum.gdpPercap);
    trace.marker.size.push(datum.pop);
  }

  // Get the group names:
  var years = Object.keys(lookup);
  // In this case, every year includes every continent, so we
  // can just infer the continents from the *first* year:
  var firstYear = lookup[years[0]];
  var continents = Object.keys(firstYear);

  // Create the main traces, one for each continent:
  var traces = [];
  for (i = 0; i < continents.length; i++) {
    var data = firstYear[continents[i]];
	 // One small note. We're creating a single trace here, to which
	 // the frames will pass data for the different years. It's
	 // subtle, but to avoid data reference problems, we'll slice
	 // the arrays to ensure we never write any new data into our
	 // lookup table:
    traces.push({
      name: continents[i],
      x: data.x.slice(),
      y: data.y.slice(),
      id: data.id.slice(),
      text: data.text.slice(),
      mode: 'markers',
      marker: {
        size: data.marker.size.slice(),
        sizemode: 'area',
        sizeref: 200000
      }
    });
  }

  // Create a frame for each year. Frames are effectively just
  // traces, except they don't need to contain the *full* trace
  // definition (for example, appearance). The frames just need
  // the parts the traces that change (here, the data).
  var frames = [];
  for (i = 0; i < years.length; i++) {
    frames.push({
      name: years[i],
      data: continents.map(function (continent) {
        return getData(years[i], continent);
      })
    })
  }

  // Now create slider steps, one for each frame. The slider
  // executes a plotly.js API command (here, Plotly.animate).
  // In this example, we'll animate to one of the named frames
  // created in the above loop.
  var sliderSteps = [];
  for (i = 0; i < years.length; i++) {
    sliderSteps.push({
      method: 'animate',
      label: years[i],
      args: [[years[i]], {
        mode: 'immediate',
        transition: {duration: 300},
        frame: {duration: 300, redraw: false},
      }]
    });
  }

  var layout = {
    xaxis: {
      title: {text: 'Life Expectancy'},
      range: [30, 85]
    },
    yaxis: {
      title: {text: 'GDP per Capita'},
      type: 'log'
    },
    hovermode: 'closest',
	 // We'll use updatemenus (whose functionality includes menus as
	 // well as buttons) to create a play button and a pause button.
	 // The play button works by passing `null`, which indicates that
	 // Plotly should animate all frames. The pause button works by
	 // passing `[null]`, which indicates we'd like to interrupt any
	 // currently running animations with a new list of frames. Here
	 // The new list of frames is empty, so it halts the animation.
    updatemenus: [{
      x: 0,
      y: 0,
      yanchor: 'top',
      xanchor: 'left',
      showactive: false,
      direction: 'left',
      type: 'buttons',
      pad: {t: 87, r: 10},
      buttons: [{
        method: 'animate',
        args: [null, {
          mode: 'immediate',
          fromcurrent: true,
          transition: {duration: 300},
          frame: {duration: 500, redraw: false}
        }],
        label: 'Play'
      }, {
        method: 'animate',
        args: [[null], {
          mode: 'immediate',
          transition: {duration: 0},
          frame: {duration: 0, redraw: false}
        }],
        label: 'Pause'
      }]
    }],
	 // Finally, add the slider and use `pad` to position it
	 // nicely next to the buttons.
    sliders: [{
      pad: {l: 130, t: 55},
      currentvalue: {
        visible: true,
        prefix: 'Year:',
        xanchor: 'right',
        font: {size: 20, color: '#666'}
      },
      steps: sliderSteps
    }]
  };

  // Create the plot:
  Plotly.newPlot('myDiv', {
    data: traces,
    layout: layout,
    frames: frames,
  });
});\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Animations
            
            
                > Filled-Area Animation
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Filled-Area Animation
                  
                  in 
                  JavaScript
                  
                  
                
                How to make an animated filled-area plot with Plotly JS 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Filled-Area-Animation
          
        

        
          
            
            
              
                d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}

  var frames = []
  var x = unpack(rows, 'AAPL_x')
  var y = unpack(rows, 'AAPL_y')

  var n = 100;
  for (var i = 0; i < n; i++) {
    frames[i] = {data: [{x: [], y: []}]}
    frames[i].data[0].x = x.slice(0, i+1);
    frames[i].data[0].y = y.slice(0, i+1);
  }

  Plotly.newPlot('myDiv', [{
    x: frames[1].data[0].x,
    y: frames[1].data[0].y,
    fill: 'tozeroy',
    type: 'scatter',
    mode: 'lines',
    line: {color: 'green'}
  }], {
    title: {
      text: "Filled-Area Animation"
    },
    xaxis: {
      type: 'date',
      range: [
        frames[99].data[0].x[0],
        frames[99].data[0].x[99]
      ]
    },
    yaxis: {
      range: [
        0,
        90
      ]
    },
    updatemenus: [{
      x: 0.1,
      y: 0,
      yanchor: "top",
      xanchor: "right",
      showactive: false,
      direction: "left",
      type: "buttons",
      pad: {"t": 87, "r": 10},
      buttons: [{
        method: "animate",
        args: [null, {
          fromcurrent: true,
          transition: {
            duration: 0,
          },
          frame: {
            duration: 40,
            redraw: false
          }
        }],
        label: "Play"
      }, {
        method: "animate",
        args: [
          [null],
          {
            mode: "immediate",
            transition: {
              duration: 0
            },
            frame: {
              duration: 0,
              redraw: false
            }
          }
        ],
        label: "Pause"
      }]
    }]
  }).then(function() {
    Plotly.addFrames('myDiv', frames);
  });

})

              
            
            
          
          
            
              
                
              
            
          
        
    
    
      
        
          
            Multiple Trace Filled-Area
          
        

        
          
            
            
              
                d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv", function(err, rows){

  function unpack(rows, key) {
  return rows.map(function(row) { return row[key]; });
}

  var frames = []
  var x = unpack(rows, 'Date')
  var y = unpack(rows, 'AAPL.High')
  var x2 = unpack(rows, 'Date')
  var y2 = unpack(rows, 'AAPL.Low')

  var n = 100;
  for (var i = 0; i < n; i++) {
    frames[i] = {data: [{x: [], y: []}, {x: [], y: []}]}
    frames[i].data[1].x = x.slice(0, i+1);
    frames[i].data[1].y = y.slice(0, i+1);
    frames[i].data[0].x = x2.slice(0, i+1);
    frames[i].data[0].y = y2.slice(0, i+1);
  }

  var trace2 = {
    type: "scatter",
    mode: "lines",
    name: 'AAPL High',
    fill: 'tonexty',
    x: frames[5].data[1].x,
    y: frames[5].data[1].y,
    line: {color: 'grey'}
  }

  var trace1 = {
    type: "scatter",
    mode: "lines",
    name: 'AAPL Low',
    x: frames[5].data[0].x,
    y: frames[5].data[0].y,
    line: {color: 'lightgrey'}
  }

  var data = [trace1,trace2];

  var layout = {
    title: {
      text: 'Multiple Trace Filled-Area Animation'
    },
    xaxis: {
      range: [frames[99].data[0].x[0], frames[99].data[0].x[99]],
      showgrid: false
    },
    yaxis: {
      range: [120, 140],
      showgrid: false
    },
    legend: {
      orientation: 'h',
      x: 0.5,
      y: 1.2,
      xanchor: 'center'
    },
    updatemenus: [{
      x: 0.5,
      y: 0,
      yanchor: "top",
      xanchor: "center",
      showactive: false,
      direction: "left",
      type: "buttons",
      pad: {"t": 87, "r": 10},
      buttons: [{
        method: "animate",
        args: [null, {
          fromcurrent: true,
          transition: {
            duration: 0,
          },
          frame: {
            duration: 40,
            redraw: false
          }
        }],
        label: "Play"
      }, {
        method: "animate",
        args: [
          [null],
          {
            mode: "immediate",
            transition: {
              duration: 0
            },
            frame: {
              duration: 0,
              redraw: false
            }
          }
        ],
        label: "Pause"
      }]
    }]
  };

  Plotly.newPlot('myDiv', data, layout).then(function() {
    Plotly.addFrames('myDiv', frames);
  });
})\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nQuick Reference
            
                
                    
                    
                        Getting Started
                    

                    
                    
                        Is Plotly Free?
                    
                    

                    
                    
                    
                        Figure Reference
                    
                    

                    

                    

                    
                    
                    
                        Function
                            Reference
                    
                    
                        Event Reference
                    
                    
                        Configuration
                            Options
                    
                    

                    
                    

                    
                    

                    
                    

                    

                    
                    
                        GitHub
                    

                    
                    
                        community.plotly.com
                    

                
            
        

        

        
            On This Page
            
            
            
        

        
        
    

    
    
      
    




      
      
        
          
            
            
              
                
    
        
            
                
                    JavaScript
                    
                
            

            

            

            
                
                > Animations
            
            
                > Map Animation
            
            
        
    
    
    
        
        
            
            
        
            
                
            
            Suggest an edit to this page
              
        
    
    


                
                
                  Map Animation
                  
                  in 
                  JavaScript
                  
                  
                
                How to make an animated map with Plotly JS 
                
                
                

                

    New to Plotly?
    
        Plotly is a free and open-source graphing library for JavaScript. We recommend you read our Getting Started guide for the latest installation or upgrade instructions, then move on to our Plotly Fundamentals tutorials or dive straight in to some Basic Charts tutorials.
    



              
            
          
        

        
        

          






          

    
      
        
          
            Map Animations
          
        

        
          
            
            
              
                d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/gapminder_with_codes.csv", function(err, rows){

  function filter_and_unpack(rows, key, year) {
  return rows.filter(row => row['year'] == year).map(row => row[key])
  }

  var frames = []
  var slider_steps = []

  var n = 11;
  var num = 1952;
  for (var i = 0; i <= n; i++) {
    var z = filter_and_unpack(rows, 'lifeExp', num)
    var locations = filter_and_unpack(rows, 'iso_alpha', num)
    frames[i] = {data: [{z: z, locations: locations, text: locations}], name: num}
    slider_steps.push ({
        label: num.toString(),
        method: "animate",
        args: [[num], {
            mode: "immediate",
            transition: {duration: 300},
            frame: {duration: 300}
          }
        ]
      })
    num = num + 5
  }

var data = [{
      type: 'choropleth',
      locationmode: 'world',
      locations: frames[0].data[0].locations,
      z: frames[0].data[0].z,
      text: frames[0].data[0].locations,
      zauto: false,
      zmin: 30,
      zmax: 90

}];
var layout = {
    title: {
      text: 'World Life Expectency<br>1952 - 2007'
    },
    geo:{
       scope: 'world',
       countrycolor: 'rgb(255, 255, 255)',
       showland: true,
       landcolor: 'rgb(217, 217, 217)',
       showlakes: true,
       lakecolor: 'rgb(255, 255, 255)',
       subunitcolor: 'rgb(255, 255, 255)',
       lonaxis: {},
       lataxis: {}
    },
    updatemenus: [{
      x: 0.1,
      y: 0,
      yanchor: "top",
      xanchor: "right",
      showactive: false,
      direction: "left",
      type: "buttons",
      pad: {"t": 87, "r": 10},
      buttons: [{
        method: "animate",
        args: [null, {
          fromcurrent: true,
          transition: {
            duration: 200,
          },
          frame: {
            duration: 500
          }
        }],
        label: "Play"
      }, {
        method: "animate",
        args: [
          [null],
          {
            mode: "immediate",
            transition: {
              duration: 0
            },
            frame: {
              duration: 0
            }
          }
        ],
        label: "Pause"
      }]
    }],
    sliders: [{
      active: 0,
      steps: slider_steps,
      x: 0.1,
      len: 0.9,
      xanchor: "left",
      y: 0,
      yanchor: "top",
      pad: {t: 50, b: 10},
      currentvalue: {
        visible: true,
        prefix: "Year:",
        xanchor: "right",
        font: {
          size: 20,
          color: "#666"
        }
      },
      transition: {
        duration: 300,
        easing: "cubic-in-out"
      }
    }]
};

Plotly.newPlot('myDiv', data, layout).then(function() {
    Plotly.addFrames('myDiv', frames);
  });
})\n\n\n\nPlotly Grows Great PeopleOur remote-first team unites people from around the globe in a single goal: bring the world’s business and scientific communities the easiest means to build, deploy, and scale interactive data visualizations and analytics applications in Python.We’re looking for individuals who will grow with us. People who can harmonize highly autonomous work with a collaborative, cross-team mindset, and who can maintain course in changeable environments, will thrive at Plotly. View Open PositionsHow We WorkHere are four key cultural attributes that we rely on at Plotly:AutonomyPlotly employees have a high level of autonomy to execute their responsibilities. To be successful, you must be able to effectively communicate with your team members, taking into account asynchronous schedules and cultural differences.Trust FactorA remote-first, asynchronous work structure requires all employees to understand their roles and the roles of others. When we trust each other to execute on our respective responsibilities, it allows each of us to focus more fully on our roles, and to reach our goals together.CollaborationStaying informed across teams, and working together based on a common understanding, are critical to Plotly's success as an organization. We must be mindful that our actions can help or hinder other teams and individuals, and ensure that we are all on an upward trajectory together.Driven by DataAll decisions must be backed by supporting data, whether everyday business decisions or corporate strategic changes. Organizational change is serious business, and we commit to communicating the evidence behind our decisions so that all members of the team understand the dynamics that affect the work environment we all share.What you can expect if you join usRemote first teamHome office set up fundFlexible scheduleParental leave policyLearning and development opportunitiesMedical, dental, vision and moreCommunity involvementStock optionsPlotly Giving ProgramLearn from and grow with a dedicated team!⚠️Public Statement on Fraudulent ActivityJob scams are on the rise. You can protect yourself by only seeking Plotly employment through official job posts on our careers website at https://boards.greenhouse.io/plotly. Our recruitment team will never ask you for payment or financial details. We will never contact you via WhatsApp, Facebook Messenger, or other messaging platforms. All Plotly emails will come from addresses ending in: @plot.ly, @plotly.com, @email.plot.ly, or @mail.plot.ly.Plotly is not responsible for any loss or damages resulting from scams. Work at Plotly, Improve the WorldPlotly’s libraries are used by millions worldwide and embedded into mission-critical applications across the Fortune 500. Join us in building software that enables data scientists to get to work on the world’s toughest challenges.Renewable EnergyRead the story →Europe’s largest independent renewable assets manager uses Dash to keep over 6 Gigawatts of hydroelectric, solar, wind and battery storage sites healthy, operative and competitive.STEM ResearchSee the Dash app →Research in over 30 countries uses Dash to further the bounds of science, technology, engineering and mathematical fields.Public HealthRead the story →Institutions including Singapore’s Ministry of Health and the US Centers for Disease Control and Prevention reference Dash apps to keep themselves and the public informed on COVID-19.Accessible TransportationRead the story →A major metropolitan transportation authority uses Dash to help over 2,000 passengers with disabilities get where they need to go every day.Want to join us?There are so many ways for you to support our mission!View Open PositionsYour privacy is important to us. Please take a moment to review our Candidate Privacy Policy. Should you have any concerns, please contact us at privacy@plotly.com.\n\nAutonomyPlotly employees have a high level of autonomy to execute their responsibilities. To be successful, you must be able to effectively communicate with your team members, taking into account asynchronous schedules and cultural differences.Trust FactorA remote-first, asynchronous work structure requires all employees to understand their roles and the roles of others. When we trust each other to execute on our respective responsibilities, it allows each of us to focus more fully on our roles, and to reach our goals together.CollaborationStaying informed across teams, and working together based on a common understanding, are critical to Plotly's success as an organization. We must be mindful that our actions can help or hinder other teams and individuals, and ensure that we are all on an upward trajectory together.Driven by DataAll decisions must be backed by supporting data, whether everyday business decisions or corporate strategic changes. Organizational change is serious business, and we commit to communicating the evidence behind our decisions so that all members of the team understand the dynamics that affect the work environment we all share.\n\n\n\nResourcesAllWhite PapersBuyer's GuidesShow More\n\n\n\nCopyright © 2025 Plotly. All rights reserved.Terms of Service
        Privacy Policy\n\nPlotly Open Source Graphing Libraries
            
              
                Interactive charts and maps for Python, R, Julia, Javascript, ggplot2, F#, MATLAB®, and Dash.
              
              
            
          
        
      

      
        
          
            
              

                
                  
                  
                  
                    Plotly PythonOpen SourceGraphing Library
                    
                  
                  
                    
                    
                  
                
              
            
            
              
                
                  
                  
                  
                    Plotly ROpen SourceGraphing Library
                    
                    
                    
                    
                  
                  
                    
                    
                  
                
              
            
            
              
                
                  
                  
                  
                    Plotly JuliaOpen SourceGraphing Library
                    
                    
                    
                    
                  
                  
                    
                    
                  
                

              
            

            
              
                
                  
                  
                  
                    Plotly JavascriptOpen SourceGraphing Library
                    
                    
                    
                    
                  
                  
                    
                    
                  
                

              
            
            
              

                
                  
                  
                  
                    Plotly ggplot2Open SourceGraphing Library
                    
                    
                    
                    
                  
                  
                    
                    
                  
                

              
            

            
              
                
                  
                  
                  
                    Plotly F#Open SourceGraphing Library
                    
                    
                    
                    
                  
                  
                    
                    
                  
                

              
            

            
              
                
                  
                  
                  
                    Plotly MATLAB®Open SourceGraphing Library
                    
                    
                    
                    
                  
                  
                    
                    
                  
                

              
            

            
              
                
                  
                    
                    
                  
                  
                    Plotly DashOpen Source Analytical App Framework\n\n\n\n